{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6e540e27-b027-468e-9973-394423c11712", "event_id": "f3a6560b-6956-49b7-8efa-ecaee550ca77", "parent_event_id": "6e540e27-b027-468e-9973-394423c11712", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 714, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_9", "variant_name": null}, {"function_name": "Fn_simple_9", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_9\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"radius\":10,\"meta\":\"Value\",\"units\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_9_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the area of a circle with a radius of 10?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area of a circle given the radius.\n  function_name: 'geometry.area_circle' or null,\n  // The radius of the circle.\n  radius: int,\n  // The units in which the radius is measured (defaults to 'meters').\n  units: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"geometry.area_circle\",\n  \"radius\": 10\n}", "metadata": {"logprobs": null, "prompt_tokens": 186, "output_tokens": 19, "total_tokens": 205, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6e540e27-b027-468e-9973-394423c11712", "event_id": "6e540e27-b027-468e-9973-394423c11712", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 715, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_9", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e52477e7-0a16-4f69-87f2-f4921b2c24b7", "event_id": "2cb9d803-3c26-4987-8f78-1ffe4ca246d5", "parent_event_id": "e52477e7-0a16-4f69-87f2-f4921b2c24b7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 772, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_10", "variant_name": null}, {"function_name": "Fn_simple_10", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_10\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"radius\":5,\"meta\":\"Value\",\"unit\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_10_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area of a circle with a radius of 5 units.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area of a circle given its radius.\n  function_name: 'geometry.calculate_area_circle' or null,\n  // The radius of the circle.\n  radius: int,\n  // The measurement unit of the radius (optional parameter, default is 'units').\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"geometry.calculate_area_circle\",\n  \"radius\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 187, "output_tokens": 20, "total_tokens": 207, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e52477e7-0a16-4f69-87f2-f4921b2c24b7", "event_id": "e52477e7-0a16-4f69-87f2-f4921b2c24b7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 773, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_10", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "97b0e625-51a7-4800-9061-e440052a4d7e", "event_id": "d30aca80-600b-472f-b073-6d35e63f3acf", "parent_event_id": "97b0e625-51a7-4800-9061-e440052a4d7e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 802, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_2", "variant_name": null}, {"function_name": "Fn_simple_2", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_2\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_2_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the factorial of 5 using math functions.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the factorial of a given number.\n  function_name: 'math.factorial' or null,\n  // The number for which factorial needs to be calculated.\n  number: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"math.factorial\",\n  \"number\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 160, "output_tokens": 19, "total_tokens": 179, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "97b0e625-51a7-4800-9061-e440052a4d7e", "event_id": "97b0e625-51a7-4800-9061-e440052a4d7e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 802, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_2", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "049db52b-06df-4144-8b86-f46cce1c732a", "event_id": "dcfb929d-abc2-4189-8f0d-9a8db0e091b7", "parent_event_id": "049db52b-06df-4144-8b86-f46cce1c732a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 830, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_3", "variant_name": null}, {"function_name": "Fn_simple_3", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_3\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"x\":4,\"y\":5,\"meta\":\"Value\",\"z\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_3_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the hypotenuse of a right triangle given the lengths of the other two sides as 4 and 5.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\n  function_name: 'math.hypot' or null,\n  // The x-coordinate value.\n  x: int,\n  // The y-coordinate value.\n  y: int,\n  // Optional. The z-coordinate value. Default is 0.\n  z: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"math.hypot\",\n  \"x\": 4,\n  \"y\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 232, "output_tokens": 27, "total_tokens": 259, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "049db52b-06df-4144-8b86-f46cce1c732a", "event_id": "049db52b-06df-4144-8b86-f46cce1c732a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 831, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_3", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c964da7b-8b1c-4ac7-85cc-32b72585529b", "event_id": "18d1ec72-f5dd-4371-8cc5-07cff583b117", "parent_event_id": "c964da7b-8b1c-4ac7-85cc-32b72585529b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 843, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_4", "variant_name": null}, {"function_name": "Fn_simple_4", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_4\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"a\":1,\"b\":-3,\"c\":2,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_4_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2.\n\nHere is the function to invoke:\n\n\n{\n  // Find the roots of a quadratic equation ax^2 + bx + c = 0.\n  function_name: 'algebra.quadratic_roots' or null,\n  // Coefficient of x^2.\n  a: int,\n  // Coefficient of x.\n  b: int,\n  // Constant term.\n  c: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"algebra.quadratic_roots\",\n  \"a\": 1,\n  \"b\": -3,\n  \"c\": 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 36, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c964da7b-8b1c-4ac7-85cc-32b72585529b", "event_id": "c964da7b-8b1c-4ac7-85cc-32b72585529b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 843, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_4", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2d2e1991-4053-46ad-9eb7-6ab2791301d7", "event_id": "be6b31fc-d9e3-4777-8bab-fcd21ca7c9d6", "parent_event_id": "2d2e1991-4053-46ad-9eb7-6ab2791301d7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 844, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_8", "variant_name": null}, {"function_name": "Fn_simple_8", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_8\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"radius\":4,\"meta\":\"Value\",\"unit\":\"in\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_8_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the circumference of a circle with a radius of 4 inches?\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the circumference of a circle with a given radius.\n  function_name: 'calculate_circumference' or null,\n  // The radius of the circle in the unit given.\n  radius: int,\n  // The unit of measurement for the radius. Default is 'cm'.\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_circumference\",\n  \"radius\": 4,\n  \"unit\": \"in\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 192, "output_tokens": 28, "total_tokens": 220, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2d2e1991-4053-46ad-9eb7-6ab2791301d7", "event_id": "2d2e1991-4053-46ad-9eb7-6ab2791301d7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 845, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_8", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "095e16a4-c4e4-44af-acd7-696718c57fc0", "event_id": "2c4978fc-e67b-45cc-b679-c45d3ba9251e", "parent_event_id": "095e16a4-c4e4-44af-acd7-696718c57fc0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 880, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_1", "variant_name": null}, {"function_name": "Fn_simple_1", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_1\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base\":10,\"height\":5,\"meta\":\"Value\",\"unit\":\"units\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_1_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the area of a triangle with a base of 10 units and height of 5 units.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area of a triangle given its base and height.\n  function_name: 'calculate_triangle_area' or null,\n  // The base of the triangle.\n  base: int,\n  // The height of the triangle.\n  height: int,\n  // The unit of measure (defaults to 'units' if not specified)\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_triangle_area\",\n  \"base\": 10,\n  \"height\": 5,\n  \"unit\": \"units\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 206, "output_tokens": 37, "total_tokens": 243, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "095e16a4-c4e4-44af-acd7-696718c57fc0", "event_id": "095e16a4-c4e4-44af-acd7-696718c57fc0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 880, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_1", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "eddfa78e-ba28-4d81-9c57-823a2d85bb6f", "event_id": "3780e597-33a4-4482-b282-66e633618b72", "parent_event_id": "eddfa78e-ba28-4d81-9c57-823a2d85bb6f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 881, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_5", "variant_name": null}, {"function_name": "Fn_simple_5", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_5\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"a\":2,\"b\":6,\"c\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_5_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Solve a quadratic equation where a=2, b=6, and c=5\n\nHere is the function to invoke:\n\n\n{\n  // Function solves the quadratic equation and returns its roots.\n  function_name: 'solve_quadratic_equation' or null,\n  // Coefficient of x squared\n  a: int,\n  // Coefficient of x\n  b: int,\n  // Constant term in the quadratic equation.\n  c: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'solve_quadratic_equation',\n  a: 2,\n  b: 6,\n  c: 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 194, "output_tokens": 31, "total_tokens": 225, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "eddfa78e-ba28-4d81-9c57-823a2d85bb6f", "event_id": "eddfa78e-ba28-4d81-9c57-823a2d85bb6f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 881, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_5", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e846e1f8-d192-4db0-b49b-f32587c88c6f", "event_id": "15c8d5dd-6f94-463b-a05f-54c7d21f94cf", "parent_event_id": "e846e1f8-d192-4db0-b49b-f32587c88c6f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 944, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_6", "variant_name": null}, {"function_name": "Fn_simple_6", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_6\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"a\":3,\"b\":-11,\"c\":-4,\"meta\":\"Value\",\"root_type\":\"all\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_6_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.\n\nHere is the function to invoke:\n\n\n{\n  // Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.\n  function_name: 'solve_quadratic' or null,\n  // The coefficient of the squared term in the quadratic equation.\n  a: int,\n  // The coefficient of the linear term in the quadratic equation.\n  b: int,\n  // The constant term in the quadratic equation.\n  c: int,\n  // The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'.\n  root_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'solve_quadratic',\n  a: 3,\n  b: -11,\n  c: -4,\n  root_type: 'all'\n}", "metadata": {"logprobs": null, "prompt_tokens": 282, "output_tokens": 36, "total_tokens": 318, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e846e1f8-d192-4db0-b49b-f32587c88c6f", "event_id": "e846e1f8-d192-4db0-b49b-f32587c88c6f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 945, "start_time": "2024-06-19T03:23:51.830Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_6", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6dbfd6f2-7543-4836-9d33-2c9c3e3001ca", "event_id": "b8803e43-6c82-4c98-a6a9-b3b7220fbfa9", "parent_event_id": "6dbfd6f2-7543-4836-9d33-2c9c3e3001ca", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1050, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_7", "variant_name": null}, {"function_name": "Fn_simple_7", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_7\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"a\":2,\"b\":5,\"c\":3,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_7_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the roots of the quadratic equation where a=2, b=5 and c=3 ?\n\nHere is the function to invoke:\n\n\n{\n  // Find the roots of a quadratic equation. Returns both roots.\n  function_name: 'solve_quadratic' or null,\n  // Coefficient of x\u00b2.\n  a: int,\n  // Coefficient of x.\n  b: int,\n  // Constant term.\n  c: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"solve_quadratic\",\n  \"a\": 2,\n  \"b\": 5,\n  \"c\": 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 193, "output_tokens": 33, "total_tokens": 226, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6dbfd6f2-7543-4836-9d33-2c9c3e3001ca", "event_id": "6dbfd6f2-7543-4836-9d33-2c9c3e3001ca", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1051, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_7", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "493be6d9-5984-495c-be26-93b2ef6346e6", "event_id": "504c828c-8bd9-4b2b-8a0f-0fee018757df", "parent_event_id": "493be6d9-5984-495c-be26-93b2ef6346e6", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 690, "start_time": "2024-06-19T03:23:52.633Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_13", "variant_name": null}, {"function_name": "Fn_simple_13", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_13\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"radius\":3,\"meta\":\"Value\",\"units\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_13_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the circumference of a circle with radius 3\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the circumference of a circle given the radius.\n  function_name: 'geometry.circumference' or null,\n  // The radius of the circle.\n  radius: int,\n  // Units for the output circumference measurement. Default is 'cm'.\n  units: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"geometry.circumference\",\n  \"radius\": 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 182, "output_tokens": 21, "total_tokens": 203, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "86aa06f0-d036-40fc-864d-12d1e7979441", "event_id": "d904a8fe-227e-471c-86b3-2b64b650611f", "parent_event_id": "86aa06f0-d036-40fc-864d-12d1e7979441", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 720, "start_time": "2024-06-19T03:23:52.604Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_12", "variant_name": null}, {"function_name": "Fn_simple_12", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_12\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base\":10,\"height\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_12_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the area of a triangle with base of 10 units and height of 5 units?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area of a triangle using its base and height.\n  function_name: 'calculate_triangle_area' or null,\n  // The length of the base of the triangle.\n  base: int,\n  // The height of the triangle from the base.\n  height: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_triangle_area',\n  base: 10,\n  height: 5,\n}", "metadata": {"logprobs": null, "prompt_tokens": 189, "output_tokens": 23, "total_tokens": 212, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2e130e4e-3f35-4e73-a8ef-8f378592be10", "event_id": "53953fd5-0d0c-4030-ad11-36b41d5f02dd", "parent_event_id": "2e130e4e-3f35-4e73-a8ef-8f378592be10", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 777, "start_time": "2024-06-19T03:23:52.547Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_11", "variant_name": null}, {"function_name": "Fn_simple_11", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_11\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base\":6,\"height\":10,\"meta\":\"Value\",\"unit\":\"cm\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_11_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area of a right-angled triangle given the lengths of its base and height as 6cm and 10cm.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area of a right-angled triangle given the lengths of its base and height.\n  function_name: 'calculate_area' or null,\n  // The length of the base of the right-angled triangle.\n  base: int,\n  // The height of the right-angled triangle.\n  height: int,\n  // The unit of measure used. Defaults to 'cm'.\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_area\",\n  \"base\": 6,\n  \"height\": 10,\n  \"unit\": \"cm\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 223, "output_tokens": 32, "total_tokens": 255, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "493be6d9-5984-495c-be26-93b2ef6346e6", "event_id": "493be6d9-5984-495c-be26-93b2ef6346e6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1493, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_13", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "86aa06f0-d036-40fc-864d-12d1e7979441", "event_id": "86aa06f0-d036-40fc-864d-12d1e7979441", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1494, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_12", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2e130e4e-3f35-4e73-a8ef-8f378592be10", "event_id": "2e130e4e-3f35-4e73-a8ef-8f378592be10", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1494, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_11", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d614a706-7831-46c8-a9cd-a3db16750249", "event_id": "91fcd8a8-175c-4c0e-b670-adefa7f32a99", "parent_event_id": "d614a706-7831-46c8-a9cd-a3db16750249", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 657, "start_time": "2024-06-19T03:23:52.712Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_18", "variant_name": null}, {"function_name": "Fn_simple_18", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_18\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number\":450,\"formatted\":false,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_18_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the prime factors of 450\n\nHere is the function to invoke:\n\n\n{\n  // Function to retrieve prime factors of a number.\n  function_name: 'get_prime_factors' or null,\n  // Number for which prime factors need to be calculated\n  number: int,\n  // Return formatted string if true, array if false. Default is true.\n  formatted: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_prime_factors\",\n  \"number\": 450,\n  \"formatted\": false\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 180, "output_tokens": 29, "total_tokens": 209, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d614a706-7831-46c8-a9cd-a3db16750249", "event_id": "d614a706-7831-46c8-a9cd-a3db16750249", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1539, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_18", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "93c73fb1-7fa5-4ecf-b353-4fa171b3c81d", "event_id": "b6e1afc5-ae2a-4925-b25f-0eed4fe1d223", "parent_event_id": "93c73fb1-7fa5-4ecf-b353-4fa171b3c81d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 692, "start_time": "2024-06-19T03:23:52.776Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_19", "variant_name": null}, {"function_name": "Fn_simple_19", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_19\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number\":123456,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_19_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the prime factors of the number 123456.\n\nHere is the function to invoke:\n\n\n{\n  // Compute the prime factors of a number.\n  function_name: 'number_analysis.prime_factors' or null,\n  // The number to be factored.\n  number: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"number_analysis.prime_factors\",\n  \"number\": 123456\n}", "metadata": {"logprobs": null, "prompt_tokens": 160, "output_tokens": 22, "total_tokens": 182, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "93c73fb1-7fa5-4ecf-b353-4fa171b3c81d", "event_id": "93c73fb1-7fa5-4ecf-b353-4fa171b3c81d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1638, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_19", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2aae526f-c1be-4aee-af81-4e1a4bd194fa", "event_id": "d5205eed-0ed8-42d6-810a-c147ce5b598e", "parent_event_id": "2aae526f-c1be-4aee-af81-4e1a4bd194fa", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 802, "start_time": "2024-06-19T03:23:52.674Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_15", "variant_name": null}, {"function_name": "Fn_simple_15", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_15\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"function\":\"3*x^2 + 2*x - 1\",\"meta\":\"Value\",\"x_value\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_15_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the derivative of the function 3x^2 + 2x - 1.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the derivative of a polynomial function.\n  function_name: 'calculate_derivative' or null,\n  // The polynomial function.\n  function: string,\n  // The x-value at which the derivative is calculated. Optional, default to 0.00.\n  x_value: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_derivative\",\n  \"function\": \"3*x^2 + 2*x - 1\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 191, "output_tokens": 28, "total_tokens": 219, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2aae526f-c1be-4aee-af81-4e1a4bd194fa", "event_id": "2aae526f-c1be-4aee-af81-4e1a4bd194fa", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1647, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_15", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ce54b8ec-6c2c-47a0-bc6e-fa31c1c8c9cd", "event_id": "63fae3b2-5246-4228-9fe8-2913e8424866", "parent_event_id": "ce54b8ec-6c2c-47a0-bc6e-fa31c1c8c9cd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 812, "start_time": "2024-06-19T03:23:52.676Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_16", "variant_name": null}, {"function_name": "Fn_simple_16", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_16\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"function\":\"x^3\",\"start_x\":-2,\"end_x\":3,\"meta\":\"Value\",\"method\":\"simpson\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_16_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area under a curve for a specified function between two x values.\n  function_name: 'integrate' or null,\n  // The function to integrate, represented as a string. For example, 'x^3'\n  function: string,\n  // The starting x-value to integrate over.\n  start_x: int,\n  // The ending x-value to integrate over.\n  end_x: int,\n  // The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'.\n  method: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'integrate',\n  function: 'x^3',\n  start_x: -2,\n  end_x: 3,\n  method: 'simpson'\n}", "metadata": {"logprobs": null, "prompt_tokens": 263, "output_tokens": 39, "total_tokens": 302, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ce54b8ec-6c2c-47a0-bc6e-fa31c1c8c9cd", "event_id": "ce54b8ec-6c2c-47a0-bc6e-fa31c1c8c9cd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1657, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_16", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0489f955-d506-4251-81f7-9d7280276ba2", "event_id": "a588a487-9403-4b60-a35c-b99f60176893", "parent_event_id": "0489f955-d506-4251-81f7-9d7280276ba2", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 784, "start_time": "2024-06-19T03:23:52.711Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_17", "variant_name": null}, {"function_name": "Fn_simple_17", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_17\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"function\":\"2*x^2\",\"value\":1,\"meta\":\"Value\",\"function_variable\":\"x\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_17_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the derivative of the function 2x^2 at x = 1.\n\nHere is the function to invoke:\n\n\n{\n  // Compute the derivative of a function at a specific value.\n  function_name: 'calculus.derivative' or null,\n  // The function to calculate the derivative of.\n  function: string,\n  // The value where the derivative needs to be calculated at.\n  value: int,\n  // The variable present in the function, for instance x or y, etc. Default is 'x'.\n  function_variable: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculus.derivative\",\n  \"function\": \"2*x^2\",\n  \"value\": 1,\n  \"function_variable\": \"x\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 217, "output_tokens": 38, "total_tokens": 255, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0489f955-d506-4251-81f7-9d7280276ba2", "event_id": "0489f955-d506-4251-81f7-9d7280276ba2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1665, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_17", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "445cccd0-8d5e-4a51-8e25-e20764a3de84", "event_id": "2d2e82c6-fea6-4d67-b073-bc5b7e755628", "parent_event_id": "445cccd0-8d5e-4a51-8e25-e20764a3de84", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 885, "start_time": "2024-06-19T03:23:52.662Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_14", "variant_name": null}, {"function_name": "Fn_simple_14", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_14\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"function\":\"x^2\",\"interval\":[1.0,3.0],\"meta\":\"Value\",\"method\":\"trapezoidal\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_14_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area under the curve y=x^2 from x=1 to x=3.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area under a mathematical function within a given interval.\n  function_name: 'calculate_area_under_curve' or null,\n  // The mathematical function as a string.\n  function: string,\n  // An array that defines the interval to calculate the area under the curve from the start to the end point.\n  interval: float[],\n  // The numerical method to approximate the area under the curve. The default value is 'trapezoidal'.\n  method: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_area_under_curve\",\n  \"function\": \"x^2\",\n  \"interval\": [1, 3],\n  \"method\": \"trapezoidal\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 229, "output_tokens": 42, "total_tokens": 271, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "445cccd0-8d5e-4a51-8e25-e20764a3de84", "event_id": "445cccd0-8d5e-4a51-8e25-e20764a3de84", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1717, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_14", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8b03cb73-1e1a-45fa-a4c0-809dc0f60422", "event_id": "5fcd212f-ffbc-482a-8079-b99556357c88", "parent_event_id": "8b03cb73-1e1a-45fa-a4c0-809dc0f60422", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 683, "start_time": "2024-06-19T03:23:52.882Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_20", "variant_name": null}, {"function_name": "Fn_simple_20", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_20\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"num1\":40,\"num2\":50,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_20_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the greatest common divisor of two numbers: 40 and 50\n\nHere is the function to invoke:\n\n\n{\n  // Compute the greatest common divisor of two numbers\n  function_name: 'math.gcd' or null,\n  // The first number.\n  num1: int,\n  // The second number.\n  num2: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"math.gcd\",\n  \"num1\": 40,\n  \"num2\": 50\n}", "metadata": {"logprobs": null, "prompt_tokens": 173, "output_tokens": 28, "total_tokens": 201, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8b03cb73-1e1a-45fa-a4c0-809dc0f60422", "event_id": "8b03cb73-1e1a-45fa-a4c0-809dc0f60422", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1735, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_20", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "786de6d2-f77c-4986-a279-8062ad6ff2e1", "event_id": "cda9d426-076a-4caa-9bf4-bf776709122b", "parent_event_id": "786de6d2-f77c-4986-a279-8062ad6ff2e1", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 714, "start_time": "2024-06-19T03:23:53.325Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_23", "variant_name": null}, {"function_name": "Fn_simple_23", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_23\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"num1\":12,\"num2\":15,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_23_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the greatest common divisor of two given numbers, for example 12 and 15.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the greatest common divisor (gcd) of the two integers.\n  function_name: 'math.gcd' or null,\n  // The first number.\n  num1: int,\n  // The second number.\n  num2: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"math.gcd\",\n  \"num1\": 12,\n  \"num2\": 15\n}", "metadata": {"logprobs": null, "prompt_tokens": 180, "output_tokens": 28, "total_tokens": 208, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "786de6d2-f77c-4986-a279-8062ad6ff2e1", "event_id": "786de6d2-f77c-4986-a279-8062ad6ff2e1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2210, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_23", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a21fd44b-a8a3-4c2a-a110-4f43d417df95", "event_id": "7de8139b-9bad-4e31-8bbb-ffa80ad0ad42", "parent_event_id": "a21fd44b-a8a3-4c2a-a110-4f43d417df95", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 715, "start_time": "2024-06-19T03:23:53.370Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_24", "variant_name": null}, {"function_name": "Fn_simple_24", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_24\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number\":60,\"meta\":\"Value\",\"return_type\":\"dictionary\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_24_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the prime factorization of the number 60? Return them in the form of dictionary\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the prime factorization of a given integer.\n  function_name: 'prime_factorize' or null,\n  // The number for which to calculate the prime factorization.\n  number: int,\n  // Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'.\n  return_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"prime_factorize\",\n  \"number\": 60,\n  \"return_type\": \"dictionary\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 222, "output_tokens": 27, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a21fd44b-a8a3-4c2a-a110-4f43d417df95", "event_id": "a21fd44b-a8a3-4c2a-a110-4f43d417df95", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2255, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_24", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "960d1dd7-b211-4cb6-b4da-a87b9a84b7bf", "event_id": "84857c72-c453-4190-9e33-1fd1ccaac82a", "parent_event_id": "960d1dd7-b211-4cb6-b4da-a87b9a84b7bf", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 772, "start_time": "2024-06-19T03:23:53.325Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_21", "variant_name": null}, {"function_name": "Fn_simple_21", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_21\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number1\":36,\"number2\":24,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_21_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the highest common factor of 36 and 24.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the highest common factor of two numbers.\n  function_name: 'math.hcf' or null,\n  // First number.\n  number1: int,\n  // Second number.\n  number2: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"math.hcf\",\n  \"number1\": 36,\n  \"number2\": 24\n}", "metadata": {"logprobs": null, "prompt_tokens": 168, "output_tokens": 28, "total_tokens": 196, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "960d1dd7-b211-4cb6-b4da-a87b9a84b7bf", "event_id": "960d1dd7-b211-4cb6-b4da-a87b9a84b7bf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2266, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_21", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "95df7af5-f111-49e0-97be-9149d59d8c41", "event_id": "2cc43579-b6cf-4a8e-952e-cf2a5f56e1e7", "parent_event_id": "95df7af5-f111-49e0-97be-9149d59d8c41", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 618, "start_time": "2024-06-19T03:23:53.488Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_27", "variant_name": null}, {"function_name": "Fn_simple_27", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_27\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"distance\":50,\"duration\":2,\"meta\":\"Value\",\"unit\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_27_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the velocity for a certain distance travelled within a specific duration.\n  function_name: 'calculate_velocity' or null,\n  // The distance travelled by the object, typically in kilometers.\n  distance: int,\n  // The duration of the journey, typically in hours.\n  duration: int,\n  // Optional parameter. The unit to return the velocity in. If not provided, the default is km/h.\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_velocity',\n  distance: 50,\n  duration: 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 22, "total_tokens": 246, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "95df7af5-f111-49e0-97be-9149d59d8c41", "event_id": "95df7af5-f111-49e0-97be-9149d59d8c41", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2277, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_27", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c1ccc3cb-1294-4ed4-b693-1a36d2f31d51", "event_id": "e29fdd2b-6538-4766-a712-304e3be8f34f", "parent_event_id": "c1ccc3cb-1294-4ed4-b693-1a36d2f31d51", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 817, "start_time": "2024-06-19T03:23:53.325Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_22", "variant_name": null}, {"function_name": "Fn_simple_22", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_22\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number1\":36,\"number2\":48,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_22_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48.\n\nHere is the function to invoke:\n\n\n{\n  // Compute the greatest common divisor of two given integers.\n  function_name: 'number_theory.gcd' or null,\n  // The first integer.\n  number1: int,\n  // The second integer.\n  number2: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"number_theory.gcd\",\n  \"number1\": 36,\n  \"number2\": 48\n}", "metadata": {"logprobs": null, "prompt_tokens": 182, "output_tokens": 30, "total_tokens": 212, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c1ccc3cb-1294-4ed4-b693-1a36d2f31d51", "event_id": "c1ccc3cb-1294-4ed4-b693-1a36d2f31d51", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2312, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_22", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2b3afe7d-8d16-466b-be57-8b3f913fa987", "event_id": "d47403c1-ca11-40f8-8457-b2d889c67590", "parent_event_id": "2b3afe7d-8d16-466b-be57-8b3f913fa987", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 710, "start_time": "2024-06-19T03:23:53.478Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_26", "variant_name": null}, {"function_name": "Fn_simple_26", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_26\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"height\":150,\"meta\":\"Value\",\"initial_velocity\":0,\"gravity\":9.81}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_26_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.\n  function_name: 'calculate_final_velocity' or null,\n  // The height the object is dropped from, in meters.\n  height: int,\n  // The initial velocity of the object in m/s. Default is zero.\n  initial_velocity: int or null,\n  // Acceleration due to gravity. Default value is 9.81 m/s^2, earth's gravity.\n  gravity: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_final_velocity\",\n  \"height\": 150,\n  \"initial_velocity\": 0,\n  \"gravity\": 9.81\n}", "metadata": {"logprobs": null, "prompt_tokens": 249, "output_tokens": 36, "total_tokens": 285, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2b3afe7d-8d16-466b-be57-8b3f913fa987", "event_id": "2b3afe7d-8d16-466b-be57-8b3f913fa987", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2358, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_26", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e8bb2c81-5037-4364-a337-72250be3ce3f", "event_id": "1aed4690-10d4-43f9-aab2-a8b89f8d3be9", "parent_event_id": "e8bb2c81-5037-4364-a337-72250be3ce3f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 706, "start_time": "2024-06-19T03:23:53.496Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_28", "variant_name": null}, {"function_name": "Fn_simple_28", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_28\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"initial_velocity\":10,\"acceleration\":2,\"time\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_28_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the final velocity of a vehicle after accelerating at 2 meters/second^2 for a duration of 5 seconds, starting from a speed of 10 meters/second.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the final velocity of an object given its initial velocity, acceleration, and time.\n  function_name: 'final_velocity' or null,\n  // The initial velocity of the object in meters/second.\n  initial_velocity: int,\n  // The acceleration of the object in meters/second^2.\n  acceleration: int,\n  // The time over which the acceleration is applied in seconds.\n  time: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'final_velocity',\n  initial_velocity: 10,\n  acceleration: 2,\n  time: 5,\n}", "metadata": {"logprobs": null, "prompt_tokens": 233, "output_tokens": 29, "total_tokens": 262, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e8bb2c81-5037-4364-a337-72250be3ce3f", "event_id": "e8bb2c81-5037-4364-a337-72250be3ce3f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2371, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_28", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2a26e588-79fa-4503-9b42-bd4099145e9e", "event_id": "633e6f6a-2af4-4fee-aafd-496773678788", "parent_event_id": "2a26e588-79fa-4503-9b42-bd4099145e9e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 697, "start_time": "2024-06-19T03:23:53.549Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_29", "variant_name": null}, {"function_name": "Fn_simple_29", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_29\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"initial_velocity\":10,\"time\":5,\"meta\":\"Value\",\"acceleration\":9.8}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_29_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the displacement of an object in motion given initial velocity, time, and acceleration.\n  function_name: 'calculate_displacement' or null,\n  // The initial velocity of the object in m/s.\n  initial_velocity: int,\n  // The time in seconds that the object has been in motion.\n  time: int,\n  // The acceleration of the object in m/s^2.\n  acceleration: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_displacement',\n  initial_velocity: 10,\n  time: 5,\n  acceleration: 9.8\n}", "metadata": {"logprobs": null, "prompt_tokens": 226, "output_tokens": 32, "total_tokens": 258, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2a26e588-79fa-4503-9b42-bd4099145e9e", "event_id": "2a26e588-79fa-4503-9b42-bd4099145e9e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2415, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_29", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e0fba639-b071-47d4-b9ab-519084095e01", "event_id": "dadd03e4-a807-44e9-ac41-b7e193e7228e", "parent_event_id": "e0fba639-b071-47d4-b9ab-519084095e01", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 737, "start_time": "2024-06-19T03:23:53.566Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_30", "variant_name": null}, {"function_name": "Fn_simple_30", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_30\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"time\":5,\"meta\":\"Value\",\"initial_speed\":0,\"gravity\":-9.81}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_30_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the final speed of an object dropped from rest after falling for 5 seconds if we neglect air resistance?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2\n  function_name: 'calculate_final_speed' or null,\n  // The initial speed of the object in m/s. Default is 0 for an object at rest.\n  initial_speed: int or null,\n  // The time in seconds for which the object is in free fall.\n  time: int,\n  // The acceleration due to gravity. Default is -9.81 m/s^2.\n  gravity: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_final_speed',\n  initial_speed: 0,\n  time: 5,\n  gravity: -9.81\n}", "metadata": {"logprobs": null, "prompt_tokens": 261, "output_tokens": 32, "total_tokens": 293, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e0fba639-b071-47d4-b9ab-519084095e01", "event_id": "e0fba639-b071-47d4-b9ab-519084095e01", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2473, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_30", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "def59856-0264-44b0-81b2-ef1565b868d9", "event_id": "3c186e82-bd79-44b1-b661-0c4b9e00fc75", "parent_event_id": "def59856-0264-44b0-81b2-ef1565b868d9", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 886, "start_time": "2024-06-19T03:23:53.469Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_25", "variant_name": null}, {"function_name": "Fn_simple_25", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_25\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"num1\":12,\"num2\":18,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_25_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the greatest common divisor (GCD) of 12 and 18\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the greatest common divisor of two integers.\n  function_name: 'math.gcd' or null,\n  // First number.\n  num1: int,\n  // Second number.\n  num2: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"math.gcd\",\n  \"num1\": 12,\n  \"num2\": 18\n}", "metadata": {"logprobs": null, "prompt_tokens": 172, "output_tokens": 28, "total_tokens": 200, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "def59856-0264-44b0-81b2-ef1565b868d9", "event_id": "def59856-0264-44b0-81b2-ef1565b868d9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 2526, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_25", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cb3d6013-ec64-48ce-9e42-b12aef1d591e", "event_id": "fbd68939-1853-4537-997c-1f3e8bb6abd9", "parent_event_id": "cb3d6013-ec64-48ce-9e42-b12aef1d591e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 748, "start_time": "2024-06-19T03:23:54.087Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_32", "variant_name": null}, {"function_name": "Fn_simple_32", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_32\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"initial_velocity\":0,\"acceleration\":9.8,\"time\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_32_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the final velocity of an object, knowing that it started from rest, accelerated at a rate of 9.8 m/s^2 for a duration of 5 seconds.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.\n  function_name: 'calculate_final_velocity' or null,\n  // The initial velocity of the object.\n  initial_velocity: int,\n  // The acceleration of the object.\n  acceleration: float,\n  // The time of acceleration.\n  time: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_final_velocity',\n  initial_velocity: 0,\n  acceleration: 9.8,\n  time: 5,\n}", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 32, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cb3d6013-ec64-48ce-9e42-b12aef1d591e", "event_id": "cb3d6013-ec64-48ce-9e42-b12aef1d591e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3004, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_32", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a97f33ac-4a3b-4e31-98b7-c45fa36bd45d", "event_id": "3305fed8-97b9-4db8-aa3f-cd99d9b40025", "parent_event_id": "a97f33ac-4a3b-4e31-98b7-c45fa36bd45d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 783, "start_time": "2024-06-19T03:23:54.108Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_34", "variant_name": null}, {"function_name": "Fn_simple_34", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_34\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_location\":\"Sydney\",\"end_location\":\"Melbourne\",\"meta\":\"Value\",\"route_type\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_34_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get directions from Sydney to Melbourne using the fastest route.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve directions from one location to another.\n  function_name: 'get_directions' or null,\n  // The starting point of the journey.\n  start_location: string,\n  // The destination point of the journey.\n  end_location: string,\n  // Type of route to use (e.g., 'fastest', 'scenic'). Default is 'fastest'.\n  route_type: 'fastest' or 'scenic' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_directions\",\n  \"start_location\": \"Sydney\",\n  \"end_location\": \"Melbourne\",\n  \"route_type\": \"fastest\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 215, "output_tokens": 39, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a97f33ac-4a3b-4e31-98b7-c45fa36bd45d", "event_id": "a97f33ac-4a3b-4e31-98b7-c45fa36bd45d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3062, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_34", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a42d71d9-1b4f-4892-9ce0-7974e9282dbe", "event_id": "c1aae139-28f4-4b0c-9b44-8a89acb65005", "parent_event_id": "a42d71d9-1b4f-4892-9ce0-7974e9282dbe", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 873, "start_time": "2024-06-19T03:23:54.041Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_31", "variant_name": null}, {"function_name": "Fn_simple_31", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_31\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"acceleration\":4,\"distance\":300,\"meta\":\"Value\",\"initial_velocity\":0.0}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_31_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.\n  function_name: 'kinematics.final_velocity_from_distance' or null,\n  // Acceleration of the object, m/s^2.\n  acceleration: int,\n  // Distance traveled by the object, m.\n  distance: int,\n  // Initial velocity of the object. Default is 0, m/s\n  initial_velocity: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"kinematics.final_velocity_from_distance\",\n  \"acceleration\": 4,\n  \"distance\": 300,\n  \"initial_velocity\": 0\n}", "metadata": {"logprobs": null, "prompt_tokens": 235, "output_tokens": 38, "total_tokens": 273, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a42d71d9-1b4f-4892-9ce0-7974e9282dbe", "event_id": "a42d71d9-1b4f-4892-9ce0-7974e9282dbe", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3084, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_31", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c6695ff6-2097-4fbf-b7a2-6353fc115110", "event_id": "d7d9a9aa-d319-4fd1-992c-c8b9471f78e8", "parent_event_id": "c6695ff6-2097-4fbf-b7a2-6353fc115110", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 819, "start_time": "2024-06-19T03:23:54.098Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_33", "variant_name": null}, {"function_name": "Fn_simple_33", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_33\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"initial_velocity\":0,\"height\":100,\"meta\":\"Value\",\"gravity\":9.8}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_33_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the final speed of an object dropped from 100 m without air resistance.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the final speed of an object dropped from a certain height without air resistance.\n  function_name: 'calculate_final_speed' or null,\n  // The initial velocity of the object.\n  initial_velocity: int,\n  // The height from which the object is dropped.\n  height: int,\n  // The gravitational acceleration. Default is 9.8 m/s^2.\n  gravity: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_final_speed\",\n  \"initial_velocity\": 0,\n  \"height\": 100,\n  \"gravity\": 9.8\n}", "metadata": {"logprobs": null, "prompt_tokens": 212, "output_tokens": 36, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c6695ff6-2097-4fbf-b7a2-6353fc115110", "event_id": "c6695ff6-2097-4fbf-b7a2-6353fc115110", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3087, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_33", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5f346747-cea9-4dc8-b4c8-40eee62525a2", "event_id": "ec4ffe0d-593c-4088-9204-7610bf0f09f1", "parent_event_id": "5f346747-cea9-4dc8-b4c8-40eee62525a2", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 751, "start_time": "2024-06-19T03:23:54.189Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_36", "variant_name": null}, {"function_name": "Fn_simple_36", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_36\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"New York, NY\",\"meta\":\"Value\",\"operating_hours\":23}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_36_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find an all vegan restaurant in New York that opens until at least 11 PM.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby vegan restaurants based on specific criteria like operating hours.\n  function_name: 'vegan_restaurant.find_nearby' or null,\n  // The city and state, e.g. New York, NY, you should format it as City, State.\n  location: string,\n  // Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24.\n  operating_hours: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"vegan_restaurant.find_nearby\",\n  \"location\": \"New York, NY\",\n  \"operating_hours\": 23\n}", "metadata": {"logprobs": null, "prompt_tokens": 241, "output_tokens": 35, "total_tokens": 276, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5f346747-cea9-4dc8-b4c8-40eee62525a2", "event_id": "5f346747-cea9-4dc8-b4c8-40eee62525a2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3110, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_36", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "64695da4-d764-4987-a8ad-bec40944655a", "event_id": "cb1df8ed-10ae-4f68-9ce5-6309d927f034", "parent_event_id": "64695da4-d764-4987-a8ad-bec40944655a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 819, "start_time": "2024-06-19T03:23:54.203Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_37", "variant_name": null}, {"function_name": "Fn_simple_37", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_37\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"origin\":\"New York City\",\"destination\":\"Washington D.C.\",\"meta\":\"Value\",\"unit\":\"km\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_37_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the shortest driving distance between New York City and Washington D.C.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the shortest driving distance between two locations.\n  function_name: 'get_shortest_driving_distance' or null,\n  // Starting point of the journey. You should format it as city name like Boston.\n  origin: string,\n  // End point of the journey. You should format it as city name like Boston.\n  destination: string,\n  // Preferred unit of distance (optional, default is 'km').\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_shortest_driving_distance\",\n  \"origin\": \"New York City\",\n  \"destination\": \"Washington D.C.\",\n  \"unit\": \"km\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 40, "total_tokens": 258, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "64695da4-d764-4987-a8ad-bec40944655a", "event_id": "64695da4-d764-4987-a8ad-bec40944655a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3193, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_37", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dc58e7ec-003d-424a-a7c9-db763a4edb3f", "event_id": "1449ae1b-c140-43f0-8c53-3ef7ce22fc45", "parent_event_id": "dc58e7ec-003d-424a-a7c9-db763a4edb3f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 678, "start_time": "2024-06-19T03:23:54.357Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_40", "variant_name": null}, {"function_name": "Fn_simple_40", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_40\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"charge\":2,\"distance\":3,\"meta\":\"Value\",\"permitivity\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_40_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the electric field at a point 3 meters away from a charge of 2 coulombs.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the electric field produced by a charge at a certain distance.\n  function_name: 'calculate_electric_field' or null,\n  // Charge in coulombs producing the electric field.\n  charge: int,\n  // Distance from the charge in meters where the field is being measured.\n  distance: int,\n  // Permitivity of the space where field is being calculated, default is 8.854e-12.\n  permitivity: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_electric_field',\n  charge: 2,\n  distance: 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 228, "output_tokens": 24, "total_tokens": 252, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dc58e7ec-003d-424a-a7c9-db763a4edb3f", "event_id": "dc58e7ec-003d-424a-a7c9-db763a4edb3f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3205, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_40", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6389a558-dcfa-46fa-a8f2-80e25697cb11", "event_id": "1983d3f8-1c82-4c3a-839a-cf8d41a5c8c0", "parent_event_id": "6389a558-dcfa-46fa-a8f2-80e25697cb11", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 958, "start_time": "2024-06-19T03:23:54.144Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_35", "variant_name": null}, {"function_name": "Fn_simple_35", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_35\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"destination\":\"Tokyo\",\"days\":7,\"daily_budget\":100,\"meta\":\"Value\",\"exploration_type\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_35_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Create an itinerary for a 7 days trip to Tokyo with daily budgets not exceeding $100 and prefer exploring nature.\n\nHere is the function to invoke:\n\n\n{\n  // Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.\n  function_name: 'travel_itinerary_generator' or null,\n  // Destination city of the trip.\n  destination: string,\n  // Number of days for the trip.\n  days: int,\n  // The maximum daily budget for the trip.\n  daily_budget: int,\n  // The preferred exploration type. (default: urban)\n  exploration_type: 'nature' or 'urban' or 'history' or 'culture' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"travel_itinerary_generator\",\n  \"destination\": \"Tokyo\",\n  \"days\": 7,\n  \"daily_budget\": 100,\n  \"exploration_type\": \"nature\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 245, "output_tokens": 49, "total_tokens": 294, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6389a558-dcfa-46fa-a8f2-80e25697cb11", "event_id": "6389a558-dcfa-46fa-a8f2-80e25697cb11", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3272, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_35", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a6d45fee-9140-443a-8e72-af2b30794d19", "event_id": "eecdf39b-e2c5-4666-9f1c-dadea6516917", "parent_event_id": "a6d45fee-9140-443a-8e72-af2b30794d19", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 840, "start_time": "2024-06-19T03:23:54.304Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_39", "variant_name": null}, {"function_name": "Fn_simple_39", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_39\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"charge1\":1e-9,\"charge2\":2e-9,\"distance\":0.05,\"meta\":\"Value\",\"constant\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_39_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.\n  function_name: 'calculate_electrostatic_potential' or null,\n  // The quantity of charge on the first body.\n  charge1: float,\n  // The quantity of charge on the second body.\n  charge2: float,\n  // The distance between the two bodies.\n  distance: float,\n  // The value of the electrostatic constant. Default is 8.99e9.\n  constant: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_electrostatic_potential',\n  charge1: 1e-9,\n  charge2: 2e-9,\n  distance: 0.05,\n}", "metadata": {"logprobs": null, "prompt_tokens": 250, "output_tokens": 43, "total_tokens": 293, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a6d45fee-9140-443a-8e72-af2b30794d19", "event_id": "a6d45fee-9140-443a-8e72-af2b30794d19", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3314, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_39", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "04144544-586b-4f09-8ba4-40ed825ef888", "event_id": "a1f5f1ba-3dda-440d-8d13-f99babddeb16", "parent_event_id": "04144544-586b-4f09-8ba4-40ed825ef888", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1085, "start_time": "2024-06-19T03:23:54.247Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_38", "variant_name": null}, {"function_name": "Fn_simple_38", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_38\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_location\":\"San Francisco\",\"end_location\":\"Los Angeles\",\"stops\":[\"Santa Barbara\",\"Monterey\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_38_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey.\n\nHere is the function to invoke:\n\n\n{\n  // Estimate the travel time for a specific route with optional stops.\n  function_name: 'route.estimate_time' or null,\n  // The starting point for the journey. It should be format as city name such as Boston.\n  start_location: string,\n  // The destination for the journey. It should be format as city name such as Boston.\n  end_location: string,\n  // Additional cities or points of interest to stop at during the journey. Default is an empty list.\n  stops: string[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"route.estimate_time\",\n  \"start_location\": \"San Francisco\",\n  \"end_location\": \"Los Angeles\",\n  \"stops\": [\"Santa Barbara\", \"Monterey\"]\n}", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 44, "total_tokens": 280, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "04144544-586b-4f09-8ba4-40ed825ef888", "event_id": "04144544-586b-4f09-8ba4-40ed825ef888", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3501, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_38", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e966df40-0992-48ae-b767-2a66c055dbf2", "event_id": "7f6bf0f2-44f2-4a0c-bd2a-a0cb4eafa04b", "parent_event_id": "e966df40-0992-48ae-b767-2a66c055dbf2", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 707, "start_time": "2024-06-19T03:23:54.836Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_41", "variant_name": null}, {"function_name": "Fn_simple_41", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_41\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"current\":5,\"radius\":4,\"meta\":\"Value\",\"permeability\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_41_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the magnetic field produced at the center of a circular loop carrying current.\n  function_name: 'calculate_magnetic_field' or null,\n  // The current through the circular loop in Amperes.\n  current: int,\n  // The radius of the circular loop in meters.\n  radius: int,\n  // The magnetic permeability. Default is 12.57e10 (Vacuum Permeability).\n  permeability: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_magnetic_field\",\n  \"current\": 5,\n  \"radius\": 4\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 232, "output_tokens": 31, "total_tokens": 263, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e966df40-0992-48ae-b767-2a66c055dbf2", "event_id": "e966df40-0992-48ae-b767-2a66c055dbf2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3713, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_41", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3203e9dd-4222-4e4d-9da2-ed616049ed20", "event_id": "ffe0a289-f02a-4e14-be5a-e3455bb8d44a", "parent_event_id": "3203e9dd-4222-4e4d-9da2-ed616049ed20", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 699, "start_time": "2024-06-19T03:23:54.918Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_44", "variant_name": null}, {"function_name": "Fn_simple_44", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_44\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"current\":20,\"distance\":10,\"meta\":\"Value\",\"permeability\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_44_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the magnetic field strength 10 meters away from a long wire carrying a current of 20 Amperes.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the magnetic field strength at a point a certain distance away from a long wire carrying a current.\n  function_name: 'calculate_magnetic_field_strength' or null,\n  // The current flowing through the wire in Amperes.\n  current: int,\n  // The perpendicular distance from the wire to the point where the magnetic field is being calculated.\n  distance: int,\n  // The permeability of the medium. Default is 12.57e-7 (Vacuum Permeability).\n  permeability: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_magnetic_field_strength',\n  current: 20,\n  distance: 10,\n}", "metadata": {"logprobs": null, "prompt_tokens": 245, "output_tokens": 25, "total_tokens": 270, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b90326db-aa6c-4c34-bf11-212b0dd1cd7a", "event_id": "5b034307-f470-44f1-a125-cabd99509372", "parent_event_id": "b90326db-aa6c-4c34-bf11-212b0dd1cd7a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 759, "start_time": "2024-06-19T03:23:54.893Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_42", "variant_name": null}, {"function_name": "Fn_simple_42", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_42\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"charge1\":5,\"charge2\":7,\"distance\":3,\"meta\":\"Value\",\"medium_permittivity\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_42_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the electromagnetic force between two charges of 5C and 7C placed 3 meters apart.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the electromagnetic force between two charges placed at a certain distance.\n  function_name: 'electromagnetic_force' or null,\n  // The magnitude of the first charge in coulombs.\n  charge1: int,\n  // The magnitude of the second charge in coulombs.\n  charge2: int,\n  // The distance between the two charges in meters.\n  distance: int,\n  // The relative permittivity of the medium in which the charges are present. Default is 8.854e-12 (Vacuum Permittivity).\n  medium_permittivity: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'electromagnetic_force',\n  charge1: 5,\n  charge2: 7,\n  distance: 3,\n}", "metadata": {"logprobs": null, "prompt_tokens": 257, "output_tokens": 32, "total_tokens": 289, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3203e9dd-4222-4e4d-9da2-ed616049ed20", "event_id": "3203e9dd-4222-4e4d-9da2-ed616049ed20", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3821, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_44", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b90326db-aa6c-4c34-bf11-212b0dd1cd7a", "event_id": "b90326db-aa6c-4c34-bf11-212b0dd1cd7a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3822, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_42", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3baca8d1-88eb-42b2-b63e-6d218a5ef9b9", "event_id": "d6ff1075-8143-4124-9fdf-19eb08f88610", "parent_event_id": "3baca8d1-88eb-42b2-b63e-6d218a5ef9b9", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 670, "start_time": "2024-06-19T03:23:55.025Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_46", "variant_name": null}, {"function_name": "Fn_simple_46", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_46\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"mass\":100,\"phase_transition\":\"vaporization\",\"meta\":\"Value\",\"substance\":\"water\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_46_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.\n  function_name: 'thermo.calculate_energy' or null,\n  // Mass of the substance in grams.\n  mass: int,\n  // Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'.\n  phase_transition: string,\n  // The substance which is undergoing phase change, default is 'water'\n  substance: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"thermo.calculate_energy\",\n  \"mass\": 100,\n  \"phase_transition\": \"vaporization\",\n  \"substance\": \"water\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 245, "output_tokens": 38, "total_tokens": 283, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3baca8d1-88eb-42b2-b63e-6d218a5ef9b9", "event_id": "3baca8d1-88eb-42b2-b63e-6d218a5ef9b9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3865, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_46", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "66223265-64d7-42d3-99c0-cd2ee8f527ca", "event_id": "ca2ad404-fe11-439a-b6b7-337daaae77d0", "parent_event_id": "66223265-64d7-42d3-99c0-cd2ee8f527ca", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 551, "start_time": "2024-06-19T03:23:55.146Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_49", "variant_name": null}, {"function_name": "Fn_simple_49", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_49\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"mass\":45,\"volume\":15,\"meta\":\"Value\",\"unit\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_49_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the density of a substance based on its mass and volume.\n  function_name: 'calculate_density' or null,\n  // The mass of the substance in kilograms.\n  mass: int,\n  // The volume of the substance in cubic meters.\n  volume: int,\n  // The unit of density. Default is kg/m\u00b3\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_density',\n  mass: 45,\n  volume: 15,\n}", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 22, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "66223265-64d7-42d3-99c0-cd2ee8f527ca", "event_id": "66223265-64d7-42d3-99c0-cd2ee8f527ca", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3866, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_49", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "50b57f3f-9ebb-4cea-95b2-0b379e4f793c", "event_id": "20f33421-9ebc-4ff1-aff5-40351635e6ce", "parent_event_id": "50b57f3f-9ebb-4cea-95b2-0b379e4f793c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 775, "start_time": "2024-06-19T03:23:54.941Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_45", "variant_name": null}, {"function_name": "Fn_simple_45", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_45\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"charge\":0.01,\"distance\":4,\"meta\":\"Value\",\"medium\":\"vacuum\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_45_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the electric field strength at a certain distance from a point charge.\n  function_name: 'calculate_electric_field_strength' or null,\n  // The charge in Coulombs.\n  charge: float,\n  // The distance from the charge in meters.\n  distance: int,\n  // The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\n  medium: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_electric_field_strength',\n  charge: 0.01,\n  distance: 4,\n  medium: 'vacuum',\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 34, "total_tokens": 252, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "50b57f3f-9ebb-4cea-95b2-0b379e4f793c", "event_id": "50b57f3f-9ebb-4cea-95b2-0b379e4f793c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3887, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_45", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "bb05c43c-ccf7-4730-aad7-7dce542e5c82", "event_id": "48494636-0d44-4d27-98d1-d98685601df5", "parent_event_id": "bb05c43c-ccf7-4730-aad7-7dce542e5c82", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 699, "start_time": "2024-06-19T03:23:55.103Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_48", "variant_name": null}, {"function_name": "Fn_simple_48", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_48\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"substance\":\"water\",\"sea_level\":5000,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_48_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the boiling point and melting point of water under the sea level of 5000m.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the boiling point and melting point of a substance based on its name and the sea level.\n  function_name: 'get_boiling_melting_points' or null,\n  // The name of the substance.\n  substance: string,\n  // The sea level in meters.\n  sea_level: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_boiling_melting_points\",\n  \"substance\": \"water\",\n  \"sea_level\": 5000\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 194, "output_tokens": 37, "total_tokens": 231, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "bb05c43c-ccf7-4730-aad7-7dce542e5c82", "event_id": "bb05c43c-ccf7-4730-aad7-7dce542e5c82", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 3972, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_48", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "420142af-2a06-4dd5-8304-b7ed264c52eb", "event_id": "22019320-ad26-409f-af71-e0f64e273fe0", "parent_event_id": "420142af-2a06-4dd5-8304-b7ed264c52eb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 943, "start_time": "2024-06-19T03:23:54.916Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_43", "variant_name": null}, {"function_name": "Fn_simple_43", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_43\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"inductance\":0.05,\"capacitance\":0.0001,\"meta\":\"Value\",\"round_off\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_43_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the resonant frequency of an LC (inductor-capacitor) circuit.\n  function_name: 'calculate_resonant_frequency' or null,\n  // The inductance (L) in henries (H).\n  inductance: float,\n  // The capacitance (C) in farads (F).\n  capacitance: float,\n  // Rounding off the result to a certain decimal places, default is 2.\n  round_off: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_resonant_frequency',\n  inductance: 50e-3,\n  capacitance: 100e-6,\n}", "metadata": {"logprobs": null, "prompt_tokens": 239, "output_tokens": 34, "total_tokens": 273, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "420142af-2a06-4dd5-8304-b7ed264c52eb", "event_id": "420142af-2a06-4dd5-8304-b7ed264c52eb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4029, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_43", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f284d5c0-17a9-4f2b-a80e-615d9572965d", "event_id": "9575cab6-4334-4cf5-a7c0-201e45174fc6", "parent_event_id": "f284d5c0-17a9-4f2b-a80e-615d9572965d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 927, "start_time": "2024-06-19T03:23:55.037Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_47", "variant_name": null}, {"function_name": "Fn_simple_47", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_47\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"mass1\":20,\"temperature1\":30,\"mass2\":15,\"temperature2\":60,\"meta\":\"Value\",\"specific_heat_capacity\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_47_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the final temperature when 20 kg of water at 30 degree Celsius is mixed with 15 kg of water at 60 degree Celsius.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the final equilibrium temperature after mixing two bodies with different masses and temperatures\n  function_name: 'calculate_final_temperature' or null,\n  // The mass of the first body (kg).\n  mass1: int,\n  // The initial temperature of the first body (Celsius).\n  temperature1: int,\n  // The mass of the second body (kg).\n  mass2: int,\n  // The initial temperature of the second body (Celsius).\n  temperature2: int,\n  // The specific heat capacity of the bodies in kJ/kg/K. If not provided, will default to that of water at room temperature, which is 4.2 kJ/kg/K.\n  specific_heat_capacity: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_final_temperature\",\n  \"mass1\": 20,\n  \"temperature1\": 30,\n  \"mass2\": 15,\n  \"temperature2\": 60\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 290, "output_tokens": 48, "total_tokens": 338, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f284d5c0-17a9-4f2b-a80e-615d9572965d", "event_id": "f284d5c0-17a9-4f2b-a80e-615d9572965d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4134, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_47", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8e400acb-62c9-4a06-a806-f0a9574f1c9f", "event_id": "70e7c210-d430-46cb-909a-cd9fd7d4b59a", "parent_event_id": "8e400acb-62c9-4a06-a806-f0a9574f1c9f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 723, "start_time": "2024-06-19T03:23:55.333Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_50", "variant_name": null}, {"function_name": "Fn_simple_50", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_50\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"gauge_pressure\":2,\"meta\":\"Value\",\"atm_pressure\":1}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_50_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the absolute pressure from gauge and atmospheric pressures.\n  function_name: 'calc_absolute_pressure' or null,\n  // The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided.\n  atm_pressure: int or null,\n  // The gauge pressure in atmospheres (atm). Must be provided.\n  gauge_pressure: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calc_absolute_pressure',\n  atm_pressure: 1,\n  gauge_pressure: 2,\n}", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 25, "total_tokens": 235, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8e400acb-62c9-4a06-a806-f0a9574f1c9f", "event_id": "8e400acb-62c9-4a06-a806-f0a9574f1c9f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4226, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_50", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0965f032-2a99-436b-8775-d50fe82689cb", "event_id": "c3b29558-4e75-4f8a-a074-1ffa7e138eca", "parent_event_id": "0965f032-2a99-436b-8775-d50fe82689cb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 699, "start_time": "2024-06-19T03:23:55.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_54", "variant_name": null}, {"function_name": "Fn_simple_54", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_54\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"DNA_id\":\"DNA123\",\"meta\":\"Value\",\"format\":null,\"upstream\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_54_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Retrieve the sequence of DNA molecule with id `DNA123`.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the sequence of a DNA molecule with the given id from a public database.\n  function_name: 'fetch_DNA_sequence' or null,\n  // Unique ID of the DNA molecule in the database.\n  DNA_id: string,\n  // Optional parameter to get sequence in specific format (default to 'fasta').\n  format: string or null,\n  // Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\n  upstream: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"fetch_DNA_sequence\",\n  \"DNA_id\": \"DNA123\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 223, "output_tokens": 22, "total_tokens": 245, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9e015311-f093-4f18-bd96-f447a3cb7d9f", "event_id": "fc9d57a0-24a9-4ff0-b0bd-e05f84253a70", "parent_event_id": "9e015311-f093-4f18-bd96-f447a3cb7d9f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 726, "start_time": "2024-06-19T03:23:55.670Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_53", "variant_name": null}, {"function_name": "Fn_simple_53", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_53\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"temp\":298,\"volume\":10,\"meta\":\"Value\",\"gas\":\"air\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_53_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the heat capacity at constant pressure of air using its temperature and volume.\n  function_name: 'calc_heat_capacity' or null,\n  // The temperature of the gas in Kelvin.\n  temp: int,\n  // The volume of the gas in m^3.\n  volume: int,\n  // Type of gas, with 'air' as default.\n  gas: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calc_heat_capacity\",\n  \"temp\": 298,\n  \"volume\": 10,\n  \"gas\": \"air\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 33, "total_tokens": 251, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0965f032-2a99-436b-8775-d50fe82689cb", "event_id": "0965f032-2a99-436b-8775-d50fe82689cb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4566, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_54", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9e015311-f093-4f18-bd96-f447a3cb7d9f", "event_id": "9e015311-f093-4f18-bd96-f447a3cb7d9f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4567, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_53", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "23c76bb4-9a37-4642-a2dc-1c14e2e368c3", "event_id": "20ae44e8-854a-4f69-a198-da8df2e5b4a6", "parent_event_id": "23c76bb4-9a37-4642-a2dc-1c14e2e368c3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 766, "start_time": "2024-06-19T03:23:55.653Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_52", "variant_name": null}, {"function_name": "Fn_simple_52", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_52\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"initial_temp\":300,\"final_temp\":400,\"heat_capacity\":5,\"meta\":\"Value\",\"isothermal\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_52_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the entropy change for an isothermal and reversible process.\n  function_name: 'calculate_entropy_change' or null,\n  // The initial temperature in Kelvin.\n  initial_temp: int,\n  // The final temperature in Kelvin.\n  final_temp: int,\n  // The heat capacity in J/K.\n  heat_capacity: int,\n  // Whether the process is isothermal. Default is True.\n  isothermal: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_entropy_change\",\n  \"initial_temp\": 300,\n  \"final_temp\": 400,\n  \"heat_capacity\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 36, "total_tokens": 272, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "23c76bb4-9a37-4642-a2dc-1c14e2e368c3", "event_id": "23c76bb4-9a37-4642-a2dc-1c14e2e368c3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4589, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_52", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "59d63ec0-05c5-4ae9-8132-10f3f81f99fc", "event_id": "78a7c985-77d5-46b3-8981-83ef23e629aa", "parent_event_id": "59d63ec0-05c5-4ae9-8132-10f3f81f99fc", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 967, "start_time": "2024-06-19T03:23:55.545Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_51", "variant_name": null}, {"function_name": "Fn_simple_51", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_51\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"substance\":\"ice\",\"mass\":1,\"initial_temperature\":0,\"final_temperature\":100,\"meta\":\"Value\",\"pressure\":1}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_51_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.\n  function_name: 'entropy_change.calculate' or null,\n  // The substance for which the change in entropy is calculated.\n  substance: string,\n  // The mass of the substance in kg.\n  mass: int,\n  // The initial temperature of the substance in degree Celsius.\n  initial_temperature: int,\n  // The final temperature of the substance in degree Celsius.\n  final_temperature: int,\n  // The pressure the substance is under in atmospheres. (default: 1)\n  pressure: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"entropy_change.calculate\",\n  \"substance\": \"ice\",\n  \"mass\": 1,\n  \"initial_temperature\": 0,\n  \"final_temperature\": 100,\n  \"pressure\": 1\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 275, "output_tokens": 54, "total_tokens": 329, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "59d63ec0-05c5-4ae9-8132-10f3f81f99fc", "event_id": "59d63ec0-05c5-4ae9-8132-10f3f81f99fc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4681, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_51", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e1623958-b0e5-4ab3-becf-75619f5f4678", "event_id": "f4eec8da-7647-4158-ba07-9d92763f76f3", "parent_event_id": "e1623958-b0e5-4ab3-becf-75619f5f4678", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 794, "start_time": "2024-06-19T03:23:55.722Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_56", "variant_name": null}, {"function_name": "Fn_simple_56", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_56\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"cell_type\":\"human\",\"meta\":\"Value\",\"detailed\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_56_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me detailed information about the structure of human cell\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve information about the structure and functioning of a specified type of cell\n  function_name: 'biology.get_cell_info' or null,\n  // Type of cell you want information about\n  cell_type: string,\n  // Indicate if you want a detailed description of the cell (default: false)\n  detailed: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"biology.get_cell_info\",\n  \"cell_type\": \"human\",\n  \"detailed\": true\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 192, "output_tokens": 32, "total_tokens": 224, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e1623958-b0e5-4ab3-becf-75619f5f4678", "event_id": "e1623958-b0e5-4ab3-becf-75619f5f4678", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4685, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_56", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "52428c9f-0d6f-4021-a57e-47cd3819fdf9", "event_id": "b2f65e8a-7f34-4ebd-a322-0e9a101e0fe0", "parent_event_id": "52428c9f-0d6f-4021-a57e-47cd3819fdf9", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 883, "start_time": "2024-06-19T03:23:55.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_55", "variant_name": null}, {"function_name": "Fn_simple_55", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_55\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"gene\":\"BRCA1\",\"meta\":\"Value\",\"species\":\"Homo sapiens\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_55_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Identify the protein sequence of a given human gene 'BRCA1'.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the protein sequence encoded by a human gene.\n  function_name: 'get_protein_sequence' or null,\n  // The human gene of interest.\n  gene: string,\n  // The species for which the gene is to be analyzed. (default: Homo sapiens)\n  species: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_protein_sequence\",\n  \"gene\": \"BRCA1\",\n  \"species\": \"Homo sapiens\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 32, "total_tokens": 222, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "52428c9f-0d6f-4021-a57e-47cd3819fdf9", "event_id": "52428c9f-0d6f-4021-a57e-47cd3819fdf9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4751, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_55", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "281262ad-27f6-4a42-959f-3b7ab9cf54fe", "event_id": "b2540d60-732f-4da9-bdf5-af8407d069fe", "parent_event_id": "281262ad-27f6-4a42-959f-3b7ab9cf54fe", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 871, "start_time": "2024-06-19T03:23:55.861Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_58", "variant_name": null}, {"function_name": "Fn_simple_58", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_58\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"optical_density\":0.6,\"dilution\":5,\"meta\":\"Value\",\"calibration_factor\":1000000000.0}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_58_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the cell density in a sample with an optical density of 0.6, where the experiment dilution is 5 times.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the cell density of a biological sample based on its optical density and the experiment dilution.\n  function_name: 'calculate_cell_density' or null,\n  // The optical density of the sample, usually obtained from a spectrophotometer reading.\n  optical_density: float,\n  // The dilution factor applied during the experiment.\n  dilution: int,\n  // The calibration factor to adjust the density, default value is 1e9 assuming cell density is in CFU/mL.\n  calibration_factor: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_cell_density\",\n  \"optical_density\": 0.6,\n  \"dilution\": 5,\n  \"calibration_factor\": 1e9\n}", "metadata": {"logprobs": null, "prompt_tokens": 247, "output_tokens": 43, "total_tokens": 290, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "281262ad-27f6-4a42-959f-3b7ab9cf54fe", "event_id": "281262ad-27f6-4a42-959f-3b7ab9cf54fe", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4901, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_58", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "361d98e3-6e41-4ada-8afa-94ea345b1607", "event_id": "1cb87fa0-6847-4bfd-a2e6-a72dfd23802e", "parent_event_id": "361d98e3-6e41-4ada-8afa-94ea345b1607", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1011, "start_time": "2024-06-19T03:23:55.804Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_57", "variant_name": null}, {"function_name": "Fn_simple_57", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_57\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"cell_compartment\":\"plasma membrane\",\"meta\":\"Value\",\"include_description\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_57_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the names of proteins found in the plasma membrane?\n\nHere is the function to invoke:\n\n\n{\n  // Get the list of proteins in a specific cell compartment.\n  function_name: 'cellbio.get_proteins' or null,\n  // The specific cell compartment.\n  cell_compartment: string,\n  // Set true if you want a brief description of each protein. (default: false)\n  include_description: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"cellbio.get_proteins\",\n  \"cell_compartment\": \"plasma membrane\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 192, "output_tokens": 26, "total_tokens": 218, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "361d98e3-6e41-4ada-8afa-94ea345b1607", "event_id": "361d98e3-6e41-4ada-8afa-94ea345b1607", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 4985, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_57", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d7cd6723-9e68-495c-b9f9-5d57c5b70259", "event_id": "951e12f2-dda2-480e-8f22-4b0e50a17bdd", "parent_event_id": "d7cd6723-9e68-495c-b9f9-5d57c5b70259", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 879, "start_time": "2024-06-19T03:23:55.966Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_59", "variant_name": null}, {"function_name": "Fn_simple_59", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_59\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"molecule\":\"ATP synthase\",\"organelle\":\"mitochondria\",\"specific_function\":true,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_59_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the function of ATP synthase in mitochondria?\n\nHere is the function to invoke:\n\n\n{\n  // Look up the function of a given molecule in a specified organelle.\n  function_name: 'cell_biology.function_lookup' or null,\n  // The molecule of interest.\n  molecule: string,\n  // The organelle of interest.\n  organelle: string,\n  // If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.\n  specific_function: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"cell_biology.function_lookup\",\n  \"molecule\": \"ATP synthase\",\n  \"organelle\": \"mitochondria\",\n  \"specific_function\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 215, "output_tokens": 43, "total_tokens": 258, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d7cd6723-9e68-495c-b9f9-5d57c5b70259", "event_id": "d7cd6723-9e68-495c-b9f9-5d57c5b70259", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5015, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_59", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fbab3c51-0781-40e4-90c7-ed90f47dd565", "event_id": "5593ae54-8a68-4a17-a2a8-f0c1d5fe1768", "parent_event_id": "fbab3c51-0781-40e4-90c7-ed90f47dd565", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 697, "start_time": "2024-06-19T03:23:56.517Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_65", "variant_name": null}, {"function_name": "Fn_simple_65", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_65\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"allele_frequency\":0.3,\"genotype\":\"Value0\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_65_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\n  function_name: 'calculate_genotype_frequency' or null,\n  // The frequency of the dominant allele in the population.\n  allele_frequency: float,\n  // The genotype which frequency is needed.\n  genotype: 'AA' or 'Aa' or 'aa',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_genotype_frequency',\n  allele_frequency: 0.3,\n  genotype: 'AA'\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 27, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fbab3c51-0781-40e4-90c7-ed90f47dd565", "event_id": "fbab3c51-0781-40e4-90c7-ed90f47dd565", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5384, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_65", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3f6ab193-3c5e-411b-9677-7d1710584c2b", "event_id": "cd575ed8-b849-4db6-a33f-9fe829fb0434", "parent_event_id": "3f6ab193-3c5e-411b-9677-7d1710584c2b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 870, "start_time": "2024-06-19T03:23:56.398Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_62", "variant_name": null}, {"function_name": "Fn_simple_62", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_62\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"weight\":150,\"height\":70,\"activity_level\":\"Value1\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_62_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.\n\nHere is the function to invoke:\n\n\n{\n  // Predict the likelihood of diabetes type 2 based on a person's weight and height.\n  function_name: 'diabetes_prediction' or null,\n  // Weight of the person in lbs.\n  weight: int,\n  // Height of the person in inches.\n  height: int,\n  // Physical activity level of the person.\n  activity_level: 'sedentary' or 'lightly active' or 'moderately active' or 'very active' or 'extra active',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'diabetes_prediction',\n  weight: 150,\n  height: 70, // 5ft 10in equals 70 inches\n  activity_level: 'lightly active'\n}", "metadata": {"logprobs": null, "prompt_tokens": 238, "output_tokens": 43, "total_tokens": 281, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3f6ab193-3c5e-411b-9677-7d1710584c2b", "event_id": "3f6ab193-3c5e-411b-9677-7d1710584c2b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5438, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_62", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9932fb94-9e1a-4121-9554-7b19c963123e", "event_id": "f695bcba-f19d-4f5a-8d28-2ddca1cd7c71", "parent_event_id": "9932fb94-9e1a-4121-9554-7b19c963123e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 830, "start_time": "2024-06-19T03:23:56.513Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_64", "variant_name": null}, {"function_name": "Fn_simple_64", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_64\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"species1\":\"human\",\"species2\":\"chimp\",\"meta\":\"Value\",\"format\":\"percentage\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_64_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find out how genetically similar a human and a chimp are in percentage.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the genetic similarity between two species based on their DNA sequences.\n  function_name: 'genetics.calculate_similarity' or null,\n  // The first species to compare.\n  species1: string,\n  // The second species to compare.\n  species2: string,\n  // The format of the result (percentage or fraction). Default is percentage.\n  format: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'genetics.calculate_similarity',\n  species1: 'human',\n  species2: 'chimp',\n  format: 'percentage',\n}", "metadata": {"logprobs": null, "prompt_tokens": 205, "output_tokens": 32, "total_tokens": 237, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9932fb94-9e1a-4121-9554-7b19c963123e", "event_id": "9932fb94-9e1a-4121-9554-7b19c963123e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5513, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_64", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "38d335fb-11bc-404b-b0e8-f22cbd77a74d", "event_id": "56dea231-2327-4bb2-af55-8bf956cb46e0", "parent_event_id": "38d335fb-11bc-404b-b0e8-f22cbd77a74d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1290, "start_time": "2024-06-19T03:23:56.058Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_60", "variant_name": null}, {"function_name": "Fn_simple_60", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_60\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"compound\":\"C6H12O6\",\"to_unit\":\"g/mole\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_60_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the molecular weight of Glucose (C6H12O6) in grams/mole.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the molecular weight of a compound given the compound formula.\n  function_name: 'calculate_molecular_weight' or null,\n  // The molecular formula of the compound.\n  compound: string,\n  // The unit in which to return the result.\n  to_unit: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_molecular_weight\",\n  \"compound\": \"C6H12O6\",\n  \"to_unit\": \"g/mole\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 189, "output_tokens": 35, "total_tokens": 224, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "38d335fb-11bc-404b-b0e8-f22cbd77a74d", "event_id": "38d335fb-11bc-404b-b0e8-f22cbd77a74d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5517, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_60", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c3b3d153-695d-4d67-b856-ae9d02e3450c", "event_id": "b34e389c-aed2-4895-bf21-0a361cb133f7", "parent_event_id": "c3b3d153-695d-4d67-b856-ae9d02e3450c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1026, "start_time": "2024-06-19T03:23:56.398Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_61", "variant_name": null}, {"function_name": "Fn_simple_61", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_61\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"snp_id\":\"rs6034464\",\"meta\":\"Value\",\"species\":\"Homo sapiens\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_61_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464.\n\nHere is the function to invoke:\n\n\n{\n  // Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\n  function_name: 'mutation_type.find' or null,\n  // The ID of the Single Nucleotide Polymorphism (SNP) mutation.\n  snp_id: string,\n  // Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\n  species: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"mutation_type.find\",\n  \"snp_id\": \"rs6034464\",\n  \"species\": \"Homo sapiens\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 34, "total_tokens": 258, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c3b3d153-695d-4d67-b856-ae9d02e3450c", "event_id": "c3b3d153-695d-4d67-b856-ae9d02e3450c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5594, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_61", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fcfa64e2-b9ce-417b-952a-1570f7e0a443", "event_id": "ec8a884b-d7c7-40ac-9049-04c5140d9c53", "parent_event_id": "fcfa64e2-b9ce-417b-952a-1570f7e0a443", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 858, "start_time": "2024-06-19T03:23:56.583Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_66", "variant_name": null}, {"function_name": "Fn_simple_66", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_66\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"country\":\"Brazil\",\"year\":\"2022\",\"population\":213000000,\"land_area\":8500000,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_66_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the population density of a specific country in a specific year.\n  function_name: 'calculate_density' or null,\n  // The country for which the density needs to be calculated.\n  country: string,\n  // The year in which the density is to be calculated.\n  year: string,\n  // The population of the country.\n  population: int,\n  // The land area of the country in square kilometers.\n  land_area: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_density',\n  country: 'Brazil',\n  year: '2022',\n  population: 213000000,\n  land_area: 8500000,\n}", "metadata": {"logprobs": null, "prompt_tokens": 234, "output_tokens": 40, "total_tokens": 274, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fcfa64e2-b9ce-417b-952a-1570f7e0a443", "event_id": "fcfa64e2-b9ce-417b-952a-1570f7e0a443", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5611, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_66", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cf039084-c65a-4a47-9704-bc564cf37a19", "event_id": "f417e96d-5e2d-481a-964d-693bab01db52", "parent_event_id": "cf039084-c65a-4a47-9704-bc564cf37a19", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 816, "start_time": "2024-06-19T03:23:56.733Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_67", "variant_name": null}, {"function_name": "Fn_simple_67", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_67\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Amazon rainforest\",\"time_frame\":\"Value0\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_67_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me data on average precipitation in the Amazon rainforest for the last six months.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve precipitation data for a specified location and time period.\n  function_name: 'ecology_data.precipitation_stats' or null,\n  // The name of the location, e.g., 'Amazon rainforest'.\n  location: string,\n  // The time period for which data is required.\n  time_frame: 'six_months' or 'year' or 'five_years',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'ecology_data.precipitation_stats',\n  location: 'Amazon rainforest',\n  time_frame: 'six_months',\n}", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 32, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cf039084-c65a-4a47-9704-bc564cf37a19", "event_id": "cf039084-c65a-4a47-9704-bc564cf37a19", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5718, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_67", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "476e2df2-6df5-4e93-a9be-772a2ca70f6b", "event_id": "070b0638-2d4e-43dc-bf9f-12349d35a1ae", "parent_event_id": "476e2df2-6df5-4e93-a9be-772a2ca70f6b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1196, "start_time": "2024-06-19T03:23:56.420Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_63", "variant_name": null}, {"function_name": "Fn_simple_63", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_63\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"sequence\":\"AGTCGATCGAACGTACGTACG\",\"reference_sequence\":\"AGTCCATCGAACGTACGTACG\",\"meta\":\"Value\",\"mutation_type\":\"Value2\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_63_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Analyze the DNA sequence 'AGTCGATCGAACGTACGTACG' for any potential substitution mutations based on a reference sequence 'AGTCCATCGAACGTACGTACG'.\n\nHere is the function to invoke:\n\n\n{\n  // Analyzes the DNA sequence based on a reference sequence and return any potential mutations.\n  function_name: 'analyze_dna_sequence' or null,\n  // The DNA sequence to be analyzed.\n  sequence: string,\n  // The reference DNA sequence.\n  reference_sequence: string,\n  // Type of the mutation to be looked for in the sequence. Default to 'substitution'.\n  mutation_type: 'insertion' or 'deletion' or 'substitution' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"analyze_dna_sequence\",\n  \"sequence\": \"AGTCGATCGAACGTACGTACG\",\n  \"reference_sequence\": \"AGTCCATCGAACGTACGTACG\",\n  \"mutation_type\": \"substitution\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 251, "output_tokens": 57, "total_tokens": 308, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "476e2df2-6df5-4e93-a9be-772a2ca70f6b", "event_id": "476e2df2-6df5-4e93-a9be-772a2ca70f6b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5786, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_63", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "45300b8e-bcc5-4be8-ac7a-b54126130a2c", "event_id": "477ed4c1-3aaf-4ae7-90b4-c62d60d855c1", "parent_event_id": "45300b8e-bcc5-4be8-ac7a-b54126130a2c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 782, "start_time": "2024-06-19T03:23:56.847Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_69", "variant_name": null}, {"function_name": "Fn_simple_69", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_69\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Yellowstone National Park\",\"years\":5,\"meta\":\"Value\",\"include_human_impact\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_69_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.\n\nHere is the function to invoke:\n\n\n{\n  // Predicts the forest growth over the next N years based on current trends.\n  function_name: 'forest_growth_forecast' or null,\n  // The location where you want to predict forest growth.\n  location: string,\n  // The number of years for the forecast.\n  years: int,\n  // Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\n  include_human_impact: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"forest_growth_forecast\",\n  \"location\": \"Yellowstone National Park\",\n  \"years\": 5,\n  \"include_human_impact\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 226, "output_tokens": 39, "total_tokens": 265, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "45300b8e-bcc5-4be8-ac7a-b54126130a2c", "event_id": "45300b8e-bcc5-4be8-ac7a-b54126130a2c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 5798, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_69", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ee56dcf6-cd39-436b-9996-67923f211cdf", "event_id": "69888a49-3536-4016-8a86-1126b5252ec3", "parent_event_id": "ee56dcf6-cd39-436b-9996-67923f211cdf", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 724, "start_time": "2024-06-19T03:23:57.270Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_71", "variant_name": null}, {"function_name": "Fn_simple_71", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_71\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"vehicle_type\":\"gas\",\"miles_driven\":1500,\"meta\":\"Value\",\"emission_factor\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_71_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the carbon footprint of a gas-powered vehicle driving 1500 miles in a year?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.\n  function_name: 'calculate_vehicle_emission' or null,\n  // The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle.\n  vehicle_type: string,\n  // The number of miles driven per year.\n  miles_driven: int,\n  // Optional emission factor to calculate emissions, in g/mile. Default factor is 355.48.\n  emission_factor: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_vehicle_emission\",\n  \"vehicle_type\": \"gas\",\n  \"miles_driven\": 1500\n}", "metadata": {"logprobs": null, "prompt_tokens": 250, "output_tokens": 32, "total_tokens": 282, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ee56dcf6-cd39-436b-9996-67923f211cdf", "event_id": "ee56dcf6-cd39-436b-9996-67923f211cdf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6165, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_71", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6c976671-e651-4cd2-af32-8adecf971a42", "event_id": "095ed27b-567d-4d38-bbc5-4037b88dd488", "parent_event_id": "6c976671-e651-4cd2-af32-8adecf971a42", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 663, "start_time": "2024-06-19T03:23:57.345Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_72", "variant_name": null}, {"function_name": "Fn_simple_72", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_72\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"length\":100,\"preferences\":[\"Value3\",\"Value2\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_72_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine).\n\nHere is the function to invoke:\n\n\n{\n  // Generate a random DNA sequence with a specific length and nucleotide preference.\n  function_name: 'generate_DNA_sequence' or null,\n  // The length of the DNA sequence to be generated.\n  length: int,\n  // Preferred nucleotides to include more frequently in the DNA sequence.\n  preferences: [\n    'A' or 'T' or 'C' or 'G'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"generate_DNA_sequence\",\n  \"length\": 100,\n  \"preferences\": [\"G\", \"C\"]\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 30, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6c976671-e651-4cd2-af32-8adecf971a42", "event_id": "6c976671-e651-4cd2-af32-8adecf971a42", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6177, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_72", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d5a9666f-2f17-4e9c-9551-3c37b7110d9c", "event_id": "5efd1e6a-82ba-4725-8409-3f2bff3e55a9", "parent_event_id": "d5a9666f-2f17-4e9c-9551-3c37b7110d9c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 846, "start_time": "2024-06-19T03:23:57.216Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_70", "variant_name": null}, {"function_name": "Fn_simple_70", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_70\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Mississippi river\",\"meta\":\"Value\",\"year\":2020,\"species\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_70_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find out the population and species of turtles in Mississippi river in 2020.\n\nHere is the function to invoke:\n\n\n{\n  // Get the population and species of turtles in a specific location.\n  function_name: 'ecology.get_turtle_population' or null,\n  // The name of the location.\n  location: string,\n  // The year of the data requested. Default is 2001.\n  year: int or null,\n  // Whether to include species information. Default is false.\n  species: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'ecology.get_turtle_population',\n  location: 'Mississippi river',\n  year: 2020,\n  species: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 34, "total_tokens": 244, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d5a9666f-2f17-4e9c-9551-3c37b7110d9c", "event_id": "d5a9666f-2f17-4e9c-9551-3c37b7110d9c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6232, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_70", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b14957ae-b808-4e21-ba23-299da3d25653", "event_id": "06e004cb-e86d-4bc2-aeec-733e5557db6a", "parent_event_id": "b14957ae-b808-4e21-ba23-299da3d25653", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 727, "start_time": "2024-06-19T03:23:57.425Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_74", "variant_name": null}, {"function_name": "Fn_simple_74", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_74\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"country\":\"United States\",\"years\":20,\"meta\":\"Value\",\"growth_rate\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_74_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the projected population growth in United States in the next 20 years?\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the projected population growth based on the current growth rate.\n  function_name: 'population_projections' or null,\n  // The country for which to calculate the population projection.\n  country: string,\n  // Number of years for the projection.\n  years: int,\n  // Optional parameter to specify the growth rate, in percentage. Default is 1.2.\n  growth_rate: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"population_projections\",\n  \"country\": \"United States\",\n  \"years\": 20\n}", "metadata": {"logprobs": null, "prompt_tokens": 212, "output_tokens": 27, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b14957ae-b808-4e21-ba23-299da3d25653", "event_id": "b14957ae-b808-4e21-ba23-299da3d25653", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6322, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_74", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "eb366041-7b39-4bf3-8b5a-94c8afe057f5", "event_id": "c8f57769-c471-46d2-8c8f-567b28b5af78", "parent_event_id": "eb366041-7b39-4bf3-8b5a-94c8afe057f5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 907, "start_time": "2024-06-19T03:23:57.349Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_73", "variant_name": null}, {"function_name": "Fn_simple_73", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_73\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"trait_values\":[0.8,0.7],\"trait_contributions\":[0.4,0.6],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_73_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.\n  function_name: 'calculate_fitness' or null,\n  // List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness.\n  trait_values: float[],\n  // List of the percentage contributions of each trait to the overall fitness, which must sum to 1.\n  trait_contributions: float[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_fitness\",\n  \"trait_values\": [0.8, 0.7],\n  \"trait_contributions\": [0.4, 0.6]\n}", "metadata": {"logprobs": null, "prompt_tokens": 257, "output_tokens": 42, "total_tokens": 299, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "eb366041-7b39-4bf3-8b5a-94c8afe057f5", "event_id": "eb366041-7b39-4bf3-8b5a-94c8afe057f5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6425, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_73", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7283b339-d453-41f4-b7ef-5545647c2730", "event_id": "acff118e-fc27-4f5f-88a9-6e6f8a465c20", "parent_event_id": "7283b339-d453-41f4-b7ef-5545647c2730", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 645, "start_time": "2024-06-19T03:23:57.630Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_78", "variant_name": null}, {"function_name": "Fn_simple_78", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_78\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Los Angeles, CA\",\"dietary_preference\":[\"Value0\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_78_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a nearby restaurant that serves vegan food in Los Angeles.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby restaurants based on specific dietary preferences.\n  function_name: 'restaurant.find_nearby' or null,\n  // The city and state, e.g. Los Angeles, CA\n  location: string,\n  // Dietary preference. Default is empty list.\n  dietary_preference: [\n    'Vegan' or 'Vegetarian' or 'Gluten-free' or 'Dairy-free' or 'Nut-free'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'restaurant.find_nearby',\n  location: 'Los Angeles, CA',\n  dietary_preference: ['Vegan']\n}", "metadata": {"logprobs": null, "prompt_tokens": 212, "output_tokens": 29, "total_tokens": 241, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7283b339-d453-41f4-b7ef-5545647c2730", "event_id": "7283b339-d453-41f4-b7ef-5545647c2730", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6444, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_78", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3d4dd709-6117-4388-9675-64674c650bc8", "event_id": "4f777168-609a-4513-b3b7-1e72b1cbd69a", "parent_event_id": "3d4dd709-6117-4388-9675-64674c650bc8", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1497, "start_time": "2024-06-19T03:23:56.817Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_68", "variant_name": null}, {"function_name": "Fn_simple_68", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_68\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"color\":\"green\",\"habitat\":\"forest\",\"meta\":\"Value\",\"size\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_68_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Identify a small green bird in forest.\n\nHere is the function to invoke:\n\n\n{\n  // Identify a bird species based on certain characteristics.\n  function_name: 'identify_bird' or null,\n  // Color of the bird.\n  color: string,\n  // Habitat of the bird.\n  habitat: string,\n  // Size of the bird. Default is 'small'\n  size: 'small' or 'medium' or 'large' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Since the question specifies a small green bird in the forest, you can call the function `identify_bird` with the color as \"green\", habitat as \"forest\", and size as \"small\" to identify the bird species.\n\n```json\n{\n  \"function_name\": \"identify_bird\",\n  \"color\": \"green\",\n  \"habitat\": \"forest\",\n  \"size\": \"small\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 195, "output_tokens": 84, "total_tokens": 279, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3d4dd709-6117-4388-9675-64674c650bc8", "event_id": "3d4dd709-6117-4388-9675-64674c650bc8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6483, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_68", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "23dc9d12-19f1-472d-8f57-4ae90cb154f3", "event_id": "a2543a77-1ff5-489d-838a-d815afd65c10", "parent_event_id": "23dc9d12-19f1-472d-8f57-4ae90cb154f3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 768, "start_time": "2024-06-19T03:23:57.550Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_76", "variant_name": null}, {"function_name": "Fn_simple_76", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_76\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"current_population\":35000,\"growth_rate\":0.015,\"years\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_76_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015.\n\nHere is the function to invoke:\n\n\n{\n  // Estimate future population of elephants given current population and growth rate.\n  function_name: 'elephant_population_estimate' or null,\n  // The current number of elephants.\n  current_population: int,\n  // The annual population growth rate of elephants.\n  growth_rate: float,\n  // The number of years to project the population.\n  years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"elephant_population_estimate\",\n  \"current_population\": 35000,\n  \"growth_rate\": 0.015,\n  \"years\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 39, "total_tokens": 250, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "23dc9d12-19f1-472d-8f57-4ae90cb154f3", "event_id": "23dc9d12-19f1-472d-8f57-4ae90cb154f3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6487, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_76", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cc8e03fb-2070-4115-928c-0877162ea1b6", "event_id": "eb505b30-941c-4fad-b8b9-f3643664c1f7", "parent_event_id": "cc8e03fb-2070-4115-928c-0877162ea1b6", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1010, "start_time": "2024-06-19T03:23:57.442Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_75", "variant_name": null}, {"function_name": "Fn_simple_75", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_75\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_population\":5000,\"duplication_frequency\":2,\"duration\":6,\"meta\":\"Value\",\"generation_time\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_75_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.\n  function_name: 'calculate_bacteria_evolution_rate' or null,\n  // The starting population of bacteria.\n  start_population: int,\n  // The frequency of bacteria duplication per hour.\n  duplication_frequency: int,\n  // Total duration in hours.\n  duration: int,\n  // The average generation time of the bacteria in minutes. Default is 20 minutes\n  generation_time: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_bacteria_evolution_rate\",\n  \"start_population\": 5000,\n  \"duplication_frequency\": 2, // Since each bacteria duplicates every hour, the duplication frequency is 2.\n  \"duration\": 6\n}", "metadata": {"logprobs": null, "prompt_tokens": 239, "output_tokens": 55, "total_tokens": 294, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cc8e03fb-2070-4115-928c-0877162ea1b6", "event_id": "cc8e03fb-2070-4115-928c-0877162ea1b6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6622, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_75", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2aad1cc9-e593-4682-9650-d4597129b00f", "event_id": "99b641cf-5011-4757-915f-5c76ce11d1c8", "parent_event_id": "2aad1cc9-e593-4682-9650-d4597129b00f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 836, "start_time": "2024-06-19T03:23:57.618Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_77", "variant_name": null}, {"function_name": "Fn_simple_77", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_77\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"species\":\"Homo Sapiens\",\"years\":50,\"meta\":\"Value\",\"model\":\"Darwin\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_77_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model\n\nHere is the function to invoke:\n\n\n{\n  // Predict the evolutionary rate for a specific species for a given timeframe.\n  function_name: 'prediction.evolution' or null,\n  // The species that the evolution rate will be predicted for.\n  species: string,\n  // Number of years for the prediction.\n  years: int,\n  // The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\n  model: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'prediction.evolution',\n  species: 'Homo Sapiens',\n  years: 50,\n  model: 'Darwin'\n}", "metadata": {"logprobs": null, "prompt_tokens": 226, "output_tokens": 34, "total_tokens": 260, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2aad1cc9-e593-4682-9650-d4597129b00f", "event_id": "2aad1cc9-e593-4682-9650-d4597129b00f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6623, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_77", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ea66590f-832c-4f7b-a9f4-380068b990c8", "event_id": "6803f536-31a0-43b3-9278-f7104cdf7ebf", "parent_event_id": "ea66590f-832c-4f7b-a9f4-380068b990c8", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 753, "start_time": "2024-06-19T03:23:57.997Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_79", "variant_name": null}, {"function_name": "Fn_simple_79", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_79\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Austin\",\"days\":3,\"meta\":\"Value\",\"temp_unit\":\"Celsius\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_79_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the average temperature in Austin for the next 3 days in Celsius.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves the average temperature for a specific location over the defined timeframe.\n  function_name: 'average_temperature' or null,\n  // The city to get the average temperature for. It should format as city name such as Boston.\n  location: string,\n  // The number of days to get the average temperature for.\n  days: int,\n  // The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'.\n  temp_unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'average_temperature',\n  location: 'Austin',\n  days: 3,\n  temp_unit: 'Celsius'\n}", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 30, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ea66590f-832c-4f7b-a9f4-380068b990c8", "event_id": "ea66590f-832c-4f7b-a9f4-380068b990c8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 6920, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_79", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6f19ea7b-1fc0-48ab-901b-2d940cbad728", "event_id": "59134838-ad32-41c6-bf6b-186a3b419f48", "parent_event_id": "6f19ea7b-1fc0-48ab-901b-2d940cbad728", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 860, "start_time": "2024-06-19T03:23:58.009Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_80", "variant_name": null}, {"function_name": "Fn_simple_80", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_80\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"data\":[85,90,88,92,86,89,91],\"bins\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_80_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Create a histogram for student scores with the following data: 85, 90, 88, 92, 86, 89, 91 and set bin range to 5.\n\nHere is the function to invoke:\n\n\n{\n  // Create a histogram based on provided data.\n  function_name: 'create_histogram' or null,\n  // The data for which histogram needs to be plotted.\n  data: int[],\n  // The number of equal-width bins in the range. Default is 10.\n  bins: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"create_histogram\",\n  \"data\": [85, 90, 88, 92, 86, 89, 91],\n  \"bins\": 5\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 47, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6f19ea7b-1fc0-48ab-901b-2d940cbad728", "event_id": "6f19ea7b-1fc0-48ab-901b-2d940cbad728", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7038, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_80", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7585948c-3193-49b9-a1c5-428ec9948a54", "event_id": "cb4e4f7f-fa00-4225-a92f-6814926987f7", "parent_event_id": "7585948c-3193-49b9-a1c5-428ec9948a54", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 743, "start_time": "2024-06-19T03:23:58.154Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_82", "variant_name": null}, {"function_name": "Fn_simple_82", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_82\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_location\":\"San Francisco\",\"end_location\":\"Los Angeles\",\"meta\":\"Value\",\"avoid_tolls\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_82_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the fastest route from San Francisco to Los Angeles with toll roads avoided.\n\nHere is the function to invoke:\n\n\n{\n  // Finds the fastest route from one location to another, with an option to avoid toll roads.\n  function_name: 'map_routing.fastest_route' or null,\n  // The starting location for the journey.\n  start_location: string,\n  // The destination for the journey.\n  end_location: string,\n  // Option to avoid toll roads during the journey. Default is false.\n  avoid_tolls: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'map_routing.fastest_route',\n  start_location: 'San Francisco',\n  end_location: 'Los Angeles',\n  avoid_tolls: true,\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 36, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7585948c-3193-49b9-a1c5-428ec9948a54", "event_id": "7585948c-3193-49b9-a1c5-428ec9948a54", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7066, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_82", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0508588d-bb09-4ced-842a-2144644e471f", "event_id": "9b51d92d-d319-4fd5-8b9a-dc0ab9e7fcba", "parent_event_id": "0508588d-bb09-4ced-842a-2144644e471f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 698, "start_time": "2024-06-19T03:23:58.315Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_85", "variant_name": null}, {"function_name": "Fn_simple_85", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_85\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"weight\":85,\"height\":180,\"meta\":\"Value\",\"unit\":\"metric\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_85_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the Body Mass Index (BMI) of a person.\n  function_name: 'calculate_bmi' or null,\n  // Weight of the person in kilograms.\n  weight: int,\n  // Height of the person in centimeters.\n  height: int,\n  // Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_bmi',\n  weight: 85,\n  height: 180,\n  unit: 'metric'\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 29, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0508588d-bb09-4ced-842a-2144644e471f", "event_id": "0508588d-bb09-4ced-842a-2144644e471f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7183, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_85", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "467f5bc5-bc1a-4b54-9c6b-5d81a41e5dd7", "event_id": "fb6e2084-15bf-4d27-afd1-c0b648fca30e", "parent_event_id": "467f5bc5-bc1a-4b54-9c6b-5d81a41e5dd7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 974, "start_time": "2024-06-19T03:23:58.063Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_81", "variant_name": null}, {"function_name": "Fn_simple_81", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_81\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Manhattan, New York\",\"food_type\":\"Thai\",\"number\":5,\"dietary_requirements\":[\"vegan\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_81_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby restaurants based on location and food preferences.\n  function_name: 'find_restaurants' or null,\n  // The specific location or area. The location should be in the format of District, City.\n  location: string,\n  // The type of food preferred.\n  food_type: string,\n  // Number of results to return.\n  number: int,\n  // Special dietary requirements, e.g. vegan, gluten-free. Default is empty list.\n  dietary_requirements: string[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"find_restaurants\",\n  \"location\": \"Manhattan, New York\",\n  \"food_type\": \"Thai\",\n  \"number\": 5,\n  \"dietary_requirements\": [\"vegan\"]\n}", "metadata": {"logprobs": null, "prompt_tokens": 233, "output_tokens": 48, "total_tokens": 281, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "467f5bc5-bc1a-4b54-9c6b-5d81a41e5dd7", "event_id": "467f5bc5-bc1a-4b54-9c6b-5d81a41e5dd7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7208, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_81", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "610f6bc5-3909-472f-9ea6-e0637abb58bd", "event_id": "9251a7f1-f8cb-4cc0-81cc-8c0c38409ab7", "parent_event_id": "610f6bc5-3909-472f-9ea6-e0637abb58bd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 810, "start_time": "2024-06-19T03:23:58.257Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_83", "variant_name": null}, {"function_name": "Fn_simple_83", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_83\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"numbers\":[12.0,15.0,18.0,20.0,21.0,26.0,30.0],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_83_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the average of a list of numbers.\n  function_name: 'calculate_average' or null,\n  // The list of numbers to calculate the average of.\n  numbers: float[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_average\",\n  \"numbers\": [12, 15, 18, 20, 21, 26, 30]\n}", "metadata": {"logprobs": null, "prompt_tokens": 178, "output_tokens": 36, "total_tokens": 214, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "610f6bc5-3909-472f-9ea6-e0637abb58bd", "event_id": "610f6bc5-3909-472f-9ea6-e0637abb58bd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7236, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_83", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1f9131d7-855b-49b7-90bc-6eb2e0cde042", "event_id": "55186ab7-78c0-4907-998e-06e442b30f15", "parent_event_id": "1f9131d7-855b-49b7-90bc-6eb2e0cde042", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 810, "start_time": "2024-06-19T03:23:58.319Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_86", "variant_name": null}, {"function_name": "Fn_simple_86", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_86\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_location\":\"Boston, MA\",\"end_location\":\"Washington, D.C.\",\"meta\":\"Value\",\"units\":\"miles\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_86_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the approximate distance between Boston, MA, and Washington, D.C. in mile?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the geographic distance between two given locations.\n  function_name: 'geo_distance.calculate' or null,\n  // The starting location for the distance calculation. Specify the location in the format of City, State.\n  start_location: string,\n  // The destination location for the distance calculation. Specify the location in the format of City, State.\n  end_location: string,\n  // Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\n  units: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'geo_distance.calculate',\n  start_location: 'Boston, MA',\n  end_location: 'Washington, D.C.',\n  units: 'miles'\n}", "metadata": {"logprobs": null, "prompt_tokens": 240, "output_tokens": 37, "total_tokens": 277, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1f9131d7-855b-49b7-90bc-6eb2e0cde042", "event_id": "1f9131d7-855b-49b7-90bc-6eb2e0cde042", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7299, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_86", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fb676ffc-dc97-4ffe-a176-4bae53d1880e", "event_id": "35018df1-08e9-4fbc-9fbc-d64ea0a023d9", "parent_event_id": "fb676ffc-dc97-4ffe-a176-4bae53d1880e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 946, "start_time": "2024-06-19T03:23:58.276Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_84", "variant_name": null}, {"function_name": "Fn_simple_84", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_84\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"coord1\":[33.4484,-112.074],\"coord2\":[34.0522,-118.2437],\"unit\":\"miles\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_84_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the distance between two GPS coordinates.\n  function_name: 'calculate_distance' or null,\n  // The first coordinate as (latitude, longitude).\n  coord1: float[],\n  // The second coordinate as (latitude, longitude).\n  coord2: float[],\n  // The unit of distance. Options: 'miles', 'kilometers'.\n  unit: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_distance\",\n  \"coord1\": [33.4484, -112.0740],\n  \"coord2\": [34.0522, -118.2437],\n  \"unit\": \"miles\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 227, "output_tokens": 53, "total_tokens": 280, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fb676ffc-dc97-4ffe-a176-4bae53d1880e", "event_id": "fb676ffc-dc97-4ffe-a176-4bae53d1880e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7392, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_84", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "797e9871-cf44-4bcd-896d-50798e7cd160", "event_id": "6292d0b1-392f-4e29-854d-7e9790a56c66", "parent_event_id": "797e9871-cf44-4bcd-896d-50798e7cd160", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 919, "start_time": "2024-06-19T03:23:58.455Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_88", "variant_name": null}, {"function_name": "Fn_simple_88", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_88\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"list\":[5.0,3.0,4.0,1.0,2.0],\"order\":\"Value0\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_88_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Sort the list [5, 3, 4, 1, 2] in ascending order.\n\nHere is the function to invoke:\n\n\n{\n  // Sorts a given list in ascending or descending order.\n  function_name: 'array_sort' or null,\n  // The list of numbers to be sorted.\n  list: float[],\n  // Order of sorting.\n  order: 'ascending' or 'descending',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"array_sort\",\n  \"list\": [5, 3, 4, 1, 2],\n  \"order\": \"ascending\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 188, "output_tokens": 41, "total_tokens": 229, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "797e9871-cf44-4bcd-896d-50798e7cd160", "event_id": "797e9871-cf44-4bcd-896d-50798e7cd160", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7543, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_88", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "acddec89-8e11-4b99-87e4-4db351852b0c", "event_id": "66e22fcc-0350-44de-a191-0b07520709f0", "parent_event_id": "acddec89-8e11-4b99-87e4-4db351852b0c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 954, "start_time": "2024-06-19T03:23:58.454Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_87", "variant_name": null}, {"function_name": "Fn_simple_87", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_87\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_city\":\"New York\",\"end_city\":\"Los Angeles\",\"meta\":\"Value\",\"transportation\":\"train\",\"allow_transfer\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_87_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the shortest distance between two cities via available public transportation.\n  function_name: 'city_distance.find_shortest' or null,\n  // The city you are starting from. The parameter is in the format of city name.\n  start_city: string,\n  // The city you are heading to.The parameter is in the format of city name.\n  end_city: string,\n  // Preferred mode of public transportation. Default is 'bus'.\n  transportation: string or null,\n  // Allows transfer between different transportation if true. Default is false.\n  allow_transfer: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"city_distance.find_shortest\",\n  \"start_city\": \"New York\",\n  \"end_city\": \"Los Angeles\",\n  \"transportation\": \"train\",\n  \"allow_transfer\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 252, "output_tokens": 47, "total_tokens": 299, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "acddec89-8e11-4b99-87e4-4db351852b0c", "event_id": "acddec89-8e11-4b99-87e4-4db351852b0c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7577, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_87", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "568807ad-54a6-4a08-b698-32030d1162dc", "event_id": "06bb0fe9-2ef0-47bc-94c8-cc3b00df55d1", "parent_event_id": "568807ad-54a6-4a08-b698-32030d1162dc", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 709, "start_time": "2024-06-19T03:23:58.752Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_89", "variant_name": null}, {"function_name": "Fn_simple_89", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_89\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"weight_kg\":70,\"height_m\":1.75,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_89_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the Body Mass Index (BMI) given a person's weight and height.\n  function_name: 'calculate_BMI' or null,\n  // The weight of the person in kilograms.\n  weight_kg: int,\n  // The height of the person in meters.\n  height_m: float,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_BMI\",\n  \"weight_kg\": 70,\n  \"height_m\": 1.75\n}", "metadata": {"logprobs": null, "prompt_tokens": 199, "output_tokens": 31, "total_tokens": 230, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "568807ad-54a6-4a08-b698-32030d1162dc", "event_id": "568807ad-54a6-4a08-b698-32030d1162dc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7630, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_89", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "62f4c48e-4bb1-4ad2-a559-d32a5ec7c9e3", "event_id": "1396351d-89c9-4357-8fae-e4814a82a1ab", "parent_event_id": "62f4c48e-4bb1-4ad2-a559-d32a5ec7c9e3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 775, "start_time": "2024-06-19T03:23:58.898Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_91", "variant_name": null}, {"function_name": "Fn_simple_91", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_91\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company_name\":\"ABC Ltd.\",\"employee_id\":345,\"data_field\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_91_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'\n\nHere is the function to invoke:\n\n\n{\n  // Fetches the detailed data for a specific employee in a given company.\n  function_name: 'employee.fetch_data' or null,\n  // The name of the company.\n  company_name: string,\n  // The unique ID of the employee.\n  employee_id: int,\n  // Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']\n  data_field: [\n    'Personal Info' or 'Job History' or 'Payroll' or 'Attendance'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'employee.fetch_data',\n  company_name: 'ABC Ltd.',\n  employee_id: 345,\n  data_field: ['Personal Info', 'Job History']\n}", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 38, "total_tokens": 274, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "62f4c48e-4bb1-4ad2-a559-d32a5ec7c9e3", "event_id": "62f4c48e-4bb1-4ad2-a559-d32a5ec7c9e3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7842, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_91", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0ed95172-300a-4be0-9135-428f21b6c30c", "event_id": "2667de96-b740-4315-937f-604cee5ccd4a", "parent_event_id": "0ed95172-300a-4be0-9135-428f21b6c30c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 735, "start_time": "2024-06-19T03:23:59.040Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_93", "variant_name": null}, {"function_name": "Fn_simple_93", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_93\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"actor_name\":\"Leonardo DiCaprio\",\"year\":2010,\"meta\":\"Value\",\"category\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_93_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database.\n\nHere is the function to invoke:\n\n\n{\n  // Searches the database to find all movies by a specific actor within a certain year.\n  function_name: 'imdb.find_movies_by_actor' or null,\n  // The name of the actor.\n  actor_name: string,\n  // The specific year to search in.\n  year: int,\n  // The category of the film (e.g. Drama, Comedy, etc). Default is 'all'\n  category: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'imdb.find_movies_by_actor',\n  actor_name: 'Leonardo DiCaprio',\n  year: 2010,\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 32, "total_tokens": 252, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0ed95172-300a-4be0-9135-428f21b6c30c", "event_id": "0ed95172-300a-4be0-9135-428f21b6c30c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 7944, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_93", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "73007e90-edef-49cb-aa59-0fe35f0d958e", "event_id": "48f060a0-77cf-4119-a9cc-a3a9edf79ebc", "parent_event_id": "73007e90-edef-49cb-aa59-0fe35f0d958e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 858, "start_time": "2024-06-19T03:23:59.015Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_92", "variant_name": null}, {"function_name": "Fn_simple_92", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_92\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"cuisine\":\"sushi\",\"location\":\"Boston\",\"condition\":\"opens on Sundays\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_92_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the highest rated sushi restaurant in Boston, that opens on Sundays.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve highest rated restaurant given cuisine, location, and a condition.\n  function_name: 'get_restaurant' or null,\n  // Cuisine of the restaurant.\n  cuisine: string,\n  // City where restaurant is located.\n  location: string,\n  // Condition to be met by the restaurant (e.g., operating days, amenities, etc.)\n  condition: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_restaurant',\n  cuisine: 'sushi',\n  location: 'Boston',\n  condition: 'opens on Sundays'\n}", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 32, "total_tokens": 234, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "73007e90-edef-49cb-aa59-0fe35f0d958e", "event_id": "73007e90-edef-49cb-aa59-0fe35f0d958e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8043, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_92", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4c710a6f-5dd6-4242-aea8-1092f84e3698", "event_id": "3c4af9c8-d413-44de-9263-5128c0413f5a", "parent_event_id": "4c710a6f-5dd6-4242-aea8-1092f84e3698", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 659, "start_time": "2024-06-19T03:23:59.224Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_96", "variant_name": null}, {"function_name": "Fn_simple_96", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_96\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base\":5,\"height\":3,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_96_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area of a triangle with base 5m and height 3m.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area of a triangle with the formula area = 0.5 * base * height.\n  function_name: 'calc_area_triangle' or null,\n  // The length of the base of the triangle in meters.\n  base: int,\n  // The perpendicular height of the triangle from the base to the opposite vertex in meters.\n  height: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calc_area_triangle\",\n  \"base\": 5,\n  \"height\": 3\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 30, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4c710a6f-5dd6-4242-aea8-1092f84e3698", "event_id": "4c710a6f-5dd6-4242-aea8-1092f84e3698", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8052, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_96", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "80757756-4d93-4acc-afcf-2f1f5b83a765", "event_id": "15cac806-0cce-4be4-853a-a4209833232c", "parent_event_id": "80757756-4d93-4acc-afcf-2f1f5b83a765", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1049, "start_time": "2024-06-19T03:23:58.870Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_90", "variant_name": null}, {"function_name": "Fn_simple_90", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_90\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"database_name\":\"StudentDB\",\"table_name\":\"students\",\"conditions\":{\"department\":\"Science\",\"school\":\"Bluebird High School\"},\"meta\":\"Value\",\"fetch_limit\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_90_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB.\n\nHere is the function to invoke:\n\n\n{\n  // Fetch records from a specified database table based on certain conditions.\n  function_name: 'db_fetch_records' or null,\n  // The name of the database.\n  database_name: string,\n  // The name of the table from which records need to be fetched.\n  table_name: string,\n  // The conditions based on which records are to be fetched.\n  conditions: {\n    // The name of the department of students.\n    department: string or null,\n    // The name of the school students are enrolled in.\n    school: string or null,\n  },\n  // Limits the number of records to be fetched. Default is 0, which means no limit.\n  fetch_limit: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"db_fetch_records\",\n  \"database_name\": \"StudentDB\",\n  \"table_name\": \"students\",\n  \"conditions\": {\n    \"department\": \"Science\",\n    \"school\": \"Bluebird High School\"\n  },\n  \"fetch_limit\": null\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 275, "output_tokens": 64, "total_tokens": 339, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "80757756-4d93-4acc-afcf-2f1f5b83a765", "event_id": "80757756-4d93-4acc-afcf-2f1f5b83a765", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8088, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_90", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2efe69dd-1a95-42eb-8289-8de3d191f33b", "event_id": "1f293ffb-82b7-40cc-9348-de1817529118", "parent_event_id": "2efe69dd-1a95-42eb-8289-8de3d191f33b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 883, "start_time": "2024-06-19T03:23:59.068Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_94", "variant_name": null}, {"function_name": "Fn_simple_94", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_94\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"LA\",\"timeframe\":7,\"meta\":\"Value\",\"format\":\"IMAX\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_94_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Fetch me the list of IMAX movie releases in theaters near LA for the next week.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.\n  function_name: 'get_theater_movie_releases' or null,\n  // The location of the theaters.\n  location: string,\n  // The number of days for which releases are required from current date.\n  timeframe: int,\n  // Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'\n  format: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_theater_movie_releases',\n  location: 'LA',\n  timeframe: 7,\n  format: 'IMAX',\n}", "metadata": {"logprobs": null, "prompt_tokens": 241, "output_tokens": 33, "total_tokens": 274, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2efe69dd-1a95-42eb-8289-8de3d191f33b", "event_id": "2efe69dd-1a95-42eb-8289-8de3d191f33b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8120, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_94", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "59800ee5-1256-46f0-b8d0-4de203685df6", "event_id": "2de2c76e-5e6f-40c2-b12c-17dabc508881", "parent_event_id": "59800ee5-1256-46f0-b8d0-4de203685df6", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 567, "start_time": "2024-06-19T03:23:59.409Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_98", "variant_name": null}, {"function_name": "Fn_simple_98", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_98\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_98_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the factorial of the number 5\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the factorial of a given number.\n  function_name: 'math.factorial' or null,\n  // The number to compute factorial.\n  number: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"math.factorial\",\n  \"number\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 155, "output_tokens": 19, "total_tokens": 174, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "59800ee5-1256-46f0-b8d0-4de203685df6", "event_id": "59800ee5-1256-46f0-b8d0-4de203685df6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8145, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_98", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f5de41f4-e2d3-42bf-92b8-a514fa4b5148", "event_id": "f393a4b2-2264-4675-ab88-0620c64eaf94", "parent_event_id": "f5de41f4-e2d3-42bf-92b8-a514fa4b5148", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 967, "start_time": "2024-06-19T03:23:59.131Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_95", "variant_name": null}, {"function_name": "Fn_simple_95", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_95\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"user_id\":43523,\"update_info\":{\"name\":\"John Doe\",\"email\":\"johndoe@email.com\"},\"meta\":\"Value\",\"database\":\"CustomerInfo\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_95_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.\n\nHere is the function to invoke:\n\n\n{\n  // Update user information in the database.\n  function_name: 'update_user_info' or null,\n  // The user ID of the customer.\n  user_id: int,\n  // The new information to update.\n  update_info: {\n    // The customer's updated name.\n    name: string or null,\n    // The customer's updated email.\n    email: string or null,\n  },\n  // The database where the user's information is stored. (default: CustomerInfo)\n  database: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'update_user_info',\n  user_id: 43523,\n  update_info: {\n    name: 'John Doe',\n    email: 'johndoe@email.com'\n  },\n  database: 'CustomerInfo'\n}", "metadata": {"logprobs": null, "prompt_tokens": 247, "output_tokens": 51, "total_tokens": 298, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f5de41f4-e2d3-42bf-92b8-a514fa4b5148", "event_id": "f5de41f4-e2d3-42bf-92b8-a514fa4b5148", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8268, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_95", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f72b11d4-f898-4da0-a762-24524c3a50f5", "event_id": "17ff4341-96da-4e74-a5fd-3347d1d889af", "parent_event_id": "f72b11d4-f898-4da0-a762-24524c3a50f5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 805, "start_time": "2024-06-19T03:23:59.462Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_99", "variant_name": null}, {"function_name": "Fn_simple_99", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_99\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"hours\":6,\"minutes\":30,\"meta\":\"Value\",\"round_to\":2}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_99_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What will be the angle between the hour and minute hands of a clock at 6:30 PM?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the angle between the hour and minute hands of a clock at a given time.\n  function_name: 'calculate_clock_angle' or null,\n  // The hour on the clock face.\n  hours: int,\n  // The minutes on the clock face.\n  minutes: int,\n  // The number of decimal places to round the result to, default is 2.\n  round_to: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_clock_angle\",\n  \"hours\": 6,\n  \"minutes\": 30,\n  \"round_to\": 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 217, "output_tokens": 34, "total_tokens": 251, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f72b11d4-f898-4da0-a762-24524c3a50f5", "event_id": "f72b11d4-f898-4da0-a762-24524c3a50f5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8437, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_99", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3e883ee2-d7d9-4308-9eea-83e11fd4ec63", "event_id": "1ebdec07-0110-4d9b-83ae-ce75907d832b", "parent_event_id": "3e883ee2-d7d9-4308-9eea-83e11fd4ec63", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 562, "start_time": "2024-06-19T03:23:59.776Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_101", "variant_name": null}, {"function_name": "Fn_simple_101", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_101\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"distance_in_light_years\":4,\"meta\":\"Value\",\"speed_of_light\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_101_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How much time will it take for the light to reach earth from a star 4 light years away?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the time taken for light to travel from a celestial body to another.\n  function_name: 'light_travel_time' or null,\n  // The distance between the two celestial bodies in light years.\n  distance_in_light_years: int,\n  // The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\n  speed_of_light: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"light_travel_time\",\n  \"distance_in_light_years\": 4\n}", "metadata": {"logprobs": null, "prompt_tokens": 214, "output_tokens": 22, "total_tokens": 236, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3e883ee2-d7d9-4308-9eea-83e11fd4ec63", "event_id": "3e883ee2-d7d9-4308-9eea-83e11fd4ec63", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8507, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_101", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8d948532-4282-4d26-92fa-33fb1276c8bb", "event_id": "eeacb45c-fd5c-48a4-87f1-d3df35f1b65d", "parent_event_id": "8d948532-4282-4d26-92fa-33fb1276c8bb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1171, "start_time": "2024-06-19T03:23:59.375Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_97", "variant_name": null}, {"function_name": "Fn_simple_97", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_97\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"table\":\"user\",\"conditions\":[{\"field\":\"age\",\"operation\":\">\",\"value\":\"25\"},{\"field\":\"job\",\"operation\":\"=\",\"value\":\"engineer\"}],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_97_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find records in database in user table where age is greater than 25 and job is 'engineer'.\n\nHere is the function to invoke:\n\n\n{\n  // Query the database based on certain conditions.\n  function_name: 'database.query' or null,\n  // Name of the table to query.\n  table: string,\n  // Conditions for the query.\n  conditions: [\n    {\n      // The field to apply the condition.\n      field: string,\n      // The operation to be performed.\n      operation: string,\n      // The value to be compared.\n      value: string,\n    }\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'database.query',\n  table: 'user',\n  conditions: [\n    {\n      field: 'age',\n      operation: '>',\n      value: '25',\n    },\n    {\n      field: 'job',\n      operation: '=',\n      value: 'engineer',\n    }\n  ],\n}", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 65, "total_tokens": 289, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8d948532-4282-4d26-92fa-33fb1276c8bb", "event_id": "8d948532-4282-4d26-92fa-33fb1276c8bb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8716, "start_time": "2024-06-19T03:23:51.831Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_97", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "72ecc030-77d2-42a6-a29f-a02f6cce64d8", "event_id": "19edbb46-6813-4fd0-aeef-94de8e7c2b05", "parent_event_id": "72ecc030-77d2-42a6-a29f-a02f6cce64d8", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 620, "start_time": "2024-06-19T03:23:59.952Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_105", "variant_name": null}, {"function_name": "Fn_simple_105", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_105\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base\":6,\"height\":10,\"meta\":\"Value\",\"unit\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_105_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area of a triangle with base 6 and height 10.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area of a triangle.\n  function_name: 'geometry.area_triangle' or null,\n  // The length of the base of the triangle.\n  base: int,\n  // The height of the triangle from the base.\n  height: int,\n  // The measurement unit for the area. Defaults to square meters.\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'geometry.area_triangle',\n  base: 6,\n  height: 10\n}", "metadata": {"logprobs": null, "prompt_tokens": 200, "output_tokens": 23, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "72ecc030-77d2-42a6-a29f-a02f6cce64d8", "event_id": "72ecc030-77d2-42a6-a29f-a02f6cce64d8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8741, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_105", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0797ce67-e171-46d2-9f47-69745a47cbaa", "event_id": "bb593c74-d546-4c42-8377-2d94c6eea785", "parent_event_id": "0797ce67-e171-46d2-9f47-69745a47cbaa", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 755, "start_time": "2024-06-19T03:23:59.884Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_103", "variant_name": null}, {"function_name": "Fn_simple_103", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_103\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"body1\":\"Earth\",\"body2\":\"Moon\",\"meta\":\"Value\",\"unit\":\"miles\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_103_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the distance in milesfrom the Earth to the Moon?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the distance between two celestial bodies.\n  function_name: 'calculate_distance' or null,\n  // The first celestial body.\n  body1: string,\n  // The second celestial body.\n  body2: string,\n  // The unit of measurement, default is 'km'.\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_distance\",\n  \"body1\": \"Earth\",\n  \"body2\": \"Moon\",\n  \"unit\": \"miles\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 35, "total_tokens": 225, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0797ce67-e171-46d2-9f47-69745a47cbaa", "event_id": "0797ce67-e171-46d2-9f47-69745a47cbaa", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8808, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_103", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "309c642a-c67c-4b82-9512-1c35dc0a2ceb", "event_id": "6b5fc2ed-5e5f-4d2b-b544-e4e8b6a42941", "parent_event_id": "309c642a-c67c-4b82-9512-1c35dc0a2ceb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 996, "start_time": "2024-06-19T03:23:59.674Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_100", "variant_name": null}, {"function_name": "Fn_simple_100", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_100\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": null}, "error": {"code": 2, "message": "Failed to coerce value: Error parsing '<root>': Unparsed field: end_range\n  Error parsing 'end_range': Expected float, got 2 * Math.PI.\n  String(\n      \"2 * Math.PI\",\n  )", "traceback": null, "override": null}, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.\n\nHere is the function to invoke:\n\n\n{\n  // Plot a sine wave for a given frequency in a given range.\n  function_name: 'plot_sine_wave' or null,\n  // Start of the range in radians. Four decimal places.\n  start_range: float,\n  // End of the range in radians. Four decimal places.\n  end_range: float,\n  // Frequency of the sine wave in Hz.\n  frequency: int,\n  // Amplitude of the sine wave. Default is 1.\n  amplitude: int or null,\n  // Phase shift of the sine wave in radians. Default is 0.\n  phase_shift: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"plot_sine_wave\",\n  \"start_range\": 0,\n  \"end_range\": 2 * Math.PI,\n  \"frequency\": 5,\n  \"amplitude\": 1,\n  \"phase_shift\": 0\n}", "metadata": {"logprobs": null, "prompt_tokens": 256, "output_tokens": 55, "total_tokens": 311, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4069edbe-5377-442d-aace-4fd5d107553e", "event_id": "fd03c149-0e5d-4a86-9d8e-ecd6aae9df8d", "parent_event_id": "4069edbe-5377-442d-aace-4fd5d107553e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 695, "start_time": "2024-06-19T03:23:59.977Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_106", "variant_name": null}, {"function_name": "Fn_simple_106", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_106\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base\":3,\"exponent\":4,\"meta\":\"Value\",\"mod\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_106_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the power of 3 raised to the power 4.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the power of one number raised to another.\n  function_name: 'math.power' or null,\n  // The base number.\n  base: int,\n  // The exponent.\n  exponent: int,\n  // The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided.\n  mod: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"math.power\",\n  \"base\": 3,\n  \"exponent\": 4\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 196, "output_tokens": 30, "total_tokens": 226, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "309c642a-c67c-4b82-9512-1c35dc0a2ceb", "event_id": "309c642a-c67c-4b82-9512-1c35dc0a2ceb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8847, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_100", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'baml_py.BamlError'>: \\u001b[33mClient: GPT35Turbo (gpt-3.5-turbo-0125) - 996ms\\u001b[0m\\n\\u001b[34m---PROMPT---\\u001b[0m\\n\\u001b[2m[\\u001b[2mchat\\u001b[0m\\u001b[2m] \\u001b[43msystem: \\u001b[0m\\u001b[2mYou are an expert in composing functions. You are given a question and a set of possible functions.\\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\\nalso point it out. You should only return the function call in tools call sections.\\n\\u001b[43muser: \\u001b[0m\\u001b[2mQuestion: Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.\\n\\nHere is the function to invoke:\\n\\n\\n{\\n  // Plot a sine wave for a given frequency in a given range.\\n  function_name: 'plot_sine_wave' or null,\\n  // Start of the range in radians. Four decimal places.\\n  start_range: float,\\n  // End of the range in radians. Four decimal places.\\n  end_range: float,\\n  // Frequency of the sine wave in Hz.\\n  frequency: int,\\n  // Amplitude of the sine wave. Default is 1.\\n  amplitude: int or null,\\n  // Phase shift of the sine wave in radians. Default is 0.\\n  phase_shift: int or null,\\n}\\n\\n\\nFunction args in JSON format:\\n\\u001b[0m\\n\\u001b[34m---LLM REPLY---\\u001b[0m\\n\\u001b[2m{\\n  \\\"function_name\\\": \\\"plot_sine_wave\\\",\\n  \\\"start_range\\\": 0,\\n  \\\"end_range\\\": 2 * Math.PI,\\n  \\\"frequency\\\": 5,\\n  \\\"amplitude\\\": 1,\\n  \\\"phase_shift\\\": 0\\n}\\u001b[0m\\n\\u001b[34m---Parsed Response---\\u001b[0m\\n\\u001b[31mFailed to coerce value: Error parsing '<root>': Unparsed field: end_range\\n  Error parsing 'end_range': Expected float, got 2 * Math.PI.\\n  String(\\n      \\\"2 * Math.PI\\\",\\n  )\\u001b[0m\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4069edbe-5377-442d-aace-4fd5d107553e", "event_id": "4069edbe-5377-442d-aace-4fd5d107553e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8848, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_106", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4ba44767-7e4b-4bcb-a114-7d77146eacfe", "event_id": "07b20541-11bf-4432-ad45-c9977956cd7a", "parent_event_id": "4ba44767-7e4b-4bcb-a114-7d77146eacfe", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 806, "start_time": "2024-06-19T03:23:59.875Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_102", "variant_name": null}, {"function_name": "Fn_simple_102", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_102\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"distance\":450,\"time\":20,\"meta\":\"Value\",\"to_unit\":\"km/h\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_102_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the speed of an object based on the distance travelled and the time taken.\n  function_name: 'calculate_speed' or null,\n  // The distance the object travelled in meters.\n  distance: int,\n  // The time it took for the object to travel in seconds.\n  time: int,\n  // The unit in which the speed should be calculated, default is m/s.\n  to_unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_speed',\n  distance: 450,\n  time: 20,\n  to_unit: 'km/h',\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 30, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4ba44767-7e4b-4bcb-a114-7d77146eacfe", "event_id": "4ba44767-7e4b-4bcb-a114-7d77146eacfe", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8850, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_102", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "26ded585-77c7-44d4-88b2-b2cc964f6bf9", "event_id": "6dc9addd-0c7d-41f0-a3dc-0eac7193e34d", "parent_event_id": "26ded585-77c7-44d4-88b2-b2cc964f6bf9", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 789, "start_time": "2024-06-19T03:23:59.920Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_104", "variant_name": null}, {"function_name": "Fn_simple_104", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_104\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"polynomial\":[3.0,2.0,-4.0],\"limits\":[-1.0,2.0],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_104_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area under the curve for a given polynomial function within a specified interval.\n  function_name: 'mathematics.calculate_area_under_curve' or null,\n  // The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term.\n  polynomial: float[],\n  // A list of two numbers specifying the lower and upper limit for the integration interval.\n  limits: float[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"mathematics.calculate_area_under_curve\",\n  \"polynomial\": [3, 2, -4],\n  \"limits\": [-1, 2]\n}", "metadata": {"logprobs": null, "prompt_tokens": 253, "output_tokens": 39, "total_tokens": 292, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "26ded585-77c7-44d4-88b2-b2cc964f6bf9", "event_id": "26ded585-77c7-44d4-88b2-b2cc964f6bf9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 8878, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_104", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1e7bf710-acd1-464b-9e1a-5896c4dc05a1", "event_id": "717ffd77-9569-4d2e-a38f-7306b88c4565", "parent_event_id": "1e7bf710-acd1-464b-9e1a-5896c4dc05a1", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 811, "start_time": "2024-06-19T03:24:00.100Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_107", "variant_name": null}, {"function_name": "Fn_simple_107", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_107\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"dataset\":\"your_dataset_name\",\"max_depth\":5,\"n_estimators\":100,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_107_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100.\n\nHere is the function to invoke:\n\n\n{\n  // Train a Random Forest classifier with the specified parameters.\n  function_name: 'train_random_forest_classifier' or null,\n  // The dataset to train the classifier on.\n  dataset: string,\n  // The maximum depth of the trees in the forest.\n  max_depth: int,\n  // The number of trees in the forest.\n  n_estimators: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"train_random_forest_classifier\",\n  \"dataset\": \"your_dataset_name\",\n  \"max_depth\": 5,\n  \"n_estimators\": 100\n}", "metadata": {"logprobs": null, "prompt_tokens": 214, "output_tokens": 39, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1e7bf710-acd1-464b-9e1a-5896c4dc05a1", "event_id": "1e7bf710-acd1-464b-9e1a-5896c4dc05a1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9080, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_107", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "20aa5c40-2920-4258-868b-9aab9c821e61", "event_id": "13e7cb85-0bcf-48de-9717-cd4cf0467d46", "parent_event_id": "20aa5c40-2920-4258-868b-9aab9c821e61", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 936, "start_time": "2024-06-19T03:24:00.271Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_108", "variant_name": null}, {"function_name": "Fn_simple_108", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_108\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"weight\":70,\"height\":175,\"meta\":\"Value\",\"system\":\"metric\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_108_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the Body Mass Index for a person with a weight of 70 kg and a height of 175 cm.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the Body Mass Index (BMI) for a person based on their weight and height.\n  function_name: 'calculate_bmi' or null,\n  // The weight of the person in kilograms.\n  weight: int,\n  // The height of the person in centimeters.\n  height: int,\n  // The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\n  system: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_bmi',\n  weight: 70,\n  height: 175,\n  system: 'metric'\n}", "metadata": {"logprobs": null, "prompt_tokens": 227, "output_tokens": 29, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "20aa5c40-2920-4258-868b-9aab9c821e61", "event_id": "20aa5c40-2920-4258-868b-9aab9c821e61", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9376, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_108", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "55773fab-b3cc-4296-9421-468d42a7b810", "event_id": "ba7b8dc3-d5ff-4e26-8a0f-b3d9073a1fea", "parent_event_id": "55773fab-b3cc-4296-9421-468d42a7b810", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 695, "start_time": "2024-06-19T03:24:00.680Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_115", "variant_name": null}, {"function_name": "Fn_simple_115", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_115\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"trials\":10,\"successes\":5,\"meta\":\"Value\",\"p\":0.5}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_115_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the probability of getting exactly 5 heads in 10 fair coin tosses.\n\nHere is the function to invoke:\n\n\n{\n  // Compute the probability of having 'success' outcome from binomial distribution.\n  function_name: 'prob_dist.binomial' or null,\n  // The number of independent experiments.\n  trials: int,\n  // The number of success events.\n  successes: int,\n  // The probability of success on any given trial, defaults to 0.5\n  p: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'prob_dist.binomial',\n  trials: 10,\n  successes: 5,\n  p: 0.5\n}", "metadata": {"logprobs": null, "prompt_tokens": 208, "output_tokens": 32, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "55773fab-b3cc-4296-9421-468d42a7b810", "event_id": "55773fab-b3cc-4296-9421-468d42a7b810", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9544, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_115", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "97b2cc38-b718-4bdd-82f7-d777838b2635", "event_id": "5e473250-6024-4fae-a75c-01a3d68b7d2b", "parent_event_id": "97b2cc38-b718-4bdd-82f7-d777838b2635", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1091, "start_time": "2024-06-19T03:24:00.339Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_109", "variant_name": null}, {"function_name": "Fn_simple_109", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_109\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"predictors\":[\"Age\",\"Income\",\"Education\"],\"target\":\"Purchase_Amount\",\"meta\":\"Value\",\"standardize\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_109_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization.\n\nHere is the function to invoke:\n\n\n{\n  // Build a linear regression model using given predictor variables and a target variable.\n  function_name: 'run_linear_regression' or null,\n  // Array containing the names of predictor variables.\n  predictors: string[],\n  // The name of target variable.\n  target: string,\n  // Option to apply standardization on the predictors. Defaults to False.\n  standardize: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"run_linear_regression\",\n  \"predictors\": [\"Age\", \"Income\", \"Education\"],\n  \"target\": \"Purchase_Amount\",\n  \"standardize\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 222, "output_tokens": 42, "total_tokens": 264, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "97b2cc38-b718-4bdd-82f7-d777838b2635", "event_id": "97b2cc38-b718-4bdd-82f7-d777838b2635", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9599, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_109", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6bb48b54-f441-43b2-ac76-9aa960a4d515", "event_id": "f4e1659e-7abf-46b6-9875-38c38558ae06", "parent_event_id": "6bb48b54-f441-43b2-ac76-9aa960a4d515", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 926, "start_time": "2024-06-19T03:24:00.548Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_111", "variant_name": null}, {"function_name": "Fn_simple_111", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_111\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"bedrooms\":3,\"bathrooms\":2,\"area\":1800,\"location\":\"San Francisco\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_111_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Predict the price of the house in San Francisco with 3 bedrooms, 2 bathrooms and area of 1800 square feet.\n\nHere is the function to invoke:\n\n\n{\n  // Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.\n  function_name: 'predict_house_price' or null,\n  // The number of bedrooms in the house.\n  bedrooms: int,\n  // The number of bathrooms in the house.\n  bathrooms: int,\n  // The area of the house in square feet.\n  area: int,\n  // The location of the house in the format of city name.\n  location: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"predict_house_price\",\n  \"bedrooms\": 3,\n  \"bathrooms\": 2,\n  \"area\": 1800,\n  \"location\": \"San Francisco\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 49, "total_tokens": 285, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6bb48b54-f441-43b2-ac76-9aa960a4d515", "event_id": "6bb48b54-f441-43b2-ac76-9aa960a4d515", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9643, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_111", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cdc9afcb-5bad-423a-a31b-6cf899b781c1", "event_id": "e8ad38df-bc0d-4515-97be-9cc9e60e9626", "parent_event_id": "cdc9afcb-5bad-423a-a31b-6cf899b781c1", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 872, "start_time": "2024-06-19T03:24:00.682Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_116", "variant_name": null}, {"function_name": "Fn_simple_116", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_116\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number_of_trials\":8,\"number_of_successes\":5,\"meta\":\"Value\",\"probability_of_success\":0.5}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_116_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the probability of getting exactly 5 heads in 8 tosses of a fair coin.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.\n  function_name: 'calculate_binomial_probability' or null,\n  // The total number of trials.\n  number_of_trials: int,\n  // The desired number of successful outcomes.\n  number_of_successes: int,\n  // The probability of a successful outcome on any given trial. (default: 0.5)\n  probability_of_success: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_binomial_probability\",\n  \"number_of_trials\": 8,\n  \"number_of_successes\": 5,\n  \"probability_of_success\": 0.5\n}", "metadata": {"logprobs": null, "prompt_tokens": 229, "output_tokens": 43, "total_tokens": 272, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cdc9afcb-5bad-423a-a31b-6cf899b781c1", "event_id": "cdc9afcb-5bad-423a-a31b-6cf899b781c1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9722, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_116", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d6b8235d-96a4-4266-b4e1-97072fef89af", "event_id": "56d46708-fcb4-4219-b49b-00b06658801a", "parent_event_id": "d6b8235d-96a4-4266-b4e1-97072fef89af", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 853, "start_time": "2024-06-19T03:24:00.710Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_117", "variant_name": null}, {"function_name": "Fn_simple_117", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_117\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"total_outcomes\":52,\"event_outcomes\":4,\"meta\":\"Value\",\"round\":2}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_117_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the probability of drawing a king from a well shuffled standard deck of 52 cards?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the probability of an event.\n  function_name: 'probabilities.calculate_single' or null,\n  // The total number of outcomes.\n  total_outcomes: int,\n  // The number of outcomes where the event occurs.\n  event_outcomes: int,\n  // Round the answer to a specified number of decimal places. Defaults to 2.\n  round: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'probabilities.calculate_single',\n  total_outcomes: 52,\n  event_outcomes: 4,\n  round: 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 34, "total_tokens": 244, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d6b8235d-96a4-4266-b4e1-97072fef89af", "event_id": "d6b8235d-96a4-4266-b4e1-97072fef89af", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9732, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_117", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8a5f1ee1-01dd-414b-8f90-b66aa654d906", "event_id": "6face3cb-a328-4ae1-a516-360590cc3b6b", "parent_event_id": "8a5f1ee1-01dd-414b-8f90-b66aa654d906", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1041, "start_time": "2024-06-19T03:24:00.573Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_112", "variant_name": null}, {"function_name": "Fn_simple_112", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_112\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"mu\":0,\"sigma\":1,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_112_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Generate a random number from a normal distribution with mean 0 and standard deviation 1.\n\nHere is the function to invoke:\n\n\n{\n  // Generates a random number from a normal distribution given the mean and standard deviation.\n  function_name: 'random.normalvariate' or null,\n  // Mean of the normal distribution.\n  mu: int,\n  // Standard deviation of the normal distribution.\n  sigma: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"random.normalvariate\",\n  \"mu\": 0,\n  \"sigma\": 1\n}", "metadata": {"logprobs": null, "prompt_tokens": 186, "output_tokens": 27, "total_tokens": 213, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8a5f1ee1-01dd-414b-8f90-b66aa654d906", "event_id": "8a5f1ee1-01dd-414b-8f90-b66aa654d906", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9783, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_112", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "657e491d-8caa-4590-86f1-cf6ad9de6df3", "event_id": "6d7be487-39f1-441e-9ae1-2fc900ac41d4", "parent_event_id": "657e491d-8caa-4590-86f1-cf6ad9de6df3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 957, "start_time": "2024-06-19T03:24:00.679Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_114", "variant_name": null}, {"function_name": "Fn_simple_114", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_114\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"desired_number\":6,\"number_of_rolls\":2,\"meta\":\"Value\",\"die_sides\":6}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_114_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the probability of rolling a six on a six-sided die twice in a row?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.\n  function_name: 'probability.dice_roll' or null,\n  // The number you want to roll.\n  desired_number: int,\n  // How many times you want to roll that number in a row.\n  number_of_rolls: int,\n  // The number of sides on the die (optional; default is 6).\n  die_sides: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"probability.dice_roll\",\n  \"desired_number\": 6,\n  \"number_of_rolls\": 2,\n  \"die_sides\": 6\n}", "metadata": {"logprobs": null, "prompt_tokens": 230, "output_tokens": 40, "total_tokens": 270, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "657e491d-8caa-4590-86f1-cf6ad9de6df3", "event_id": "657e491d-8caa-4590-86f1-cf6ad9de6df3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9805, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_114", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7946a14d-2027-48de-a0ff-d0d683a0a093", "event_id": "a4b3f980-274b-4268-bd16-cc3b0c85fcd7", "parent_event_id": "7946a14d-2027-48de-a0ff-d0d683a0a093", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1001, "start_time": "2024-06-19T03:24:00.640Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_113", "variant_name": null}, {"function_name": "Fn_simple_113", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_113\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"total_outcomes\":52,\"favorable_outcomes\":4,\"meta\":\"Value\",\"round_to\":2}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_113_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the probability of drawing a king from a deck of cards.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the probability of an event.\n  function_name: 'calculate_probability' or null,\n  // Total number of possible outcomes.\n  total_outcomes: int,\n  // Number of outcomes considered as 'successful'.\n  favorable_outcomes: int,\n  // Number of decimal places to round the result to. (default: 2)\n  round_to: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function Call:\n```json\n{\n  \"function_name\": \"calculate_probability\",\n  \"total_outcomes\": 52,\n  \"favorable_outcomes\": 4,\n  \"round_to\": 2\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 45, "total_tokens": 247, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7946a14d-2027-48de-a0ff-d0d683a0a093", "event_id": "7946a14d-2027-48de-a0ff-d0d683a0a093", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9810, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_113", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "29ba913b-8e69-4cd0-bde9-cf6e7fa29fb5", "event_id": "d5351757-a9fc-48f0-9d98-5ae898580bb8", "parent_event_id": "29ba913b-8e69-4cd0-bde9-cf6e7fa29fb5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 787, "start_time": "2024-06-19T03:24:00.912Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_118", "variant_name": null}, {"function_name": "Fn_simple_118", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_118\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"success_outcomes\":13,\"total_outcomes\":52,\"meta\":\"Value\",\"format_as_ratio\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_118_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the probability of an event.\n  function_name: 'probability_of_event' or null,\n  // The number of successful outcomes.\n  success_outcomes: int,\n  // The total number of possible outcomes.\n  total_outcomes: int,\n  // When true, formats the output as a ratio instead of a decimal. Default is false.\n  format_as_ratio: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"probability_of_event\",\n  \"success_outcomes\": 13,\n  \"total_outcomes\": 52,\n  \"format_as_ratio\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 38, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "29ba913b-8e69-4cd0-bde9-cf6e7fa29fb5", "event_id": "29ba913b-8e69-4cd0-bde9-cf6e7fa29fb5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 9868, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_118", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2520e08f-c2a6-420a-8345-fb69b29389db", "event_id": "3f289f16-f97b-4b7f-bfdb-f0d70b9fff1e", "parent_event_id": "2520e08f-c2a6-420a-8345-fb69b29389db", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 782, "start_time": "2024-06-19T03:24:01.554Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_123", "variant_name": null}, {"function_name": "Fn_simple_123", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_123\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"table\":[10,20,30,40],\"meta\":\"Value\",\"alpha\":0.05}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_123_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]\n\nHere is the function to invoke:\n\n\n{\n  // Performs a Chi-Squared test for independence on a 2x2 contingency table.\n  function_name: 'chi_squared_test' or null,\n  // A 2x2 contingency table presented in array form.\n  table: int[],\n  // Significance level for the Chi-Squared test. Default is 0.05.\n  alpha: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"chi_squared_test\",\n  \"table\": [10, 20, 30, 40],\n  \"alpha\": 0.05\n}", "metadata": {"logprobs": null, "prompt_tokens": 217, "output_tokens": 37, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ce886ab8-4325-479f-9c7a-141ddc3296b1", "event_id": "33732a7a-0f4b-41d5-8b8c-2f3f9655c8f5", "parent_event_id": "ce886ab8-4325-479f-9c7a-141ddc3296b1", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 862, "start_time": "2024-06-19T03:24:01.475Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_122", "variant_name": null}, {"function_name": "Fn_simple_122", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_122\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"num_trials\":100,\"num_success\":60,\"prob_success\":0.5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_122_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the probability of observing 60 heads if I flip a coin 100 times with probability of heads 0.5.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the probability of an outcome based on the binomial distribution\n  function_name: 'calc_binomial_prob' or null,\n  // Number of independent experiments.\n  num_trials: int,\n  // Number of times the event of interest has occurred.\n  num_success: int,\n  // Probability of the event of interest on any single experiment.\n  prob_success: float,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calc_binomial_prob\",\n  \"num_trials\": 100,\n  \"num_success\": 60,\n  \"prob_success\": 0.5\n}", "metadata": {"logprobs": null, "prompt_tokens": 214, "output_tokens": 39, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2520e08f-c2a6-420a-8345-fb69b29389db", "event_id": "2520e08f-c2a6-420a-8345-fb69b29389db", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10505, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_123", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ce886ab8-4325-479f-9c7a-141ddc3296b1", "event_id": "ce886ab8-4325-479f-9c7a-141ddc3296b1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10506, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_122", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b6a5736e-853a-47a5-adcf-b7d1eab686e7", "event_id": "53f38614-6cec-4ab9-a902-bf168a5bd783", "parent_event_id": "b6a5736e-853a-47a5-adcf-b7d1eab686e7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1152, "start_time": "2024-06-19T03:24:01.208Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_119", "variant_name": null}, {"function_name": "Fn_simple_119", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_119\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"array_1\":[10,15,12,14,11],\"array_2\":[18,16,17,20,22],\"alpha\":0.05,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_119_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05\n\nHere is the function to invoke:\n\n\n{\n  // Perform a two-sample t-test for two given arrays.\n  function_name: 'stats.t_test' or null,\n  // First array of data.\n  array_1: int[],\n  // Second array of data.\n  array_2: int[],\n  // Significance level for hypothesis testing.\n  alpha: float,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"stats.t_test\",\n  \"array_1\": [10, 15, 12, 14, 11],\n  \"array_2\": [18, 16, 17, 20, 22],\n  \"alpha\": 0.05\n}", "metadata": {"logprobs": null, "prompt_tokens": 233, "output_tokens": 63, "total_tokens": 296, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b6a5736e-853a-47a5-adcf-b7d1eab686e7", "event_id": "b6a5736e-853a-47a5-adcf-b7d1eab686e7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10529, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_119", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "716b381a-8eac-499b-ab64-60d50cb7bf9e", "event_id": "31768082-65f8-4d6c-a41a-1bdf65ccfe37", "parent_event_id": "716b381a-8eac-499b-ab64-60d50cb7bf9e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 767, "start_time": "2024-06-19T03:24:01.637Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_126", "variant_name": null}, {"function_name": "Fn_simple_126", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_126\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"area\":2500,\"rooms\":5,\"year\":1990,\"location\":\"San Francisco\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_126_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Predict house price in San Francisco based on its area of 2500 square feet, number of rooms as 5 and year of construction is 1990.\n\nHere is the function to invoke:\n\n\n{\n  // Predict house price based on area, number of rooms and year of construction.\n  function_name: 'predict_house_price' or null,\n  // Area of the house in square feet.\n  area: int,\n  // Number of rooms in the house.\n  rooms: int,\n  // Year when the house was constructed.\n  year: int,\n  // The location or city of the house.\n  location: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'predict_house_price',\n  area: 2500,\n  rooms: 5,\n  year: 1990,\n  location: 'San Francisco'\n}", "metadata": {"logprobs": null, "prompt_tokens": 230, "output_tokens": 38, "total_tokens": 268, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "716b381a-8eac-499b-ab64-60d50cb7bf9e", "event_id": "716b381a-8eac-499b-ab64-60d50cb7bf9e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10573, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_126", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "339d5884-9c2b-415d-99cc-d6c7f62ce385", "event_id": "c903cd6f-d2d0-461e-b878-6a3349e58cc9", "parent_event_id": "339d5884-9c2b-415d-99cc-d6c7f62ce385", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1133, "start_time": "2024-06-19T03:24:01.376Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_120", "variant_name": null}, {"function_name": "Fn_simple_120", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_120\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"sample1\":[22,33,42,12,34],\"sample2\":[23,45,44,14,38],\"meta\":\"Value\",\"significance_level\":0.05}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_120_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05.\n\nHere is the function to invoke:\n\n\n{\n  // Conducts a hypothesis test for two independent samples.\n  function_name: 'hypothesis_testing.ttest_ind' or null,\n  // First set of observations (array of numbers).\n  sample1: int[],\n  // Second set of observations (array of numbers).\n  sample2: int[],\n  // Significance level of the test (default: 0.05)\n  significance_level: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"hypothesis_testing.ttest_ind\",\n  \"sample1\": [22,33,42,12,34],\n  \"sample2\": [23,45,44,14,38],\n  \"significance_level\": 0.05\n}", "metadata": {"logprobs": null, "prompt_tokens": 247, "output_tokens": 59, "total_tokens": 306, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "339d5884-9c2b-415d-99cc-d6c7f62ce385", "event_id": "339d5884-9c2b-415d-99cc-d6c7f62ce385", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10678, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_120", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "997923a3-bdd3-47f1-9533-9c46ac7b2adf", "event_id": "76c196d3-3e77-419b-96f9-e75d5e02610b", "parent_event_id": "997923a3-bdd3-47f1-9533-9c46ac7b2adf", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 922, "start_time": "2024-06-19T03:24:01.642Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_127", "variant_name": null}, {"function_name": "Fn_simple_127", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_127\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"dataset_path\":\"C:/data/cars.csv\",\"independent_variables\":[\"engine_size\",\"fuel_economy\"],\"dependent_variable\":\"car_price\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_127_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the coefficient of determination of a regression model.\n  function_name: 'linear_regression.get_r_squared' or null,\n  // Path to the CSV dataset file.\n  dataset_path: string,\n  // The independent variables to use in the regression model.\n  independent_variables: string[],\n  // The dependent variable to predict in the regression model.\n  dependent_variable: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"linear_regression.get_r_squared\",\n  \"dataset_path\": \"C:/data/cars.csv\",\n  \"independent_variables\": [\"engine_size\", \"fuel_economy\"],\n  \"dependent_variable\": \"car_price\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 225, "output_tokens": 51, "total_tokens": 276, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "997923a3-bdd3-47f1-9533-9c46ac7b2adf", "event_id": "997923a3-bdd3-47f1-9533-9c46ac7b2adf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10733, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_127", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7ab44231-ab64-4198-8861-8cb5c5936625", "event_id": "17b8ae6a-4617-45fd-a20e-b74a31b291bc", "parent_event_id": "7ab44231-ab64-4198-8861-8cb5c5936625", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 956, "start_time": "2024-06-19T03:24:01.615Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_125", "variant_name": null}, {"function_name": "Fn_simple_125", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_125\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"dataset_A\":[12,24,36],\"dataset_B\":[15,30,45],\"meta\":\"Value\",\"alpha\":0.05}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_125_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45.\n\nHere is the function to invoke:\n\n\n{\n  // Perform a statistical t-test to check if the means of two independent datasets are statistically different.\n  function_name: 't_test' or null,\n  // Dataset A for comparison.\n  dataset_A: int[],\n  // Dataset B for comparison.\n  dataset_B: int[],\n  // Significance level for the test. Default is 0.05.\n  alpha: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"t_test\",\n  \"dataset_A\": [12, 24, 36],\n  \"dataset_B\": [15, 30, 45],\n  \"alpha\": 0.05\n}", "metadata": {"logprobs": null, "prompt_tokens": 229, "output_tokens": 48, "total_tokens": 277, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7ab44231-ab64-4198-8861-8cb5c5936625", "event_id": "7ab44231-ab64-4198-8861-8cb5c5936625", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10740, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_125", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a7c13339-9fb7-4a59-b59f-3272e8597df0", "event_id": "6b5fc1cd-d669-489b-9927-bd1d39033fcf", "parent_event_id": "a7c13339-9fb7-4a59-b59f-3272e8597df0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 872, "start_time": "2024-06-19T03:24:01.700Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_128", "variant_name": null}, {"function_name": "Fn_simple_128", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_128\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"cash_flows\":[200,300,400,500],\"discount_rate\":0.1,\"meta\":\"Value\",\"initial_investment\":2000}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_128_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.\n  function_name: 'calculate_NPV' or null,\n  // Series of future cash flows.\n  cash_flows: int[],\n  // The discount rate to use.\n  discount_rate: float,\n  // The initial investment. Default is 0 if not specified.\n  initial_investment: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_NPV\",\n  \"cash_flows\": [200, 300, 400, 500],\n  \"discount_rate\": 0.10,\n  \"initial_investment\": 2000\n}", "metadata": {"logprobs": null, "prompt_tokens": 248, "output_tokens": 50, "total_tokens": 298, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a7c13339-9fb7-4a59-b59f-3272e8597df0", "event_id": "a7c13339-9fb7-4a59-b59f-3272e8597df0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10741, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_128", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4024161e-5621-498b-ad34-1f76934be65a", "event_id": "85cbddb2-e844-4243-b215-ccba95aba170", "parent_event_id": "4024161e-5621-498b-ad34-1f76934be65a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1280, "start_time": "2024-06-19T03:24:01.431Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_121", "variant_name": null}, {"function_name": "Fn_simple_121", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_121\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"group1\":[3,4,5,6,4],\"group2\":[7,8,9,8,7],\"meta\":\"Value\",\"equal_variance\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_121_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance.\n\nHere is the function to invoke:\n\n\n{\n  // Runs a two sample t-test for two given data groups.\n  function_name: 'run_two_sample_ttest' or null,\n  // First group of data points.\n  group1: int[],\n  // Second group of data points.\n  group2: int[],\n  // Assumption about whether the two samples have equal variance. (default: True)\n  equal_variance: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"run_two_sample_ttest\",\n  \"group1\": [3, 4, 5, 6, 4],\n  \"group2\": [7, 8, 9, 8, 7],\n  \"equal_variance\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 243, "output_tokens": 61, "total_tokens": 304, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4024161e-5621-498b-ad34-1f76934be65a", "event_id": "4024161e-5621-498b-ad34-1f76934be65a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10880, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_121", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9f76f9ba-c428-49aa-a8c1-d6c60cfa9caa", "event_id": "3a55c332-9537-459a-9477-7b96becab06d", "parent_event_id": "9f76f9ba-c428-49aa-a8c1-d6c60cfa9caa", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1215, "start_time": "2024-06-19T03:24:01.564Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_124", "variant_name": null}, {"function_name": "Fn_simple_124", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_124\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"group1\":[12.4,15.6,11.2,18.9],\"group2\":[10.5,9.8,15.2,13.8],\"meta\":\"Value\",\"alpha\":0.05}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_124_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05.\n\nHere is the function to invoke:\n\n\n{\n  // Perform a two-sample t-test to determine if there is a significant difference between the means of two independent samples.\n  function_name: 'hypothesis_testing.two_sample_t_test' or null,\n  // Sample observations from group 1.\n  group1: float[],\n  // Sample observations from group 2.\n  group2: float[],\n  // Significance level for the t-test. Default is 0.05.\n  alpha: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"hypothesis_testing.two_sample_t_test\",\n  \"group1\": [12.4, 15.6, 11.2, 18.9],\n  \"group2\": [10.5, 9.8, 15.2, 13.8],\n  \"alpha\": 0.05\n}", "metadata": {"logprobs": null, "prompt_tokens": 286, "output_tokens": 76, "total_tokens": 362, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9f76f9ba-c428-49aa-a8c1-d6c60cfa9caa", "event_id": "9f76f9ba-c428-49aa-a8c1-d6c60cfa9caa", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 10947, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_124", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "75466701-4836-4d7e-b384-519365a4b739", "event_id": "af40ec69-be05-4865-b575-21782a34e437", "parent_event_id": "75466701-4836-4d7e-b384-519365a4b739", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 816, "start_time": "2024-06-19T03:24:02.338Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_129", "variant_name": null}, {"function_name": "Fn_simple_129", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_129\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"total_payout\":50000000,\"outstanding_shares\":100000000,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_129_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares\n  function_name: 'finance.calculate_quarterly_dividend_per_share' or null,\n  // The total amount of dividends paid out in USD\n  total_payout: int,\n  // Total number of outstanding shares\n  outstanding_shares: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"finance.calculate_quarterly_dividend_per_share\",\n  \"total_payout\": 50000000,\n  \"outstanding_shares\": 100000000\n}", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 41, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "93395534-bf22-452c-82c7-2e807c52fd26", "event_id": "1cb3edda-3b12-4bda-86ce-cf50ba5840e2", "parent_event_id": "93395534-bf22-452c-82c7-2e807c52fd26", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 816, "start_time": "2024-06-19T03:24:02.338Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_130", "variant_name": null}, {"function_name": "Fn_simple_130", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_130\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"coupon_payment\":100,\"period\":5,\"discount_rate\":0.04,\"meta\":\"Value\",\"face_value\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_130_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the discounted cash flow of a bond that is giving a coupon payment of $100 annually for next 5 years with discount rate 4%.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.\n  function_name: 'calculate_discounted_cash_flow' or null,\n  // The annual coupon payment.\n  coupon_payment: int,\n  // The time frame in years for which coupon payment is made.\n  period: int,\n  // The discount rate.\n  discount_rate: float,\n  // The face value of the bond, default is 1000.\n  face_value: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_discounted_cash_flow\",\n  \"coupon_payment\": 100,\n  \"period\": 5,\n  \"discount_rate\": 0.04\n}", "metadata": {"logprobs": null, "prompt_tokens": 244, "output_tokens": 39, "total_tokens": 283, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "75466701-4836-4d7e-b384-519365a4b739", "event_id": "75466701-4836-4d7e-b384-519365a4b739", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11323, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_129", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "93395534-bf22-452c-82c7-2e807c52fd26", "event_id": "93395534-bf22-452c-82c7-2e807c52fd26", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11323, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_130", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "054de658-8271-4d4a-9d6f-81874cef6e94", "event_id": "f2af64b9-55e8-4fae-a964-82ecf2d73aff", "parent_event_id": "054de658-8271-4d4a-9d6f-81874cef6e94", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 841, "start_time": "2024-06-19T03:24:02.405Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_132", "variant_name": null}, {"function_name": "Fn_simple_132", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_132\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"principal\":10000,\"rate\":0.05,\"time\":10,\"meta\":\"Value\",\"n\":4}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_132_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate compound interest for an initial principal amount.\n  function_name: 'calculate_compound_interest' or null,\n  // The principal amount that the interest is applied to.\n  principal: int,\n  // The annual interest rate. Enter as a decimal. E.g, 5% is 0.05\n  rate: float,\n  // The time the money is invested for in years.\n  time: int,\n  // The number of times that interest is compounded per time period. Default is 1.\n  n: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_compound_interest',\n  principal: 10000,\n  rate: 0.05,\n  time: 10,\n  n: 4\n}", "metadata": {"logprobs": null, "prompt_tokens": 272, "output_tokens": 39, "total_tokens": 311, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "054de658-8271-4d4a-9d6f-81874cef6e94", "event_id": "054de658-8271-4d4a-9d6f-81874cef6e94", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11415, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_132", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "06077258-5fd7-4823-a12a-477f89471166", "event_id": "cef7963c-d9df-4afa-8b91-87180100b91f", "parent_event_id": "06077258-5fd7-4823-a12a-477f89471166", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 845, "start_time": "2024-06-19T03:24:02.510Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_133", "variant_name": null}, {"function_name": "Fn_simple_133", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_133\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"net_income\":2000000,\"shareholder_equity\":10000000,\"meta\":\"Value\",\"dividends_paid\":200000}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_133_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.\n  function_name: 'calculate_return_on_equity' or null,\n  // The company's net income.\n  net_income: int,\n  // The company's total shareholder's equity.\n  shareholder_equity: int,\n  // The total dividends paid by the company. Optional. If not given, default to 0.\n  dividends_paid: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_return_on_equity',\n  net_income: 2000000,\n  shareholder_equity: 10000000,\n  dividends_paid: 200000\n}", "metadata": {"logprobs": null, "prompt_tokens": 247, "output_tokens": 40, "total_tokens": 287, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "06077258-5fd7-4823-a12a-477f89471166", "event_id": "06077258-5fd7-4823-a12a-477f89471166", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11524, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_133", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "da7634a0-c828-45c0-8412-e12eebe269dd", "event_id": "e25a6136-df3e-4523-9bfc-f4a1241fa8b8", "parent_event_id": "da7634a0-c828-45c0-8412-e12eebe269dd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 911, "start_time": "2024-06-19T03:24:02.573Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_136", "variant_name": null}, {"function_name": "Fn_simple_136", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_136\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"purchase_price\":20,\"sale_price\":25,\"meta\":\"Value\",\"dividend\":2}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_136_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the return on investment for a stock bought at $20, sold at $25, with a dividend of $2.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.\n  function_name: 'calculate_return_on_investment' or null,\n  // The price the stock was bought at.\n  purchase_price: int,\n  // The price the stock was sold at.\n  sale_price: int,\n  // Any dividends received from the stock.\n  dividend: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_return_on_investment\",\n  \"purchase_price\": 20,\n  \"sale_price\": 25,\n  \"dividend\": 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 223, "output_tokens": 38, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "da7634a0-c828-45c0-8412-e12eebe269dd", "event_id": "da7634a0-c828-45c0-8412-e12eebe269dd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11654, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_136", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2800875c-43b7-4f22-a275-f0386d9cfa28", "event_id": "5fde5c84-a6ba-483b-8f25-a5c821868552", "parent_event_id": "2800875c-43b7-4f22-a275-f0386d9cfa28", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 933, "start_time": "2024-06-19T03:24:02.565Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_134", "variant_name": null}, {"function_name": "Fn_simple_134", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_134\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"present_value\":5000,\"annual_interest_rate\":0.05,\"time_years\":3,\"meta\":\"Value\",\"compounding_periods_per_year\":12}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_134_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.\n  function_name: 'finance.predict_future_value' or null,\n  // The present value of the investment.\n  present_value: int,\n  // The annual interest rate of the investment.\n  annual_interest_rate: float,\n  // The number of times that interest is compounded per year. Default is 1 (annually).\n  compounding_periods_per_year: int or null,\n  // The investment horizon in years.\n  time_years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"finance.predict_future_value\",\n  \"present_value\": 5000,\n  \"annual_interest_rate\": 0.05,\n  \"compounding_periods_per_year\": 12,\n  \"time_years\": 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 261, "output_tokens": 52, "total_tokens": 313, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2800875c-43b7-4f22-a275-f0386d9cfa28", "event_id": "2800875c-43b7-4f22-a275-f0386d9cfa28", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11667, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_134", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "df81d867-9216-40d5-aa1d-ed109d28d068", "event_id": "8217cfd8-2bfa-42de-a681-5ef04e146ec3", "parent_event_id": "df81d867-9216-40d5-aa1d-ed109d28d068", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 992, "start_time": "2024-06-19T03:24:02.572Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_135", "variant_name": null}, {"function_name": "Fn_simple_135", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_135\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"investment_amount\":5000,\"annual_return\":0.07,\"years\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_135_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%.\n\nHere is the function to invoke:\n\n\n{\n  // Predict the profit for given investment after specified number of years.\n  function_name: 'investment.predictProfit' or null,\n  // The amount invested in dollars.\n  investment_amount: int,\n  // The annual return rate of the investment.\n  annual_return: float,\n  // The time period in years for which the investment is made.\n  years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"investment.predictProfit\",\n  \"investment_amount\": 5000,\n  \"annual_return\": 0.07,\n  \"years\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 38, "total_tokens": 251, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "df81d867-9216-40d5-aa1d-ed109d28d068", "event_id": "df81d867-9216-40d5-aa1d-ed109d28d068", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11732, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_135", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "87121df9-d15e-4e4e-ab0f-0184c7ab4163", "event_id": "b7f8ec0c-760e-4c8f-bcc0-7cb2060adb3e", "parent_event_id": "87121df9-d15e-4e4e-ab0f-0184c7ab4163", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1256, "start_time": "2024-06-19T03:24:02.361Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_131", "variant_name": null}, {"function_name": "Fn_simple_131", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_131\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"cash_flows\":[-50000,10000,15000,20000,25000,30000],\"discount_rate\":0.08,\"years\":[],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_131_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.\n  function_name: 'finance_calculator.npv' or null,\n  // A list of cash flows.\n  cash_flows: int[],\n  // The annual interest rate used to discount the cash flows.\n  discount_rate: float,\n  // A list of years when the cash flow occurs. Default is empty array.\n  years: int[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"finance_calculator.npv\",\n  \"cash_flows\": [-50000, 10000, 15000, 20000, 25000, 30000],\n  \"discount_rate\": 0.08,\n  \"years\": []\n}", "metadata": {"logprobs": null, "prompt_tokens": 253, "output_tokens": 59, "total_tokens": 312, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "87121df9-d15e-4e4e-ab0f-0184c7ab4163", "event_id": "87121df9-d15e-4e4e-ab0f-0184c7ab4163", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11786, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_131", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "363edd6d-ee2e-4501-bb8a-e2770a272464", "event_id": "e8a14b0a-907f-4a66-b952-251e57551b32", "parent_event_id": "363edd6d-ee2e-4501-bb8a-e2770a272464", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 896, "start_time": "2024-06-19T03:24:02.780Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_138", "variant_name": null}, {"function_name": "Fn_simple_138", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_138\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"investment_amount\":5000,\"annual_growth_rate\":0.06,\"holding_period\":5,\"meta\":\"Value\",\"dividends\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_138_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.\n  function_name: 'calculate_stock_return' or null,\n  // The amount of money to invest.\n  investment_amount: int,\n  // The expected annual growth rate of the stock.\n  annual_growth_rate: float,\n  // The number of years you intend to hold the stock.\n  holding_period: int,\n  // Optional. True if the calculation should take into account potential dividends. Default is false.\n  dividends: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_stock_return\",\n  \"investment_amount\": 5000,\n  \"annual_growth_rate\": 0.06,\n  \"holding_period\": 5\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 261, "output_tokens": 44, "total_tokens": 305, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "363edd6d-ee2e-4501-bb8a-e2770a272464", "event_id": "363edd6d-ee2e-4501-bb8a-e2770a272464", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11844, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_138", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "06c41fb8-5ada-47fe-b87a-1d282879ffc0", "event_id": "4ea4b247-1bab-49b8-afed-5a7c0f4d213c", "parent_event_id": "06c41fb8-5ada-47fe-b87a-1d282879ffc0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1024, "start_time": "2024-06-19T03:24:02.712Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_137", "variant_name": null}, {"function_name": "Fn_simple_137", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_137\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"principal\":10000,\"annual_rate\":5.0,\"compounding_freq\":\"Value0\",\"time_in_years\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_137_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate compound interest for a certain time period.\n  function_name: 'compound_interest' or null,\n  // The initial amount of money that was invested or loaned out.\n  principal: int,\n  // The interest rate for a year as a percentage.\n  annual_rate: float,\n  // The number of times that interest is compounded per unit period.\n  compounding_freq: 'monthly' or 'quarterly' or 'annually',\n  // The time the money is invested for in years.\n  time_in_years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"compound_interest\",\n  \"principal\": 10000,\n  \"annual_rate\": 5,\n  \"compounding_freq\": \"monthly\",\n  \"time_in_years\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 249, "output_tokens": 45, "total_tokens": 294, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "06c41fb8-5ada-47fe-b87a-1d282879ffc0", "event_id": "06c41fb8-5ada-47fe-b87a-1d282879ffc0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 11905, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_137", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b1465560-9abf-4d66-9f01-77c35e45f554", "event_id": "f2cf4ecb-e928-4fd7-9b5c-f9d4f54226e5", "parent_event_id": "b1465560-9abf-4d66-9f01-77c35e45f554", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 712, "start_time": "2024-06-19T03:24:03.357Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_142", "variant_name": null}, {"function_name": "Fn_simple_142", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_142\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"metal\":\"Gold\",\"measure\":\"ounce\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_142_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get current Gold price per ounce.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the current price for a specified metal and measure.\n  function_name: 'get_metal_price' or null,\n  // The metal whose price needs to be fetched.\n  metal: string,\n  // The measure unit for price, like 'ounce' or 'kg'.\n  measure: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_metal_price\",\n  \"metal\": \"Gold\",\n  \"measure\": \"ounce\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 181, "output_tokens": 27, "total_tokens": 208, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b1465560-9abf-4d66-9f01-77c35e45f554", "event_id": "b1465560-9abf-4d66-9f01-77c35e45f554", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12237, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_142", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c14deba2-8000-459f-a72e-e61bf96da832", "event_id": "c7dbcc4a-6b73-424c-80e6-74dcece8ea0e", "parent_event_id": "c14deba2-8000-459f-a72e-e61bf96da832", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 993, "start_time": "2024-06-19T03:24:03.156Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_139", "variant_name": null}, {"function_name": "Fn_simple_139", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_139\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"stock\":\"X\",\"invested_amount\":5000,\"expected_annual_return\":0.05,\"years\":7,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_139_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the future value of my portfolio if I invest $5000 in stock 'X' with an expected annual return of 5% for 7 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.\n  function_name: 'portfolio_future_value' or null,\n  // The ticker symbol of the stock.\n  stock: string,\n  // The invested amount in USD.\n  invested_amount: int,\n  // The expected annual return on investment as a decimal. E.g. 5% = 0.05\n  expected_annual_return: float,\n  // The number of years for which the investment is made.\n  years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"portfolio_future_value\",\n  \"stock\": \"X\",\n  \"invested_amount\": 5000,\n  \"expected_annual_return\": 0.05,\n  \"years\": 7\n}", "metadata": {"logprobs": null, "prompt_tokens": 260, "output_tokens": 48, "total_tokens": 308, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c14deba2-8000-459f-a72e-e61bf96da832", "event_id": "c14deba2-8000-459f-a72e-e61bf96da832", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12318, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_139", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "94deeb50-af6d-4d37-b751-ae2a2162bac9", "event_id": "07df6eb0-dd0d-435b-a797-2788c38a5abc", "parent_event_id": "94deeb50-af6d-4d37-b751-ae2a2162bac9", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 975, "start_time": "2024-06-19T03:24:03.248Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_141", "variant_name": null}, {"function_name": "Fn_simple_141", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_141\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"initial_value\":2000,\"final_value\":3000,\"period_in_years\":4,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_141_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\n  function_name: 'calculate_cagr' or null,\n  // The initial investment value.\n  initial_value: int,\n  // The final investment value.\n  final_value: int,\n  // The period of the investment in years.\n  period_in_years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_cagr\",\n  \"initial_value\": 2000,\n  \"final_value\": 3000,\n  \"period_in_years\": 4\n}", "metadata": {"logprobs": null, "prompt_tokens": 228, "output_tokens": 39, "total_tokens": 267, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "94deeb50-af6d-4d37-b751-ae2a2162bac9", "event_id": "94deeb50-af6d-4d37-b751-ae2a2162bac9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12392, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_141", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "37d0cae3-c6a0-4f16-992b-e5ac55f17f3b", "event_id": "2797b039-d5a0-42de-9b4c-2f213fcc0d4b", "parent_event_id": "37d0cae3-c6a0-4f16-992b-e5ac55f17f3b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 799, "start_time": "2024-06-19T03:24:03.486Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_143", "variant_name": null}, {"function_name": "Fn_simple_143", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_143\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company_name\":\"Amazon\",\"date\":\"2022-03-11\",\"meta\":\"Value\",\"exchange\":\"NASDAQ\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_143_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the NASDAQ stock price for the company Amazon at closing March.11, 2022.\n\nHere is the function to invoke:\n\n\n{\n  // Get the closing stock price for a specific company on a specified date.\n  function_name: 'get_stock_price' or null,\n  // Name of the company.\n  company_name: string,\n  // Date of when to get the stock price. Format: yyyy-mm-dd.\n  date: string,\n  // Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'\n  exchange: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_stock_price\",\n  \"company_name\": \"Amazon\",\n  \"date\": \"2022-03-11\",\n  \"exchange\": \"NASDAQ\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 222, "output_tokens": 39, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "37d0cae3-c6a0-4f16-992b-e5ac55f17f3b", "event_id": "37d0cae3-c6a0-4f16-992b-e5ac55f17f3b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12454, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_143", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8e690ba3-b000-48bd-b3ff-988791e20988", "event_id": "168c9306-0875-497b-b8af-0f407ec0f3fd", "parent_event_id": "8e690ba3-b000-48bd-b3ff-988791e20988", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1172, "start_time": "2024-06-19T03:24:03.156Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_140", "variant_name": null}, {"function_name": "Fn_simple_140", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_140\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"yearly_yield\":5.0,\"investment_amount\":2000,\"years\":3,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_140_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.\n  function_name: 'estimate_mutual_fund_return' or null,\n  // The yearly yield of the mutual fund as a percentage.\n  yearly_yield: float,\n  // The initial investment amount in the mutual fund.\n  investment_amount: int,\n  // The time period for which the investment is made in years.\n  years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"estimate_mutual_fund_return\",\n  \"yearly_yield\": 5,\n  \"investment_amount\": 2000,\n  \"years\": 3\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 241, "output_tokens": 44, "total_tokens": 285, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8c60fe68-c78b-4179-9b25-0262515950b7", "event_id": "6e590b43-efee-498c-ac10-16e00f639c7f", "parent_event_id": "8c60fe68-c78b-4179-9b25-0262515950b7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 763, "start_time": "2024-06-19T03:24:03.565Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_145", "variant_name": null}, {"function_name": "Fn_simple_145", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_145\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"indexes\":[\"S&P 500\",\"Dow Jones\"],\"days\":5,\"meta\":\"Value\",\"detailed\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_145_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the market performance of the S&P 500 and the Dow Jones over the past 5 days.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the market performance data for specified indexes over a specified time period.\n  function_name: 'market_performance.get_data' or null,\n  // Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc.\n  indexes: string[],\n  // Number of days in the past for which the performance data is required.\n  days: int,\n  // Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false.\n  detailed: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'market_performance.get_data',\n  indexes: ['S&P 500', 'Dow Jones'],\n  days: 5,\n  detailed: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 268, "output_tokens": 37, "total_tokens": 305, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8e690ba3-b000-48bd-b3ff-988791e20988", "event_id": "8e690ba3-b000-48bd-b3ff-988791e20988", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12496, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_140", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8c60fe68-c78b-4179-9b25-0262515950b7", "event_id": "8c60fe68-c78b-4179-9b25-0262515950b7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12497, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_145", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1d0880c3-4da7-4411-9f18-933133c95cda", "event_id": "6d1c9b06-5e46-49cc-a98d-18bdab975ee7", "parent_event_id": "1d0880c3-4da7-4411-9f18-933133c95cda", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 831, "start_time": "2024-06-19T03:24:03.499Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_144", "variant_name": null}, {"function_name": "Fn_simple_144", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_144\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company\":\"Apple\",\"days\":5,\"meta\":\"Value\",\"exchange\":\"NASDAQ\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_144_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: 'Get stock price of Apple for the last 5 days in NASDAQ.'\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the stock price for a specific company and time frame.\n  function_name: 'get_stock_price' or null,\n  // The ticker symbol of the company.\n  company: string,\n  // Number of past days for which the stock price is required.\n  days: int,\n  // The stock exchange where the company is listed, default is NYSE\n  exchange: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_stock_price\",\n  \"company\": \"Apple\",\n  \"days\": 5,\n  \"exchange\": \"NASDAQ\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 209, "output_tokens": 33, "total_tokens": 242, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1d0880c3-4da7-4411-9f18-933133c95cda", "event_id": "1d0880c3-4da7-4411-9f18-933133c95cda", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12499, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_144", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d5498d41-ffef-463b-8343-542ed11212b5", "event_id": "79629858-cedf-45bd-ae9a-efe3e61e9620", "parent_event_id": "d5498d41-ffef-463b-8343-542ed11212b5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 702, "start_time": "2024-06-19T03:24:03.677Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_147", "variant_name": null}, {"function_name": "Fn_simple_147", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_147\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company\":\"Amazon\",\"days\":3,\"meta\":\"Value\",\"data_type\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_147_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the price of Amazon stock for the last 3 days?\n\nHere is the function to invoke:\n\n\n{\n  // Get stock price data for a given company over a specified number of days.\n  function_name: 'stock_price' or null,\n  // The company name.\n  company: string,\n  // The number of previous days to retrieve data for.\n  days: int,\n  // The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'.\n  data_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"stock_price\",\n  \"company\": \"Amazon\",\n  \"days\": 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 25, "total_tokens": 244, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d5498d41-ffef-463b-8343-542ed11212b5", "event_id": "d5498d41-ffef-463b-8343-542ed11212b5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12547, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_147", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9eba19b1-cb01-4958-9899-97ca00159766", "event_id": "1ab24f49-4b18-4939-bb30-0a700efbf4a7", "parent_event_id": "9eba19b1-cb01-4958-9899-97ca00159766", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 836, "start_time": "2024-06-19T03:24:03.618Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_146", "variant_name": null}, {"function_name": "Fn_simple_146", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_146\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"principal\":5000,\"interest_rate\":0.05,\"period\":10,\"meta\":\"Value\",\"compounding_frequency\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_146_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the compounded interest for a given principal, interest rate, and period.\n  function_name: 'calculate_compounded_interest' or null,\n  // The initial principal.\n  principal: int,\n  // The annual interest rate.\n  interest_rate: float,\n  // The period in years.\n  period: int,\n  // The frequency of compounding per year. Defaults to 'Annually'.\n  compounding_frequency: 'Annually' or 'Semiannually' or 'Quarterly' or 'Monthly' or 'Daily' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_compounded_interest\",\n  \"principal\": 5000,\n  \"interest_rate\": 0.05,\n  \"period\": 10,\n  \"compounding_frequency\": \"Annually\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 254, "output_tokens": 48, "total_tokens": 302, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9eba19b1-cb01-4958-9899-97ca00159766", "event_id": "9eba19b1-cb01-4958-9899-97ca00159766", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12623, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_146", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4480003d-1e68-4fdc-a2a5-3828adf4aea4", "event_id": "e10b862c-c633-45f9-b37d-c466b571bd66", "parent_event_id": "4480003d-1e68-4fdc-a2a5-3828adf4aea4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 726, "start_time": "2024-06-19T03:24:03.737Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_148", "variant_name": null}, {"function_name": "Fn_simple_148", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_148\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"companies\":[\"Microsoft\",\"Google\"],\"duration\":\"2 weeks\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_148_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Retrieve stock prices of Microsoft and Google for the last 2 weeks.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves stock prices for specified companies and duration.\n  function_name: 'get_stock_prices' or null,\n  // List of companies to retrieve stock prices for.\n  companies: string[],\n  // Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc.\n  duration: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_stock_prices',\n  companies: ['Microsoft', 'Google'],\n  duration: '2 weeks',\n}", "metadata": {"logprobs": null, "prompt_tokens": 196, "output_tokens": 27, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4480003d-1e68-4fdc-a2a5-3828adf4aea4", "event_id": "4480003d-1e68-4fdc-a2a5-3828adf4aea4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12632, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_148", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "abf2dd1f-9b12-4cce-b9b4-0b0f46533068", "event_id": "93c96142-0aab-49d1-82dd-ac05b76513cc", "parent_event_id": "abf2dd1f-9b12-4cce-b9b4-0b0f46533068", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 559, "start_time": "2024-06-19T03:24:04.150Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_150", "variant_name": null}, {"function_name": "Fn_simple_150", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_150\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company_names\":[\"Apple\",\"Microsoft\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_150_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the current stock price of Apple and Microsoft?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves the current stock price of the specified companies\n  function_name: 'get_stock_price' or null,\n  // The list of companies for which to retrieve the stock price.\n  company_names: string[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_stock_price',\n  company_names: ['Apple', 'Microsoft']\n}", "metadata": {"logprobs": null, "prompt_tokens": 166, "output_tokens": 21, "total_tokens": 187, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "abf2dd1f-9b12-4cce-b9b4-0b0f46533068", "event_id": "abf2dd1f-9b12-4cce-b9b4-0b0f46533068", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 12878, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_150", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3ec0eaa1-4092-45f6-a345-0a618ed1ad08", "event_id": "f28237f6-8946-41ed-85dd-fbac5a11029e", "parent_event_id": "3ec0eaa1-4092-45f6-a345-0a618ed1ad08", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 814, "start_time": "2024-06-19T03:24:04.070Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_149", "variant_name": null}, {"function_name": "Fn_simple_149", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_149\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"initial_investment\":20000,\"rate_of_return\":0.08,\"years\":5,\"meta\":\"Value\",\"contribution\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_149_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.\n  function_name: 'finance.calculate_future_value' or null,\n  // The initial investment amount.\n  initial_investment: int,\n  // The annual rate of return.\n  rate_of_return: float,\n  // The time frame of the investment in years.\n  years: int,\n  // Optional: Additional regular contributions. Default is 0.\n  contribution: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"finance.calculate_future_value\",\n  \"initial_investment\": 20000,\n  \"rate_of_return\": 0.08,\n  \"years\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 247, "output_tokens": 41, "total_tokens": 288, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3ec0eaa1-4092-45f6-a345-0a618ed1ad08", "event_id": "3ec0eaa1-4092-45f6-a345-0a618ed1ad08", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13052, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_149", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "469cedbf-c599-496e-8be7-e8cfdf832163", "event_id": "b33ab5b5-b0b9-4858-9442-e49dbafeb62c", "parent_event_id": "469cedbf-c599-496e-8be7-e8cfdf832163", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 715, "start_time": "2024-06-19T03:24:04.224Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_151", "variant_name": null}, {"function_name": "Fn_simple_151", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_151\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"deposit\":1000,\"annual_interest_rate\":0.03,\"years\":1,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_151_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.\n  function_name: 'calculate_roi' or null,\n  // The initial deposit amount.\n  deposit: int,\n  // The annual interest rate provided by the bank.\n  annual_interest_rate: float,\n  // The period for which the money is invested.\n  years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_roi',\n  deposit: 1000,\n  annual_interest_rate: 0.03,\n  years: 1,\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 33, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "469cedbf-c599-496e-8be7-e8cfdf832163", "event_id": "469cedbf-c599-496e-8be7-e8cfdf832163", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13108, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_151", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "96ff34e0-0354-43fd-8e15-fae7ef7f419e", "event_id": "cc95a372-c346-42f6-9737-35c10d86520e", "parent_event_id": "96ff34e0-0354-43fd-8e15-fae7ef7f419e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 708, "start_time": "2024-06-19T03:24:04.286Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_152", "variant_name": null}, {"function_name": "Fn_simple_152", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_152\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"country\":\"U.S\",\"year\":2020,\"meta\":\"Value\",\"top_n\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_152_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the highest grossing bank in the U.S for year 2020.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the highest grossing banks in a specified country and year.\n  function_name: 'highest_grossing_banks' or null,\n  // The country to get the data from.\n  country: string,\n  // The year to get the data from.\n  year: int,\n  // Top n banks in terms of grossing. Default is 5\n  top_n: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'highest_grossing_banks',\n  country: 'U.S',\n  year: 2020,\n}", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 28, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "96ff34e0-0354-43fd-8e15-fae7ef7f419e", "event_id": "96ff34e0-0354-43fd-8e15-fae7ef7f419e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13163, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_152", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5c120202-6457-4ee2-a2d7-06b811198e5b", "event_id": "2165c008-0df1-4e0b-9ccb-5e6917d3c4aa", "parent_event_id": "5c120202-6457-4ee2-a2d7-06b811198e5b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 779, "start_time": "2024-06-19T03:24:04.380Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_156", "variant_name": null}, {"function_name": "Fn_simple_156", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_156\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"initial_investment\":1000,\"interest_rate\":0.05,\"duration\":2,\"meta\":\"Value\",\"compounded\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_156_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the future value of an investment given the initial amount, interest rate, and investment duration.\n  function_name: 'calculate_future_value' or null,\n  // The initial investment amount.\n  initial_investment: int,\n  // The annual interest rate in decimal form.\n  interest_rate: float,\n  // The investment duration in years.\n  duration: int,\n  // The number of times the interest is compounded per year. Default is 1 (annual compounding).\n  compounded: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_future_value',\n  initial_investment: 1000,\n  interest_rate: 0.05,\n  duration: 2,\n}", "metadata": {"logprobs": null, "prompt_tokens": 241, "output_tokens": 35, "total_tokens": 276, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5c120202-6457-4ee2-a2d7-06b811198e5b", "event_id": "5c120202-6457-4ee2-a2d7-06b811198e5b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13329, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_156", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f453089d-c8a0-4936-9729-f3876043cf2e", "event_id": "2e7482a2-bc81-4dcc-8d3f-6a3f01ec8d64", "parent_event_id": "f453089d-c8a0-4936-9729-f3876043cf2e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 841, "start_time": "2024-06-19T03:24:04.329Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_153", "variant_name": null}, {"function_name": "Fn_simple_153", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_153\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"investment_amount\":50000,\"annual_yield\":0.05,\"years\":3,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_153_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.\n  function_name: 'calculate_mutual_fund_balance' or null,\n  // The initial total amount invested in the fund.\n  investment_amount: int,\n  // The annual yield rate of the fund.\n  annual_yield: float,\n  // The period of time for the fund to mature.\n  years: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_mutual_fund_balance\",\n  \"investment_amount\": 50000,\n  \"annual_yield\": 0.05,\n  \"years\": 3\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 229, "output_tokens": 45, "total_tokens": 274, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f453089d-c8a0-4936-9729-f3876043cf2e", "event_id": "f453089d-c8a0-4936-9729-f3876043cf2e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13338, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_153", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e7cea09c-b21f-4b12-907d-e87d391af4db", "event_id": "a5dd8699-352f-4d85-9156-c02dc97d4faa", "parent_event_id": "e7cea09c-b21f-4b12-907d-e87d391af4db", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 886, "start_time": "2024-06-19T03:24:04.329Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_154", "variant_name": null}, {"function_name": "Fn_simple_154", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_154\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"principal\":5000,\"rate\":0.03,\"time\":5,\"n\":4,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_154_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the compounded interest on an initial deposit of $5000 at an annual interest rate of 3% for 5 years, compounded quarterly.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the compounded interest for a given initial deposit, interest rate, time and number of times the interest is compounded per unit time.\n  function_name: 'calculate_compounded_interest' or null,\n  // The initial amount of money that is being invested or loaned.\n  principal: int,\n  // The annual interest rate.\n  rate: float,\n  // The number of time periods the money is invested or loaned for.\n  time: int,\n  // The number of times that interest is compounded per unit time.\n  n: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_compounded_interest\",\n  \"principal\": 5000,\n  \"rate\": 0.03,\n  \"time\": 5,\n  \"n\": 4\n}", "metadata": {"logprobs": null, "prompt_tokens": 253, "output_tokens": 44, "total_tokens": 297, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e7cea09c-b21f-4b12-907d-e87d391af4db", "event_id": "e7cea09c-b21f-4b12-907d-e87d391af4db", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13383, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_154", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "34e5f092-2c94-4a1c-bb78-cf4fb0dc5cb0", "event_id": "7ac7f12c-d8ea-4ece-a079-e1df6fb1a027", "parent_event_id": "34e5f092-2c94-4a1c-bb78-cf4fb0dc5cb0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 979, "start_time": "2024-06-19T03:24:04.331Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_155", "variant_name": null}, {"function_name": "Fn_simple_155", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_155\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"present_value\":5000,\"annual_interest_rate\":0.05,\"years\":10,\"meta\":\"Value\",\"compounds_per_year\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_155_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the Future Value of a $5000 investment made today for a term of 10 years at an annual interest rate of 5%\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the future value of an investment based on the present value, interest rate, and time period.\n  function_name: 'calculate_future_value' or null,\n  // The present value or principal amount.\n  present_value: int,\n  // The annual interest rate in decimal form. Example, 5% is 0.05.\n  annual_interest_rate: float,\n  // The time period in years for which the investment is made.\n  years: int,\n  // The number of times the interest is compounded per year. Default is 1 (annual compounding).\n  compounds_per_year: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_future_value\",\n  \"present_value\": 5000,\n  \"annual_interest_rate\": 0.05,\n  \"years\": 10\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 266, "output_tokens": 43, "total_tokens": 309, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "81226953-6c51-4124-8399-4286d78b55d0", "event_id": "146bd9ce-8926-4c10-b4d1-26551a027f6e", "parent_event_id": "81226953-6c51-4124-8399-4286d78b55d0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 855, "start_time": "2024-06-19T03:24:04.456Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_157", "variant_name": null}, {"function_name": "Fn_simple_157", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_157\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"case_number\":\"CA123456\",\"county\":\"San Diego County\",\"meta\":\"Value\",\"details\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_157_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Look up details of a felony crime record for case number CA123456 in San Diego County\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve detailed felony crime records using a specific case number and location.\n  function_name: 'crime_record.get_record' or null,\n  // The case number related to the crime.\n  case_number: string,\n  // The county in which the crime occurred.\n  county: string,\n  // To get a detailed report, set as true. Defaults to false.\n  details: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"crime_record.get_record\",\n  \"case_number\": \"CA123456\",\n  \"county\": \"San Diego County\",\n  \"details\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 212, "output_tokens": 38, "total_tokens": 250, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "34e5f092-2c94-4a1c-bb78-cf4fb0dc5cb0", "event_id": "34e5f092-2c94-4a1c-bb78-cf4fb0dc5cb0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13479, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_155", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "81226953-6c51-4124-8399-4286d78b55d0", "event_id": "81226953-6c51-4124-8399-4286d78b55d0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13479, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_157", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f83d757c-84a3-498b-a0d8-cb2c544a6cb6", "event_id": "d9ae43be-3fa8-4d2e-be54-df960dff5233", "parent_event_id": "f83d757c-84a3-498b-a0d8-cb2c544a6cb6", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 913, "start_time": "2024-06-19T03:24:04.464Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_158", "variant_name": null}, {"function_name": "Fn_simple_158", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_158\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"full_name\":\"John Doe\",\"birth_date\":\"01-01-1980\",\"meta\":\"Value\",\"state\":\"California\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_158_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find out if an individual John Doe with a birthday 01-01-1980 has any prior felony convictions in California.\n\nHere is the function to invoke:\n\n\n{\n  // This function checks if an individual has any prior felony convictions based on their full name and birth date.\n  function_name: 'criminal_history.check_felonies' or null,\n  // The full name of the individual.\n  full_name: string,\n  // The birth date of the individual. Must be in MM-DD-YYYY format.\n  birth_date: string,\n  // The state to search the criminal record in. Default to 'None', which the function will search across all states.\n  state: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"criminal_history.check_felonies\",\n  \"full_name\": \"John Doe\",\n  \"birth_date\": \"01-01-1980\",\n  \"state\": \"California\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 244, "output_tokens": 48, "total_tokens": 292, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f83d757c-84a3-498b-a0d8-cb2c544a6cb6", "event_id": "f83d757c-84a3-498b-a0d8-cb2c544a6cb6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13547, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_158", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c12aadd4-327d-4e65-90f6-1296293ddd4a", "event_id": "59393bc1-0e2b-46b0-a150-733c279839f8", "parent_event_id": "c12aadd4-327d-4e65-90f6-1296293ddd4a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 849, "start_time": "2024-06-19T03:24:04.711Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_159", "variant_name": null}, {"function_name": "Fn_simple_159", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_159\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"name\":\"Mr. X\",\"location\":\"New York, NY\",\"from_year\":2012,\"to_year\":2015,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_159_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the information of criminal cases of Mr. X in New York between 2012 and 2015.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the criminal records of a specific person in a specific area during a certain time period.\n  function_name: 'get_criminal_records' or null,\n  // The name of the person.\n  name: string,\n  // The city and state, e.g. New York, NY\n  location: string,\n  // The start year of the time frame.\n  from_year: int,\n  // The end year of the time frame.\n  to_year: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_criminal_records',\n  name: 'Mr. X',\n  location: 'New York, NY',\n  from_year: 2012,\n  to_year: 2015,\n}", "metadata": {"logprobs": null, "prompt_tokens": 231, "output_tokens": 45, "total_tokens": 276, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c12aadd4-327d-4e65-90f6-1296293ddd4a", "event_id": "c12aadd4-327d-4e65-90f6-1296293ddd4a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13729, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_159", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "30096fc7-a21a-4044-bb9f-de9415069f70", "event_id": "c22771df-468d-4f31-bfc4-62dc540879b7", "parent_event_id": "30096fc7-a21a-4044-bb9f-de9415069f70", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 762, "start_time": "2024-06-19T03:24:04.885Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_160", "variant_name": null}, {"function_name": "Fn_simple_160", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_160\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"act_name\":\"Criminal Law Amendment Act\",\"amendment_year\":2013,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_160_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Give me the details of Criminal Law Amendment Act of 2013.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the details of a particular legal act based on its name and year of amendment if any.\n  function_name: 'get_act_details' or null,\n  // The name of the act.\n  act_name: string,\n  // Year of amendment if any. If not provided, the latest amendment year will be considered.\n  amendment_year: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_act_details',\n  act_name: 'Criminal Law Amendment Act',\n  amendment_year: 2013\n}", "metadata": {"logprobs": null, "prompt_tokens": 198, "output_tokens": 30, "total_tokens": 228, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "30096fc7-a21a-4044-bb9f-de9415069f70", "event_id": "30096fc7-a21a-4044-bb9f-de9415069f70", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 13816, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_160", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3bf0506d-3d32-4cec-b8f6-8a3d3b961599", "event_id": "f49274d1-b7b9-4b16-ac66-41fe404ede0e", "parent_event_id": "3bf0506d-3d32-4cec-b8f6-8a3d3b961599", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 810, "start_time": "2024-06-19T03:24:05.161Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_163", "variant_name": null}, {"function_name": "Fn_simple_163", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_163\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"parties\":[\"John\",\"Alice\"],\"contract_type\":\"rental agreement\",\"location\":\"California\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_163_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Generate a customized law contract between John and Alice for rental agreement in California.\n\nHere is the function to invoke:\n\n\n{\n  // Generates a customized law contract given involved parties, contract type and location.\n  function_name: 'generate_law_contract' or null,\n  // Parties involved in the contract.\n  parties: string[],\n  // Type of the contract.\n  contract_type: string,\n  // Location where the contract will be in effect.\n  location: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"generate_law_contract\",\n  \"parties\": [\"John\", \"Alice\"],\n  \"contract_type\": \"rental agreement\",\n  \"location\": \"California\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 45, "total_tokens": 242, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3bf0506d-3d32-4cec-b8f6-8a3d3b961599", "event_id": "3bf0506d-3d32-4cec-b8f6-8a3d3b961599", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14140, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_163", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "58a1c999-5c82-4650-99df-b63dae54e1e2", "event_id": "f28c3e68-025b-4976-bc13-58ae664c420b", "parent_event_id": "58a1c999-5c82-4650-99df-b63dae54e1e2", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 835, "start_time": "2024-06-19T03:24:05.171Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_164", "variant_name": null}, {"function_name": "Fn_simple_164", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_164\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"address\":\"123 Main Street\",\"parcel_number\":\"1234567890\",\"county\":\"Santa Clara\",\"meta\":\"Value\",\"include_owner\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_164_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response.\n\nHere is the function to invoke:\n\n\n{\n  // Fetch property records based on location, parcel number and county.\n  function_name: 'property_records.get' or null,\n  // Address of the property.\n  address: string,\n  // Parcel number of the property.\n  parcel_number: string,\n  // County where the property is located.\n  county: string,\n  // Include owner's name in the property record. Default is false.\n  include_owner: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'property_records.get',\n  address: '123 Main Street',\n  parcel_number: '1234567890',\n  county: 'Santa Clara',\n  include_owner: true,\n}", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 42, "total_tokens": 278, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "58a1c999-5c82-4650-99df-b63dae54e1e2", "event_id": "58a1c999-5c82-4650-99df-b63dae54e1e2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14174, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_164", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ebbb63d7-abc3-4ccb-aa32-4a28f5d4a1a9", "event_id": "00098f6d-d89d-4313-ab68-8a5d656a24fb", "parent_event_id": "ebbb63d7-abc3-4ccb-aa32-4a28f5d4a1a9", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1094, "start_time": "2024-06-19T03:24:04.941Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_161", "variant_name": null}, {"function_name": "Fn_simple_161", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_161\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"docket\":\"2022/AL2562\",\"court\":\"California\",\"info_type\":\"victim\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_161_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who was the victim in the case docket numbered 2022/AL2562 in California?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve case details using a specific case docket number and court location.\n  function_name: 'get_case_info' or null,\n  // Docket number for the specific court case.\n  docket: string,\n  // Court in which the case was heard.\n  court: string,\n  // Specify the information type needed for the case. i.e., victim, accused, verdict etc.\n  info_type: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_case_info\",\n  \"docket\": \"2022/AL2562\",\n  \"court\": \"California\",\n  \"info_type\": \"victim\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 40, "total_tokens": 258, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ebbb63d7-abc3-4ccb-aa32-4a28f5d4a1a9", "event_id": "ebbb63d7-abc3-4ccb-aa32-4a28f5d4a1a9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14203, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_161", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4fb2cbec-b72e-4d66-a622-3bef5a1bc20e", "event_id": "51e847af-58f2-4cad-bc22-2b954d577c12", "parent_event_id": "4fb2cbec-b72e-4d66-a622-3bef5a1bc20e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 805, "start_time": "2024-06-19T03:24:05.380Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_168", "variant_name": null}, {"function_name": "Fn_simple_168", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_168\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"case_title\":\"Roe v. Wade\",\"include_dissent\":true,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_168_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the details of a Supreme Court case given its title.\n  function_name: 'law.civil.get_case_details' or null,\n  // Title of the Supreme Court case.\n  case_title: string,\n  // If true, the output will include details of the dissenting opinion.\n  include_dissent: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"law.civil.get_case_details\",\n  \"case_title\": \"Roe v. Wade\",\n  \"include_dissent\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 198, "output_tokens": 35, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "14a50336-aef6-42c0-9123-8e77d70e5d88", "event_id": "a25a45d8-3ae9-430d-bb8c-a605cdf6e1fc", "parent_event_id": "14a50336-aef6-42c0-9123-8e77d70e5d88", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 873, "start_time": "2024-06-19T03:24:05.312Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_167", "variant_name": null}, {"function_name": "Fn_simple_167", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_167\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": null}, "error": {"code": 2, "message": "Failed to coerce value: Error parsing '<root>': Unparsed field: fee\n  Error parsing 'fee': Expected int, got {$lt: 400}.\n  Object(\n      {\n          \"$lt\": Number(\n              Number(400),\n          ),\n      },\n  )", "traceback": null, "override": null}, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.\n  function_name: 'lawyer.find_nearby' or null,\n  // The city and state, e.g. Chicago, IL.\n  city: string,\n  // Specialization of the lawyer.\n  specialty: [\n    'Civil' or 'Divorce' or 'Immigration' or 'Business' or 'Criminal'\n  ],\n  // Hourly fee charged by lawyer\n  fee: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"lawyer.find_nearby\",\n  \"city\": \"Chicago\",\n  \"specialty\": [\"Divorce\"],\n  \"fee\": {\"$lt\": 400}\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 233, "output_tokens": 45, "total_tokens": 278, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4fb2cbec-b72e-4d66-a622-3bef5a1bc20e", "event_id": "4fb2cbec-b72e-4d66-a622-3bef5a1bc20e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14353, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_168", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "14a50336-aef6-42c0-9123-8e77d70e5d88", "event_id": "14a50336-aef6-42c0-9123-8e77d70e5d88", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14354, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_167", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'baml_py.BamlError'>: \\u001b[33mClient: GPT35Turbo (gpt-3.5-turbo-0125) - 872ms\\u001b[0m\\n\\u001b[34m---PROMPT---\\u001b[0m\\n\\u001b[2m[\\u001b[2mchat\\u001b[0m\\u001b[2m] \\u001b[43msystem: \\u001b[0m\\u001b[2mYou are an expert in composing functions. You are given a question and a set of possible functions.\\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\\nalso point it out. You should only return the function call in tools call sections.\\n\\u001b[43muser: \\u001b[0m\\u001b[2mQuestion: Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.\\n\\nHere is the function to invoke:\\n\\n\\n{\\n  // Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.\\n  function_name: 'lawyer.find_nearby' or null,\\n  // The city and state, e.g. Chicago, IL.\\n  city: string,\\n  // Specialization of the lawyer.\\n  specialty: [\\n    'Civil' or 'Divorce' or 'Immigration' or 'Business' or 'Criminal'\\n  ],\\n  // Hourly fee charged by lawyer\\n  fee: int,\\n}\\n\\n\\nFunction args in JSON format:\\n\\u001b[0m\\n\\u001b[34m---LLM REPLY---\\u001b[0m\\n\\u001b[2m```json\\n{\\n  \\\"function_name\\\": \\\"lawyer.find_nearby\\\",\\n  \\\"city\\\": \\\"Chicago\\\",\\n  \\\"specialty\\\": [\\\"Divorce\\\"],\\n  \\\"fee\\\": {\\\"$lt\\\": 400}\\n}\\n```\\u001b[0m\\n\\u001b[34m---Parsed Response---\\u001b[0m\\n\\u001b[31mFailed to coerce value: Error parsing '<root>': Unparsed field: fee\\n  Error parsing 'fee': Expected int, got {$lt: 400}.\\n  Object(\\n      {\\n          \\\"$lt\\\": Number(\\n              Number(400),\\n          ),\\n      },\\n  )\\u001b[0m\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5d6e40fa-f696-4c64-9e65-aa9a257de0c5", "event_id": "c019d547-44cc-473b-88f3-06b27af94b86", "parent_event_id": "5d6e40fa-f696-4c64-9e65-aa9a257de0c5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 962, "start_time": "2024-06-19T03:24:05.311Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_166", "variant_name": null}, {"function_name": "Fn_simple_166", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_166\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"year\":2020,\"crime_type\":\"theft\",\"location\":\"Los Angeles, California\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_166_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Retrieve cases from 2020 about theft crimes in Los Angeles, California\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve civil cases based on given parameters, including year, crime type, and location.\n  function_name: 'civil_cases.retrieve' or null,\n  // Year of the cases\n  year: int,\n  // Type of the crime.\n  crime_type: string,\n  // Location of the case in the format of city name.\n  location: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"civil_cases.retrieve\",\n  \"year\": 2020,\n  \"crime_type\": \"theft\",\n  \"location\": \"Los Angeles, California\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 200, "output_tokens": 39, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5d6e40fa-f696-4c64-9e65-aa9a257de0c5", "event_id": "5d6e40fa-f696-4c64-9e65-aa9a257de0c5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14442, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_166", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f83f650f-714c-4b60-a4ab-9a36c5692575", "event_id": "7cd6edb3-004e-4181-8294-94c978784ef1", "parent_event_id": "f83f650f-714c-4b60-a4ab-9a36c5692575", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1077, "start_time": "2024-06-19T03:24:05.216Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_165", "variant_name": null}, {"function_name": "Fn_simple_165", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_165\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"city\":\"San Francisco\",\"state\":\"California\",\"meta\":\"Value\",\"type\":\"violent\",\"year\":2020}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_165_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Provide me the official crime rate of violent crime in San Francisco in 2020.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the official crime rate of a city.\n  function_name: 'get_crime_rate' or null,\n  // The name of the city.\n  city: string,\n  // The state where the city is located.\n  state: string,\n  // Optional. The type of crime. Default is 'violent'\n  type: string or null,\n  // Optional. The year for the crime rate data. Default is year 2001.\n  year: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_crime_rate\",\n  \"city\": \"San Francisco\",\n  \"state\": \"California\",\n  \"type\": \"violent\",\n  \"year\": 2020\n}", "metadata": {"logprobs": null, "prompt_tokens": 227, "output_tokens": 43, "total_tokens": 270, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f83f650f-714c-4b60-a4ab-9a36c5692575", "event_id": "f83f650f-714c-4b60-a4ab-9a36c5692575", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14462, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_165", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b73d4191-61e8-493d-9068-90fc6868170c", "event_id": "de840abd-7236-4776-9a58-7c329ac15322", "parent_event_id": "b73d4191-61e8-493d-9068-90fc6868170c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1377, "start_time": "2024-06-19T03:24:04.996Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_162", "variant_name": null}, {"function_name": "Fn_simple_162", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_162\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"jurisdiction\":\"California\",\"crime\":\"theft\",\"meta\":\"Value\",\"detail_level\":\"Value1\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_162_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find out the possible punishments for the crime of theft in California in detail.\n\nHere is the function to invoke:\n\n\n{\n  // Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.\n  function_name: 'crime_statute_lookup' or null,\n  // The jurisdiction to search in, usually a state or country.\n  jurisdiction: string,\n  // The crime to search for.\n  crime: string,\n  // How detailed of a report to return. Optional, default is 'basic'.\n  detail_level: 'basic' or 'detailed' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"crime_statute_lookup\",\n  \"jurisdiction\": \"California\",\n  \"crime\": \"theft\",\n  \"detail_level\": \"detailed\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 223, "output_tokens": 38, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b73d4191-61e8-493d-9068-90fc6868170c", "event_id": "b73d4191-61e8-493d-9068-90fc6868170c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14542, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_162", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "17a20065-5ea9-4ec4-8cce-4573fd9d7c7e", "event_id": "4e592dea-6e1b-41d5-bc13-7bc71be2a83a", "parent_event_id": "17a20065-5ea9-4ec4-8cce-4573fd9d7c7e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 942, "start_time": "2024-06-19T03:24:05.562Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_169", "variant_name": null}, {"function_name": "Fn_simple_169", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_169\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company\":\"Google\",\"start_date\":\"01-01-2021\",\"location\":\"California\",\"meta\":\"Value\",\"status\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_169_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.\n\nHere is the function to invoke:\n\n\n{\n  // Search for lawsuits related to a specific company within a specific date range and location.\n  function_name: 'lawsuit_search' or null,\n  // The company related to the lawsuit.\n  company: string,\n  // Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY.\n  start_date: string,\n  // Location where the lawsuit was filed in the format of full state name.\n  location: string,\n  // The status of the lawsuit. Default is 'ongoing'.\n  status: 'ongoing' or 'settled' or 'dismissed' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"lawsuit_search\",\n  \"company\": \"Google\",\n  \"start_date\": \"01-01-2021\",\n  \"location\": \"California\",\n  \"status\": \"ongoing\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 261, "output_tokens": 47, "total_tokens": 308, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "17a20065-5ea9-4ec4-8cce-4573fd9d7c7e", "event_id": "17a20065-5ea9-4ec4-8cce-4573fd9d7c7e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14673, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_169", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7ebb11aa-26a1-4c85-a1ce-cae49a935236", "event_id": "e0a64b02-d261-4fd0-972f-bffb7022200d", "parent_event_id": "7ebb11aa-26a1-4c85-a1ce-cae49a935236", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 883, "start_time": "2024-06-19T03:24:05.648Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_170", "variant_name": null}, {"function_name": "Fn_simple_170", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_170\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"docket_number\":\"123456\",\"location\":\"Texas\",\"meta\":\"Value\",\"full_text\":false}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_170_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the details of the court case identified by docket number 123456 in Texas. Don't return full text\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves details about a court case using its docket number and location.\n  function_name: 'court_case.search' or null,\n  // The docket number for the case.\n  docket_number: string,\n  // The location where the case is registered, in the format: state, e.g., Texas\n  location: string,\n  // Option to return the full text of the case ruling. (default: false)\n  full_text: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'court_case.search',\n  docket_number: '123456',\n  location: 'Texas',\n  full_text: false\n}", "metadata": {"logprobs": null, "prompt_tokens": 232, "output_tokens": 32, "total_tokens": 264, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7ebb11aa-26a1-4c85-a1ce-cae49a935236", "event_id": "7ebb11aa-26a1-4c85-a1ce-cae49a935236", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14699, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_170", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "72c83df0-1e9e-449e-9416-eef76415005f", "event_id": "d9bd1599-b560-408d-a038-af6deec44693", "parent_event_id": "72c83df0-1e9e-449e-9416-eef76415005f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 678, "start_time": "2024-06-19T03:24:06.007Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_172", "variant_name": null}, {"function_name": "Fn_simple_172", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_172\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"case_number\":43403,\"court\":\"New York\",\"year\":2018,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_172_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Fetch details of a law case with number 43403 in New York court for year 2018.\n\nHere is the function to invoke:\n\n\n{\n  // Fetch details of a specific law case based on case number, year and court.\n  function_name: 'fetch_law_case_details' or null,\n  // The specific number of the law case.\n  case_number: int,\n  // The city name where the court takes place\n  court: string,\n  // The year in which the law case took place.\n  year: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'fetch_law_case_details',\n  case_number: 43403,\n  court: 'New York',\n  year: 2018\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 35, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "72c83df0-1e9e-449e-9416-eef76415005f", "event_id": "72c83df0-1e9e-449e-9416-eef76415005f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14854, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_172", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9b9b22d2-d607-4e81-8b12-19bec11c4f6b", "event_id": "08186cc9-bc7c-4530-a0b8-eaad95307faf", "parent_event_id": "9b9b22d2-d607-4e81-8b12-19bec11c4f6b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 771, "start_time": "2024-06-19T03:24:06.036Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_173", "variant_name": null}, {"function_name": "Fn_simple_173", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_173\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"case_id\":\"R vs Adams\",\"details\":true,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_173_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How to obtain the detailed case information of the 'R vs Adams' legal case?\n\nHere is the function to invoke:\n\n\n{\n  // Fetch detailed legal case information from database.\n  function_name: 'legal_case.fetch' or null,\n  // The ID of the legal case.\n  case_id: string,\n  // True if need the detail info. \n  details: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'legal_case.fetch',\n  case_id: 'R vs Adams',\n  details: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 180, "output_tokens": 25, "total_tokens": 205, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9b9b22d2-d607-4e81-8b12-19bec11c4f6b", "event_id": "9b9b22d2-d607-4e81-8b12-19bec11c4f6b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 14976, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_173", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b8c6969e-0caa-46bf-ae1f-549a7bc553d5", "event_id": "601d0431-6d6a-43f8-8567-f5006996a714", "parent_event_id": "b8c6969e-0caa-46bf-ae1f-549a7bc553d5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 905, "start_time": "2024-06-19T03:24:05.973Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_171", "variant_name": null}, {"function_name": "Fn_simple_171", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_171\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"subject\":\"fraud\",\"from_year\":2010,\"to_year\":2015,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_171_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a historical law case about fraud from 2010 to 2015.\n\nHere is the function to invoke:\n\n\n{\n  // Search for a historical law case based on specific criteria like the subject and year.\n  function_name: 'law_case_search.find_historical' or null,\n  // The subject matter of the case, e.g., 'fraud'\n  subject: string,\n  // The start year for the range of the case. The case should happen after this year.\n  from_year: int,\n  // The end year for the range of the case. The case should happen before this year.\n  to_year: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"law_case_search.find_historical\",\n  \"subject\": \"fraud\",\n  \"from_year\": 2010,\n  \"to_year\": 2015\n}", "metadata": {"logprobs": null, "prompt_tokens": 233, "output_tokens": 41, "total_tokens": 274, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b8c6969e-0caa-46bf-ae1f-549a7bc553d5", "event_id": "b8c6969e-0caa-46bf-ae1f-549a7bc553d5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15047, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_171", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a9d4d4fb-6d02-4f94-b76d-fb7b38d68526", "event_id": "31846a65-595c-42c3-a922-d382d1a6ef4b", "parent_event_id": "a9d4d4fb-6d02-4f94-b76d-fb7b38d68526", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 837, "start_time": "2024-06-19T03:24:06.187Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_175", "variant_name": null}, {"function_name": "Fn_simple_175", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_175\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"field_of_law\":\"constitutional law\",\"top_number\":10,\"meta\":\"Value\",\"country\":\"China\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_175_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me the top 10 landmark cases in constitutional law in China.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve a list of the most influential or landmark cases in a specific field of law.\n  function_name: 'get_top_cases' or null,\n  // The specific field of law e.g., constitutional law, criminal law, etc.\n  field_of_law: string,\n  // The number of top cases to retrieve.\n  top_number: int,\n  // The country where the law cases should be retrieved from. Default is United States of America.\n  country: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_top_cases',\n  field_of_law: 'constitutional law',\n  top_number: 10,\n  country: 'China',\n}", "metadata": {"logprobs": null, "prompt_tokens": 225, "output_tokens": 34, "total_tokens": 259, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a9d4d4fb-6d02-4f94-b76d-fb7b38d68526", "event_id": "a9d4d4fb-6d02-4f94-b76d-fb7b38d68526", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15193, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_175", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cb98a793-2fda-4de4-b152-295f8dffd7e5", "event_id": "8bbcd47c-e843-46d6-868e-c7e4a8c1d1cc", "parent_event_id": "cb98a793-2fda-4de4-b152-295f8dffd7e5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 813, "start_time": "2024-06-19T03:24:06.275Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_176", "variant_name": null}, {"function_name": "Fn_simple_176", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_176\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"name\":\"John Doe\",\"law_type\":\"Bankruptcy\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_176_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How many months of experience a Lawyer John Doe has on handling Bankruptcy cases.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve months of experience of a Lawyer on handling certain type of law cases.\n  function_name: 'lawyer.get_experience' or null,\n  // The full name of the Lawyer.\n  name: string,\n  // The type of law case. eg. Bankruptcy\n  law_type: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'lawyer.get_experience',\n  name: 'John Doe',\n  law_type: 'Bankruptcy'\n}", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 27, "total_tokens": 217, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cb98a793-2fda-4de4-b152-295f8dffd7e5", "event_id": "cb98a793-2fda-4de4-b152-295f8dffd7e5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15256, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_176", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f9e95455-43d4-476e-bdf4-5798802e4330", "event_id": "efda74a6-da3f-477a-aa1a-78ed6c51ddf3", "parent_event_id": "f9e95455-43d4-476e-bdf4-5798802e4330", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 789, "start_time": "2024-06-19T03:24:06.375Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_178", "variant_name": null}, {"function_name": "Fn_simple_178", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_178\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company_name\":\"Facebook\",\"year\":2018,\"meta\":\"Value\",\"status\":\"Value2\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_178_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find all Patent lawsuit cases of Facebook in 2018.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve all lawsuit cases related to a specific company during a particular year.\n  function_name: 'get_lawsuit_cases' or null,\n  // The name of the company.\n  company_name: string,\n  // The specific year to search for lawsuit cases.\n  year: int,\n  // The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'.\n  status: 'open' or 'closed' or 'all' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_lawsuit_cases',\n  company_name: 'Facebook',\n  year: 2018,\n  status: 'all'\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 33, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f9e95455-43d4-476e-bdf4-5798802e4330", "event_id": "f9e95455-43d4-476e-bdf4-5798802e4330", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15333, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_178", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "448af9f5-84ba-47db-a102-a655f28ed3ed", "event_id": "88ea1788-073b-499e-a16f-cd0378bae385", "parent_event_id": "448af9f5-84ba-47db-a102-a655f28ed3ed", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 884, "start_time": "2024-06-19T03:24:06.294Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_177", "variant_name": null}, {"function_name": "Fn_simple_177", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_177\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company_name\":\"Apple Inc.\",\"year\":2010,\"meta\":\"Value\",\"case_type\":\"Patent\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_177_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.\n\nHere is the function to invoke:\n\n\n{\n  // Find details of lawsuits involving a specific company from a given year.\n  function_name: 'lawsuit_details.find' or null,\n  // Name of the company.\n  company_name: string,\n  // Year of the lawsuit.\n  year: int,\n  // Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'.\n  case_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'lawsuit_details.find',\n  company_name: 'Apple Inc.',\n  year: 2010,\n  case_type: 'Patent'\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 35, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "448af9f5-84ba-47db-a102-a655f28ed3ed", "event_id": "448af9f5-84ba-47db-a102-a655f28ed3ed", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15347, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_177", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ff6f217a-a3ed-4e2b-819f-4c89d4adc570", "event_id": "1a3f1380-80e0-4910-9fee-5b65d8c4e827", "parent_event_id": "ff6f217a-a3ed-4e2b-819f-4c89d4adc570", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1061, "start_time": "2024-06-19T03:24:06.186Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_174", "variant_name": null}, {"function_name": "Fn_simple_174", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_174\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"topic\":\"land disputes\",\"year_range\":[2015,2021],\"location\":\"New York\",\"meta\":\"Value\",\"judicial_system\":\"state\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_174_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.\n\nHere is the function to invoke:\n\n\n{\n  // Search and retrieve law cases based on the topic, timeline, and location.\n  function_name: 'law_case_search' or null,\n  // The subject matter of the case.\n  topic: string,\n  // The start and end year for searching cases.\n  year_range: int[],\n  // The location where the case is being heard.\n  location: string,\n  // The specific judicial system in which to search (e.g. 'federal', 'state'). (default: all)\n  judicial_system: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"law_case_search\",\n  \"topic\": \"land disputes\",\n  \"year_range\": [2015, 2021],\n  \"location\": \"New York\",\n  \"judicial_system\": \"state\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 247, "output_tokens": 54, "total_tokens": 301, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ff6f217a-a3ed-4e2b-819f-4c89d4adc570", "event_id": "ff6f217a-a3ed-4e2b-819f-4c89d4adc570", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15415, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_174", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3ef8b46e-65fe-4bc4-9551-479d6050a5eb", "event_id": "28f179ef-1cc7-408a-b944-b948f9860d2e", "parent_event_id": "3ef8b46e-65fe-4bc4-9551-479d6050a5eb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 838, "start_time": "2024-06-19T03:24:06.532Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_180", "variant_name": null}, {"function_name": "Fn_simple_180", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_180\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company1\":\"Apple\",\"company2\":\"Samsung\",\"meta\":\"Value\",\"country\":\"USA\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_180_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the latest court case between Apple and Samsung occured in USA.\n\nHere is the function to invoke:\n\n\n{\n  // Find the latest court case between two companies.\n  function_name: 'find_latest_court_case' or null,\n  // The name of the first company.\n  company1: string,\n  // The name of the second company.\n  company2: string,\n  // The country in which the court case is located. (default: USA)\n  country: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"find_latest_court_case\",\n  \"company1\": \"Apple\",\n  \"company2\": \"Samsung\",\n  \"country\": \"USA\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 37, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3ef8b46e-65fe-4bc4-9551-479d6050a5eb", "event_id": "3ef8b46e-65fe-4bc4-9551-479d6050a5eb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15538, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_180", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f3cab4eb-b9d1-4984-8801-7bd266343174", "event_id": "707feb86-1d54-4c43-a4c5-69d33046f597", "parent_event_id": "f3cab4eb-b9d1-4984-8801-7bd266343174", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 797, "start_time": "2024-06-19T03:24:06.686Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_181", "variant_name": null}, {"function_name": "Fn_simple_181", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_181\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company_name\":\"Google\",\"location\":\"California\",\"year\":2020,\"meta\":\"Value\",\"case_type\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_181_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the lawsuits filed against the company Google in California in the year 2020.\n\nHere is the function to invoke:\n\n\n{\n  // Search for lawsuits against a specific company within a specific time and location.\n  function_name: 'lawsuits_search' or null,\n  // The name of the company.\n  company_name: string,\n  // The location where the lawsuit was filed.\n  location: string,\n  // The year when the lawsuit was filed.\n  year: int,\n  // The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'.\n  case_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'lawsuits_search',\n  company_name: 'Google',\n  location: 'California',\n  year: 2020,\n}", "metadata": {"logprobs": null, "prompt_tokens": 237, "output_tokens": 31, "total_tokens": 268, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f3cab4eb-b9d1-4984-8801-7bd266343174", "event_id": "f3cab4eb-b9d1-4984-8801-7bd266343174", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15653, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_181", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cae83834-f54c-401c-abb9-2365edbd257e", "event_id": "788add06-40a0-4d08-a103-bf01d511d9b8", "parent_event_id": "cae83834-f54c-401c-abb9-2365edbd257e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1005, "start_time": "2024-06-19T03:24:06.506Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_179", "variant_name": null}, {"function_name": "Fn_simple_179", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_179\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"case_number\":\"LAX2019080202\",\"court_location\":\"Los Angeles\",\"additional_details\":[],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_179_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find details about lawsuit case numbered 'LAX2019080202' in the Los Angeles court.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the detailed information about a lawsuit based on its case number and the court location.\n  function_name: 'get_lawsuit_details' or null,\n  // The case number of the lawsuit.\n  case_number: string,\n  // The location of the court where the case is filed.\n  court_location: string,\n  // Optional. Array containing additional details to be fetched. Default is all.\n  additional_details: [\n    'attorneys' or 'plaintiffs' or 'defendants' or 'charges' or 'court_updates'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_lawsuit_details',\n  case_number: 'LAX2019080202',\n  court_location: 'Los Angeles',\n}", "metadata": {"logprobs": null, "prompt_tokens": 245, "output_tokens": 33, "total_tokens": 278, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cae83834-f54c-401c-abb9-2365edbd257e", "event_id": "cae83834-f54c-401c-abb9-2365edbd257e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15679, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_179", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b71fb68c-1852-400c-8260-be8f40c7b887", "event_id": "547364c7-d30b-4ece-be04-4e585280c746", "parent_event_id": "b71fb68c-1852-400c-8260-be8f40c7b887", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 668, "start_time": "2024-06-19T03:24:06.880Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_183", "variant_name": null}, {"function_name": "Fn_simple_183", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_183\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"case_number\":\"XYZ123\",\"meta\":\"Value\",\"year\":null,\"location\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_183_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Retrieve all the lawsuit details for case number XYZ123\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves details of a lawsuit given a case number\n  function_name: 'lawsuit_info' or null,\n  // The unique identifier of the lawsuit case\n  case_number: string,\n  // The year in which the lawsuit case was initiated. Default is latest year if not specified.\n  year: int or null,\n  // The location or court jurisdiction where the case was filed. Default is 'all'.\n  location: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'lawsuit_info',\n  case_number: 'XYZ123'\n}", "metadata": {"logprobs": null, "prompt_tokens": 214, "output_tokens": 19, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b71fb68c-1852-400c-8260-be8f40c7b887", "event_id": "b71fb68c-1852-400c-8260-be8f40c7b887", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15717, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_183", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a5b38e97-1e6d-4541-a046-f347fba90c97", "event_id": "2cc2de90-6628-40c6-829f-e9f5a0790f10", "parent_event_id": "a5b38e97-1e6d-4541-a046-f347fba90c97", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 848, "start_time": "2024-06-19T03:24:06.808Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_182", "variant_name": null}, {"function_name": "Fn_simple_182", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_182\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"case_number\":\"123456-ABC\",\"court_location\":\"Los Angeles\",\"meta\":\"Value\",\"with_verdict\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_182_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get details of a lawsuit with case number '123456-ABC' filed in Los Angeles court with verdict\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve details of a lawsuit based on its case number and court location.\n  function_name: 'get_lawsuit_details' or null,\n  // Case number of the lawsuit.\n  case_number: string,\n  // The location of the court where the lawsuit was filed.\n  court_location: string,\n  // Flag to include verdict details if available. Default is False\n  with_verdict: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_lawsuit_details\",\n  \"case_number\": \"123456-ABC\",\n  \"court_location\": \"Los Angeles\",\n  \"with_verdict\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 42, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a5b38e97-1e6d-4541-a046-f347fba90c97", "event_id": "a5b38e97-1e6d-4541-a046-f347fba90c97", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15825, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_182", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a0ec0e80-2091-40e3-9a20-c02e28935949", "event_id": "858e6c39-44ba-4c89-af82-0a08f9f23fe0", "parent_event_id": "a0ec0e80-2091-40e3-9a20-c02e28935949", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 756, "start_time": "2024-06-19T03:24:07.026Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_184", "variant_name": null}, {"function_name": "Fn_simple_184", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_184\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"entity\":\"Apple\",\"county\":\"Santa Clara County\",\"meta\":\"Value\",\"state\":\"California\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_184_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Search for current lawsuits filed against Apple in Santa Clara County.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve all lawsuits involving a particular entity from specified jurisdiction.\n  function_name: 'lawsuit_search' or null,\n  // The entity involved in lawsuits.\n  entity: string,\n  // The jurisdiction for the lawsuit search for example Alameda county.\n  county: string,\n  // The state for the lawsuit search. Default is California.\n  state: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"lawsuit_search\",\n  \"entity\": \"Apple\",\n  \"county\": \"Santa Clara County\",\n  \"state\": \"California\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 200, "output_tokens": 35, "total_tokens": 235, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a0ec0e80-2091-40e3-9a20-c02e28935949", "event_id": "a0ec0e80-2091-40e3-9a20-c02e28935949", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15950, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_184", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "400c2ab6-0537-4c9e-9a96-a0baa14f4e7b", "event_id": "44dc023e-3b96-48e0-bd15-18dca5e513ec", "parent_event_id": "400c2ab6-0537-4c9e-9a96-a0baa14f4e7b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 725, "start_time": "2024-06-19T03:24:07.089Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_185", "variant_name": null}, {"function_name": "Fn_simple_185", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_185\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"case_id\":1234,\"closed_status\":true,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_185_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.\n\nHere is the function to invoke:\n\n\n{\n  // Verify the details of a lawsuit case and check its status using case ID.\n  function_name: 'lawsuit.check_case' or null,\n  // The identification number of the lawsuit case.\n  case_id: int,\n  // The status of the lawsuit case to be verified.\n  closed_status: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"lawsuit.check_case\",\n  \"case_id\": 1234,\n  \"closed_status\": true\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 198, "output_tokens": 33, "total_tokens": 231, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "400c2ab6-0537-4c9e-9a96-a0baa14f4e7b", "event_id": "400c2ab6-0537-4c9e-9a96-a0baa14f4e7b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 15984, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_185", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "12b1a49c-9110-47fe-99ff-38d9885cebf2", "event_id": "9806174a-510b-43b0-b3fc-7269c83835e0", "parent_event_id": "12b1a49c-9110-47fe-99ff-38d9885cebf2", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 757, "start_time": "2024-06-19T03:24:07.180Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_187", "variant_name": null}, {"function_name": "Fn_simple_187", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_187\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"city\":\"Tokyo\",\"country\":\"Japan\",\"meta\":\"Value\",\"measurement\":\"c\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_187_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the temperature in celsius and humidity level of Tokyo, Japan right now?\n\nHere is the function to invoke:\n\n\n{\n  // Get the current weather conditions of a specific city including temperature and humidity.\n  function_name: 'current_weather_condition' or null,\n  // The city that you want to get the current weather conditions for.\n  city: string,\n  // The country of the city you specified.\n  country: string,\n  // You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is 'c'.\n  measurement: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"current_weather_condition\",\n  \"city\": \"Tokyo\",\n  \"country\": \"Japan\",\n  \"measurement\": \"c\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 228, "output_tokens": 34, "total_tokens": 262, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "12b1a49c-9110-47fe-99ff-38d9885cebf2", "event_id": "12b1a49c-9110-47fe-99ff-38d9885cebf2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16105, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_187", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a9c2b670-6be9-42c2-bc39-a71e4cd2a893", "event_id": "edf93de2-1b13-4c11-99b6-05f560f41c57", "parent_event_id": "a9c2b670-6be9-42c2-bc39-a71e4cd2a893", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 850, "start_time": "2024-06-19T03:24:07.166Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_186", "variant_name": null}, {"function_name": "Fn_simple_186", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_186\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"New York\",\"duration\":72,\"meta\":\"Value\",\"include_precipitation\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_186_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What will be the weather in New York in the next 72 hours including the precipitation?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.\n  function_name: 'detailed_weather_forecast' or null,\n  // The city name that you want to get the weather for.\n  location: string,\n  // Duration in hours for the detailed forecast.\n  duration: int,\n  // Whether to include precipitation data in the forecast. Default is false.\n  include_precipitation: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"detailed_weather_forecast\",\n  \"location\": \"New York\",\n  \"duration\": 72,\n  \"include_precipitation\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 38, "total_tokens": 258, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a9c2b670-6be9-42c2-bc39-a71e4cd2a893", "event_id": "a9c2b670-6be9-42c2-bc39-a71e4cd2a893", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16185, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_186", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e044b17d-d059-483e-95e1-ff5f800ee375", "event_id": "51081d81-c2f0-4704-960e-2eccb11c1714", "parent_event_id": "e044b17d-d059-483e-95e1-ff5f800ee375", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 760, "start_time": "2024-06-19T03:24:07.371Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_189", "variant_name": null}, {"function_name": "Fn_simple_189", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_189\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Miami, Florida\",\"days\":7,\"meta\":\"Value\",\"min_humidity\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_189_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the humidity level in Miami, Florida in the upcoming 7 days?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve a humidity forecast for a specific location and time frame.\n  function_name: 'weather.humidity_forecast' or null,\n  // The city that you want to get the humidity for.\n  location: string,\n  // Number of days for the forecast.\n  days: int,\n  // Minimum level of humidity (in percentage) to filter the result. Default is 0.\n  min_humidity: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"weather.humidity_forecast\",\n  \"location\": \"Miami, Florida\",\n  \"days\": 7\n}", "metadata": {"logprobs": null, "prompt_tokens": 216, "output_tokens": 30, "total_tokens": 246, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e044b17d-d059-483e-95e1-ff5f800ee375", "event_id": "e044b17d-d059-483e-95e1-ff5f800ee375", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16299, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_189", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cc08811b-0f48-450f-ba7a-ad5c64f813bd", "event_id": "cdbe0b49-ae22-4427-9077-6240c2699502", "parent_event_id": "cc08811b-0f48-450f-ba7a-ad5c64f813bd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 779, "start_time": "2024-06-19T03:24:07.486Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_190", "variant_name": null}, {"function_name": "Fn_simple_190", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_190\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"New York, USA\",\"days\":3,\"meta\":\"Value\",\"details\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_190_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get weather information for New York, USA for the next 3 days with details.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve a detailed weather forecast for a specific city like Boston and time frame.\n  function_name: 'weather_forecast_detailed' or null,\n  // The city that you want to get the weather for.\n  location: string,\n  // Number of days for the forecast.\n  days: int,\n  // Provide detailed weather information or not.\n  details: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'weather_forecast_detailed',\n  location: 'New York, USA',\n  days: 3,\n  details: true,\n}", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 33, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cc08811b-0f48-450f-ba7a-ad5c64f813bd", "event_id": "cc08811b-0f48-450f-ba7a-ad5c64f813bd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16433, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_190", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "29c89ea5-6e5f-4d53-b440-d25117dd66d6", "event_id": "4bb3cd28-a08e-4ac6-8a08-f0e11013547e", "parent_event_id": "29c89ea5-6e5f-4d53-b440-d25117dd66d6", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1074, "start_time": "2024-06-19T03:24:07.248Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_188", "variant_name": null}, {"function_name": "Fn_simple_188", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_188\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Seattle, Washington\",\"meta\":\"Value\",\"include_temperature\":true,\"include_humidity\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_188_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the current temperature and humidity in Seattle, Washington?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves the current temperature and humidity for a specific location.\n  function_name: 'get_current_weather' or null,\n  // The city name to get the weather for.\n  location: string,\n  // Whether to include the temperature in the result. Default is true.\n  include_temperature: bool or null,\n  // Whether to include the humidity in the result. Default is true.\n  include_humidity: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_current_weather',\n  location: 'Seattle, Washington',\n  include_temperature: true,\n  include_humidity: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 32, "total_tokens": 243, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "29c89ea5-6e5f-4d53-b440-d25117dd66d6", "event_id": "29c89ea5-6e5f-4d53-b440-d25117dd66d6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16490, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_188", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9ff00636-376d-4309-8e6b-fdef32a91e9d", "event_id": "80f4f5f1-f431-4b4c-9ff6-3c3f7669e30e", "parent_event_id": "9ff00636-376d-4309-8e6b-fdef32a91e9d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 781, "start_time": "2024-06-19T03:24:07.550Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_192", "variant_name": null}, {"function_name": "Fn_simple_192", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_192\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Denver, Colorado\",\"radius\":50,\"amount\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_192_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the 5 tallest mountains within 50km of Denver, Colorado.\n\nHere is the function to invoke:\n\n\n{\n  // Find the tallest mountains within a specified radius of a location.\n  function_name: 'locate_tallest_mountains' or null,\n  // The city from which to calculate distance.\n  location: string,\n  // The radius within which to find mountains, measured in kilometers.\n  radius: int,\n  // The number of mountains to find, listed from tallest to smallest.\n  amount: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"locate_tallest_mountains\",\n  \"location\": \"Denver, Colorado\",\n  \"radius\": 50,\n  \"amount\": 5\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 209, "output_tokens": 41, "total_tokens": 250, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9ff00636-376d-4309-8e6b-fdef32a91e9d", "event_id": "9ff00636-376d-4309-8e6b-fdef32a91e9d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16500, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_192", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "bd209d4a-b478-4f42-bbd6-77f2fcaf3f66", "event_id": "2d0aca48-89f2-43ca-811e-125a8ea61abf", "parent_event_id": "bd209d4a-b478-4f42-bbd6-77f2fcaf3f66", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 831, "start_time": "2024-06-19T03:24:07.512Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_191", "variant_name": null}, {"function_name": "Fn_simple_191", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_191\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"park_name\":\"Yellowstone National Park\",\"information\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_191_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the elevation and area of Yellowstone National Park?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the basic information such as elevation and area of a national park.\n  function_name: 'park_information' or null,\n  // The name of the national park.\n  park_name: string,\n  // The type of information you want about the park.\n  information: [\n    'Elevation' or 'Area' or 'Location' or 'Established Year'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"park_information\",\n  \"park_name\": \"Yellowstone National Park\",\n  \"information\": [\"Elevation\", \"Area\"]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 201, "output_tokens": 37, "total_tokens": 238, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "bd209d4a-b478-4f42-bbd6-77f2fcaf3f66", "event_id": "bd209d4a-b478-4f42-bbd6-77f2fcaf3f66", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16511, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_191", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "df9e8cd3-3e93-438a-9e17-cb2e40d344f6", "event_id": "b05cb567-bdad-4fc5-8a40-5307cd3fbc26", "parent_event_id": "df9e8cd3-3e93-438a-9e17-cb2e40d344f6", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 633, "start_time": "2024-06-19T03:24:07.817Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_195", "variant_name": null}, {"function_name": "Fn_simple_195", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_195\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"slope_type\":\"hill\",\"num_results\":3,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_195_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the top three plants suitable for a hill slope in terms of erosion prevention?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the list of plants suitable for slope based on erosion control ability.\n  function_name: 'get_plants_for_slope' or null,\n  // The type of slope like steep, moderate etc.\n  slope_type: string,\n  // The number of top results needed. Default is 5.\n  num_results: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_plants_for_slope',\n  slope_type: 'hill',\n  num_results: 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 196, "output_tokens": 27, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "df9e8cd3-3e93-438a-9e17-cb2e40d344f6", "event_id": "df9e8cd3-3e93-438a-9e17-cb2e40d344f6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16618, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_195", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "52029d0d-b414-4ed9-92a0-f8bb578e850d", "event_id": "96e767d1-a3cf-4ea2-ab96-0123855e054b", "parent_event_id": "52029d0d-b414-4ed9-92a0-f8bb578e850d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 761, "start_time": "2024-06-19T03:24:07.783Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_194", "variant_name": null}, {"function_name": "Fn_simple_194", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_194\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Toronto\",\"plant_types\":[\"Value0\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_194_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the best local nurseries in Toronto with a good variety of annual plants.\n\nHere is the function to invoke:\n\n\n{\n  // Locate local nurseries based on location and plant types availability.\n  function_name: 'local_nursery.find' or null,\n  // The city or locality where the nursery needs to be located.\n  location: string,\n  // Type of plants the nursery should provide.\n  plant_types: [\n    'Annual' or 'Perennial' or 'Shrub' or 'Tree' or 'Herbs' or 'Fruits'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'local_nursery.find',\n  location: 'Toronto',\n  plant_types: ['Annual']\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 26, "total_tokens": 245, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "52029d0d-b414-4ed9-92a0-f8bb578e850d", "event_id": "52029d0d-b414-4ed9-92a0-f8bb578e850d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16713, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_194", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d3cad0df-de03-4d27-b261-5dd4b2eaedc0", "event_id": "b6d69979-6278-4d77-8204-c456a4cd353a", "parent_event_id": "d3cad0df-de03-4d27-b261-5dd4b2eaedc0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 657, "start_time": "2024-06-19T03:24:08.018Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_197", "variant_name": null}, {"function_name": "Fn_simple_197", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_197\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"London\",\"date\":\"2022/08/16\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_197_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the air quality index in London 2022/08/16?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the air quality index for a specific location.\n  function_name: 'air_quality' or null,\n  // The city that you want to get the air quality index for.\n  location: string,\n  // The date you want to get the air quality index for. Default is today.\n  date: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"air_quality\",\n  \"location\": \"London\",\n  \"date\": \"2022/08/16\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 193, "output_tokens": 30, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d3cad0df-de03-4d27-b261-5dd4b2eaedc0", "event_id": "d3cad0df-de03-4d27-b261-5dd4b2eaedc0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16843, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_197", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5bcfe9e3-c4e0-4a9a-b514-226645f067b0", "event_id": "70a76030-f7ae-4fbe-8985-f0db769215b6", "parent_event_id": "5bcfe9e3-c4e0-4a9a-b514-226645f067b0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1054, "start_time": "2024-06-19T03:24:07.657Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_193", "variant_name": null}, {"function_name": "Fn_simple_193", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_193\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"point1\":[40.7128,-74.006],\"point2\":[34.0522,-118.2437],\"meta\":\"Value\",\"unit\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_193_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437).\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the slope gradient between two geographical coordinates.\n  function_name: 'calculate_slope_gradient' or null,\n  // The geographic coordinates for the first point [Latitude, Longitude].\n  point1: float[],\n  // The geographic coordinates for the second point [Latitude, Longitude].\n  point2: float[],\n  // The unit for the slope gradient. Default is 'degree'.\n  unit: 'degree' or 'percent' or 'ratio' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_slope_gradient\",\n  \"point1\": [40.7128, -74.0060],\n  \"point2\": [34.0522, -118.2437],\n  \"unit\": \"degree\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 244, "output_tokens": 53, "total_tokens": 297, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5bcfe9e3-c4e0-4a9a-b514-226645f067b0", "event_id": "5bcfe9e3-c4e0-4a9a-b514-226645f067b0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 16880, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_193", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "40c58e67-8929-488d-8be0-8f69f4c0267c", "event_id": "df4d8d9c-b3dc-4134-b59b-949028c8f92a", "parent_event_id": "40c58e67-8929-488d-8be0-8f69f4c0267c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 730, "start_time": "2024-06-19T03:24:08.132Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_198", "variant_name": null}, {"function_name": "Fn_simple_198", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_198\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"San Diego\",\"time\":\"12pm\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_198_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the air quality index in San Diego at 12pm.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the air quality index at a specified location and time.\n  function_name: 'get_air_quality_index' or null,\n  // The location to get the air quality index for.\n  location: string,\n  // The specific time to check the air quality. Default is the current time.\n  time: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_air_quality_index\",\n  \"location\": \"San Diego\",\n  \"time\": \"12pm\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 33, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "40c58e67-8929-488d-8be0-8f69f4c0267c", "event_id": "40c58e67-8929-488d-8be0-8f69f4c0267c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17031, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_198", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "135b27ea-fdac-4eb8-a716-72e8fee69751", "event_id": "f698560c-6f4d-4bd3-9127-d20496faf863", "parent_event_id": "135b27ea-fdac-4eb8-a716-72e8fee69751", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1043, "start_time": "2024-06-19T03:24:07.938Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_196", "variant_name": null}, {"function_name": "Fn_simple_196", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_196\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"daily_miles\":20,\"meat_meals_per_week\":3,\"annual_trash_weight\":500,\"meta\":\"Value\",\"flights_per_year\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_196_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the carbon footprint of my lifestyle, assuming I drive 20 miles a day, consume 3 meat meals a week, and produce 500 lbs of trash in a year.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the estimated carbon footprint of a lifestyle based on factors such as daily driving distance, weekly meat consumption, and yearly trash production.\n  function_name: 'calculate_carbon_footprint' or null,\n  // The daily driving distance in miles.\n  daily_miles: int,\n  // The number of meat-based meals consumed per week.\n  meat_meals_per_week: int,\n  // The yearly weight of trash production in pounds.\n  annual_trash_weight: int,\n  // The number of flights taken per year. Default is 0.\n  flights_per_year: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_carbon_footprint',\n  daily_miles: 20,\n  meat_meals_per_week: 3,\n  annual_trash_weight: 500,\n}", "metadata": {"logprobs": null, "prompt_tokens": 269, "output_tokens": 40, "total_tokens": 309, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "135b27ea-fdac-4eb8-a716-72e8fee69751", "event_id": "135b27ea-fdac-4eb8-a716-72e8fee69751", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17150, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_196", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "22a527e2-8f0a-4d31-b1c6-25d30077e309", "event_id": "6528b251-7210-4c0d-81a9-67df17d933cb", "parent_event_id": "22a527e2-8f0a-4d31-b1c6-25d30077e309", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 682, "start_time": "2024-06-19T03:24:08.323Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_200", "variant_name": null}, {"function_name": "Fn_simple_200", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_200\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"San Jose\",\"meta\":\"Value\",\"days\":3}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_200_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find air quality index in San Jose for next three days.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves Air Quality Index (AQI) for specified location over a number of days.\n  function_name: 'environmental_data.air_quality_index' or null,\n  // Name of the city or town to retrieve air quality index for.\n  location: string,\n  // Number of days for which to retrieve data. If not provided, default to today.\n  days: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"environmental_data.air_quality_index\",\n  \"location\": \"San Jose\",\n  \"days\": 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 30, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "22a527e2-8f0a-4d31-b1c6-25d30077e309", "event_id": "22a527e2-8f0a-4d31-b1c6-25d30077e309", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17173, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_200", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f57a2f46-8f7a-40fb-b51d-f3d964a1180d", "event_id": "2038123f-4c72-4c7f-84d8-f6c2e9d79b4d", "parent_event_id": "f57a2f46-8f7a-40fb-b51d-f3d964a1180d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 750, "start_time": "2024-06-19T03:24:08.266Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_199", "variant_name": null}, {"function_name": "Fn_simple_199", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_199\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"weight\":70,\"meta\":\"Value\",\"activity_level\":null,\"climate\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_199_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the required water daily intake for a person with weight 70 kg.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the recommended daily water intake for a person based on their weight.\n  function_name: 'calculate_daily_water_intake' or null,\n  // The weight of the person in kilograms.\n  weight: int,\n  // The level of physical activity of the person. Default is 'moderate'.\n  activity_level: string or null,\n  // The climate of the area where the person lives. Default is 'temperate'.\n  climate: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_daily_water_intake\",\n  \"weight\": 70\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 221, "output_tokens": 25, "total_tokens": 246, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f57a2f46-8f7a-40fb-b51d-f3d964a1180d", "event_id": "f57a2f46-8f7a-40fb-b51d-f3d964a1180d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17184, "start_time": "2024-06-19T03:23:51.832Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_199", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fa06c83a-db99-4d4a-9b8c-6c7b720b9339", "event_id": "0bf82e87-5313-45c8-94e9-4c4fd513ebaa", "parent_event_id": "fa06c83a-db99-4d4a-9b8c-6c7b720b9339", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 700, "start_time": "2024-06-19T03:24:08.344Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_202", "variant_name": null}, {"function_name": "Fn_simple_202", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_202\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"species\":\"Panda\",\"country\":\"China\",\"meta\":\"Value\",\"year\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_202_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Estimate the population of pandas in the wild in China.\n\nHere is the function to invoke:\n\n\n{\n  // Estimate the population of a particular species in a given country.\n  function_name: 'estimate_population' or null,\n  // The species for which population needs to be estimated.\n  species: string,\n  // The country where the species lives.\n  country: string,\n  // The year for which population estimate is sought. Default is the current year.\n  year: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"estimate_population\",\n  \"species\": \"Panda\",\n  \"country\": \"China\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 26, "total_tokens": 228, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fa06c83a-db99-4d4a-9b8c-6c7b720b9339", "event_id": "fa06c83a-db99-4d4a-9b8c-6c7b720b9339", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17212, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_202", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9e4f3916-d077-4e2f-8d15-faf9fd5afc12", "event_id": "c20a3127-6e6a-4fd0-b3dc-5ce0cf477d6e", "parent_event_id": "9e4f3916-d077-4e2f-8d15-faf9fd5afc12", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 862, "start_time": "2024-06-19T03:24:08.333Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_201", "variant_name": null}, {"function_name": "Fn_simple_201", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_201\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"distance\":12000,\"fuel_type\":\"gas\",\"fuel_efficiency\":25.0,\"meta\":\"Value\",\"efficiency_reduction\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_201_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.\n  function_name: 'calculate_emissions' or null,\n  // The distance travelled in miles.\n  distance: int,\n  // Type of fuel used by the vehicle.\n  fuel_type: string,\n  // The vehicle's fuel efficiency in miles per gallon.\n  fuel_efficiency: float,\n  // The percentage decrease in fuel efficiency per year (optional). Default is 0\n  efficiency_reduction: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_emissions\",\n  \"distance\": 12000,\n  \"fuel_type\": \"gas\",\n  \"fuel_efficiency\": 25\n}", "metadata": {"logprobs": null, "prompt_tokens": 258, "output_tokens": 37, "total_tokens": 295, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dad76a96-8b09-4dc3-98b2-d3e9e2066da4", "event_id": "0aabf44b-873f-4abb-9cb6-5f9813aab91f", "parent_event_id": "dad76a96-8b09-4dc3-98b2-d3e9e2066da4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 650, "start_time": "2024-06-19T03:24:08.546Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_204", "variant_name": null}, {"function_name": "Fn_simple_204", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_204\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Chicago\",\"meta\":\"Value\",\"detail\":true,\"historical\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_204_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Can you find me the latest information about air quality index and pollution data for Chicago?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve real-time air quality and pollution data for a specific location.\n  function_name: 'get_air_quality' or null,\n  // The city that you want to get the air quality data for.\n  location: string,\n  // If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false.\n  detail: bool or null,\n  // Optional date (in 'YYYY-MM-DD' format) to retrieve historical data. (default: today)\n  historical: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_air_quality',\n  location: 'Chicago',\n  detail: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 242, "output_tokens": 22, "total_tokens": 264, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9e4f3916-d077-4e2f-8d15-faf9fd5afc12", "event_id": "9e4f3916-d077-4e2f-8d15-faf9fd5afc12", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17364, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_201", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dad76a96-8b09-4dc3-98b2-d3e9e2066da4", "event_id": "dad76a96-8b09-4dc3-98b2-d3e9e2066da4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17364, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_204", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "859cee09-c770-439b-93b7-21f1c8e81291", "event_id": "6e6f9db3-8a40-4bba-bea3-5387151f5f7e", "parent_event_id": "859cee09-c770-439b-93b7-21f1c8e81291", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 750, "start_time": "2024-06-19T03:24:08.451Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_203", "variant_name": null}, {"function_name": "Fn_simple_203", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_203\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"energy_type\":\"renewable\",\"usage_duration\":3,\"meta\":\"Value\",\"region\":\"California\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_203_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.\n  function_name: 'calculate_emission_savings' or null,\n  // Type of the renewable energy source.\n  energy_type: string,\n  // Usage duration in months.\n  usage_duration: int,\n  // The region where you use energy. Default is 'Texas'.\n  region: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_emission_savings',\n  energy_type: 'renewable',\n  usage_duration: 3,\n  region: 'California',\n}", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 35, "total_tokens": 246, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "859cee09-c770-439b-93b7-21f1c8e81291", "event_id": "859cee09-c770-439b-93b7-21f1c8e81291", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17369, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_203", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "af9a5d74-b615-4416-a295-bf18854b5e1a", "event_id": "b4331c71-0162-4713-ab8b-272737d061fb", "parent_event_id": "af9a5d74-b615-4416-a295-bf18854b5e1a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 700, "start_time": "2024-06-19T03:24:08.713Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_206", "variant_name": null}, {"function_name": "Fn_simple_206", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_206\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_location\":\"Boston\",\"end_location\":\"New York\",\"meta\":\"Value\",\"mode\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_206_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find out the current traffic situation from Boston driving to New York.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve current traffic conditions for a specified route.\n  function_name: 'get_traffic_info' or null,\n  // The starting point of the route.\n  start_location: string,\n  // The destination of the route.\n  end_location: string,\n  // Preferred method of transportation, default to 'driving'.\n  mode: 'driving' or 'walking' or 'bicycling' or 'transit' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_traffic_info',\n  start_location: 'Boston',\n  end_location: 'New York',\n  mode: 'driving',\n}", "metadata": {"logprobs": null, "prompt_tokens": 214, "output_tokens": 33, "total_tokens": 247, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "af9a5d74-b615-4416-a295-bf18854b5e1a", "event_id": "af9a5d74-b615-4416-a295-bf18854b5e1a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17581, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_206", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "62581f5c-df45-4f84-8fc2-1dd04e2e5169", "event_id": "feb0527f-a8d1-443d-a0c5-a6bf86ecd10f", "parent_event_id": "62581f5c-df45-4f84-8fc2-1dd04e2e5169", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 816, "start_time": "2024-06-19T03:24:08.676Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_205", "variant_name": null}, {"function_name": "Fn_simple_205", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_205\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Seattle, WA\",\"cuisine\":\"Chinese\",\"meta\":\"Value\",\"max_distance\":10}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_205_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby restaurants based on specific criteria like cuisine type.\n  function_name: 'restaurant.find_nearby' or null,\n  // The city and state, e.g. Seattle, WA\n  location: string,\n  // Preferred type of cuisine in restaurant.\n  cuisine: string,\n  // Maximum distance (in miles) within which to search for restaurants. Default is 5.\n  max_distance: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"restaurant.find_nearby\",\n  \"location\": \"Seattle, WA\",\n  \"cuisine\": \"Chinese\",\n  \"max_distance\": 10\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 38, "total_tokens": 251, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "62581f5c-df45-4f84-8fc2-1dd04e2e5169", "event_id": "62581f5c-df45-4f84-8fc2-1dd04e2e5169", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17660, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_205", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "875a7843-64f8-4def-803e-61405059851c", "event_id": "1bde72f5-304e-4a6d-9e2b-992f06798ab6", "parent_event_id": "875a7843-64f8-4def-803e-61405059851c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 728, "start_time": "2024-06-19T03:24:08.864Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_207", "variant_name": null}, {"function_name": "Fn_simple_207", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_207\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"London, UK\",\"amenities\":[\"Value0\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_207_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the nearest park with a tennis court in London.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby parks based on specific criteria like tennis court availability.\n  function_name: 'parks.find_nearby' or null,\n  // The city and state, e.g. London, UK\n  location: string,\n  // Preferred amenities in park. Default is ['Running Track']\n  amenities: [\n    'Tennis Court' or 'Picnic Area' or 'Playground' or 'Running Track'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"parks.find_nearby\",\n  \"location\": \"London, UK\",\n  \"amenities\": [\"Tennis Court\"]\n}", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 33, "total_tokens": 243, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "875a7843-64f8-4def-803e-61405059851c", "event_id": "875a7843-64f8-4def-803e-61405059851c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17759, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_207", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1cd65c22-b3a6-4bcb-ad0c-7956b379359b", "event_id": "bcdb9459-51bd-495e-b007-658eee2c831e", "parent_event_id": "1cd65c22-b3a6-4bcb-ad0c-7956b379359b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 664, "start_time": "2024-06-19T03:24:09.017Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_210", "variant_name": null}, {"function_name": "Fn_simple_210", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_210\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Boston, MA\",\"facilities\":[\"Value0\",\"Value2\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_210_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\n  function_name: 'public_library.find_nearby' or null,\n  // The city and state, e.g. Boston, MA\n  location: string,\n  // Facilities and sections in public library.\n  facilities: [\n    'Wi-Fi' or 'Reading Room' or 'Fiction' or 'Children Section' or 'Cafe'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'public_library.find_nearby',\n  location: 'Boston, MA',\n  facilities: ['Wi-Fi', 'Fiction']\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 32, "total_tokens": 252, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1cd65c22-b3a6-4bcb-ad0c-7956b379359b", "event_id": "1cd65c22-b3a6-4bcb-ad0c-7956b379359b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17851, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_210", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "59b65340-9352-4c0c-b8a1-49fddbcc26d6", "event_id": "f4a32423-5332-419d-b14e-da93976ae5ec", "parent_event_id": "59b65340-9352-4c0c-b8a1-49fddbcc26d6", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 704, "start_time": "2024-06-19T03:24:09.045Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_211", "variant_name": null}, {"function_name": "Fn_simple_211", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_211\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"topic\":\"Bitcoin\",\"quantity\":5,\"meta\":\"Value\",\"region\":\"US\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_211_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get 5 latest news on Bitcoin in US\n\nHere is the function to invoke:\n\n\n{\n  // Fetches the latest news on a specific topic.\n  function_name: 'get_news' or null,\n  // The subject for the news topic.\n  topic: string,\n  // Number of articles to fetch.\n  quantity: int,\n  // The geographical region for the news. Default is 'US'.\n  region: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_news\",\n  \"topic\": \"Bitcoin\",\n  \"quantity\": 5,\n  \"region\": \"US\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 192, "output_tokens": 36, "total_tokens": 228, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "59b65340-9352-4c0c-b8a1-49fddbcc26d6", "event_id": "59b65340-9352-4c0c-b8a1-49fddbcc26d6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 17917, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_211", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "eff0632a-de2c-448c-8b1e-3b372a3ed098", "event_id": "632be629-f500-48eb-9e46-313cff12cc5f", "parent_event_id": "eff0632a-de2c-448c-8b1e-3b372a3ed098", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 889, "start_time": "2024-06-19T03:24:08.983Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_208", "variant_name": null}, {"function_name": "Fn_simple_208", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_208\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_location\":\"New York, USA\",\"end_location\":\"Miami, USA\",\"route_preference\":\"Value0\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_208_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the shortest driving distance between New York, USA and Miami, USA.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the shortest driving distance between two locations.\n  function_name: 'calculate_shortest_distance' or null,\n  // The starting location for the drive.\n  start_location: string,\n  // The destination location for the drive.\n  end_location: string,\n  // The preferred type of route.\n  route_preference: 'Shortest' or 'Scenic',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_shortest_distance\",\n  \"start_location\": \"New York, USA\",\n  \"end_location\": \"Miami, USA\",\n  \"route_preference\": \"Shortest\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 201, "output_tokens": 47, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "eff0632a-de2c-448c-8b1e-3b372a3ed098", "event_id": "eff0632a-de2c-448c-8b1e-3b372a3ed098", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18040, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_208", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2f0cace6-f559-4757-8f58-e8e7adf85ae7", "event_id": "93c01a10-453d-48ad-aa81-67e257aca4e2", "parent_event_id": "2f0cace6-f559-4757-8f58-e8e7adf85ae7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 916, "start_time": "2024-06-19T03:24:09.006Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_209", "variant_name": null}, {"function_name": "Fn_simple_209", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_209\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start\":\"New York\",\"end\":\"Los Angeles\",\"avoid\":[\"Value1\",\"Value0\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_209_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me the directions from New York to Los Angeles avoiding highways and toll roads.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve directions from a starting location to an ending location, including options for route preferences.\n  function_name: 'map_service.get_directions' or null,\n  // Starting location for the route.\n  start: string,\n  // Ending location for the route.\n  end: string,\n  // Route features to avoid. Default is ['highways', 'ferries']\n  avoid: [\n    'tolls' or 'highways' or 'ferries'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"map_service.get_directions\",\n  \"start\": \"New York\",\n  \"end\": \"Los Angeles\",\n  \"avoid\": [\"highways\", \"tolls\"]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 46, "total_tokens": 270, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2f0cace6-f559-4757-8f58-e8e7adf85ae7", "event_id": "2f0cace6-f559-4757-8f58-e8e7adf85ae7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18090, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_209", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ebcf0ab0-71fe-4e9d-ae61-2dca8dd8f605", "event_id": "581adbe2-a5b3-465d-b79c-84b1aa82108f", "parent_event_id": "ebcf0ab0-71fe-4e9d-ae61-2dca8dd8f605", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 763, "start_time": "2024-06-19T03:24:09.197Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_213", "variant_name": null}, {"function_name": "Fn_simple_213", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_213\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"company_name\":\"Apple Inc\",\"detail_level\":\"detailed\",\"meta\":\"Value\",\"market\":\"NASDAQ\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_213_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Give me detail information about stocks of Apple Inc.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves information about a specific stock based on company's name.\n  function_name: 'get_stock_info' or null,\n  // The name of the company.\n  company_name: string,\n  // Level of detail for stock information. Can be 'summary' or 'detailed'.\n  detail_level: string,\n  // The stock market of interest. Default is 'NASDAQ'\n  market: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_stock_info',\n  company_name: 'Apple Inc',\n  detail_level: 'detailed',\n  market: 'NASDAQ',\n}", "metadata": {"logprobs": null, "prompt_tokens": 206, "output_tokens": 33, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ebcf0ab0-71fe-4e9d-ae61-2dca8dd8f605", "event_id": "ebcf0ab0-71fe-4e9d-ae61-2dca8dd8f605", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18129, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_213", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "36094bf1-c89c-4f51-8519-b93cd06f9b3f", "event_id": "05f8903e-f55e-4975-8099-9a9ec8787343", "parent_event_id": "36094bf1-c89c-4f51-8519-b93cd06f9b3f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 882, "start_time": "2024-06-19T03:24:09.197Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_212", "variant_name": null}, {"function_name": "Fn_simple_212", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_212\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"to\":\"john.doe@example.com\",\"subject\":\"Meeting\",\"body\":\"Let's meet at 10 AM tomorrow\",\"meta\":\"Value\",\"cc\":null,\"bcc\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_212_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.\n\nHere is the function to invoke:\n\n\n{\n  // Send an email to the specified email address.\n  function_name: 'send_email' or null,\n  // The email address to send to.\n  to: string,\n  // The subject of the email.\n  subject: string,\n  // The body content of the email.\n  body: string,\n  // The email address to carbon copy. Default is empty if not specified.\n  cc: string or null,\n  // The email address to blind carbon copy. Default is empty if not specified.\n  bcc: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"send_email\",\n  \"to\": \"john.doe@example.com\",\n  \"subject\": \"Meeting\",\n  \"body\": \"Let's meet at 10 AM tomorrow\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 252, "output_tokens": 43, "total_tokens": 295, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "36094bf1-c89c-4f51-8519-b93cd06f9b3f", "event_id": "36094bf1-c89c-4f51-8519-b93cd06f9b3f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18248, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_212", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5f475e8c-42ae-4f3b-9af4-130ab1016548", "event_id": "f5b4fca7-d014-42f6-9039-cdc5d4235250", "parent_event_id": "5f475e8c-42ae-4f3b-9af4-130ab1016548", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 621, "start_time": "2024-06-19T03:24:09.493Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_216", "variant_name": null}, {"function_name": "Fn_simple_216", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_216\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"title\":\"Interstellar\",\"meta\":\"Value\",\"extra_info\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_216_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Give me a brief on movie 'Interstellar'\n\nHere is the function to invoke:\n\n\n{\n  // This function retrieves a brief about a specified movie.\n  function_name: 'movie_details.brief' or null,\n  // Title of the movie\n  title: string,\n  // Option to get additional information like Director, Cast, Awards etc. (default: false)\n  extra_info: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'movie_details.brief',\n  title: 'Interstellar',\n  extra_info: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 186, "output_tokens": 25, "total_tokens": 211, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5f475e8c-42ae-4f3b-9af4-130ab1016548", "event_id": "5f475e8c-42ae-4f3b-9af4-130ab1016548", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18282, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_216", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "bf975b7d-6b28-4fa8-808d-b92ce9175d65", "event_id": "7f362368-7db9-4470-b295-c4886b0f153b", "parent_event_id": "bf975b7d-6b28-4fa8-808d-b92ce9175d65", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 997, "start_time": "2024-06-19T03:24:09.202Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_214", "variant_name": null}, {"function_name": "Fn_simple_214", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_214\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"departure_location\":\"San Francisco\",\"destination_location\":\"London\",\"date\":\"2022-04-27\",\"meta\":\"Value\",\"time\":\"afternoon\",\"direct_flight\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_214_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Book a direct flight from San Francisco to London for 2022-04-27 afternoon\n\nHere is the function to invoke:\n\n\n{\n  // Book a direct flight for a specific date and time from departure location to destination location.\n  function_name: 'flight.book' or null,\n  // The location you are departing from.\n  departure_location: string,\n  // The location you are flying to.\n  destination_location: string,\n  // The date of the flight. Accepts standard date format e.g., 2022-04-28.\n  date: string,\n  // Preferred time of flight. Default is 'morning'.\n  time: string or null,\n  // If set to true, only direct flights will be searched. Default is false.\n  direct_flight: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'flight.book',\n  departure_location: 'San Francisco',\n  destination_location: 'London',\n  date: '2022-04-27',\n  time: 'afternoon',\n  direct_flight: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 265, "output_tokens": 49, "total_tokens": 314, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "bf975b7d-6b28-4fa8-808d-b92ce9175d65", "event_id": "bf975b7d-6b28-4fa8-808d-b92ce9175d65", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18367, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_214", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "22f14e1f-fec4-4c3a-aade-4e850dba5e28", "event_id": "8ecbb436-6f4d-4edf-983c-0878a8b32c06", "parent_event_id": "22f14e1f-fec4-4c3a-aade-4e850dba5e28", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 843, "start_time": "2024-06-19T03:24:09.414Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_215", "variant_name": null}, {"function_name": "Fn_simple_215", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_215\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"New York, NY\",\"genre\":\"rock\",\"meta\":\"Value\",\"days_ahead\":30}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_215_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Search for upcoming month rock concerts in New York.\n\nHere is the function to invoke:\n\n\n{\n  // Find upcoming events of a specific genre in a given location.\n  function_name: 'event_finder.find_upcoming' or null,\n  // The city and state where the search will take place, e.g. New York, NY.\n  location: string,\n  // The genre of events.\n  genre: string,\n  // The number of days from now to include in the search. (default: 7)\n  days_ahead: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"event_finder.find_upcoming\",\n  \"location\": \"New York, NY\",\n  \"genre\": \"rock\",\n  \"days_ahead\": 30\n}", "metadata": {"logprobs": null, "prompt_tokens": 216, "output_tokens": 40, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "22f14e1f-fec4-4c3a-aade-4e850dba5e28", "event_id": "22f14e1f-fec4-4c3a-aade-4e850dba5e28", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18425, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_215", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "221e6fd6-b533-443e-9ad3-ab3dd9756b8a", "event_id": "97f76f18-1f5b-4598-9fe5-05f999afa9cb", "parent_event_id": "221e6fd6-b533-443e-9ad3-ab3dd9756b8a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 893, "start_time": "2024-06-19T03:24:09.593Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_217", "variant_name": null}, {"function_name": "Fn_simple_217", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_217\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"text\":\"I love the food here! It's always fresh and delicious.\",\"language\":\"english\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_217_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.\n\nHere is the function to invoke:\n\n\n{\n  // Perform sentiment analysis on a given piece of text.\n  function_name: 'sentiment_analysis' or null,\n  // The text on which to perform sentiment analysis.\n  text: string,\n  // The language in which the text is written.\n  language: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"sentiment_analysis\",\n  \"text\": \"I love the food here! It's always fresh and delicious.\",\n  \"language\": \"english\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 41, "total_tokens": 231, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "221e6fd6-b533-443e-9ad3-ab3dd9756b8a", "event_id": "221e6fd6-b533-443e-9ad3-ab3dd9756b8a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18654, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_217", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e8f2679e-235f-48bc-a004-364dd2b9b7fb", "event_id": "5e5ac5db-07a6-4668-bb73-0d0e0351ab8a", "parent_event_id": "e8f2679e-235f-48bc-a004-364dd2b9b7fb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 696, "start_time": "2024-06-19T03:24:09.874Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_220", "variant_name": null}, {"function_name": "Fn_simple_220", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_220\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"neuron_type\":\"GABA\",\"brain_region\":\"all\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_220_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the coordinates of the neuron in a rat's all part of the brain that produces GABA neurotransmitters?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the coordinates of the specified neuron in the rat's brain.\n  function_name: 'get_neuron_coordinates' or null,\n  // Type of neuron to find. For instance, GABA, Glutamate, etc.\n  neuron_type: string,\n  // The region of the brain to consider. (default: All)\n  brain_region: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_neuron_coordinates',\n  neuron_type: 'GABA',\n  brain_region: 'all'\n}", "metadata": {"logprobs": null, "prompt_tokens": 209, "output_tokens": 27, "total_tokens": 236, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e8f2679e-235f-48bc-a004-364dd2b9b7fb", "event_id": "e8f2679e-235f-48bc-a004-364dd2b9b7fb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18738, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_220", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "833f79e2-d12c-4736-abec-d9133bb65a20", "event_id": "2c21e0d4-dc7e-413d-b3f9-718998e89840", "parent_event_id": "833f79e2-d12c-4736-abec-d9133bb65a20", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1076, "start_time": "2024-06-19T03:24:09.684Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_218", "variant_name": null}, {"function_name": "Fn_simple_218", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_218\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"data_source\":\"~/data/myfMRI.nii\",\"sequence_type\":\"multi-band\",\"smooth\":6,\"meta\":\"Value\",\"voxel_size\":2}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_218_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm.\n\nHere is the function to invoke:\n\n\n{\n  // This function takes in fMRI data to output analyzed data.\n  function_name: 'fMRI.analyze' or null,\n  // The path where the data is stored.\n  data_source: string,\n  // Type of fMRI sequence\n  sequence_type: string,\n  // Spatial smoothing FWHM. In mm.\n  smooth: int,\n  // Size of isotropic voxels in mm. (default: 3)\n  voxel_size: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'fMRI.analyze',\n  data_source: '~/data/myfMRI.nii',\n  sequence_type: 'multi-band',\n  smooth: 6,\n  voxel_size: 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 246, "output_tokens": 44, "total_tokens": 290, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "833f79e2-d12c-4736-abec-d9133bb65a20", "event_id": "833f79e2-d12c-4736-abec-d9133bb65a20", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18928, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_218", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6d9d790c-b221-4db1-a8ac-df991b28e1b1", "event_id": "15b1ccde-f868-4a98-bd12-a671e675a6cf", "parent_event_id": "6d9d790c-b221-4db1-a8ac-df991b28e1b1", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 698, "start_time": "2024-06-19T03:24:10.081Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_223", "variant_name": null}, {"function_name": "Fn_simple_223", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_223\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"weight\":70,\"height\":180,\"meta\":\"Value\",\"unit\":\"metric\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_223_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Can you calculate my Body Mass Index (BMI) given my weight is 70 kg and height is 180 cm?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the Body Mass Index based on given weight and height.\n  function_name: 'calculate_bmi' or null,\n  // The weight of a person in kilograms.\n  weight: int,\n  // The height of a person in centimeters.\n  height: int,\n  // Optional. The measurement system to be used for the result. The default is 'metric'.\n  unit: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_bmi\",\n  \"weight\": 70,\n  \"height\": 180,\n  \"unit\": \"metric\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 33, "total_tokens": 252, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6d9d790c-b221-4db1-a8ac-df991b28e1b1", "event_id": "6d9d790c-b221-4db1-a8ac-df991b28e1b1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18947, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_223", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "baf2e1ed-d7ae-4530-8d16-4055111448fd", "event_id": "9a2842c9-b9ff-4bfc-bae6-c7bb1c3be7f9", "parent_event_id": "baf2e1ed-d7ae-4530-8d16-4055111448fd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 887, "start_time": "2024-06-19T03:24:09.923Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_221", "variant_name": null}, {"function_name": "Fn_simple_221", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_221\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"input_synaptic_rate\":200,\"decay_rate\":0.1,\"meta\":\"Value\",\"weight\":0.5}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_221_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.\n  function_name: 'calculate_neuronal_activity' or null,\n  // The synaptic input rate, usually represented as number of inputs per second.\n  input_synaptic_rate: int,\n  // The weight of the input, denoting its influence on the neuron's state. Default is 1.0.\n  weight: float or null,\n  // The rate at which the neuron's potential decays in the absence of inputs.\n  decay_rate: float,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"calculate_neuronal_activity\",\n  \"input_synaptic_rate\": 200,\n  \"weight\": 0.5,\n  \"decay_rate\": 0.1\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 273, "output_tokens": 47, "total_tokens": 320, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "baf2e1ed-d7ae-4530-8d16-4055111448fd", "event_id": "baf2e1ed-d7ae-4530-8d16-4055111448fd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18978, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_221", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9cb149b9-3cf8-4d64-aaf7-b6c35864adf7", "event_id": "b11f797c-4f8e-40cf-8f59-b30be90b9017", "parent_event_id": "9cb149b9-3cf8-4d64-aaf7-b6c35864adf7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 856, "start_time": "2024-06-19T03:24:09.962Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_222", "variant_name": null}, {"function_name": "Fn_simple_222", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_222\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"London\",\"years\":5,\"meta\":\"Value\",\"rate\":1.2}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_222_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What will be the population growth in London over the next five years?\n\nHere is the function to invoke:\n\n\n{\n  // Estimate the future population growth of a specific location over a specified time period.\n  function_name: 'population_growth_estimate' or null,\n  // The city that you want to estimate the population growth for.\n  location: string,\n  // Number of years into the future for the estimate.\n  years: int,\n  // Expected annual growth rate in percentage. Default is 1.2.\n  rate: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"population_growth_estimate\",\n  \"location\": \"London\",\n  \"years\": 5,\n  \"rate\": 1.2\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 35, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9cb149b9-3cf8-4d64-aaf7-b6c35864adf7", "event_id": "9cb149b9-3cf8-4d64-aaf7-b6c35864adf7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 18986, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_222", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a06c8d30-3336-4faf-a9c6-42accc4654d4", "event_id": "7895b263-1815-47e4-ba1e-1112c9a655c5", "parent_event_id": "a06c8d30-3336-4faf-a9c6-42accc4654d4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 763, "start_time": "2024-06-19T03:24:10.115Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_224", "variant_name": null}, {"function_name": "Fn_simple_224", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_224\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"total\":50,\"extroverts\":15,\"introverts\":35,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_224_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find social behaviors and patterns in a group size of 50 with extroverted members being 15 and introverted members being 35.\n\nHere is the function to invoke:\n\n\n{\n  // Examine the social dynamics and interactions within a group based on the personality traits and group size.\n  function_name: 'group_dynamics.pattern' or null,\n  // The total group size.\n  total: int,\n  // The number of extroverted members in the group.\n  extroverts: int,\n  // The number of introverted members in the group.\n  introverts: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'group_dynamics.pattern',\n  total: 50,\n  extroverts: 15,\n  introverts: 35,\n}", "metadata": {"logprobs": null, "prompt_tokens": 223, "output_tokens": 33, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a06c8d30-3336-4faf-a9c6-42accc4654d4", "event_id": "a06c8d30-3336-4faf-a9c6-42accc4654d4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19047, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_224", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "309f4d57-ebe3-4e5e-bcf5-dcc5a5e65414", "event_id": "02926c4e-cce3-440d-8fc9-e7e909cee8fd", "parent_event_id": "309f4d57-ebe3-4e5e-bcf5-dcc5a5e65414", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 815, "start_time": "2024-06-19T03:24:10.200Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_225", "variant_name": null}, {"function_name": "Fn_simple_225", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_225\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"topic\":\"psychology\",\"sub_topics\":[\"behaviour\",\"group dynamics\"],\"meta\":\"Value\",\"region\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_225_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics.\n\nHere is the function to invoke:\n\n\n{\n  // Find the most followed Twitter user related to certain topics.\n  function_name: 'social_media_analytics.most_followed' or null,\n  // The main topic of interest.\n  topic: string,\n  // Sub-topics related to main topic. Default is empty.\n  sub_topics: string[],\n  // Region of interest for twitter search. Default is 'all'.\n  region: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"social_media_analytics.most_followed\",\n  \"topic\": \"psychology\",\n  \"sub_topics\": [\"behaviour\", \"group dynamics\"]\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 38, "total_tokens": 251, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "309f4d57-ebe3-4e5e-bcf5-dcc5a5e65414", "event_id": "309f4d57-ebe3-4e5e-bcf5-dcc5a5e65414", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19182, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_225", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c278936b-d45c-458c-a0b7-157a7e4f1074", "event_id": "c2e3cc81-91d4-4552-89ea-d5fed116820c", "parent_event_id": "c278936b-d45c-458c-a0b7-157a7e4f1074", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1347, "start_time": "2024-06-19T03:24:09.751Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_219", "variant_name": null}, {"function_name": "Fn_simple_219", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_219\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"patient_id\":\"546382\",\"status\":\"Value1\",\"meta\":\"Value\",\"mri_type\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_219_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'.\n\nHere is the function to invoke:\n\n\n{\n  // Fetch the brain MRI report of the patient for a given status.\n  function_name: 'patient.get_mri_report' or null,\n  // The patient identifier.\n  patient_id: string,\n  // Type of the MRI. Default to be 'brain'.\n  mri_type: 'brain' or 'spinal' or 'chest' or 'abdominal' or null,\n  // Status of the report, could be 'in progress', 'concluded' or 'draft'.\n  status: 'in progress' or 'concluded' or 'draft',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"patient.get_mri_report\",\n  \"patient_id\": \"546382\",\n  \"mri_type\": \"brain\",\n  \"status\": \"concluded\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 248, "output_tokens": 40, "total_tokens": 288, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c278936b-d45c-458c-a0b7-157a7e4f1074", "event_id": "c278936b-d45c-458c-a0b7-157a7e4f1074", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19265, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_219", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "661d16f3-4186-45e1-8652-0abce18130e0", "event_id": "898b450e-a223-4f6f-8044-dd090b5904d0", "parent_event_id": "661d16f3-4186-45e1-8652-0abce18130e0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 920, "start_time": "2024-06-19T03:24:10.258Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_226", "variant_name": null}, {"function_name": "Fn_simple_226", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_226\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"category\":\"reading\",\"option_one\":\"digital reading\",\"option_two\":\"physical books\",\"meta\":\"Value\",\"demographic\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_226_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the percentage of population preferring digital reading over physical books?\n\nHere is the function to invoke:\n\n\n{\n  // Gathers research data on public preference between two options, based on societal category.\n  function_name: 'psych_research.get_preference' or null,\n  // The societal category the preference data is about. E.g. reading, transportation, food\n  category: string,\n  // The first option people could prefer.\n  option_one: string,\n  // The second option people could prefer.\n  option_two: string,\n  // Specific demographic of society to narrow down the research. (default: all)\n  demographic: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"psych_research.get_preference\",\n  \"category\": \"reading\",\n  \"option_one\": \"digital reading\",\n  \"option_two\": \"physical books\",\n  \"demographic\": null\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 235, "output_tokens": 50, "total_tokens": 285, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "661d16f3-4186-45e1-8652-0abce18130e0", "event_id": "661d16f3-4186-45e1-8652-0abce18130e0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19346, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_226", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "db838c8f-5326-49ce-a3b4-ff15e6612f53", "event_id": "636ae778-b80c-46be-9d85-03aa94c45dd9", "parent_event_id": "db838c8f-5326-49ce-a3b4-ff15e6612f53", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 858, "start_time": "2024-06-19T03:24:10.487Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_227", "variant_name": null}, {"function_name": "Fn_simple_227", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_227\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"sign1\":\"Aries\",\"sign2\":\"Gemini\",\"meta\":\"Value\",\"scale\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_227_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the compatibility score in percentage of Aries with Gemini.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the compatibility score between two Zodiac signs.\n  function_name: 'get_zodiac_compatibility' or null,\n  // The first Zodiac sign.\n  sign1: string,\n  // The second Zodiac sign.\n  sign2: string,\n  // The scale on which compatibility should be shown. Default is 'percentage'.\n  scale: 'percentage' or '0-10 scale' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_zodiac_compatibility',\n  sign1: 'Aries',\n  sign2: 'Gemini',\n  scale: 'percentage'\n}", "metadata": {"logprobs": null, "prompt_tokens": 206, "output_tokens": 35, "total_tokens": 241, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "db838c8f-5326-49ce-a3b4-ff15e6612f53", "event_id": "db838c8f-5326-49ce-a3b4-ff15e6612f53", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19514, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_227", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9745d4cb-8e15-4798-a51e-73cfd60f4eb4", "event_id": "33cccd5c-60f0-43c5-88ae-a97a5509da19", "parent_event_id": "9745d4cb-8e15-4798-a51e-73cfd60f4eb4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 843, "start_time": "2024-06-19T03:24:10.571Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_228", "variant_name": null}, {"function_name": "Fn_simple_228", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_228\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"type\":\"ENFJ\",\"traits\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_228_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me strength and weakness traits for ENFJ personality type.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.\n  function_name: 'get_personality_traits' or null,\n  // The personality type.\n  type: string,\n  // List of traits to be retrieved, default is ['strengths'].\n  traits: [\n    'strengths' or 'weaknesses'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_personality_traits\",\n  \"type\": \"ENFJ\",\n  \"traits\": [\"strengths\", \"weaknesses\"]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 199, "output_tokens": 39, "total_tokens": 238, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9745d4cb-8e15-4798-a51e-73cfd60f4eb4", "event_id": "9745d4cb-8e15-4798-a51e-73cfd60f4eb4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19583, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_228", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "41e61e7b-005e-4fd7-95e5-80454ce4b34c", "event_id": "3e59ae82-17b6-4c90-88cf-19c565a82d5b", "parent_event_id": "41e61e7b-005e-4fd7-95e5-80454ce4b34c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 701, "start_time": "2024-06-19T03:24:10.761Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_229", "variant_name": null}, {"function_name": "Fn_simple_229", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_229\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"hobby\":\"jogging\",\"meta\":\"Value\",\"trait_count\":3}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_229_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find three personality traits of people who like jogging.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the common personality traits of people based on their hobbies or activities.\n  function_name: 'get_personality_traits' or null,\n  // The hobby or activity of interest.\n  hobby: string,\n  // The number of top traits to return, default is 5\n  trait_count: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_personality_traits\",\n  \"hobby\": \"jogging\",\n  \"trait_count\": 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 187, "output_tokens": 31, "total_tokens": 218, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "41e61e7b-005e-4fd7-95e5-80454ce4b34c", "event_id": "41e61e7b-005e-4fd7-95e5-80454ce4b34c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19630, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_229", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "96429fc6-22a0-44b2-94ba-efc8d3ce14c3", "event_id": "77edbc4c-cd4a-4131-a875-c4521d790ad1", "parent_event_id": "96429fc6-22a0-44b2-94ba-efc8d3ce14c3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 674, "start_time": "2024-06-19T03:24:10.880Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_233", "variant_name": null}, {"function_name": "Fn_simple_233", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_233\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"England\",\"year\":1800,\"meta\":\"Value\",\"fullName\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_233_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What was the full name king of England in 1800?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the monarch of a specific location during a specified year.\n  function_name: 'monarch.getMonarchOfYear' or null,\n  // The location (e.g., country) whose monarch needs to be found.\n  location: string,\n  // The year to search the monarch.\n  year: int,\n  // If true, returns the full name and title of the monarch.\n  fullName: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'monarch.getMonarchOfYear',\n  location: 'England',\n  year: 1800,\n  fullName: true,\n}", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 32, "total_tokens": 243, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "96429fc6-22a0-44b2-94ba-efc8d3ce14c3", "event_id": "96429fc6-22a0-44b2-94ba-efc8d3ce14c3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19723, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_233", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a3645ec1-42dc-4c64-a7b5-91f6bc1ab40d", "event_id": "1df47e36-24ec-4dbd-bf82-9711c686d19e", "parent_event_id": "a3645ec1-42dc-4c64-a7b5-91f6bc1ab40d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 815, "start_time": "2024-06-19T03:24:10.780Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_230", "variant_name": null}, {"function_name": "Fn_simple_230", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_230\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"characteristics\":[\"efficient\",\"organized\",\"easy going\",\"compassionate\"],\"meta\":\"Value\",\"scale\":\"Value1\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_230_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.\n  function_name: 'get_bigfive_scores' or null,\n  // List of user's behavioural characteristics.\n  characteristics: string[],\n  // The scoring scale of traits (default is medium).\n  scale: 'high' or 'medium' or 'low' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_bigfive_scores\",\n  \"characteristics\": [\"efficient\", \"organized\", \"easy going\", \"compassionate\"],\n  \"scale\": \"medium\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 43, "total_tokens": 246, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a3645ec1-42dc-4c64-a7b5-91f6bc1ab40d", "event_id": "a3645ec1-42dc-4c64-a7b5-91f6bc1ab40d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19764, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_230", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ac5b5366-2c02-4e24-b770-28750c3622c0", "event_id": "3fd32f42-e76b-4d5b-b287-ad1d26238803", "parent_event_id": "ac5b5366-2c02-4e24-b770-28750c3622c0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 895, "start_time": "2024-06-19T03:24:10.812Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_231", "variant_name": null}, {"function_name": "Fn_simple_231", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_231\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"France\",\"date\":1510,\"meta\":\"Value\",\"title\":\"King\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_231_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who was the King of France in 1510?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve information about a historical leader given a location and date.\n  function_name: 'historic_leader_search' or null,\n  // The country or region in question.\n  location: string,\n  // The year being queried.\n  date: int,\n  // The official title of the position. Default is 'King'.\n  title: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function args in JSON format:\n\n```json\n{\n  \"function_name\": \"historic_leader_search\",\n  \"location\": \"France\",\n  \"date\": 1510,\n  \"title\": \"King\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 195, "output_tokens": 44, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ac5b5366-2c02-4e24-b770-28750c3622c0", "event_id": "ac5b5366-2c02-4e24-b770-28750c3622c0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19875, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_231", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "510d01d8-0fe2-4307-869a-4178ed2c0f0e", "event_id": "3dd8b377-5b4d-497c-adcb-78531d3b47c0", "parent_event_id": "510d01d8-0fe2-4307-869a-4178ed2c0f0e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 895, "start_time": "2024-06-19T03:24:10.820Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_232", "variant_name": null}, {"function_name": "Fn_simple_232", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_232\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"country\":\"Germany\",\"start_year\":1871,\"end_year\":1945,\"event_type\":[\"Value0\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_232_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Provide key war events in German history from 1871 to 1945.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve key historical events within a specific period for a certain country.\n  function_name: 'history.get_key_events' or null,\n  // The name of the country for which history is queried.\n  country: string,\n  // Start year of the period for which history is queried.\n  start_year: int,\n  // End year of the period for which history is queried.\n  end_year: int,\n  // Types of event. Default to 'all', which all types will be considered.\n  event_type: [\n    'War' or 'Revolutions' or 'Diplomacy' or 'Economy'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'history.get_key_events',\n  country: 'Germany',\n  start_year: 1871,\n  end_year: 1945,\n  event_type: ['War'],\n}", "metadata": {"logprobs": null, "prompt_tokens": 258, "output_tokens": 41, "total_tokens": 299, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "510d01d8-0fe2-4307-869a-4178ed2c0f0e", "event_id": "510d01d8-0fe2-4307-869a-4178ed2c0f0e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19882, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_232", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "78441b73-9353-48e0-b7b9-d6f5e40ff34b", "event_id": "9613ff54-21d3-42af-bf21-a0020c6f8fa5", "parent_event_id": "78441b73-9353-48e0-b7b9-d6f5e40ff34b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 774, "start_time": "2024-06-19T03:24:11.016Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_234", "variant_name": null}, {"function_name": "Fn_simple_234", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_234\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"event_name\":\"Treaty of Tordesillas\",\"meta\":\"Value\",\"format\":\"YYYY\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_234_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: When did the Treaty of Tordesillas take place? Put it in the format of YYYY.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the date of a specific event in European history.\n  function_name: 'european_history.get_event_date' or null,\n  // The name of the event.\n  event_name: string,\n  // Optional format of the returned date. Default is 'MM-DD-YYYY'.\n  format: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function args:\n{\n  \"function_name\": \"european_history.get_event_date\",\n  \"event_name\": \"Treaty of Tordesillas\",\n  \"format\": \"YYYY\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 196, "output_tokens": 39, "total_tokens": 235, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "78441b73-9353-48e0-b7b9-d6f5e40ff34b", "event_id": "78441b73-9353-48e0-b7b9-d6f5e40ff34b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 19958, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_234", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f45927d5-c286-4528-9ce6-3250804a2e8d", "event_id": "ee296a99-3cda-4905-b472-0422447c3744", "parent_event_id": "f45927d5-c286-4528-9ce6-3250804a2e8d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 747, "start_time": "2024-06-19T03:24:11.099Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_235", "variant_name": null}, {"function_name": "Fn_simple_235", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_235\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": null}, "error": {"code": 2, "message": "Failed to coerce value: Error parsing '<root>': Unparsed field: region\n  Error parsing 'region': Expected Enum_Fn_simple_235_Enum0, got All.\n  String(\n      \"All\",\n  )", "traceback": null, "override": null}, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find important Wars in European history during the 19th century.\n\nHere is the function to invoke:\n\n\n{\n  // Fetches significant historical events within a specific time period in European history.\n  function_name: 'history_eu.fetch_events' or null,\n  // The century you are interested in.\n  century: int,\n  // The region of Europe you are interested in.\n  region: 'Northern' or 'Southern' or 'Eastern' or 'Western',\n  // Category of the historical events. Default is 'Culture'.\n  category: 'Wars' or 'Culture' or 'Politics' or 'Scientific' or 'Others' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"history_eu.fetch_events\",\n  \"century\": 19,\n  \"region\": \"All\",\n  \"category\": \"Wars\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 40, "total_tokens": 276, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f45927d5-c286-4528-9ce6-3250804a2e8d", "event_id": "f45927d5-c286-4528-9ce6-3250804a2e8d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20014, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_235", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'baml_py.BamlError'>: \\u001b[33mClient: GPT35Turbo (gpt-3.5-turbo-0125) - 747ms\\u001b[0m\\n\\u001b[34m---PROMPT---\\u001b[0m\\n\\u001b[2m[\\u001b[2mchat\\u001b[0m\\u001b[2m] \\u001b[43msystem: \\u001b[0m\\u001b[2mYou are an expert in composing functions. You are given a question and a set of possible functions.\\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\\nalso point it out. You should only return the function call in tools call sections.\\n\\u001b[43muser: \\u001b[0m\\u001b[2mQuestion: Find important Wars in European history during the 19th century.\\n\\nHere is the function to invoke:\\n\\n\\n{\\n  // Fetches significant historical events within a specific time period in European history.\\n  function_name: 'history_eu.fetch_events' or null,\\n  // The century you are interested in.\\n  century: int,\\n  // The region of Europe you are interested in.\\n  region: 'Northern' or 'Southern' or 'Eastern' or 'Western',\\n  // Category of the historical events. Default is 'Culture'.\\n  category: 'Wars' or 'Culture' or 'Politics' or 'Scientific' or 'Others' or null,\\n}\\n\\n\\nFunction args in JSON format:\\n\\u001b[0m\\n\\u001b[34m---LLM REPLY---\\u001b[0m\\n\\u001b[2m```json\\n{\\n  \\\"function_name\\\": \\\"history_eu.fetch_events\\\",\\n  \\\"century\\\": 19,\\n  \\\"region\\\": \\\"All\\\",\\n  \\\"category\\\": \\\"Wars\\\"\\n}\\n```\\u001b[0m\\n\\u001b[34m---Parsed Response---\\u001b[0m\\n\\u001b[31mFailed to coerce value: Error parsing '<root>': Unparsed field: region\\n  Error parsing 'region': Expected Enum_Fn_simple_235_Enum0, got All.\\n  String(\\n      \\\"All\\\",\\n  )\\u001b[0m\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "58a5ddbb-a6b3-41a3-83b0-64b43c404ff5", "event_id": "8151091a-6a17-41d3-af0f-0f590588cfb2", "parent_event_id": "58a5ddbb-a6b3-41a3-83b0-64b43c404ff5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 789, "start_time": "2024-06-19T03:24:11.179Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_236", "variant_name": null}, {"function_name": "Fn_simple_236", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_236\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"event\":\"Treaty of Lisbon\",\"meta\":\"Value\",\"location\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_236_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: When was the signing of the Treaty of Lisbon?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the date of a historical event.\n  function_name: 'get_event_date' or null,\n  // The name of the historical event.\n  event: string,\n  // Location where the event took place. Default to global if not specified.\n  location: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function args: \n{\n  \"function_name\": \"get_event_date\",\n  \"event\": \"Treaty of Lisbon\",\n  \"location\": null\n}", "metadata": {"logprobs": null, "prompt_tokens": 180, "output_tokens": 33, "total_tokens": 213, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "58a5ddbb-a6b3-41a3-83b0-64b43c404ff5", "event_id": "58a5ddbb-a6b3-41a3-83b0-64b43c404ff5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20136, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_236", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d19e7398-289c-47db-ae4a-ea2056d55387", "event_id": "99521984-0172-4e06-98ce-a1de793cb88e", "parent_event_id": "d19e7398-289c-47db-ae4a-ea2056d55387", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 626, "start_time": "2024-06-19T03:24:11.556Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_240", "variant_name": null}, {"function_name": "Fn_simple_240", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_240\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"year\":1861,\"meta\":\"Value\",\"full_name\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_240_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who was the full name of the president of the United States in 1861?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the name of the U.S. president in a given year.\n  function_name: 'US_president.in_year' or null,\n  // The year in question.\n  year: int,\n  // Option to return full name with middle initial, if applicable. (default: True)\n  full_name: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'US_president.in_year',\n  year: 1861,\n  full_name: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 26, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d19e7398-289c-47db-ae4a-ea2056d55387", "event_id": "d19e7398-289c-47db-ae4a-ea2056d55387", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20350, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_240", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9bda1b78-2a47-41bd-8a84-ebe98d1f85c0", "event_id": "5c6bf51b-54ee-4828-8bb2-38e3ff2be36d", "parent_event_id": "9bda1b78-2a47-41bd-8a84-ebe98d1f85c0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 883, "start_time": "2024-06-19T03:24:11.347Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_237", "variant_name": null}, {"function_name": "Fn_simple_237", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_237\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"event_name\":\"American Civil War\",\"specific_info\":\"Value0\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_237_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get start date on the American Civil War.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve detailed information about a significant event in U.S. history.\n  function_name: 'us_history.get_event_info' or null,\n  // The name of the event.\n  event_name: string,\n  // Specific aspect of information related to event.\n  specific_info: 'Start Date' or 'End Date' or 'Participants' or 'Result' or 'Notable Figures' or 'Importance in History',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'us_history.get_event_info',\n  event_name: 'American Civil War',\n  specific_info: 'Start Date'\n}", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 30, "total_tokens": 237, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9bda1b78-2a47-41bd-8a84-ebe98d1f85c0", "event_id": "9bda1b78-2a47-41bd-8a84-ebe98d1f85c0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20398, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_237", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f9fd4e63-8b6d-4a5c-afc9-6a526a785a8d", "event_id": "efe8c705-546c-488a-a4cf-a7ce5ca0f6ab", "parent_event_id": "f9fd4e63-8b6d-4a5c-afc9-6a526a785a8d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 789, "start_time": "2024-06-19T03:24:11.464Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_239", "variant_name": null}, {"function_name": "Fn_simple_239", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_239\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"event\":\"American Civil War\",\"year\":1861,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_239_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who was the president of the United States during the American Civil War?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the U.S. president during a specific event in American history.\n  function_name: 'us_history.get_president' or null,\n  // The event in U.S. history.\n  event: string,\n  // The specific year of the event.\n  year: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"us_history.get_president\",\n  \"event\": \"American Civil War\",\n  \"year\": 1861\n}", "metadata": {"logprobs": null, "prompt_tokens": 184, "output_tokens": 31, "total_tokens": 215, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f9fd4e63-8b6d-4a5c-afc9-6a526a785a8d", "event_id": "f9fd4e63-8b6d-4a5c-afc9-6a526a785a8d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20420, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_239", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "68295665-8e91-41d3-8a8c-08d1e1d2058d", "event_id": "a502a9ef-46fc-4b34-897e-b13584ded522", "parent_event_id": "68295665-8e91-41d3-8a8c-08d1e1d2058d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 930, "start_time": "2024-06-19T03:24:11.416Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_238", "variant_name": null}, {"function_name": "Fn_simple_238", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_238\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"country\":\"United States\",\"start_year\":1960,\"end_year\":2000,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_238_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get historical GDP data for United States from 1960 to 2000.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve historical GDP data for a specific country and time range.\n  function_name: 'get_historical_GDP' or null,\n  // The country for which the historical GDP data is required.\n  country: string,\n  // Starting year of the period for which GDP data is required.\n  start_year: int,\n  // Ending year of the period for which GDP data is required.\n  end_year: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_historical_GDP\",\n  \"country\": \"United States\",\n  \"start_year\": 1960,\n  \"end_year\": 2000\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 44, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "68295665-8e91-41d3-8a8c-08d1e1d2058d", "event_id": "68295665-8e91-41d3-8a8c-08d1e1d2058d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20515, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_238", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e7c49740-bf88-4e42-b4f0-c648b561bcb5", "event_id": "12c3a8ac-3f81-4265-9c1f-8cb9a605cecd", "parent_event_id": "e7c49740-bf88-4e42-b4f0-c648b561bcb5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 651, "start_time": "2024-06-19T03:24:11.708Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_242", "variant_name": null}, {"function_name": "Fn_simple_242", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_242\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"event\":\"Civil War\",\"meta\":\"Value\",\"country\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_242_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who was the U.S. president during the Civil War?\n\nHere is the function to invoke:\n\n\n{\n  // Returns the U.S. president during a specified historical event.\n  function_name: 'US_President_During_Event' or null,\n  // The historical event.\n  event: string,\n  // The country the president leads (optional parameter, defaults to 'USA' if not specified).\n  country: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"US_President_During_Event\",\n  \"event\": \"Civil War\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 23, "total_tokens": 213, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e7c49740-bf88-4e42-b4f0-c648b561bcb5", "event_id": "e7c49740-bf88-4e42-b4f0-c648b561bcb5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20528, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_242", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0cddd7a3-1ec1-4c20-9cec-fa06c6ecf54a", "event_id": "7042d362-41a8-4e8a-b7d3-c960ef1f7cff", "parent_event_id": "0cddd7a3-1ec1-4c20-9cec-fa06c6ecf54a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 786, "start_time": "2024-06-19T03:24:11.597Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_241", "variant_name": null}, {"function_name": "Fn_simple_241", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_241\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"year\":1940,\"meta\":\"Value\",\"full_term_only\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_241_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who was the President of the United States in 1940?\n\nHere is the function to invoke:\n\n\n{\n  // Get the name of the U.S. President for a specified year.\n  function_name: 'history_api.get_president_by_year' or null,\n  // The year you want to know the U.S. president of.\n  year: int,\n  // Flag to determine if we should only return presidents that served a full term for the specified year.\n  full_term_only: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"history_api.get_president_by_year\",\n  \"year\": 1940,\n  \"full_term_only\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 206, "output_tokens": 32, "total_tokens": 238, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0cddd7a3-1ec1-4c20-9cec-fa06c6ecf54a", "event_id": "0cddd7a3-1ec1-4c20-9cec-fa06c6ecf54a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20551, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_241", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9c86c8c1-75d7-4568-a814-6daaa194a371", "event_id": "e74b998d-92d7-4e6c-9e14-aaa3b111cf6f", "parent_event_id": "9c86c8c1-75d7-4568-a814-6daaa194a371", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 674, "start_time": "2024-06-19T03:24:11.716Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_243", "variant_name": null}, {"function_name": "Fn_simple_243", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_243\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"discovery\":\"theory of evolution\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_243_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who is the scientist that first proposed the theory of evolution?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the scientist's name who is credited for a specific scientific discovery or theory.\n  function_name: 'get_scientist_for_discovery' or null,\n  // The scientific discovery or theory.\n  discovery: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_scientist_for_discovery\",\n  \"discovery\": \"theory of evolution\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 170, "output_tokens": 30, "total_tokens": 200, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9c86c8c1-75d7-4568-a814-6daaa194a371", "event_id": "9c86c8c1-75d7-4568-a814-6daaa194a371", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20558, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_243", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "07ec14dd-3613-4739-813e-7602546378d7", "event_id": "25a41014-9bc3-4ae6-b2fd-4f4ad4a432f6", "parent_event_id": "07ec14dd-3613-4739-813e-7602546378d7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 622, "start_time": "2024-06-19T03:24:11.792Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_244", "variant_name": null}, {"function_name": "Fn_simple_244", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_244\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"discovery\":\"neutron\",\"detail\":true,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_244_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who discovered the neutron? Give me detail information.\n\nHere is the function to invoke:\n\n\n{\n  // Get the person or team who made a particular scientific discovery\n  function_name: 'get_discoverer' or null,\n  // The discovery for which the discoverer's information is needed.\n  discovery: string,\n  // Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.\n  detail: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_discoverer',\n  discovery: 'neutron',\n  detail: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 196, "output_tokens": 24, "total_tokens": 220, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "07ec14dd-3613-4739-813e-7602546378d7", "event_id": "07ec14dd-3613-4739-813e-7602546378d7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20581, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_244", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1e0a8a60-294e-4e1d-b995-e2a2f04259aa", "event_id": "1977a066-4bd7-4ceb-88bc-9c4e29b56460", "parent_event_id": "1e0a8a60-294e-4e1d-b995-e2a2f04259aa", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 833, "start_time": "2024-06-19T03:24:11.848Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_245", "variant_name": null}, {"function_name": "Fn_simple_245", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_245\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"author\":\"Isaac Newton\",\"work_title\":\"law of universal gravitation\",\"meta\":\"Value\",\"location\":\"all\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_245_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What year was the law of universal gravitation published by Isaac Newton?\n\nHere is the function to invoke:\n\n\n{\n  // Fetches the year a particular scientific work was published.\n  function_name: 'publication_year.find' or null,\n  // Name of the author of the work.\n  author: string,\n  // Title of the scientific work.\n  work_title: string,\n  // Place of the publication, if known. Default to 'all'.\n  location: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'publication_year.find',\n  author: 'Isaac Newton',\n  work_title: 'law of universal gravitation',\n  location: 'all',\n}", "metadata": {"logprobs": null, "prompt_tokens": 201, "output_tokens": 36, "total_tokens": 237, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1e0a8a60-294e-4e1d-b995-e2a2f04259aa", "event_id": "1e0a8a60-294e-4e1d-b995-e2a2f04259aa", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20848, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_245", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c141bb0a-25a1-4520-bf80-ff4bb3413024", "event_id": "2cb71882-ca0a-4aa1-9ee5-cb3c8f0af87f", "parent_event_id": "c141bb0a-25a1-4520-bf80-ff4bb3413024", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 769, "start_time": "2024-06-19T03:24:11.970Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_246", "variant_name": null}, {"function_name": "Fn_simple_246", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_246\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"element_name\":\"radium\",\"meta\":\"Value\",\"year\":0,\"first\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_246_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who discovered radium?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the name of the discoverer of an element based on its name.\n  function_name: 'discoverer.get' or null,\n  // The name of the element.\n  element_name: string,\n  // Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it.\n  year: int or null,\n  // Optional parameter indicating if the first discoverer's name should be retrieved. (default: True)\n  first: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"discoverer.get\",\n  \"element_name\": \"radium\",\n  \"year\": 0,\n  \"first\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 231, "output_tokens": 34, "total_tokens": 265, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c141bb0a-25a1-4520-bf80-ff4bb3413024", "event_id": "c141bb0a-25a1-4520-bf80-ff4bb3413024", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20907, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_246", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "790cdc1c-df9e-4627-91a6-58326854ad22", "event_id": "088fd488-b234-4be1-a82b-3fb9640fe4ee", "parent_event_id": "790cdc1c-df9e-4627-91a6-58326854ad22", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 599, "start_time": "2024-06-19T03:24:12.184Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_247", "variant_name": null}, {"function_name": "Fn_simple_247", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_247\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"discovery\":\"Gravity\",\"meta\":\"Value\",\"method_used\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_247_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who discovered Gravity and what was the method used?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the details of a scientific discovery based on the discovery name.\n  function_name: 'science_history.get_discovery_details' or null,\n  // The name of the discovery, e.g. Gravity\n  discovery: string,\n  // The method used for the discovery, default value is 'default' which gives the most accepted method.\n  method_used: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'science_history.get_discovery_details',\n  discovery: 'Gravity'\n}", "metadata": {"logprobs": null, "prompt_tokens": 199, "output_tokens": 20, "total_tokens": 219, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "790cdc1c-df9e-4627-91a6-58326854ad22", "event_id": "790cdc1c-df9e-4627-91a6-58326854ad22", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 20950, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_247", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e4713da6-8a9f-41dd-aaf9-e3cbf429eca3", "event_id": "641592d0-de51-4fd9-bd34-63790e2ef978", "parent_event_id": "e4713da6-8a9f-41dd-aaf9-e3cbf429eca3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 696, "start_time": "2024-06-19T03:24:12.231Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_248", "variant_name": null}, {"function_name": "Fn_simple_248", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_248\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"scientist\":\"Albert Einstein\",\"date\":\"1915-03-17\",\"meta\":\"Value\",\"category\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_248_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What was Albert Einstein's contribution to science on March 17, 1915?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve historical contribution made by a scientist on a specific date.\n  function_name: 'historical_contrib.get_contrib' or null,\n  // The scientist whose contributions need to be searched.\n  scientist: string,\n  // The date when the contribution was made in yyyy-mm-dd format.\n  date: string,\n  // The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'.\n  category: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'historical_contrib.get_contrib',\n  scientist: 'Albert Einstein',\n  date: '1915-03-17',\n}", "metadata": {"logprobs": null, "prompt_tokens": 222, "output_tokens": 31, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e4713da6-8a9f-41dd-aaf9-e3cbf429eca3", "event_id": "e4713da6-8a9f-41dd-aaf9-e3cbf429eca3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21095, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_248", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "26c20a8d-48a7-491a-a945-3ae21120cf18", "event_id": "7c2677ce-e411-4829-9e06-2ed3365fba54", "parent_event_id": "26c20a8d-48a7-491a-a945-3ae21120cf18", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 748, "start_time": "2024-06-19T03:24:12.254Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_249", "variant_name": null}, {"function_name": "Fn_simple_249", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_249\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"invention_name\":\"Theory of Relativity\",\"want_year\":true,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_249_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who invented the theory of relativity and in which year?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the inventor and year of invention based on the invention's name.\n  function_name: 'science_history.get_invention' or null,\n  // The name of the invention.\n  invention_name: string,\n  // Return the year of invention if set to true.\n  want_year: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"science_history.get_invention\",\n  \"invention_name\": \"Theory of Relativity\",\n  \"want_year\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 185, "output_tokens": 33, "total_tokens": 218, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "26c20a8d-48a7-491a-a945-3ae21120cf18", "event_id": "26c20a8d-48a7-491a-a945-3ae21120cf18", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21169, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_249", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "00b1f059-db10-419e-95ab-6eb95e0ced31", "event_id": "65a2006a-0f55-45cb-a1b0-468a267deff8", "parent_event_id": "00b1f059-db10-419e-95ab-6eb95e0ced31", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 733, "start_time": "2024-06-19T03:24:12.361Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_251", "variant_name": null}, {"function_name": "Fn_simple_251", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_251\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"place1\":\"San Francisco\",\"place2\":\"Sydney\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_251_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the time difference between San Francisco and Sydney?\n\nHere is the function to invoke:\n\n\n{\n  // Get the time difference between two places.\n  function_name: 'get_time_difference' or null,\n  // The first place for time difference.\n  place1: string,\n  // The second place for time difference.\n  place2: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_time_difference\",\n  \"place1\": \"San Francisco\",\n  \"place2\": \"Sydney\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 174, "output_tokens": 30, "total_tokens": 204, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "00b1f059-db10-419e-95ab-6eb95e0ced31", "event_id": "00b1f059-db10-419e-95ab-6eb95e0ced31", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21262, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_251", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f2ecef02-a395-4ca4-9c99-289ad71597eb", "event_id": "fc6d5961-667c-47bb-a5cf-40c7e548489b", "parent_event_id": "f2ecef02-a395-4ca4-9c99-289ad71597eb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 771, "start_time": "2024-06-19T03:24:12.385Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_252", "variant_name": null}, {"function_name": "Fn_simple_252", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_252\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"name\":\"Jesus Christ\",\"meta\":\"Value\",\"source\":\"Value1\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_252_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the earliest reference of Jesus Christ in history from historical record?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the earliest historical reference of a person.\n  function_name: 'get_earliest_reference' or null,\n  // The name of the person.\n  name: string,\n  // Source to fetch the reference. Default is 'scriptures'\n  source: 'scriptures' or 'historical records' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function args:\n{\n  \"function_name\": \"get_earliest_reference\",\n  \"name\": \"Jesus Christ\",\n  \"source\": \"historical records\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 193, "output_tokens": 34, "total_tokens": 227, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f2ecef02-a395-4ca4-9c99-289ad71597eb", "event_id": "f2ecef02-a395-4ca4-9c99-289ad71597eb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21323, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_252", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "413a6893-57df-49d0-ae76-5272b1224f17", "event_id": "5fb5cc40-301e-4544-ae8c-87346298c2d9", "parent_event_id": "413a6893-57df-49d0-ae76-5272b1224f17", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 828, "start_time": "2024-06-19T03:24:12.348Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_250", "variant_name": null}, {"function_name": "Fn_simple_250", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_250\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"religion\":\"Christianity\",\"till_century\":14,\"meta\":\"Value\",\"include_people\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_250_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Tell me more about Christianity and its history till the 14th century\n\nHere is the function to invoke:\n\n\n{\n  // Provides comprehensive historical details about a specified religion till a specified century.\n  function_name: 'religion.history_info' or null,\n  // The name of the religion for which historical details are needed.\n  religion: string,\n  // The century till which historical details are needed.\n  till_century: int,\n  // To include influential people related to the religion during that time period, default is False\n  include_people: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"religion.history_info\",\n  \"religion\": \"Christianity\",\n  \"till_century\": 14,\n  \"include_people\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 39, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "413a6893-57df-49d0-ae76-5272b1224f17", "event_id": "413a6893-57df-49d0-ae76-5272b1224f17", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21344, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_250", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "73669e80-ce18-4d55-b5df-b333ff5e2dc7", "event_id": "1285cf54-3e19-437f-9531-4771b13fc566", "parent_event_id": "73669e80-ce18-4d55-b5df-b333ff5e2dc7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 900, "start_time": "2024-06-19T03:24:12.391Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_253", "variant_name": null}, {"function_name": "Fn_simple_253", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_253\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"religion\":\"Christianity\",\"century\":16,\"meta\":\"Value\",\"sort_by\":\"Value0\",\"count\":10}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_253_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find ten major historical events related to Christianity in the 16th century sort by importance.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves significant religious events, including the details of the event, its historical context, and its impacts.\n  function_name: 'get_religion_history' or null,\n  // Name of the religion to be queried.\n  religion: string,\n  // The century in which the event(s) took place.\n  century: int,\n  // Order of sorting the events. Default is chronological. (default: chronological)\n  sort_by: 'importance' or 'chronological' or null,\n  // Number of events to return. Default is 5. (default: 5)\n  count: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_religion_history',\n  religion: 'Christianity',\n  century: 16,\n  sort_by: 'importance',\n  count: 10\n}", "metadata": {"logprobs": null, "prompt_tokens": 257, "output_tokens": 40, "total_tokens": 297, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e2e57976-df2f-4259-9e17-39453438847d", "event_id": "1d42eafc-5e91-461b-9855-9d520ecd9dd2", "parent_event_id": "e2e57976-df2f-4259-9e17-39453438847d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 877, "start_time": "2024-06-19T03:24:12.415Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_254", "variant_name": null}, {"function_name": "Fn_simple_254", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_254\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"religion_name\":\"Buddhism\",\"detail_level\":\"full\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_254_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Retrieve the full historyof Buddhism\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the history and main beliefs of a religion.\n  function_name: 'retrieve_religion_info' or null,\n  // The name of the religion.\n  religion_name: string,\n  // Level of detail for the returned information, either 'summary' or 'full'. (default: summary)\n  detail_level: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function call: \n```json\n{\n  \"function_name\": \"retrieve_religion_info\",\n  \"religion_name\": \"Buddhism\",\n  \"detail_level\": \"full\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 187, "output_tokens": 42, "total_tokens": 229, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "73669e80-ce18-4d55-b5df-b333ff5e2dc7", "event_id": "73669e80-ce18-4d55-b5df-b333ff5e2dc7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21459, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_253", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e2e57976-df2f-4259-9e17-39453438847d", "event_id": "e2e57976-df2f-4259-9e17-39453438847d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21460, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_254", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2f228687-6a57-4390-9db6-ad49568e88c4", "event_id": "99064ebd-fec1-4256-90b1-b57e733e1e95", "parent_event_id": "2f228687-6a57-4390-9db6-ad49568e88c4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 723, "start_time": "2024-06-19T03:24:12.784Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_257", "variant_name": null}, {"function_name": "Fn_simple_257", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_257\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"radius\":50,\"color\":\"Red\",\"meta\":\"Value\",\"background\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_257_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Generate an image of a circle with a radius of 50 pixels and color 'Red'.\n\nHere is the function to invoke:\n\n\n{\n  // Generates a circle image based on the given radius and color\n  function_name: 'generate_circle_image' or null,\n  // The radius of the circle in pixels.\n  radius: int,\n  // The color of the circle.\n  color: string,\n  // Optional: The color of the background, default is white.\n  background: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"generate_circle_image\",\n  \"radius\": 50,\n  \"color\": \"Red\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 204, "output_tokens": 30, "total_tokens": 234, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2f228687-6a57-4390-9db6-ad49568e88c4", "event_id": "2f228687-6a57-4390-9db6-ad49568e88c4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21675, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_257", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "44d70b1c-ca24-4fc8-9368-44c5f221633a", "event_id": "48a83b58-119e-4d9a-bcf5-948a50edad94", "parent_event_id": "44d70b1c-ca24-4fc8-9368-44c5f221633a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 619, "start_time": "2024-06-19T03:24:12.929Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_258", "variant_name": null}, {"function_name": "Fn_simple_258", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_258\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"color_name\":\"Sea Green\",\"meta\":\"Value\",\"standard\":\"basic\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_258_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Can you help me identify the basic RGB value of Sea Green color?\n\nHere is the function to invoke:\n\n\n{\n  // This function identifies the RGB values of a named color.\n  function_name: 'identify_color_rgb' or null,\n  // Name of the color.\n  color_name: string,\n  // The color standard (e.g. basic, pantone). Default is 'basic'\n  standard: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'identify_color_rgb',\n  color_name: 'Sea Green',\n  standard: 'basic'\n}", "metadata": {"logprobs": null, "prompt_tokens": 189, "output_tokens": 25, "total_tokens": 214, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "44d70b1c-ca24-4fc8-9368-44c5f221633a", "event_id": "44d70b1c-ca24-4fc8-9368-44c5f221633a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21715, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_258", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7ee7da8e-7f88-49c9-9993-6f7b4fdab06f", "event_id": "55a67794-8faf-4cb7-9718-8de2fd641d6e", "parent_event_id": "7ee7da8e-7f88-49c9-9993-6f7b4fdab06f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 815, "start_time": "2024-06-19T03:24:12.740Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_256", "variant_name": null}, {"function_name": "Fn_simple_256", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_256\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"papal_name\":\"Innocent III\",\"include_contributions\":true,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_256_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the biography and main contributions of Pope Innocent III.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.\n  function_name: 'religious_history.get_papal_biography' or null,\n  // The papal name of the Pope.\n  papal_name: string,\n  // Include main contributions of the Pope in the response if true.\n  include_contributions: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"religious_history.get_papal_biography\",\n  \"papal_name\": \"Innocent III\",\n  \"include_contributions\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 199, "output_tokens": 38, "total_tokens": 237, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7ee7da8e-7f88-49c9-9993-6f7b4fdab06f", "event_id": "7ee7da8e-7f88-49c9-9993-6f7b4fdab06f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21724, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_256", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f7bbf7f8-70ef-4e2d-aef1-e286d2f28c43", "event_id": "3a72b0af-e0c6-4771-8a38-ac0524bec356", "parent_event_id": "f7bbf7f8-70ef-4e2d-aef1-e286d2f28c43", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1000, "start_time": "2024-06-19T03:24:12.681Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_255", "variant_name": null}, {"function_name": "Fn_simple_255", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_255\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"religion\":\"Christianity\",\"start_year\":300,\"end_year\":400,\"meta\":\"Value\",\"event_type\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_255_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Retrieve the historic dates and facts related to Christianity between year 300 and 400.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves historic events and facts related to a specified religion for a given period.\n  function_name: 'get_religion_history' or null,\n  // The name of the religion.\n  religion: string,\n  // The starting year of the period.\n  start_year: int,\n  // The end year of the period.\n  end_year: int,\n  // Optional parameter specifying the type of event. Default is 'all'.\n  event_type: 'all' or 'crusade' or 'schism' or 'reform' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_religion_history\",\n  \"religion\": \"Christianity\",\n  \"start_year\": 300,\n  \"end_year\": 400,\n  \"event_type\": \"all\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 243, "output_tokens": 47, "total_tokens": 290, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f7bbf7f8-70ef-4e2d-aef1-e286d2f28c43", "event_id": "f7bbf7f8-70ef-4e2d-aef1-e286d2f28c43", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21849, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_255", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "57f8b274-6854-4810-97bc-f12da3f8b0ab", "event_id": "51053169-7900-4c78-8a54-fc18af584a02", "parent_event_id": "57f8b274-6854-4810-97bc-f12da3f8b0ab", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 696, "start_time": "2024-06-19T03:24:13.003Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_259", "variant_name": null}, {"function_name": "Fn_simple_259", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_259\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"color1\":\"yellow\",\"color2\":\"blue\",\"meta\":\"Value\",\"lightness\":60}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_259_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Mix yellow and blue colors and adjust the lightness level to 60 percent.\n\nHere is the function to invoke:\n\n\n{\n  // Combine two primary paint colors and adjust the resulting color's lightness level.\n  function_name: 'mix_paint_color' or null,\n  // The first primary color to be mixed.\n  color1: string,\n  // The second primary color to be mixed.\n  color2: string,\n  // The desired lightness level of the resulting color in percentage. The default level is set to 50.\n  lightness: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"mix_paint_color\",\n  \"color1\": \"yellow\",\n  \"color2\": \"blue\",\n  \"lightness\": 60\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 36, "total_tokens": 255, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "57f8b274-6854-4810-97bc-f12da3f8b0ab", "event_id": "57f8b274-6854-4810-97bc-f12da3f8b0ab", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21867, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_259", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6a2dbf13-c35d-4352-8891-4f3dd3118717", "event_id": "d67eae9d-5e5a-4922-94d0-360156cde244", "parent_event_id": "6a2dbf13-c35d-4352-8891-4f3dd3118717", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 695, "start_time": "2024-06-19T03:24:13.096Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_260", "variant_name": null}, {"function_name": "Fn_simple_260", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_260\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"coverage_rate\":400,\"length\":30,\"height\":12,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_260_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.\n  function_name: 'calculate_paint_needed' or null,\n  // The area in square feet that one gallon of paint can cover.\n  coverage_rate: int,\n  // Length of the wall to be painted in feet.\n  length: int,\n  // Height of the wall to be painted in feet.\n  height: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_paint_needed\",\n  \"coverage_rate\": 400,\n  \"length\": 30,\n  \"height\": 12\n}", "metadata": {"logprobs": null, "prompt_tokens": 234, "output_tokens": 34, "total_tokens": 268, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6a2dbf13-c35d-4352-8891-4f3dd3118717", "event_id": "6a2dbf13-c35d-4352-8891-4f3dd3118717", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 21958, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_260", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b42242d8-cb63-4d57-bf37-c15c6c918ffa", "event_id": "69df0ec7-6a84-40da-9168-dd77dc54817b", "parent_event_id": "b42242d8-cb63-4d57-bf37-c15c6c918ffa", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 721, "start_time": "2024-06-19T03:24:13.177Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_262", "variant_name": null}, {"function_name": "Fn_simple_262", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_262\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"width\":20,\"height\":10,\"meta\":\"Value\",\"color\":\"red\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_262_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Draw a rectangle with a width of 20 units and height of 10 units in red.\n\nHere is the function to invoke:\n\n\n{\n  // Draw a rectangle given its width and height.\n  function_name: 'draw_rectangle' or null,\n  // The width of the rectangle.\n  width: int,\n  // The height of the rectangle.\n  height: int,\n  // The color of the rectangle. Default is 'black'.\n  color: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"draw_rectangle\",\n  \"width\": 20,\n  \"height\": 10,\n  \"color\": \"red\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 198, "output_tokens": 32, "total_tokens": 230, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b42242d8-cb63-4d57-bf37-c15c6c918ffa", "event_id": "b42242d8-cb63-4d57-bf37-c15c6c918ffa", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22067, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_262", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "07c120fd-66c4-487e-99ac-6721e89a1acf", "event_id": "0ec724fb-2b5b-4e4b-b8ec-9c3b40ee6379", "parent_event_id": "07c120fd-66c4-487e-99ac-6721e89a1acf", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 687, "start_time": "2024-06-19T03:24:13.293Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_264", "variant_name": null}, {"function_name": "Fn_simple_264", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_264\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"artist_name\":\"James Plensa\",\"meta\":\"Value\",\"year\":null,\"detail\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_264_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the most recent art sculpture by James Plensa with detailed description.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves the most recent artwork by a specified artist with its detailed description.\n  function_name: 'get_sculpture_info' or null,\n  // The name of the artist.\n  artist_name: string,\n  // Year of the sculpture. This is optional. Default is the most recent year.\n  year: int or null,\n  // If True, it provides detailed description of the sculpture. Defaults to False.\n  detail: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_sculpture_info',\n  artist_name: 'James Plensa',\n  detail: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 28, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "07c120fd-66c4-487e-99ac-6721e89a1acf", "event_id": "07c120fd-66c4-487e-99ac-6721e89a1acf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22148, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_264", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "72ebf001-f6c4-44db-96a4-ab88da96ef99", "event_id": "8e6ae5d8-b976-4662-95f7-eefd24411ea3", "parent_event_id": "72ebf001-f6c4-44db-96a4-ab88da96ef99", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 792, "start_time": "2024-06-19T03:24:13.293Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_263", "variant_name": null}, {"function_name": "Fn_simple_263", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_263\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"size\":\"12x18\",\"medium\":\"oil\",\"meta\":\"Value\",\"dominant_color\":\"red\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_263_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Change my painting's medium to oil and change size to 12x18 with red dominant color.\n\nHere is the function to invoke:\n\n\n{\n  // Modify an existing painting's attributes such as size, medium, and color.\n  function_name: 'modify_painting' or null,\n  // The size of the painting in inches, width by height.\n  size: string,\n  // The medium of the painting, such as oil, acrylic, etc.\n  medium: string,\n  // The dominant color of the painting. Default to 'black'.\n  dominant_color: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"modify_painting\",\n  \"size\": \"12x18\",\n  \"medium\": \"oil\",\n  \"dominant_color\": \"red\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 222, "output_tokens": 37, "total_tokens": 259, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "72ebf001-f6c4-44db-96a4-ab88da96ef99", "event_id": "72ebf001-f6c4-44db-96a4-ab88da96ef99", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22253, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_263", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "72c3bb47-a8f4-4487-a97b-30bca6a3283d", "event_id": "21a57797-0f79-44db-b908-9de0a8fef7c0", "parent_event_id": "72c3bb47-a8f4-4487-a97b-30bca6a3283d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 988, "start_time": "2024-06-19T03:24:13.156Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_261", "variant_name": null}, {"function_name": "Fn_simple_261", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_261\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"area\":{\"width\":20,\"height\":12},\"paint_coverage\":350,\"meta\":\"Value\",\"exclusion\":{\"type\":\"window\",\"area\":15}}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_261_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).\n  function_name: 'paint_requirement.calculate' or null,\n  // The area to be painted.\n  area: {\n    // The width of the area to be painted in feet.\n    width: int or null,\n    // The height of the area to be painted in feet.\n    height: int or null,\n  },\n  // Coverage area per gallon of the paint in square feet. (default: 350)\n  paint_coverage: int,\n  // Area not to be painted. Default to not use any exclusion if not specified.\n  exclusion: {\n    // The type of the exclusion e.g window, door etc.\n    type: string or null,\n    // The area of the exclusion in square feet.\n    area: int or null,\n  } or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'paint_requirement.calculate',\n  area: {\n    width: 20,\n    height: 12,\n  },\n  paint_coverage: 350,\n  exclusion: {\n    type: 'window',\n    area: 15,\n  }\n}", "metadata": {"logprobs": null, "prompt_tokens": 344, "output_tokens": 55, "total_tokens": 399, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "72c3bb47-a8f4-4487-a97b-30bca6a3283d", "event_id": "72c3bb47-a8f4-4487-a97b-30bca6a3283d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22313, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_261", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f33fcc37-66ca-48ee-b174-4c0adbf262d8", "event_id": "94a12244-e267-43c3-a0c1-d2396bf8b3d2", "parent_event_id": "f33fcc37-66ca-48ee-b174-4c0adbf262d8", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 676, "start_time": "2024-06-19T03:24:13.509Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_265", "variant_name": null}, {"function_name": "Fn_simple_265", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_265\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"artist\":\"Michelangelo\",\"title\":\"David\",\"meta\":\"Value\",\"detail\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_265_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the size of the sculpture with title 'David' by Michelangelo.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve details of a sculpture based on the artist and the title of the sculpture.\n  function_name: 'sculpture.get_details' or null,\n  // The artist who made the sculpture.\n  artist: string,\n  // The title of the sculpture.\n  title: string,\n  // The specific detail wanted about the sculpture. Default is 'general information'.\n  detail: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'sculpture.get_details',\n  artist: \"Michelangelo\",\n  title: \"David\",\n}", "metadata": {"logprobs": null, "prompt_tokens": 208, "output_tokens": 27, "total_tokens": 235, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f33fcc37-66ca-48ee-b174-4c0adbf262d8", "event_id": "f33fcc37-66ca-48ee-b174-4c0adbf262d8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22352, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_265", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0a50e1c7-83c6-47b5-80d3-8b1a99688dfa", "event_id": "7b7ccee2-470d-456a-89ea-2cf9984e72cd", "parent_event_id": "0a50e1c7-83c6-47b5-80d3-8b1a99688dfa", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 696, "start_time": "2024-06-19T03:24:13.549Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_266", "variant_name": null}, {"function_name": "Fn_simple_266", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_266\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Chicago\",\"time_frame\":\"19th century\",\"meta\":\"Value\",\"material\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_266_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me sculptures near Chicago that were made in the 19th century.\n\nHere is the function to invoke:\n\n\n{\n  // Find sculptures based on location and a specific time frame.\n  function_name: 'sculpture_search' or null,\n  // The city where the sculptures are located.\n  location: string,\n  // The time frame during which the sculptures were made.\n  time_frame: string,\n  // Optional material of the sculptures. Default is 'all'\n  material: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'sculpture_search',\n  location: 'Chicago',\n  time_frame: '19th century',\n}", "metadata": {"logprobs": null, "prompt_tokens": 205, "output_tokens": 27, "total_tokens": 232, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0a50e1c7-83c6-47b5-80d3-8b1a99688dfa", "event_id": "0a50e1c7-83c6-47b5-80d3-8b1a99688dfa", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22412, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_266", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "42a6137b-91b7-40fe-967a-5eb41c9b35a5", "event_id": "83f63d8b-f218-4926-a4d7-692684794382", "parent_event_id": "42a6137b-91b7-40fe-967a-5eb41c9b35a5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 792, "start_time": "2024-06-19T03:24:13.557Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_267", "variant_name": null}, {"function_name": "Fn_simple_267", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_267\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"sculpture\":\"The Thinker\",\"artist\":\"Rodin\",\"meta\":\"Value\",\"year\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_267_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the value of the sculpture 'The Thinker' by Rodin?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the current market value of a particular sculpture by a specific artist.\n  function_name: 'get_sculpture_value' or null,\n  // The name of the sculpture.\n  sculpture: string,\n  // The name of the artist who created the sculpture.\n  artist: string,\n  // The year the sculpture was created. This is optional and is not required for all sculptures. Default is the most recent year.\n  year: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_sculpture_value\",\n  \"sculpture\": \"The Thinker\",\n  \"artist\": \"Rodin\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 222, "output_tokens": 34, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "42a6137b-91b7-40fe-967a-5eb41c9b35a5", "event_id": "42a6137b-91b7-40fe-967a-5eb41c9b35a5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22517, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_267", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "eaa46eb0-39c0-4aa1-867e-2f2832630f2d", "event_id": "71f0e038-f792-4aa4-acd5-ee4fe6153c6e", "parent_event_id": "eaa46eb0-39c0-4aa1-867e-2f2832630f2d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 785, "start_time": "2024-06-19T03:24:13.700Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_269", "variant_name": null}, {"function_name": "Fn_simple_269", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_269\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"artist\":\"Michelangelo\",\"material\":\"Marble\",\"meta\":\"Value\",\"location\":\"Rome, Italy\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_269_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the sculptures of Michelangelo with material Marble in Rome, Italy.\n\nHere is the function to invoke:\n\n\n{\n  // Locate the sculptures of specific artist by material and location\n  function_name: 'sculpture_locator.find_by_artist' or null,\n  // Name of the Artist of the sculpture\n  artist: string,\n  // Material of the sculpture.\n  material: string,\n  // The location where you want to find the sculpture. Default is 'all' if not specified.\n  location: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'sculpture_locator.find_by_artist',\n  artist: 'Michelangelo',\n  material: 'Marble',\n  location: 'Rome, Italy',\n}", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 39, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "eaa46eb0-39c0-4aa1-867e-2f2832630f2d", "event_id": "eaa46eb0-39c0-4aa1-867e-2f2832630f2d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22653, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_269", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ede22c5c-80d2-40e7-a72d-70f1135a52d8", "event_id": "b3d5a6ab-b237-4c18-bc47-356aeaa41363", "parent_event_id": "ede22c5c-80d2-40e7-a72d-70f1135a52d8", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 669, "start_time": "2024-06-19T03:24:13.900Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_271", "variant_name": null}, {"function_name": "Fn_simple_271", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_271\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"building_name\":\"Empire State Building\",\"unit\":\"Value1\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_271_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Can you give me the height and width of Empire State building in feet?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the dimensions of a specific building based on its name.\n  function_name: 'building.get_dimensions' or null,\n  // The name of the building.\n  building_name: string,\n  // The unit in which you want the dimensions. Default is meter.\n  unit: 'meter' or 'feet',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'building.get_dimensions',\n  building_name: 'Empire State Building',\n  unit: 'feet',\n}", "metadata": {"logprobs": null, "prompt_tokens": 192, "output_tokens": 28, "total_tokens": 220, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ede22c5c-80d2-40e7-a72d-70f1135a52d8", "event_id": "ede22c5c-80d2-40e7-a72d-70f1135a52d8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22737, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_271", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "793193a2-e48a-4ee7-9431-1cf8445b3796", "event_id": "2211edc1-11fe-47fb-bd8f-c399f2348578", "parent_event_id": "793193a2-e48a-4ee7-9431-1cf8445b3796", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 747, "start_time": "2024-06-19T03:24:13.982Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_272", "variant_name": null}, {"function_name": "Fn_simple_272", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_272\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"building_id\":\"B1004\",\"floors\":[2,3,4],\"meta\":\"Value\",\"mode\":\"dynamic\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_272_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?\n\nHere is the function to invoke:\n\n\n{\n  // Analyze a structure of a building based on its Id and floor numbers.\n  function_name: 'analyze_structure' or null,\n  // The unique identification number of the building.\n  building_id: string,\n  // Floor numbers to be analyzed.\n  floors: int[],\n  // Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'.\n  mode: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'analyze_structure',\n  building_id: 'B1004',\n  floors: [2, 3, 4],\n  mode: 'dynamic'\n}", "metadata": {"logprobs": null, "prompt_tokens": 225, "output_tokens": 37, "total_tokens": 262, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "793193a2-e48a-4ee7-9431-1cf8445b3796", "event_id": "793193a2-e48a-4ee7-9431-1cf8445b3796", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22897, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_272", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0ac7d63b-5625-4af7-85b5-b68e5aedfb39", "event_id": "10bc2bdc-6b53-4d36-90ed-9d50561688ee", "parent_event_id": "0ac7d63b-5625-4af7-85b5-b68e5aedfb39", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1085, "start_time": "2024-06-19T03:24:13.682Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_268", "variant_name": null}, {"function_name": "Fn_simple_268", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_268\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"New York City, NY\",\"art_form\":\"sculpture\",\"meta\":\"Value\",\"month\":\"upcoming\",\"user_ratings\":\"Value2\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_268_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the top rated modern sculpture exhibition happening in New York in the upcoming month.\n\nHere is the function to invoke:\n\n\n{\n  // Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.\n  function_name: 'find_exhibition' or null,\n  // The city where the exhibition is held, e.g., New York City, NY.\n  location: string,\n  // The form of art the exhibition is displaying e.g., sculpture.\n  art_form: string,\n  // The month of exhibition. Default value will return upcoming events if not specified.\n  month: string or null,\n  // Select exhibitions with user rating threshold. Default is 'low'\n  user_ratings: 'low' or 'average' or 'high' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'find_exhibition',\n  location: 'New York City, NY',\n  art_form: 'sculpture',\n  month: 'upcoming',\n  user_ratings: 'high'\n}", "metadata": {"logprobs": null, "prompt_tokens": 262, "output_tokens": 44, "total_tokens": 306, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0ac7d63b-5625-4af7-85b5-b68e5aedfb39", "event_id": "0ac7d63b-5625-4af7-85b5-b68e5aedfb39", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22935, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_268", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "616abad3-30bd-4fa7-8fbb-e017f3c69cad", "event_id": "827e5c4c-6a23-447f-9eed-25850bed8419", "parent_event_id": "616abad3-30bd-4fa7-8fbb-e017f3c69cad", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 990, "start_time": "2024-06-19T03:24:13.792Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_270", "variant_name": null}, {"function_name": "Fn_simple_270", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_270\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"principle\":10000,\"interest_rate\":0.05,\"time\":10,\"meta\":\"Value\",\"compounds_per_year\":1}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_270_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the compound interest of an investment of $10,000 at an interest rate of 5% compounded yearly for 10 years.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the compound interest of an investment over a given time period.\n  function_name: 'calculate_compound_interest' or null,\n  // The initial amount of the investment.\n  principle: int,\n  // The yearly interest rate of the investment.\n  interest_rate: float,\n  // The time, in years, the money is invested or borrowed for.\n  time: int,\n  // The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly).\n  compounds_per_year: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_compound_interest\",\n  \"principle\": 10000,\n  \"interest_rate\": 0.05,\n  \"time\": 10,\n  \"compounds_per_year\": 1\n}", "metadata": {"logprobs": null, "prompt_tokens": 249, "output_tokens": 49, "total_tokens": 298, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "616abad3-30bd-4fa7-8fbb-e017f3c69cad", "event_id": "616abad3-30bd-4fa7-8fbb-e017f3c69cad", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 22949, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_270", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f38a4550-741f-49d3-ac47-0ac271f68083", "event_id": "b9f75517-b7d9-4a74-8c43-c5a921056501", "parent_event_id": "f38a4550-741f-49d3-ac47-0ac271f68083", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 747, "start_time": "2024-06-19T03:24:14.086Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_273", "variant_name": null}, {"function_name": "Fn_simple_273", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_273\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"radius\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_273_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area and circumference of a circle with a radius of 5 units.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the area and circumference of a circle based on the radius.\n  function_name: 'calculate_circle_dimensions' or null,\n  // The radius of the circle.\n  radius: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calculate_circle_dimensions\",\n  \"radius\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 167, "output_tokens": 19, "total_tokens": 186, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f38a4550-741f-49d3-ac47-0ac271f68083", "event_id": "f38a4550-741f-49d3-ac47-0ac271f68083", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23001, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_273", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "83d9c13d-c336-42d1-b457-f9f9bab471e3", "event_id": "22d19ab1-b2b2-403a-852d-fc2776c67552", "parent_event_id": "83d9c13d-c336-42d1-b457-f9f9bab471e3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 721, "start_time": "2024-06-19T03:24:14.146Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_274", "variant_name": null}, {"function_name": "Fn_simple_274", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_274\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"name\":\"Louvre Museum\",\"location\":\"Paris\",\"meta\":\"Value\",\"day\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_274_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find out the open hours for the Louvre Museum in Paris.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the open hours for a museum based on its name and location.\n  function_name: 'museum.get_hours' or null,\n  // The name of the museum.\n  name: string,\n  // The city where the museum is located.\n  location: string,\n  // Optional: Day of the week for specific open hours. Default 'Monday'.\n  day: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'museum.get_hours',\n  name: 'Louvre Museum',\n  location: 'Paris',\n}", "metadata": {"logprobs": null, "prompt_tokens": 205, "output_tokens": 26, "total_tokens": 231, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "83d9c13d-c336-42d1-b457-f9f9bab471e3", "event_id": "83d9c13d-c336-42d1-b457-f9f9bab471e3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23035, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_274", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "be0f7f4b-782c-4e5a-8fe4-957698da60cf", "event_id": "fac51737-71ba-455f-a4fd-8b7df9e36819", "parent_event_id": "be0f7f4b-782c-4e5a-8fe4-957698da60cf", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 734, "start_time": "2024-06-19T03:24:14.246Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_276", "variant_name": null}, {"function_name": "Fn_simple_276", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_276\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number\":5,\"meta\":\"Value\",\"sort_by\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_276_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity.\n\nHere is the function to invoke:\n\n\n{\n  // Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.\n  function_name: 'metropolitan_museum.get_top_artworks' or null,\n  // The number of artworks to fetch\n  number: int,\n  // The criteria to sort the results on. Default is 'popularity'.\n  sort_by: 'popularity' or 'chronological' or 'alphabetical' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"metropolitan_museum.get_top_artworks\",\n  \"number\": 5,\n  \"sort_by\": \"popularity\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 33, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "be0f7f4b-782c-4e5a-8fe4-957698da60cf", "event_id": "be0f7f4b-782c-4e5a-8fe4-957698da60cf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23148, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_276", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ee4c94fb-91ab-4f1e-be31-5ed29e0ba0d0", "event_id": "4a4e2996-1edd-4130-8d71-6c2d67e7b452", "parent_event_id": "ee4c94fb-91ab-4f1e-be31-5ed29e0ba0d0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 837, "start_time": "2024-06-19T03:24:14.185Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_275", "variant_name": null}, {"function_name": "Fn_simple_275", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_275\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"museum_name\":\"Metropolitan Museum of Art\",\"meta\":\"Value\",\"info_type\":\"opening_hours\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_275_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find information about the opening hours of the Metropolitan Museum of Art.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve information about the opening hours of a museum based on its name.\n  function_name: 'museum_info' or null,\n  // The name of the museum.\n  museum_name: string,\n  // The type of information needed about the museum. (default: opening_hours)\n  info_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"museum_info\",\n  \"museum_name\": \"Metropolitan Museum of Art\",\n  \"info_type\": \"opening_hours\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 191, "output_tokens": 38, "total_tokens": 229, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ee4c94fb-91ab-4f1e-be31-5ed29e0ba0d0", "event_id": "ee4c94fb-91ab-4f1e-be31-5ed29e0ba0d0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23190, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_275", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c2f3d20b-e3c3-418a-ba16-8a14414e1eed", "event_id": "a303bffe-9523-4396-960c-0bde5580f335", "parent_event_id": "c2f3d20b-e3c3-418a-ba16-8a14414e1eed", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 796, "start_time": "2024-06-19T03:24:14.350Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_277", "variant_name": null}, {"function_name": "Fn_simple_277", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_277\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"museum\":\"Louvre Museum\",\"location\":\"Paris\",\"meta\":\"Value\",\"day\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_277_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the working hours of Louvre Museum in Paris.\n\nHere is the function to invoke:\n\n\n{\n  // Get the working hours of a museum in a specific location.\n  function_name: 'museum_working_hours.get' or null,\n  // The name of the museum.\n  museum: string,\n  // The location of the museum.\n  location: string,\n  // Specific day of the week. Default is 'Monday'\n  day: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'museum_working_hours.get',\n  museum: 'Louvre Museum',\n  location: 'Paris'\n}", "metadata": {"logprobs": null, "prompt_tokens": 196, "output_tokens": 27, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c2f3d20b-e3c3-418a-ba16-8a14414e1eed", "event_id": "c2f3d20b-e3c3-418a-ba16-8a14414e1eed", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23314, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_277", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fc62f3a7-2735-4932-99f4-538ce60aa86c", "event_id": "7eb0ff5d-cab3-4c6e-9d5e-8ced9af9efa0", "parent_event_id": "fc62f3a7-2735-4932-99f4-538ce60aa86c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 748, "start_time": "2024-06-19T03:24:14.487Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_278", "variant_name": null}, {"function_name": "Fn_simple_278", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_278\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"museum\":\"The British Museum\",\"date\":\"this weekend\",\"information\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_278_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the working hours and ticket price of The British Museum for this weekend.\n\nHere is the function to invoke:\n\n\n{\n  // Get information about a museum including its opening hours and ticket prices for a specific date range.\n  function_name: 'museum_info' or null,\n  // The name of the museum.\n  museum: string,\n  // The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'.\n  date: string,\n  // The type of information needed from the museum. This is optional and defaults to 'all' if not specified. (default: all)\n  information: [\n    'opening_hours' or 'ticket_price' or 'address'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'museum_info',\n  museum: 'The British Museum',\n  date: 'this weekend',\n  information: ['opening_hours', 'ticket_price']\n}", "metadata": {"logprobs": null, "prompt_tokens": 280, "output_tokens": 37, "total_tokens": 317, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fc62f3a7-2735-4932-99f4-538ce60aa86c", "event_id": "fc62f3a7-2735-4932-99f4-538ce60aa86c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23403, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_278", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9a79a4e4-83a9-4374-aa5f-7602881b8e78", "event_id": "3d9c0119-aa76-46b9-81cc-d24e0f0f55b7", "parent_event_id": "9a79a4e4-83a9-4374-aa5f-7602881b8e78", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 871, "start_time": "2024-06-19T03:24:14.571Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_279", "variant_name": null}, {"function_name": "Fn_simple_279", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_279\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"instrument\":\"piano\",\"manufacturer\":\"Yamaha\",\"features\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_279_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the average price and ratings of piano from Yamaha.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the average price and ratings of an instrument from a particular manufacturer.\n  function_name: 'get_instrument_details' or null,\n  // The name of the instrument.\n  instrument: string,\n  // The manufacturer of the instrument.\n  manufacturer: string,\n  // The features to retrieve about the instrument. Default is 'price'\n  features: [\n    'price' or 'rating'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_instrument_details\",\n  \"instrument\": \"piano\",\n  \"manufacturer\": \"Yamaha\",\n  \"features\": [\"price\", \"rating\"]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 43, "total_tokens": 250, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9a79a4e4-83a9-4374-aa5f-7602881b8e78", "event_id": "9a79a4e4-83a9-4374-aa5f-7602881b8e78", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23610, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_279", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2b9b71f6-86b9-4990-865e-2078393ad4ff", "event_id": "86a7fce5-7cbf-448c-9ce4-04e8afd5a665", "parent_event_id": "2b9b71f6-86b9-4990-865e-2078393ad4ff", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 784, "start_time": "2024-06-19T03:24:14.731Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_280", "variant_name": null}, {"function_name": "Fn_simple_280", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_280\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"brand\":\"Fender\",\"model\":\"American Professional II Stratocaster\",\"finish\":\"Rosewood Finish\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_280_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the current retail price of a specific musical instrument.\n  function_name: 'instrument_price.get' or null,\n  // The brand of the instrument.\n  brand: string,\n  // The specific model of the instrument.\n  model: string,\n  // The color or type of finish on the instrument.\n  finish: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'instrument_price.get',\n  brand: 'Fender',\n  model: 'American Professional II Stratocaster',\n  finish: 'Rosewood Finish',\n}", "metadata": {"logprobs": null, "prompt_tokens": 200, "output_tokens": 37, "total_tokens": 237, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2b9b71f6-86b9-4990-865e-2078393ad4ff", "event_id": "2b9b71f6-86b9-4990-865e-2078393ad4ff", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23683, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_280", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "65b97113-a4b4-4466-91b2-d4ca6e78724f", "event_id": "01bfd7af-0a2e-4a99-94a3-bfdec7b4306d", "parent_event_id": "65b97113-a4b4-4466-91b2-d4ca6e78724f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 753, "start_time": "2024-06-19T03:24:14.783Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_282", "variant_name": null}, {"function_name": "Fn_simple_282", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_282\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"name\":\"Violin\",\"maker\":\"Stradivarius\",\"year\":1721,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_282_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the details about the musical instrument 'Violin' from 'Stradivarius' maker, made in the year 1721.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.\n  function_name: 'get_instrument_info' or null,\n  // The name of the instrument.\n  name: string,\n  // The name of the maker who created the instrument.\n  maker: string,\n  // The year the instrument was made.\n  year: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_instrument_info',\n  name: 'Violin',\n  maker: 'Stradivarius',\n  year: 1721,\n}", "metadata": {"logprobs": null, "prompt_tokens": 217, "output_tokens": 35, "total_tokens": 252, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "65b97113-a4b4-4466-91b2-d4ca6e78724f", "event_id": "65b97113-a4b4-4466-91b2-d4ca6e78724f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23703, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_282", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5c45e41a-e922-455d-b79e-82d0f9124581", "event_id": "94774abc-81c5-4025-9f98-d2945ec974f1", "parent_event_id": "5c45e41a-e922-455d-b79e-82d0f9124581", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 785, "start_time": "2024-06-19T03:24:14.769Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_281", "variant_name": null}, {"function_name": "Fn_simple_281", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_281\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"budget\":1000,\"type\":\"acoustic\",\"meta\":\"Value\",\"make\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_281_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find an acoustic instrument within my budget of $1000.\n\nHere is the function to invoke:\n\n\n{\n  // Search for a musical instrument within specified budget and of specific type.\n  function_name: 'find_instrument' or null,\n  // Your budget for the instrument.\n  budget: int,\n  // Type of the instrument\n  type: string,\n  // Maker of the instrument. Default to not use if not specified.\n  make: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'find_instrument',\n  budget: 1000,\n  type: 'acoustic',\n}", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 25, "total_tokens": 222, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5c45e41a-e922-455d-b79e-82d0f9124581", "event_id": "5c45e41a-e922-455d-b79e-82d0f9124581", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23721, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_281", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ed2dcce2-3ae6-44eb-ba08-b73afaf02679", "event_id": "789d05f7-d04c-4097-b6aa-836fa94882f8", "parent_event_id": "ed2dcce2-3ae6-44eb-ba08-b73afaf02679", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 715, "start_time": "2024-06-19T03:24:14.868Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_284", "variant_name": null}, {"function_name": "Fn_simple_284", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_284\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"model\":\"Gibson Les Paul\",\"condition\":\"Value2\",\"location\":\"Chicago\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_284_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the price of a specific used guitar model based on its condition and location.\n  function_name: 'guitar_price.find' or null,\n  // The model of the guitar.\n  model: string,\n  // The condition of the guitar.\n  condition: 'Poor' or 'Good' or 'Excellent',\n  // The location where the guitar is being sold.\n  location: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'guitar_price.find',\n  model: 'Gibson Les Paul',\n  condition: 'Excellent',\n  location: 'Chicago'\n}", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 34, "total_tokens": 245, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ed2dcce2-3ae6-44eb-ba08-b73afaf02679", "event_id": "ed2dcce2-3ae6-44eb-ba08-b73afaf02679", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23750, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_284", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "248048c2-b388-4dfb-af64-258f9fa0c22e", "event_id": "fd13c8cd-4dfb-4894-9dda-c1705b3bc9ac", "parent_event_id": "248048c2-b388-4dfb-af64-258f9fa0c22e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 789, "start_time": "2024-06-19T03:24:14.834Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_283", "variant_name": null}, {"function_name": "Fn_simple_283", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_283\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"brand\":\"Yamaha\",\"specs\":[\"Value0\",\"Value1\",\"Value2\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_283_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale.\n\nHere is the function to invoke:\n\n\n{\n  // Locate a flute for sale based on specific requirements.\n  function_name: 'find_flute' or null,\n  // The brand of the flute. Example, 'Yamaha'\n  brand: string,\n  // The specifications of the flute desired.\n  specs: [\n    'open hole' or 'C foot' or 'silver headjoint'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'find_flute',\n  brand: 'Yamaha',\n  specs: ['open hole', 'C foot', 'silver headjoint'],\n}", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 34, "total_tokens": 241, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "248048c2-b388-4dfb-af64-258f9fa0c22e", "event_id": "248048c2-b388-4dfb-af64-258f9fa0c22e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23790, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_283", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "82f792c2-5f4f-4bca-9635-9ca79b961b07", "event_id": "073f4930-e360-4bc9-b182-0622e0f41ff1", "parent_event_id": "82f792c2-5f4f-4bca-9635-9ca79b961b07", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 673, "start_time": "2024-06-19T03:24:15.024Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_286", "variant_name": null}, {"function_name": "Fn_simple_286", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_286\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Chicago, IL\",\"price\":100,\"meta\":\"Value\",\"genre\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_286_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me a Rock concert in Chicago with ticket availability under $100.\n\nHere is the function to invoke:\n\n\n{\n  // Locate a concert in a specified location within a certain budget.\n  function_name: 'find_concert' or null,\n  // The city where you are looking for a concert. In the format City, State.\n  location: string,\n  // Maximum ticket price.\n  price: int,\n  // Music genre of the concert. Default to 'Jazz'. \n  genre: 'Rock' or 'Pop' or 'Country' or 'Jazz' or 'Classical' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'find_concert',\n  location: 'Chicago, IL',\n  price: 100,\n  genre: 'Rock'\n}", "metadata": {"logprobs": null, "prompt_tokens": 228, "output_tokens": 31, "total_tokens": 259, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "82f792c2-5f4f-4bca-9635-9ca79b961b07", "event_id": "82f792c2-5f4f-4bca-9635-9ca79b961b07", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 23864, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_286", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "39ba73ec-e541-41c7-9204-b92e6cad0021", "event_id": "bdb7683b-f170-4ac3-993b-4b5384a48038", "parent_event_id": "39ba73ec-e541-41c7-9204-b92e6cad0021", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 904, "start_time": "2024-06-19T03:24:14.982Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_285", "variant_name": null}, {"function_name": "Fn_simple_285", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_285\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"New York\",\"date\":\"next month\",\"genre\":\"Value0\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_285_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get information about the pop concerts in New York for next month.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve information about concerts based on specific genre, location and date.\n  function_name: 'concert_info.get' or null,\n  // The city where the concert will take place.\n  location: string,\n  // Time frame to get the concert for.\n  date: string,\n  // Genre of the concert.\n  genre: 'Pop' or 'Rock' or 'Country' or 'Classical' or 'Electronic' or 'Hip-Hop',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"concert_info.get\",\n  \"location\": \"New York\",\n  \"date\": \"next month\",\n  \"genre\": \"Pop\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 35, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "39ba73ec-e541-41c7-9204-b92e6cad0021", "event_id": "39ba73ec-e541-41c7-9204-b92e6cad0021", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24054, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_285", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d661eb96-5d8f-471a-b8f3-523eab770d84", "event_id": "112118ff-bc2a-42bc-a322-82d66404cf51", "parent_event_id": "d661eb96-5d8f-471a-b8f3-523eab770d84", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 770, "start_time": "2024-06-19T03:24:15.148Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_287", "variant_name": null}, {"function_name": "Fn_simple_287", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_287\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"artist\":\"Beyonce\",\"location\":\"San Diego\",\"meta\":\"Value\",\"date\":\"04-2022\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_287_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get concert details for the artist Beyonce performing in San Diego April 2022.\n\nHere is the function to invoke:\n\n\n{\n  // Fetch the details for a particular concert based on the artist and location.\n  function_name: 'concert.get_details' or null,\n  // Name of the artist/band who's performing.\n  artist: string,\n  // City where the concert is taking place.\n  location: string,\n  // Date of the concert in 'mm-yyyy' format. Default is the current month if not specified.\n  date: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'concert.get_details',\n  artist: 'Beyonce',\n  location: 'San Diego',\n  date: '04-2022'\n}", "metadata": {"logprobs": null, "prompt_tokens": 217, "output_tokens": 35, "total_tokens": 252, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d661eb96-5d8f-471a-b8f3-523eab770d84", "event_id": "d661eb96-5d8f-471a-b8f3-523eab770d84", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24085, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_287", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1d757fa7-df85-43b2-9069-6172e6055dcb", "event_id": "b6b8a7b1-55bf-4b3c-baa6-37f98b538443", "parent_event_id": "1d757fa7-df85-43b2-9069-6172e6055dcb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 870, "start_time": "2024-06-19T03:24:15.237Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_288", "variant_name": null}, {"function_name": "Fn_simple_288", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_288\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"genre\":\"classical\",\"location\":\"Los Angeles\",\"date\":\"this weekend\",\"meta\":\"Value\",\"price_range\":\"Value1\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_288_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me a classical concert this weekend in Los Angeles with cheap tickets.\n\nHere is the function to invoke:\n\n\n{\n  // Locate a concert based on specific criteria like genre, location, and date.\n  function_name: 'concert.search' or null,\n  // Genre of the concert.\n  genre: string,\n  // City of the concert.\n  location: string,\n  // Date of the concert, e.g. this weekend, today, tomorrow, or date string.\n  date: string,\n  // Expected price range of the concert tickets. Default is 'free'.\n  price_range: 'free' or 'cheap' or 'moderate' or 'expensive' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'concert.search',\n  genre: 'classical',\n  location: 'Los Angeles',\n  date: 'this weekend',\n  price_range: 'cheap'\n}", "metadata": {"logprobs": null, "prompt_tokens": 242, "output_tokens": 38, "total_tokens": 280, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1d757fa7-df85-43b2-9069-6172e6055dcb", "event_id": "1d757fa7-df85-43b2-9069-6172e6055dcb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24275, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_288", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "10897ab4-6afd-42cf-90eb-f677780f50ae", "event_id": "67f4ad4e-4522-498a-b6ad-ea0727426101", "parent_event_id": "10897ab4-6afd-42cf-90eb-f677780f50ae", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 834, "start_time": "2024-06-19T03:24:15.443Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_289", "variant_name": null}, {"function_name": "Fn_simple_289", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_289\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"artist\":\"Eminem\",\"city\":\"New York City\",\"meta\":\"Value\",\"num_tickets\":2}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_289_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me two tickets for next Eminem concert in New York City.\n\nHere is the function to invoke:\n\n\n{\n  // Book concert tickets for a specific artist in a specified city.\n  function_name: 'concert_booking.book_ticket' or null,\n  // The artist you want to book tickets for.\n  artist: string,\n  // The city where the concert is.\n  city: string,\n  // Number of tickets required. Default is 1.\n  num_tickets: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'concert_booking.book_ticket',\n  artist: 'Eminem',\n  city: 'New York City',\n  num_tickets: 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 35, "total_tokens": 237, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "10897ab4-6afd-42cf-90eb-f677780f50ae", "event_id": "10897ab4-6afd-42cf-90eb-f677780f50ae", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24445, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_289", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "55e7ac83-ff5f-4867-8f98-82e70ee56402", "event_id": "186925f2-d62e-4ece-b0c0-2e38e6f8a86a", "parent_event_id": "55e7ac83-ff5f-4867-8f98-82e70ee56402", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 844, "start_time": "2024-06-19T03:24:15.516Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_290", "variant_name": null}, {"function_name": "Fn_simple_290", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_290\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Seattle, WA\",\"genre\":\"jazz\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_290_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find concerts near me in Seattle that plays jazz music.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby concerts based on specific criteria like genre.\n  function_name: 'concert.find_nearby' or null,\n  // The city and state, e.g. Seattle, WA\n  location: string,\n  // Genre of music to be played at the concert.\n  genre: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"concert.find_nearby\",\n  \"location\": \"Seattle, WA\",\n  \"genre\": \"jazz\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 183, "output_tokens": 30, "total_tokens": 213, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "55e7ac83-ff5f-4867-8f98-82e70ee56402", "event_id": "55e7ac83-ff5f-4867-8f98-82e70ee56402", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24527, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_290", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b72c514b-f4af-4ffa-b25a-364a5ad5f00e", "event_id": "56393e37-4152-4bda-8f1e-f45c74b4e4de", "parent_event_id": "b72c514b-f4af-4ffa-b25a-364a5ad5f00e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 909, "start_time": "2024-06-19T03:24:15.555Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_292", "variant_name": null}, {"function_name": "Fn_simple_292", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_292\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"key\":\"C\",\"start_note\":\"C4\",\"length\":16,\"meta\":\"Value\",\"tempo\":120}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_292_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute.\n\nHere is the function to invoke:\n\n\n{\n  // Generate a melody based on certain musical parameters.\n  function_name: 'music_generator.generate_melody' or null,\n  // The key of the melody. E.g., 'C' for C major.\n  key: string,\n  // The first note of the melody, specified in scientific pitch notation. E.g., 'C4'.\n  start_note: string,\n  // The number of measures in the melody.\n  length: int,\n  // The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120.\n  tempo: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"music_generator.generate_melody\",\n  \"key\": \"C\",\n  \"start_note\": \"C4\",\n  \"length\": 16,\n  \"tempo\": 120\n}", "metadata": {"logprobs": null, "prompt_tokens": 262, "output_tokens": 46, "total_tokens": 308, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b72c514b-f4af-4ffa-b25a-364a5ad5f00e", "event_id": "b72c514b-f4af-4ffa-b25a-364a5ad5f00e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24632, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_292", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "52709b49-7f99-4d9d-ae06-dd4ad9ca2207", "event_id": "18c59865-b3c3-468c-8721-40cedc5791fc", "parent_event_id": "52709b49-7f99-4d9d-ae06-dd4ad9ca2207", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 819, "start_time": "2024-06-19T03:24:15.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_295", "variant_name": null}, {"function_name": "Fn_simple_295", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_295\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"key\":\"C\",\"chords\":4,\"meta\":\"Value\",\"progression_type\":\"major\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_295_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Generate a major chord progression in C key with four chords.\n\nHere is the function to invoke:\n\n\n{\n  // Create a chord progression in a specific key and number of chords.\n  function_name: 'music_generation.create_chord_progression' or null,\n  // The key for the chord progression.\n  key: string,\n  // Number of chords in the progression.\n  chords: int,\n  // The type of the chord progression. Optional parameter. Default is 'major'.\n  progression_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"music_generation.create_chord_progression\",\n  \"key\": \"C\",\n  \"chords\": 4,\n  \"progression_type\": \"major\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 40, "total_tokens": 247, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "52709b49-7f99-4d9d-ae06-dd4ad9ca2207", "event_id": "52709b49-7f99-4d9d-ae06-dd4ad9ca2207", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24687, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_295", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "414ccfb7-01f1-40d1-8654-389838605b7e", "event_id": "f76d0d64-7116-49d1-af3d-0ad3d7fe5669", "parent_event_id": "414ccfb7-01f1-40d1-8654-389838605b7e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 952, "start_time": "2024-06-19T03:24:15.584Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_293", "variant_name": null}, {"function_name": "Fn_simple_293", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_293\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"progression\":[\"C\",\"F\",\"G\"],\"measures\":4,\"meta\":\"Value\",\"instrument\":\"Piano\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_293_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Compose a simple piano melody with a progression of C, F and G for 4 measures.\n\nHere is the function to invoke:\n\n\n{\n  // Compose a melody using the specified chord progression for a certain number of measures on specified instrument.\n  function_name: 'compose_melody' or null,\n  // The progression of chords.\n  progression: string[],\n  // The number of measures of the melody.\n  measures: int,\n  // The instrument for the composition. Default is 'Piano'.\n  instrument: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"compose_melody\",\n  \"progression\": [\"C\", \"F\", \"G\"],\n  \"measures\": 4,\n  \"instrument\": \"Piano\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 43, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "414ccfb7-01f1-40d1-8654-389838605b7e", "event_id": "414ccfb7-01f1-40d1-8654-389838605b7e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24703, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_293", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7bc9509d-0c83-4a7c-9282-b3604cdf4a04", "event_id": "bba35c6e-14fc-4f5b-a986-d60ca56ef6b6", "parent_event_id": "7bc9509d-0c83-4a7c-9282-b3604cdf4a04", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 927, "start_time": "2024-06-19T03:24:15.624Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_294", "variant_name": null}, {"function_name": "Fn_simple_294", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_294\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": null}, "error": {"code": 2, "message": "Failed to coerce value: Error parsing '<root>': Unparsed field: track_length\n  Error parsing 'track_length': Expected int, got 180  // 3 minutes = 180 seconds.\n  String(\n      \"180  // 3 minutes = 180 seconds\",\n  )", "traceback": null, "override": null}, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.\n\nHere is the function to invoke:\n\n\n{\n  // Create a mix of a song based on a particular music scale and duration\n  function_name: 'music_composer.create_mix' or null,\n  // The musical scale to be used. E.g: C Major, A Minor, etc.\n  scale: string,\n  // Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.\n  note_duration: 'whole' or 'half' or 'quarter' or 'eighth' or 'sixteenth',\n  // Length of the mix track in seconds.\n  track_length: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"music_composer.create_mix\",\n  \"scale\": \"C Major\",\n  \"note_duration\": \"quarter\",\n  \"track_length\": 180  // 3 minutes = 180 seconds\n}", "metadata": {"logprobs": null, "prompt_tokens": 262, "output_tokens": 47, "total_tokens": 309, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7bc9509d-0c83-4a7c-9282-b3604cdf4a04", "event_id": "7bc9509d-0c83-4a7c-9282-b3604cdf4a04", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24719, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_294", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'baml_py.BamlError'>: \\u001b[33mClient: GPT35Turbo (gpt-3.5-turbo-0125) - 927ms\\u001b[0m\\n\\u001b[34m---PROMPT---\\u001b[0m\\n\\u001b[2m[\\u001b[2mchat\\u001b[0m\\u001b[2m] \\u001b[43msystem: \\u001b[0m\\u001b[2mYou are an expert in composing functions. You are given a question and a set of possible functions.\\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\\nalso point it out. You should only return the function call in tools call sections.\\n\\u001b[43muser: \\u001b[0m\\u001b[2mQuestion: Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.\\n\\nHere is the function to invoke:\\n\\n\\n{\\n  // Create a mix of a song based on a particular music scale and duration\\n  function_name: 'music_composer.create_mix' or null,\\n  // The musical scale to be used. E.g: C Major, A Minor, etc.\\n  scale: string,\\n  // Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.\\n  note_duration: 'whole' or 'half' or 'quarter' or 'eighth' or 'sixteenth',\\n  // Length of the mix track in seconds.\\n  track_length: int,\\n}\\n\\n\\nFunction args in JSON format:\\n\\u001b[0m\\n\\u001b[34m---LLM REPLY---\\u001b[0m\\n\\u001b[2m{\\n  \\\"function_name\\\": \\\"music_composer.create_mix\\\",\\n  \\\"scale\\\": \\\"C Major\\\",\\n  \\\"note_duration\\\": \\\"quarter\\\",\\n  \\\"track_length\\\": 180  // 3 minutes = 180 seconds\\n}\\u001b[0m\\n\\u001b[34m---Parsed Response---\\u001b[0m\\n\\u001b[31mFailed to coerce value: Error parsing '<root>': Unparsed field: track_length\\n  Error parsing 'track_length': Expected int, got 180  // 3 minutes = 180 seconds.\\n  String(\\n      \\\"180  // 3 minutes = 180 seconds\\\",\\n  )\\u001b[0m\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "add9f1e2-18e5-4eac-8f77-bbfff822ba36", "event_id": "eb025710-9c9d-42a1-9ede-61a414716686", "parent_event_id": "add9f1e2-18e5-4eac-8f77-bbfff822ba36", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1079, "start_time": "2024-06-19T03:24:15.537Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_291", "variant_name": null}, {"function_name": "Fn_simple_291", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_291\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"artist\":\"The Weeknd\",\"month\":\"December\",\"meta\":\"Value\",\"year\":2022}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_291_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the timing and location for The Weeknd's concert happening in December?\n\nHere is the function to invoke:\n\n\n{\n  // Finds details of a concert event.\n  function_name: 'concert.find_details' or null,\n  // Name of the artist performing.\n  artist: string,\n  // Month in which the concert is happening.\n  month: string,\n  // Year of the concert. (default: 2022)\n  year: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Since we are looking for The Weeknd's concert happening in December, we need to call the `concert.find_details` function with the following parameters:\n\n```json\n{\n  \"function_name\": \"concert.find_details\",\n  \"artist\": \"The Weeknd\",\n  \"month\": \"December\",\n  \"year\": 2022\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 70, "total_tokens": 267, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "add9f1e2-18e5-4eac-8f77-bbfff822ba36", "event_id": "add9f1e2-18e5-4eac-8f77-bbfff822ba36", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24783, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_291", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ef6dbb31-b8d8-4cb5-b112-e54f7f731dd3", "event_id": "37c8abc8-bc2e-4ce0-b0f9-fe3f85828bbc", "parent_event_id": "ef6dbb31-b8d8-4cb5-b112-e54f7f731dd3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 761, "start_time": "2024-06-19T03:24:15.919Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_297", "variant_name": null}, {"function_name": "Fn_simple_297", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_297\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"key\":\"C\",\"tempo\":80,\"duration\":4,\"meta\":\"Value\",\"scale_type\":\"major\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_297_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Generate a major C scale progression with tempo 80 BPM and duration 4 beats.\n\nHere is the function to invoke:\n\n\n{\n  // Generate a music scale progression in a specific key with a given tempo and duration.\n  function_name: 'music_generator.generate_scale_progression' or null,\n  // The key in which to generate the scale progression.\n  key: string,\n  // The tempo of the scale progression in BPM.\n  tempo: int,\n  // The duration of each note in beats.\n  duration: int,\n  // The type of scale to generate. Defaults to 'major'. (default: major)\n  scale_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'music_generator.generate_scale_progression',\n  key: 'C',\n  tempo: 80,\n  duration: 4,\n  scale_type: 'major'\n}", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 39, "total_tokens": 275, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ef6dbb31-b8d8-4cb5-b112-e54f7f731dd3", "event_id": "ef6dbb31-b8d8-4cb5-b112-e54f7f731dd3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24847, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_297", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ce8d488e-2863-4d52-85de-bff832d067be", "event_id": "7541b3ca-af21-47bd-827e-e9f2b1ff1f68", "parent_event_id": "ce8d488e-2863-4d52-85de-bff832d067be", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 924, "start_time": "2024-06-19T03:24:15.888Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_296", "variant_name": null}, {"function_name": "Fn_simple_296", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_296\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"song_title\":\"Bohemian Rhapsody\",\"artist_name\":\"Queen\",\"meta\":\"Value\",\"lang\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_296_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the lyrics to the song 'Bohemian Rhapsody' by Queen.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the lyrics of a song based on the artist's name and song title.\n  function_name: 'get_song_lyrics' or null,\n  // The title of the song.\n  song_title: string,\n  // The name of the artist who performed the song.\n  artist_name: string,\n  // The language of the lyrics. Default is English.\n  lang: 'English' or 'French' or 'Spanish' or 'German' or 'Italian' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_song_lyrics\",\n  \"song_title\": \"Bohemian Rhapsody\",\n  \"artist_name\": \"Queen\",\n  \"lang\": \"English\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 228, "output_tokens": 45, "total_tokens": 273, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ce8d488e-2863-4d52-85de-bff832d067be", "event_id": "ce8d488e-2863-4d52-85de-bff832d067be", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 24979, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_296", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7acf5a06-79b4-4039-88f1-71a8527b0127", "event_id": "1a729550-eb15-461c-9521-11803bfc7cb3", "parent_event_id": "7acf5a06-79b4-4039-88f1-71a8527b0127", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 693, "start_time": "2024-06-19T03:24:16.361Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_300", "variant_name": null}, {"function_name": "Fn_simple_300", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_300\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"key\":\"C#\",\"meta\":\"Value\",\"scale_type\":\"major\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_300_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the musical scale associated with C sharp major?\n\nHere is the function to invoke:\n\n\n{\n  // Get the musical scale of a specific key in music theory.\n  function_name: 'musical_scale' or null,\n  // The musical key for which the scale will be found.\n  key: string,\n  // The type of musical scale. (default: major)\n  scale_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'musical_scale',\n  key: 'C#',\n  scale_type: 'major'\n}", "metadata": {"logprobs": null, "prompt_tokens": 187, "output_tokens": 25, "total_tokens": 212, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7acf5a06-79b4-4039-88f1-71a8527b0127", "event_id": "7acf5a06-79b4-4039-88f1-71a8527b0127", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25222, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_300", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b0c96589-dfee-4fd2-ae4b-240862d705df", "event_id": "10419c99-a871-40b9-b972-147a0aaf2d26", "parent_event_id": "b0c96589-dfee-4fd2-ae4b-240862d705df", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 781, "start_time": "2024-06-19T03:24:16.279Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_299", "variant_name": null}, {"function_name": "Fn_simple_299", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_299\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"key\":\"C#\",\"meta\":\"Value\",\"scale_type\":\"Value0\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_299_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What key signature does C# major have?\n\nHere is the function to invoke:\n\n\n{\n  // Return the key signature of a major or minor scale.\n  function_name: 'music_theory.key_signature' or null,\n  // The root of the scale, e.g., 'C', 'F#', 'Ab'.\n  key: string,\n  // Type of the scale, either 'major' or 'minor'. Default is 'major'.\n  scale_type: 'major' or 'minor' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'music_theory.key_signature',\n  key: 'C#',\n  scale_type: 'major'\n}", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 27, "total_tokens": 234, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b0c96589-dfee-4fd2-ae4b-240862d705df", "event_id": "b0c96589-dfee-4fd2-ae4b-240862d705df", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25228, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_299", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "bcfdd9d9-98e8-4a1f-8c8f-8a5602f2a816", "event_id": "daec20ab-5a9d-427f-9529-83f61754c338", "parent_event_id": "bcfdd9d9-98e8-4a1f-8c8f-8a5602f2a816", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 988, "start_time": "2024-06-19T03:24:16.109Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_298", "variant_name": null}, {"function_name": "Fn_simple_298", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_298\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"progression\":[\"I\",\"V\",\"vi\",\"IV\"],\"meta\":\"Value\",\"returnAllPossibleKeys\":null,\"assumeMajor\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_298_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])\n\nHere is the function to invoke:\n\n\n{\n  // Identifies a potential key signature for the given chord progression.\n  function_name: 'music.theory.chordProgression' or null,\n  // The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV'].\n  progression: string[],\n  // Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false.\n  returnAllPossibleKeys: bool or null,\n  // Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true.\n  assumeMajor: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"music.theory.chordProgression\",\n  \"progression\": ['I', 'V', 'vi', 'IV'],\n  \"returnAllPossibleKeys\": null,\n  \"assumeMajor\": null\n}", "metadata": {"logprobs": null, "prompt_tokens": 279, "output_tokens": 49, "total_tokens": 328, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "bcfdd9d9-98e8-4a1f-8c8f-8a5602f2a816", "event_id": "bcfdd9d9-98e8-4a1f-8c8f-8a5602f2a816", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25264, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_298", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "28eeb27c-5b9f-4070-8a12-2dfdc4c2c12b", "event_id": "cb3df19f-2825-46bd-8849-711d7a784cf3", "parent_event_id": "28eeb27c-5b9f-4070-8a12-2dfdc4c2c12b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 688, "start_time": "2024-06-19T03:24:16.522Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_302", "variant_name": null}, {"function_name": "Fn_simple_302", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_302\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"key\":\"C\",\"meta\":\"Value\",\"type\":\"major\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_302_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the third major chord in C major scale?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the third major chord in a given key.\n  function_name: 'get_third_chord' or null,\n  // The key of the scale.\n  key: string,\n  // Type of the scale, either major or minor. Default is 'major'.\n  type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_third_chord\",\n  \"key\": \"C\",\n  \"type\": \"major\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 184, "output_tokens": 27, "total_tokens": 211, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "28eeb27c-5b9f-4070-8a12-2dfdc4c2c12b", "event_id": "28eeb27c-5b9f-4070-8a12-2dfdc4c2c12b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25376, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_302", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1e67b9f5-a14d-4827-b96a-6eeba55e44c9", "event_id": "a9608d7f-386f-4efe-a36c-db83c46a4098", "parent_event_id": "1e67b9f5-a14d-4827-b96a-6eeba55e44c9", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 854, "start_time": "2024-06-19T03:24:16.467Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_301", "variant_name": null}, {"function_name": "Fn_simple_301", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_301\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"first_note_frequency\":440,\"second_note_frequency\":880,\"meta\":\"Value\",\"tempo\":120}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_301_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the duration between two notes based on their frequencies and harmonic rhythm.\n  function_name: 'music.calculate_note_duration' or null,\n  // The frequency of the first note in Hz.\n  first_note_frequency: int,\n  // The frequency of the second note in Hz.\n  second_note_frequency: int,\n  // The tempo of the music in beats per minute. Defaults to 120 beats per minute.\n  tempo: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"music.calculate_note_duration\",\n  \"first_note_frequency\": 440,\n  \"second_note_frequency\": 880,\n  \"tempo\": 120\n}", "metadata": {"logprobs": null, "prompt_tokens": 223, "output_tokens": 39, "total_tokens": 262, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1e67b9f5-a14d-4827-b96a-6eeba55e44c9", "event_id": "1e67b9f5-a14d-4827-b96a-6eeba55e44c9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25488, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_301", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "524d3498-0e28-4bde-98ba-a9190c2bfdcb", "event_id": "e31994d9-5aa8-4349-80d7-080fadc03981", "parent_event_id": "524d3498-0e28-4bde-98ba-a9190c2bfdcb", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 862, "start_time": "2024-06-19T03:24:16.617Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_305", "variant_name": null}, {"function_name": "Fn_simple_305", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_305\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_name\":\"LeBron James\",\"team\":\"Los Angeles Lakers\",\"metrics\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_305_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get point and rebound stats for player 'LeBron James' from last basketball game\n\nHere is the function to invoke:\n\n\n{\n  // Get last game statistics for a specific player in basketball\n  function_name: 'player_stats.getLastGame' or null,\n  // The name of the basketball player.\n  player_name: string,\n  // The team that player currently plays for.\n  team: string,\n  // Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default.\n  metrics: [\n    'Points' or 'Rebounds' or 'Assists' or 'Blocks'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'player_stats.getLastGame',\n  player_name: 'LeBron James',\n  team: 'Los Angeles Lakers',\n  metrics: ['Points', 'Rebounds']\n}", "metadata": {"logprobs": null, "prompt_tokens": 230, "output_tokens": 39, "total_tokens": 269, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "524d3498-0e28-4bde-98ba-a9190c2bfdcb", "event_id": "524d3498-0e28-4bde-98ba-a9190c2bfdcb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25647, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_305", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7f348abe-4dcc-4a2c-a5e6-afbfd2bccdaf", "event_id": "bd7ca808-c4ea-446d-804b-eaade504b274", "parent_event_id": "7f348abe-4dcc-4a2c-a5e6-afbfd2bccdaf", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 972, "start_time": "2024-06-19T03:24:16.553Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_304", "variant_name": null}, {"function_name": "Fn_simple_304", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_304\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_name\":\"Cristiano Ronaldo\",\"season\":\"2019-2020\",\"meta\":\"Value\",\"league\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_304_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the player stats of Cristiano Ronaldo in the 2019-2020 season\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve soccer player statistics for a given season.\n  function_name: 'soccer_stat.get_player_stats' or null,\n  // Name of the player.\n  player_name: string,\n  // Soccer season, usually specified by two years.\n  season: string,\n  // Optional - the soccer league, defaults to all leagues if not specified.\n  league: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"soccer_stat.get_player_stats\",\n  \"player_name\": \"Cristiano Ronaldo\",\n  \"season\": \"2019-2020\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 206, "output_tokens": 41, "total_tokens": 247, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7f348abe-4dcc-4a2c-a5e6-afbfd2bccdaf", "event_id": "7f348abe-4dcc-4a2c-a5e6-afbfd2bccdaf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25693, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_304", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a6022070-515d-4ea0-85c0-de182969c9c5", "event_id": "46b824a9-e1cd-45f6-968c-9dca4db4c117", "parent_event_id": "a6022070-515d-4ea0-85c0-de182969c9c5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 997, "start_time": "2024-06-19T03:24:16.537Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_303", "variant_name": null}, {"function_name": "Fn_simple_303", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_303\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"hits\":180,\"at_bats\":600,\"meta\":\"Value\",\"decimal_places\":3}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_303_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the batting average for a baseball player who has 180 hits and 600 at-bats. Round to 3 decimals.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the batting average for a baseball player based on their number of hits and at-bats.\n  function_name: 'calculate_batting_average' or null,\n  // The number of hits.\n  hits: int,\n  // The number of at-bats.\n  at_bats: int,\n  // The number of decimal places to return in the batting average. Default is 3.\n  decimal_places: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_batting_average',\n  hits: 180,\n  at_bats: 600,\n  decimal_places: 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 227, "output_tokens": 34, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a6022070-515d-4ea0-85c0-de182969c9c5", "event_id": "a6022070-515d-4ea0-85c0-de182969c9c5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25702, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_303", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9d6996e7-4bc2-4915-9880-9616b3b4627a", "event_id": "4b691619-2d2b-4398-ad79-09df176e19b5", "parent_event_id": "9d6996e7-4bc2-4915-9880-9616b3b4627a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 969, "start_time": "2024-06-19T03:24:16.681Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_306", "variant_name": null}, {"function_name": "Fn_simple_306", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_306\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_name\":\"Messi\",\"tournament\":\"La Liga\",\"season\":\"2020-2021\",\"performance_indicator\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_306_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season\n\nHere is the function to invoke:\n\n\n{\n  // Compute the performance score of a soccer player given his game stats for a specific tournament in a season.\n  function_name: 'sports_stats.get_performance' or null,\n  // Name of the player.\n  player_name: string,\n  // Name of the soccer tournament.\n  tournament: string,\n  // Specific season in format 'YYYY-YYYY'.\n  season: string,\n  // Array of performance indicators. Use as much as possible. Default to use all if not specified.\n  performance_indicator: [\n    'Goals Scored' or 'Assists Made' or 'Saves Made' or 'Cards Received'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'sports_stats.get_performance',\n  player_name: 'Messi',\n  tournament: 'La Liga',\n  season: '2020-2021',\n  performance_indicator: ['Goals Scored', 'Assists Made']\n}", "metadata": {"logprobs": null, "prompt_tokens": 260, "output_tokens": 51, "total_tokens": 311, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9d6996e7-4bc2-4915-9880-9616b3b4627a", "event_id": "9d6996e7-4bc2-4915-9880-9616b3b4627a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25817, "start_time": "2024-06-19T03:23:51.833Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_306", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "68142ae0-313e-455a-afec-bb74373086c5", "event_id": "54dbc7ed-c5bc-4278-aa6b-294731a014f1", "parent_event_id": "68142ae0-313e-455a-afec-bb74373086c5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 882, "start_time": "2024-06-19T03:24:16.813Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_307", "variant_name": null}, {"function_name": "Fn_simple_307", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_307\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_name\":\"Virat Kohli\",\"matches\":10,\"meta\":\"Value\",\"match_format\":\"ODI\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_307_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find average batting score of a cricketer, Virat Kohli for past 10 matches\n\nHere is the function to invoke:\n\n\n{\n  // Get the average batting score of a cricketer for specified past matches.\n  function_name: 'average_batting_score' or null,\n  // Name of the cricket player.\n  player_name: string,\n  // Number of past matches to consider for average calculation.\n  matches: int,\n  // Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'.\n  match_format: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"average_batting_score\",\n  \"player_name\": \"Virat Kohli\",\n  \"matches\": 10,\n  \"match_format\": \"ODI\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 230, "output_tokens": 41, "total_tokens": 271, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "68142ae0-313e-455a-afec-bb74373086c5", "event_id": "68142ae0-313e-455a-afec-bb74373086c5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 25862, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_307", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d88a49fe-d8bf-4b1b-a06c-4fdbbdd6b4c7", "event_id": "a3b02641-b0ea-4548-b3ad-9736d90f01de", "parent_event_id": "d88a49fe-d8bf-4b1b-a06c-4fdbbdd6b4c7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 794, "start_time": "2024-06-19T03:24:17.098Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_310", "variant_name": null}, {"function_name": "Fn_simple_310", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_310\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_name\":\"Tom Brady\",\"season_year\":2020,\"meta\":\"Value\",\"team\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_310_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the record of Tom Brady in the 2020 NFL season.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the record of an NFL player in a specified season.\n  function_name: 'nfl_data.player_record' or null,\n  // The name of the NFL player.\n  player_name: string,\n  // The year of the NFL season.\n  season_year: int,\n  // The NFL team that the player played for in that season. Default is all teams if not specified.\n  team: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'nfl_data.player_record',\n  player_name: 'Tom Brady',\n  season_year: 2020,\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 29, "total_tokens": 242, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d88a49fe-d8bf-4b1b-a06c-4fdbbdd6b4c7", "event_id": "d88a49fe-d8bf-4b1b-a06c-4fdbbdd6b4c7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26059, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_310", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "643d18fa-22d5-4dc8-b9e8-c6248809084a", "event_id": "48bcc671-46dd-4411-ab03-e70dbb639c4a", "parent_event_id": "643d18fa-22d5-4dc8-b9e8-c6248809084a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 688, "start_time": "2024-06-19T03:24:17.211Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_311", "variant_name": null}, {"function_name": "Fn_simple_311", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_311\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_name\":\"LeBron James\",\"meta\":\"Value\",\"team\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_311_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the career stats of basketball player LeBron James?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the career statistics of a basketball player based on the player's name.\n  function_name: 'get_career_stats' or null,\n  // The name of the basketball player.\n  player_name: string,\n  // The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified.\n  team: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_career_stats\",\n  \"player_name\": \"LeBron James\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 201, "output_tokens": 24, "total_tokens": 225, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "643d18fa-22d5-4dc8-b9e8-c6248809084a", "event_id": "643d18fa-22d5-4dc8-b9e8-c6248809084a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26066, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_311", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6885d362-8af3-4338-925a-d49cb8ab4675", "event_id": "154dc68b-19f8-4fab-b34c-ecfbff31f565", "parent_event_id": "6885d362-8af3-4338-925a-d49cb8ab4675", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 877, "start_time": "2024-06-19T03:24:17.056Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_308", "variant_name": null}, {"function_name": "Fn_simple_308", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_308\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"teams\":[\"Lakers\",\"Clippers\"],\"date\":\"2021-01-28\",\"meta\":\"Value\",\"venue\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_308_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who won the basketball game between Lakers and Clippers on Jan 28, 2021?\n\nHere is the function to invoke:\n\n\n{\n  // Get the winner of a specific basketball game.\n  function_name: 'game_result.get_winner' or null,\n  // List of two teams who played the game.\n  teams: string[],\n  // The date of the game, formatted as YYYY-MM-DD.\n  date: string,\n  // Optional: The venue of the game. Default is 'home'.\n  venue: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function call in tools call:\n```json\n{\n  \"function_name\": \"game_result.get_winner\",\n  \"teams\": [\"Lakers\", \"Clippers\"],\n  \"date\": \"2021-01-28\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 47, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6885d362-8af3-4338-925a-d49cb8ab4675", "event_id": "6885d362-8af3-4338-925a-d49cb8ab4675", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26101, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_308", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0fe8efc1-a5f1-4b33-8487-1c6a30fd6397", "event_id": "d1de3cc0-0612-4d2e-a10e-bdb4d4da872f", "parent_event_id": "0fe8efc1-a5f1-4b33-8487-1c6a30fd6397", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 888, "start_time": "2024-06-19T03:24:17.062Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_309", "variant_name": null}, {"function_name": "Fn_simple_309", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_309\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team_name\":\"Manchester United\",\"num_matches\":5,\"meta\":\"Value\",\"league\":\"English Premier League\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_309_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the next five matches for Manchester United and who are they playing against in Premier League?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the match schedule for a specific sports team.\n  function_name: 'sports.match_schedule' or null,\n  // The name of the sports team.\n  team_name: string,\n  // The number of upcoming matches you want to get.\n  num_matches: int,\n  // The sports league of the team. This is an optional parameter. Default is 'English Premier League'.\n  league: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"sports.match_schedule\",\n  \"team_name\": \"Manchester United\",\n  \"num_matches\": 5,\n  \"league\": \"English Premier League\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 216, "output_tokens": 38, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0fe8efc1-a5f1-4b33-8487-1c6a30fd6397", "event_id": "0fe8efc1-a5f1-4b33-8487-1c6a30fd6397", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26117, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_309", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a94d52f0-768b-4788-b35a-e78d74cf4442", "event_id": "8656e835-8113-4e38-a953-2d412b5b0416", "parent_event_id": "a94d52f0-768b-4788-b35a-e78d74cf4442", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 753, "start_time": "2024-06-19T03:24:17.322Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_312", "variant_name": null}, {"function_name": "Fn_simple_312", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_312\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"name\":\"Lebron James\",\"sport\":\"Value0\",\"meta\":\"Value\",\"team\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_312_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the detailed profile of basketball player Lebron James\n\nHere is the function to invoke:\n\n\n{\n  // Find the profile information of a sports athlete based on their full name.\n  function_name: 'sports_db.find_athlete' or null,\n  // The full name of the athlete.\n  name: string,\n  // The team the athlete belongs to. Default to all teams if not specified.\n  team: string or null,\n  // The sport that athlete plays.\n  sport: 'Basketball' or 'Baseball' or 'Football' or 'Soccer',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"sports_db.find_athlete\",\n  \"name\": \"Lebron James\",\n  \"team\": null,\n  \"sport\": \"Basketball\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 37, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a94d52f0-768b-4788-b35a-e78d74cf4442", "event_id": "a94d52f0-768b-4788-b35a-e78d74cf4442", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26242, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_312", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cdd6a55c-6818-4e24-997d-9ea2a1a557b3", "event_id": "1da97163-2735-46df-b802-93b94723b344", "parent_event_id": "cdd6a55c-6818-4e24-997d-9ea2a1a557b3", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 671, "start_time": "2024-06-19T03:24:17.481Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_313", "variant_name": null}, {"function_name": "Fn_simple_313", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_313\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_name\":\"Ronaldo\",\"year\":2021,\"meta\":\"Value\",\"team_name\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_313_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the statistics of Ronaldo's matches in 2021?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves detailed player's statistics for a specific year.\n  function_name: 'player_statistic' or null,\n  // The player's name.\n  player_name: string,\n  // Year for which the statistics will be displayed.\n  year: int,\n  // The name of the team(optional). Default to not use it if not specified.\n  team_name: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'player_statistic',\n  player_name: 'Ronaldo',\n  year: 2021\n}", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 27, "total_tokens": 230, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cdd6a55c-6818-4e24-997d-9ea2a1a557b3", "event_id": "cdd6a55c-6818-4e24-997d-9ea2a1a557b3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26321, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_313", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f9222958-aa23-4a93-9477-4f90d14d14db", "event_id": "04a3025e-6bbf-47de-b5dd-b240400ad554", "parent_event_id": "f9222958-aa23-4a93-9477-4f90d14d14db", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 771, "start_time": "2024-06-19T03:24:17.527Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_314", "variant_name": null}, {"function_name": "Fn_simple_314", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_314\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"name\":\"Messi\",\"currency\":\"EUR\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_314_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the total worth in euro of Messi according to latest data?\n\nHere is the function to invoke:\n\n\n{\n  // Get the total net worth of a sports celebrity based on most recent data.\n  function_name: 'celebrity_net_worth.get' or null,\n  // The full name of the sports celebrity.\n  name: string,\n  // The currency in which the net worth will be returned. Default is 'USD'.\n  currency: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'celebrity_net_worth.get',\n  name: 'Messi',\n  currency: 'EUR'\n}", "metadata": {"logprobs": null, "prompt_tokens": 196, "output_tokens": 28, "total_tokens": 224, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f9222958-aa23-4a93-9477-4f90d14d14db", "event_id": "f9222958-aa23-4a93-9477-4f90d14d14db", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26465, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_314", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fce7d853-bc50-4356-b0b3-bf1e21f57bc4", "event_id": "b86ef96c-ecfd-4770-a3df-06e44e26422e", "parent_event_id": "fce7d853-bc50-4356-b0b3-bf1e21f57bc4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 809, "start_time": "2024-06-19T03:24:17.536Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_315", "variant_name": null}, {"function_name": "Fn_simple_315", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_315\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"celebrity_name\":\"Lionel Messi\",\"meta\":\"Value\",\"sports\":\"Football\",\"team\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_315_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find all the major achievements of the footballer Lionel Messi.\n\nHere is the function to invoke:\n\n\n{\n  // Returns a list of major achievements of a particular sports celebrity.\n  function_name: 'sports_celebrity.get_major_achievements' or null,\n  // Name of the sports celebrity.\n  celebrity_name: string,\n  // Type of sports the celebrity involved in. Default is Football.\n  sports: string or null,\n  // Optional. Team where celebrity currently plays. Default is 'all'\n  team: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'sports_celebrity.get_major_achievements',\n  celebrity_name: 'Lionel Messi',\n  sports: 'Football'\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 34, "total_tokens": 247, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fce7d853-bc50-4356-b0b3-bf1e21f57bc4", "event_id": "fce7d853-bc50-4356-b0b3-bf1e21f57bc4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26512, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_315", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8526634e-1cbc-44af-b460-4e915ee17e5a", "event_id": "ff0d62a6-78de-4da4-9afc-7b727c304264", "parent_event_id": "8526634e-1cbc-44af-b460-4e915ee17e5a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 719, "start_time": "2024-06-19T03:24:17.651Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_316", "variant_name": null}, {"function_name": "Fn_simple_316", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_316\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"season\":2021,\"meta\":\"Value\",\"top\":1}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_316_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the NBA team's ranking with the best defence in the 2021 season.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the defence ranking of NBA teams in a specified season.\n  function_name: 'get_defense_ranking' or null,\n  // The NBA season to get defence ranking from.\n  season: int,\n  // Number of top teams in defence ranking to fetch. (default: 1)\n  top: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_defense_ranking\",\n  \"season\": 2021,\n  \"top\": 1\n}", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 29, "total_tokens": 226, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8526634e-1cbc-44af-b460-4e915ee17e5a", "event_id": "8526634e-1cbc-44af-b460-4e915ee17e5a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26537, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_316", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "751a3e52-3d44-4345-b772-695075345489", "event_id": "63558ab9-d278-42ea-aa82-cdabd0efeac4", "parent_event_id": "751a3e52-3d44-4345-b772-695075345489", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 784, "start_time": "2024-06-19T03:24:17.696Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_317", "variant_name": null}, {"function_name": "Fn_simple_317", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_317\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"sport\":\"Tennis\",\"player_name\":\"Serena Williams\",\"meta\":\"Value\",\"gender\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_317_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the current world rank of a Tennis player, Serena Williams.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the current world ranking of a sportsperson based on the sport and player's name.\n  function_name: 'get_sport_ranking' or null,\n  // Name of the sport.\n  sport: string,\n  // Name of the player.\n  player_name: string,\n  // Gender of the player. This is optional. The possible values are male or female. (default: all)\n  gender: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_sport_ranking\",\n  \"sport\": \"Tennis\",\n  \"player_name\": \"Serena Williams\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 215, "output_tokens": 36, "total_tokens": 251, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "751a3e52-3d44-4345-b772-695075345489", "event_id": "751a3e52-3d44-4345-b772-695075345489", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26647, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_317", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "42bea8d5-1033-4872-afe4-2d125ba5864f", "event_id": "ed023b15-963e-4871-9c48-7caf34dee9ee", "parent_event_id": "42bea8d5-1033-4872-afe4-2d125ba5864f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 713, "start_time": "2024-06-19T03:24:17.935Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_320", "variant_name": null}, {"function_name": "Fn_simple_320", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_320\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team\":\"Manchester United\",\"league\":\"Premier League\",\"meta\":\"Value\",\"season\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_320_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the ranking of Manchester United in Premier League?\n\nHere is the function to invoke:\n\n\n{\n  // Fetch the ranking of a specific sports team in a specific league\n  function_name: 'sports_ranking' or null,\n  // The name of the team.\n  team: string,\n  // The name of the league.\n  league: string,\n  // Optional parameter to specify the season, default is the current season if not specified.\n  season: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'sports_ranking',\n  team: 'Manchester United',\n  league: 'Premier League'\n}", "metadata": {"logprobs": null, "prompt_tokens": 200, "output_tokens": 26, "total_tokens": 226, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "42bea8d5-1033-4872-afe4-2d125ba5864f", "event_id": "42bea8d5-1033-4872-afe4-2d125ba5864f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26815, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_320", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a8d26a32-f507-42bf-9fc6-06a39abee5d0", "event_id": "cddb6bd8-cb2f-49a7-a67d-8c3fdac8d5b5", "parent_event_id": "a8d26a32-f507-42bf-9fc6-06a39abee5d0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 856, "start_time": "2024-06-19T03:24:17.900Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_319", "variant_name": null}, {"function_name": "Fn_simple_319", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_319\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team_name\":\"Germany\",\"year\":2021,\"meta\":\"Value\",\"gender\":\"men\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_319_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the FIFA ranking of Germany's men soccer team for the year 2021?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the FIFA ranking of a specific soccer team for a certain year.\n  function_name: 'get_team_ranking' or null,\n  // The name of the soccer team.\n  team_name: string,\n  // The year for which the ranking is to be retrieved.\n  year: int,\n  // The gender of the team. It can be either 'men' or 'women'. Default is 'men'.\n  gender: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_team_ranking',\n  team_name: 'Germany',\n  year: 2021,\n  gender: 'men'\n}", "metadata": {"logprobs": null, "prompt_tokens": 222, "output_tokens": 32, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2f78417a-b6e5-496b-94de-262aba6cf8f4", "event_id": "e4667617-3557-4bf6-97b0-db5f06aaf717", "parent_event_id": "2f78417a-b6e5-496b-94de-262aba6cf8f4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 806, "start_time": "2024-06-19T03:24:17.951Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_321", "variant_name": null}, {"function_name": "Fn_simple_321", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_321\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team\":\"Golden State Warriors\",\"season\":\"2022-2023\",\"meta\":\"Value\",\"detailed\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_321_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve a team's position and stats in the basketball league for a given season.\n  function_name: 'sports_ranking.get_team_position' or null,\n  // The name of the team.\n  team: string,\n  // The season for which data should be fetched.\n  season: string,\n  // Flag to retrieve detailed stats or just the position.\n  detailed: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"sports_ranking.get_team_position\",\n  \"team\": \"Golden State Warriors\",\n  \"season\": \"2022-2023\",\n  \"detailed\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 215, "output_tokens": 42, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a8d26a32-f507-42bf-9fc6-06a39abee5d0", "event_id": "a8d26a32-f507-42bf-9fc6-06a39abee5d0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26924, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_319", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2f78417a-b6e5-496b-94de-262aba6cf8f4", "event_id": "2f78417a-b6e5-496b-94de-262aba6cf8f4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26925, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_321", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5a95902e-5c9c-4c81-a8eb-813745237f28", "event_id": "427d0135-a3d8-4e8c-b009-1040646a2ca5", "parent_event_id": "5a95902e-5c9c-4c81-a8eb-813745237f28", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 735, "start_time": "2024-06-19T03:24:18.077Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_322", "variant_name": null}, {"function_name": "Fn_simple_322", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_322\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team\":\"Barcelona\",\"league\":\"La Liga\",\"season\":\"2021\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_322_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the ranking of Barcelona in the 2021 La Liga season?\n\nHere is the function to invoke:\n\n\n{\n  // Get the ranking of a team in a given sports league and season.\n  function_name: 'sports_ranking' or null,\n  // The name of the team.\n  team: string,\n  // The name of the sports league.\n  league: string,\n  // The season for which ranking needs to be obtained.\n  season: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'sports_ranking',\n  team: 'Barcelona',\n  league: 'La Liga',\n  season: '2021'\n}", "metadata": {"logprobs": null, "prompt_tokens": 198, "output_tokens": 32, "total_tokens": 230, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5a95902e-5c9c-4c81-a8eb-813745237f28", "event_id": "5a95902e-5c9c-4c81-a8eb-813745237f28", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 26979, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_322", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "04c3e2f2-7bac-4e0b-a426-3a286307b962", "event_id": "d73a9060-2b50-4415-bb13-f189a75d6d77", "parent_event_id": "04c3e2f2-7bac-4e0b-a426-3a286307b962", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 949, "start_time": "2024-06-19T03:24:17.893Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_318", "variant_name": null}, {"function_name": "Fn_simple_318", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_318\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team_name\":\"LA Lakers\",\"league\":\"NBA\",\"season\":\"2021\",\"type\":\"Value0\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_318_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the ranking of LA Lakers in the NBA 2021 regular season.\n\nHere is the function to invoke:\n\n\n{\n  // Get the team ranking in a sports league based on season and type.\n  function_name: 'get_team_rank' or null,\n  // The name of the sports team.\n  team_name: string,\n  // The name of the league in which the team competes.\n  league: string,\n  // The season for which the team's ranking is sought.\n  season: string,\n  // Type of the season: regular or playoff.\n  type: 'regular' or 'playoff',\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_team_rank',\n  team_name: 'LA Lakers',\n  league: 'NBA',\n  season: '2021',\n  type: 'regular',\n}", "metadata": {"logprobs": null, "prompt_tokens": 228, "output_tokens": 39, "total_tokens": 267, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "04c3e2f2-7bac-4e0b-a426-3a286307b962", "event_id": "04c3e2f2-7bac-4e0b-a426-3a286307b962", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27009, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_318", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2ebcc2d3-b015-41a3-9696-f834120b2890", "event_id": "734e1a8a-53f2-48ac-bed5-6c91523e783f", "parent_event_id": "2ebcc2d3-b015-41a3-9696-f834120b2890", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 857, "start_time": "2024-06-19T03:24:18.155Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_323", "variant_name": null}, {"function_name": "Fn_simple_323", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_323\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team\":\"Liverpool Football Club\",\"league\":\"Premier League\",\"meta\":\"Value\",\"season\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_323_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the current ranking for Liverpool Football Club in the Premier League.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the current ranking of a specific team in a particular league.\n  function_name: 'sports_ranking.get_current' or null,\n  // The name of the team whose ranking is sought.\n  team: string,\n  // The league in which the team participates.\n  league: string,\n  // The season for which the ranking is sought. Defaults to the current season if not provided.\n  season: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"sports_ranking.get_current\",\n  \"team\": \"Liverpool Football Club\",\n  \"league\": \"Premier League\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 212, "output_tokens": 36, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2ebcc2d3-b015-41a3-9696-f834120b2890", "event_id": "2ebcc2d3-b015-41a3-9696-f834120b2890", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27179, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_323", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a425a559-3d0d-44dd-8a0b-949586329fe7", "event_id": "af7ae2cc-f989-4e9a-95f2-a126f9ab5ccb", "parent_event_id": "a425a559-3d0d-44dd-8a0b-949586329fe7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 691, "start_time": "2024-06-19T03:24:18.346Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_325", "variant_name": null}, {"function_name": "Fn_simple_325", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_325\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team\":\"Los Angeles Lakers\",\"meta\":\"Value\",\"include_opponent\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_325_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the score of last game for Los Angeles Lakers including its opponent name.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the score of the most recent game for a specified sports team.\n  function_name: 'team_score.get_latest' or null,\n  // Name of the sports team.\n  team: string,\n  // Include the name of the opponent team in the return.\n  include_opponent: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'team_score.get_latest',\n  team: 'Los Angeles Lakers',\n  include_opponent: true,\n}", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 27, "total_tokens": 217, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a425a559-3d0d-44dd-8a0b-949586329fe7", "event_id": "a425a559-3d0d-44dd-8a0b-949586329fe7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27205, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_325", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2ad7667f-87dd-4236-85d3-6d1f619d3d06", "event_id": "cb711918-1e84-4337-95aa-1d32f6ef3dd5", "parent_event_id": "2ad7667f-87dd-4236-85d3-6d1f619d3d06", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 689, "start_time": "2024-06-19T03:24:18.371Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_326", "variant_name": null}, {"function_name": "Fn_simple_326", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_326\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team1\":\"Chicago Bulls\",\"team2\":\"Los Angeles Lakers\",\"meta\":\"Value\",\"season\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_326_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who won the last match between Chicago Bulls and Los Angeles Lakers?\n\nHere is the function to invoke:\n\n\n{\n  // Returns the results of a given match between two teams.\n  function_name: 'sports.match_results' or null,\n  // The name of the first team.\n  team1: string,\n  // The name of the second team.\n  team2: string,\n  // The season when the match happened. Default is the current season.\n  season: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'sports.match_results',\n  team1: 'Chicago Bulls',\n  team2: 'Los Angeles Lakers'\n}", "metadata": {"logprobs": null, "prompt_tokens": 201, "output_tokens": 28, "total_tokens": 229, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a45ae1fb-cc43-4588-8fe7-a96406db54a7", "event_id": "1cf8c292-398a-4ca0-981a-989b105adf5b", "parent_event_id": "a45ae1fb-cc43-4588-8fe7-a96406db54a7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 761, "start_time": "2024-06-19T03:24:18.299Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_324", "variant_name": null}, {"function_name": "Fn_simple_324", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_324\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"sport\":\"tennis\",\"meta\":\"Value\",\"gender\":\"woman\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_324_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Who is ranked as the top player in woman tennis?\n\nHere is the function to invoke:\n\n\n{\n  // Get the top player in a specific sport.\n  function_name: 'sports_ranking.get_top_player' or null,\n  // The type of sport.\n  sport: string,\n  // The gender of the sport category. Optional. (default: men)\n  gender: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function args: \n{\n  \"function_name\": \"sports_ranking.get_top_player\",\n  \"sport\": \"tennis\",\n  \"gender\": \"woman\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 183, "output_tokens": 34, "total_tokens": 217, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2ad7667f-87dd-4236-85d3-6d1f619d3d06", "event_id": "2ad7667f-87dd-4236-85d3-6d1f619d3d06", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27227, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_326", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a45ae1fb-cc43-4588-8fe7-a96406db54a7", "event_id": "a45ae1fb-cc43-4588-8fe7-a96406db54a7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27227, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_324", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "88f41e4a-c785-4fc6-9179-710b925fd3e4", "event_id": "55e5deaf-720d-4398-94b3-42a448698ef4", "parent_event_id": "88f41e4a-c785-4fc6-9179-710b925fd3e4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 852, "start_time": "2024-06-19T03:24:18.481Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_327", "variant_name": null}, {"function_name": "Fn_simple_327", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_327\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team_name\":\"Los Angeles Lakers\",\"league\":\"NBA\",\"meta\":\"Value\",\"include_player_stats\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_327_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the latest game score and statistics for Los Angeles Lakers in NBA.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieves the latest game score, individual player stats, and team stats for a specified sports team.\n  function_name: 'get_team_score' or null,\n  // The name of the sports team.\n  team_name: string,\n  // The league that the team is part of.\n  league: string,\n  // Indicates if individual player statistics should be included in the result. Default is false.\n  include_player_stats: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_team_score\",\n  \"team_name\": \"Los Angeles Lakers\",\n  \"league\": \"NBA\",\n  \"include_player_stats\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 216, "output_tokens": 38, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "88f41e4a-c785-4fc6-9179-710b925fd3e4", "event_id": "88f41e4a-c785-4fc6-9179-710b925fd3e4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27500, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_327", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a73c0e10-08f4-4540-9506-becec747585f", "event_id": "8aafdcd3-62dd-4975-8cba-bdc3e48ef7b7", "parent_event_id": "a73c0e10-08f4-4540-9506-becec747585f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 737, "start_time": "2024-06-19T03:24:18.759Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_330", "variant_name": null}, {"function_name": "Fn_simple_330", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_330\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"number\":7,\"dice_number\":2,\"meta\":\"Value\",\"dice_faces\":6}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_330_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the odds of rolling a 7 with two dice in the board game Monopoly.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.\n  function_name: 'monopoly_odds_calculator' or null,\n  // The number for which the odds are calculated.\n  number: int,\n  // The number of dice involved in the roll.\n  dice_number: int,\n  // The number of faces on a single die. Default is 6 for standard six-faced die.\n  dice_faces: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'monopoly_odds_calculator',\n  number: 7,\n  dice_number: 2,\n  dice_faces: 6,\n}", "metadata": {"logprobs": null, "prompt_tokens": 229, "output_tokens": 34, "total_tokens": 263, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f4a793c6-f5bc-474a-9b5a-7d61bb1b6036", "event_id": "8da282ac-b943-4fc1-b9cb-87a66f318384", "parent_event_id": "f4a793c6-f5bc-474a-9b5a-7d61bb1b6036", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 652, "start_time": "2024-06-19T03:24:18.844Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_332", "variant_name": null}, {"function_name": "Fn_simple_332", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_332\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"New York\",\"minimum_rating\":2300,\"meta\":\"Value\",\"number_of_players\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_332_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the top chess players in New York with a rating above 2300.\n\nHere is the function to invoke:\n\n\n{\n  // Find top chess players in a location based on rating.\n  function_name: 'board_game.chess.get_top_players' or null,\n  // The city you want to find the players from.\n  location: string,\n  // Minimum rating to filter the players.\n  minimum_rating: int,\n  // Number of players you want to retrieve, default value is 10 (default: 10)\n  number_of_players: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'board_game.chess.get_top_players',\n  location: 'New York',\n  minimum_rating: 2300,\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 30, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a73c0e10-08f4-4540-9506-becec747585f", "event_id": "a73c0e10-08f4-4540-9506-becec747585f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27662, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_330", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f4a793c6-f5bc-474a-9b5a-7d61bb1b6036", "event_id": "f4a793c6-f5bc-474a-9b5a-7d61bb1b6036", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27663, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_332", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2c06758e-0c06-421a-a194-eb48f14d7c37", "event_id": "5d379769-1196-45af-8037-f73a39a7fc79", "parent_event_id": "2c06758e-0c06-421a-a194-eb48f14d7c37", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 890, "start_time": "2024-06-19T03:24:18.649Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_328", "variant_name": null}, {"function_name": "Fn_simple_328", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_328\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team_name\":\"Manchester United\",\"num_of_games\":6,\"league\":\"Premier League\",\"meta\":\"Value\",\"location\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_328_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Give me the schedule of Manchester United for the next 6 games in Premier League.\n\nHere is the function to invoke:\n\n\n{\n  // Fetches the schedule of the specified sports team for the specified number of games in the given league.\n  function_name: 'sports_team.get_schedule' or null,\n  // The name of the sports team.\n  team_name: string,\n  // Number of games for which to fetch the schedule.\n  num_of_games: int,\n  // The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league.\n  league: string,\n  // Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered.\n  location: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"sports_team.get_schedule\",\n  \"team_name\": \"Manchester United\",\n  \"num_of_games\": 6,\n  \"league\": \"Premier League\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 264, "output_tokens": 44, "total_tokens": 308, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2c06758e-0c06-421a-a194-eb48f14d7c37", "event_id": "2c06758e-0c06-421a-a194-eb48f14d7c37", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27706, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_328", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "20c7a058-867d-4d47-a627-71e8f8110575", "event_id": "d788cfb3-8c86-48f5-a4bc-fee9c757ec5c", "parent_event_id": "20c7a058-867d-4d47-a627-71e8f8110575", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 843, "start_time": "2024-06-19T03:24:18.758Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_329", "variant_name": null}, {"function_name": "Fn_simple_329", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_329\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"name\":\"Ticket to Ride\",\"parameters\":[\"Value4\",\"Value0\"],\"meta\":\"Value\",\"language\":\"English\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_329_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the rating and player count of the board game 'Ticket to Ride'.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve detailed information of a board game.\n  function_name: 'boardgame.get_info' or null,\n  // Name of the board game.\n  name: string,\n  // Game characteristics interested.\n  parameters: [\n    'player count' or 'playing time' or 'age' or 'mechanics' or 'rating'\n  ],\n  // The preferred language for the game information, default is English\n  language: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'boardgame.get_info',\n  name: 'Ticket to Ride',\n  parameters: ['rating', 'player count'],\n  language: 'English'\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 36, "total_tokens": 255, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "20c7a058-867d-4d47-a627-71e8f8110575", "event_id": "20c7a058-867d-4d47-a627-71e8f8110575", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27768, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_329", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c107aa27-f813-4380-8063-a7026736be40", "event_id": "e1766a44-e003-4dfe-9da9-822688fdb39c", "parent_event_id": "c107aa27-f813-4380-8063-a7026736be40", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 846, "start_time": "2024-06-19T03:24:18.813Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_331", "variant_name": null}, {"function_name": "Fn_simple_331", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_331\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"game_name\":\"Catan\",\"info_required\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_331_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the average review rating and the age range for the board game 'Catan'?\n\nHere is the function to invoke:\n\n\n{\n  // Get the information about a board game from a database. \n  function_name: 'board_game_info' or null,\n  // Name of the board game.\n  game_name: string,\n  // Array of information requested for the game.\n  info_required: [\n    'average_review_rating' or 'age_range' or 'number_of_players' or 'playing_time' or 'genre'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"board_game_info\",\n  \"game_name\": \"Catan\",\n  \"info_required\": [\n    \"average_review_rating\",\n    \"age_range\"\n  ]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 44, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c107aa27-f813-4380-8063-a7026736be40", "event_id": "c107aa27-f813-4380-8063-a7026736be40", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27825, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_331", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3ef4f9fd-1b06-44c8-b5f9-eb9518e2f8c0", "event_id": "59d3b310-053e-47f8-abdb-5df5f02f37a3", "parent_event_id": "3ef4f9fd-1b06-44c8-b5f9-eb9518e2f8c0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 790, "start_time": "2024-06-19T03:24:19.013Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_333", "variant_name": null}, {"function_name": "Fn_simple_333", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_333\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_name\":\"Magnus Carlsen\",\"meta\":\"Value\",\"variant\":\"classical\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_333_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the chess classical rating of Magnus Carlsen?\n\nHere is the function to invoke:\n\n\n{\n  // Fetches the current chess rating of a given player\n  function_name: 'chess.rating' or null,\n  // The full name of the chess player.\n  player_name: string,\n  // The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n  variant: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'chess.rating',\n  player_name: 'Magnus Carlsen',\n  variant: 'classical'\n}", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 28, "total_tokens": 230, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3ef4f9fd-1b06-44c8-b5f9-eb9518e2f8c0", "event_id": "3ef4f9fd-1b06-44c8-b5f9-eb9518e2f8c0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 27977, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_333", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "32d2f452-c17c-4a3e-a962-cebf9d9f3fca", "event_id": "a3fe946f-29ab-4b30-9a7a-417ae3ea823b", "parent_event_id": "32d2f452-c17c-4a3e-a962-cebf9d9f3fca", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 816, "start_time": "2024-06-19T03:24:19.061Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_335", "variant_name": null}, {"function_name": "Fn_simple_335", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_335\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player_cards\":[\"A\",\"10\"],\"dealer_cards\":[\"10\",\"9\"],\"meta\":\"Value\",\"ace_value\":1}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_335_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.\n\nHere is the function to invoke:\n\n\n{\n  // Checks and determines the winner in a game of blackjack.\n  function_name: 'blackjack.check_winner' or null,\n  // Cards held by the player.\n  player_cards: string[],\n  // Cards held by the dealer.\n  dealer_cards: string[],\n  // The value considered for the ace card, can be either 1 or 11. (default: 11)\n  ace_value: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"blackjack.check_winner\",\n  \"player_cards\": [\"A\", \"10\"],\n  \"dealer_cards\": [\"10\", \"9\"],\n  \"ace_value\": 1\n}", "metadata": {"logprobs": null, "prompt_tokens": 231, "output_tokens": 43, "total_tokens": 274, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "32d2f452-c17c-4a3e-a962-cebf9d9f3fca", "event_id": "32d2f452-c17c-4a3e-a962-cebf9d9f3fca", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28044, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_335", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "96be6adf-f507-4cbd-bb16-dc5b7ad299ad", "event_id": "20561eba-cdb0-4bd0-896a-dfbc265c473f", "parent_event_id": "96be6adf-f507-4cbd-bb16-dc5b7ad299ad", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 885, "start_time": "2024-06-19T03:24:19.039Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_334", "variant_name": null}, {"function_name": "Fn_simple_334", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_334\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"London, United Kingdom\",\"days\":3,\"details\":[\"Value0\",\"Value1\",\"Value2\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_334_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.\n  function_name: 'detailed_weather_forecast' or null,\n  // The city that you want to get the weather for.\n  location: string,\n  // Number of days for the forecast.\n  days: int,\n  // Specific weather details required in the forecast.\n  details: [\n    'high_low_temperature' or 'humidity' or 'precipitation'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'detailed_weather_forecast',\n  location: 'London, United Kingdom',\n  days: 3,\n  details: ['high_low_temperature', 'humidity', 'precipitation']\n}", "metadata": {"logprobs": null, "prompt_tokens": 238, "output_tokens": 44, "total_tokens": 282, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "96be6adf-f507-4cbd-bb16-dc5b7ad299ad", "event_id": "96be6adf-f507-4cbd-bb16-dc5b7ad299ad", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28091, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_334", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0be85463-a818-4e26-9105-f59f8000d609", "event_id": "013cf1f8-0c7a-4b23-b5f1-145aa05a9d5a", "parent_event_id": "0be85463-a818-4e26-9105-f59f8000d609", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 642, "start_time": "2024-06-19T03:24:19.334Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_337", "variant_name": null}, {"function_name": "Fn_simple_337", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_337\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"num_cards\":3,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_337_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Shuffle a deck of cards, and draw 3 cards from the top.\n\nHere is the function to invoke:\n\n\n{\n  // Shuffle a standard deck of 52 cards and draw a specified number of cards from the top.\n  function_name: 'cards.shuffle_and_draw' or null,\n  // Number of cards to be drawn. The default is 1 if no value is provided.\n  num_cards: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"cards.shuffle_and_draw\",\n  \"num_cards\": 3\n}", "metadata": {"logprobs": null, "prompt_tokens": 186, "output_tokens": 21, "total_tokens": 207, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0be85463-a818-4e26-9105-f59f8000d609", "event_id": "0be85463-a818-4e26-9105-f59f8000d609", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28142, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_337", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ce0e08bb-750e-4e9d-b9da-004317a47d9c", "event_id": "40ccfd7d-da62-4969-94e7-4c2ef897941f", "parent_event_id": "ce0e08bb-750e-4e9d-b9da-004317a47d9c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1193, "start_time": "2024-06-19T03:24:19.062Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_336", "variant_name": null}, {"function_name": "Fn_simple_336", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_336\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"rank\":\"Queen\",\"suit\":\"Hearts\",\"deck\":[],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_336_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a Card of rank 'Queen' and suit 'Hearts' in the deck.\n\nHere is the function to invoke:\n\n\n{\n  // Locate a particular card in a deck based on rank and suit.\n  function_name: 'find_card_in_deck' or null,\n  // Rank of the card (e.g. Ace, Two, King).\n  rank: string,\n  // Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\n  suit: string,\n  // Deck of cards. If not provided, the deck will be a standard 52 card deck\n  deck: [\n    {\n      // \n      rank: string or null,\n      // \n      suit: string or null,\n    }\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function args in JSON format:\n\n```json\n{\n  \"function_name\": \"find_card_in_deck\",\n  \"rank\": \"Queen\",\n  \"suit\": \"Hearts\",\n  \"deck\": []\n}\n```\n\nTool call:\n\n```json\n{\n  \"function_name\": \"find_card_in_deck\",\n  \"rank\": \"Queen\",\n  \"suit\": \"Hearts\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 253, "output_tokens": 79, "total_tokens": 332, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ce0e08bb-750e-4e9d-b9da-004317a47d9c", "event_id": "ce0e08bb-750e-4e9d-b9da-004317a47d9c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28422, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_336", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3c6f65d6-2907-4ce9-8a67-f545714a0235", "event_id": "80fb6833-95da-4b95-b49e-8ca33a4a2cae", "parent_event_id": "3c6f65d6-2907-4ce9-8a67-f545714a0235", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 758, "start_time": "2024-06-19T03:24:19.497Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_340", "variant_name": null}, {"function_name": "Fn_simple_340", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_340\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"deck_size\":52,\"hand_size\":5,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_340_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the probability of getting a full house in poker?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the probability of getting a full house in a poker game.\n  function_name: 'poker_probability.full_house' or null,\n  // The size of the deck. Default is 52.\n  deck_size: int,\n  // The size of the hand. Default is 5.\n  hand_size: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"poker_probability.full_house\",\n  \"deck_size\": 52,\n  \"hand_size\": 5\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 34, "total_tokens": 224, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3c6f65d6-2907-4ce9-8a67-f545714a0235", "event_id": "3c6f65d6-2907-4ce9-8a67-f545714a0235", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28423, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_340", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "64e0fba6-7a53-4f15-9bd7-9b515b267abd", "event_id": "dce9e466-19a2-4689-8f05-c0462bdf77ac", "parent_event_id": "64e0fba6-7a53-4f15-9bd7-9b515b267abd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 790, "start_time": "2024-06-19T03:24:19.497Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_339", "variant_name": null}, {"function_name": "Fn_simple_339", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_339\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"total_cards\":52,\"desired_cards\":13,\"meta\":\"Value\",\"cards_drawn\":1}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_339_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the probability of drawing a heart card from a deck of 52 cards?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the probability of drawing a certain card or suit from a deck of cards.\n  function_name: 'card_game_probability.calculate' or null,\n  // Total number of cards in the deck.\n  total_cards: int,\n  // Number of cards in the deck that satisfy the conditions.\n  desired_cards: int,\n  // Number of cards drawn from the deck. (default: 1)\n  cards_drawn: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'card_game_probability.calculate',\n  total_cards: 52,\n  desired_cards: 13,\n  cards_drawn: 1\n}", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 34, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "64e0fba6-7a53-4f15-9bd7-9b515b267abd", "event_id": "64e0fba6-7a53-4f15-9bd7-9b515b267abd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28455, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_339", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fc51b8f8-ffc6-483c-88ff-a9ea514becd7", "event_id": "93165129-30c1-4526-8a3a-04d119b77790", "parent_event_id": "fc51b8f8-ffc6-483c-88ff-a9ea514becd7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 731, "start_time": "2024-06-19T03:24:19.602Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_342", "variant_name": null}, {"function_name": "Fn_simple_342", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_342\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"suit\":\"hearts\",\"deck_type\":\"without_joker\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_342_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the odds of drawing a heart card from a deck without joker?\n\nHere is the function to invoke:\n\n\n{\n  // Compute the probability of drawing a specific suit from a given deck of cards.\n  function_name: 'deck_of_cards.odds' or null,\n  // The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'.\n  suit: string,\n  // Type of deck, normal deck includes joker, and without_joker deck excludes joker. (default: normal)\n  deck_type: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'deck_of_cards.odds',\n  suit: 'hearts',\n  deck_type: 'without_joker'\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 29, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fc51b8f8-ffc6-483c-88ff-a9ea514becd7", "event_id": "fc51b8f8-ffc6-483c-88ff-a9ea514becd7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28500, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_342", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "58bf618d-2e29-44f3-8b3f-3447d291d411", "event_id": "62ba0644-9639-4629-a10f-22fe1a4d3cd9", "parent_event_id": "58bf618d-2e29-44f3-8b3f-3447d291d411", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 908, "start_time": "2024-06-19T03:24:19.660Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_343", "variant_name": null}, {"function_name": "Fn_simple_343", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_343\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"release_year\":2019,\"multiplayer\":true,\"ESRB_rating\":\"Everyone\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_343_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find all multi-player games released in 2019 with an ESRB rating of 'Everyone'\n\nHere is the function to invoke:\n\n\n{\n  // Get a list of video games based on release year, multiplayer functionality and ESRB rating\n  function_name: 'game_list.get_games' or null,\n  // The year the game was released.\n  release_year: int,\n  // Whether the game has multiplayer functionality.\n  multiplayer: bool,\n  // The ESRB rating of the game.\n  ESRB_rating: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"game_list.get_games\",\n  \"release_year\": 2019,\n  \"multiplayer\": true,\n  \"ESRB_rating\": \"Everyone\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 38, "total_tokens": 251, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "58bf618d-2e29-44f3-8b3f-3447d291d411", "event_id": "58bf618d-2e29-44f3-8b3f-3447d291d411", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28734, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_343", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f6460e8e-8d49-4a7b-843d-42d7e94eebcc", "event_id": "3b0f2b50-b6a1-4e26-af08-04893b520689", "parent_event_id": "f6460e8e-8d49-4a7b-843d-42d7e94eebcc", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 806, "start_time": "2024-06-19T03:24:19.879Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_345", "variant_name": null}, {"function_name": "Fn_simple_345", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_345\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"game\":\"Legend of Zelda: Breath of the Wild\",\"item\":\"Guardian Sword+\",\"stat\":\"power_rating\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_345_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the power rating for the Weapon 'Guardian Sword+' in the game 'Legend of Zelda: Breath of the Wild'?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the statistics of a specific item in a specific video game.\n  function_name: 'get_game_item_stats' or null,\n  // The game to retrieve information from.\n  game: string,\n  // The name of the item in the game.\n  item: string,\n  // Specific statistic required.\n  stat: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_game_item_stats',\n  game: 'Legend of Zelda: Breath of the Wild',\n  item: 'Guardian Sword+',\n  stat: 'power_rating',\n}", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 41, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f6460e8e-8d49-4a7b-843d-42d7e94eebcc", "event_id": "f6460e8e-8d49-4a7b-843d-42d7e94eebcc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28852, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_345", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9d8bb090-1d4a-4552-bb35-8d578415e4a4", "event_id": "e7ee0fd3-f1b0-4dac-8a84-a3c82c1c152d", "parent_event_id": "9d8bb090-1d4a-4552-bb35-8d578415e4a4", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 933, "start_time": "2024-06-19T03:24:19.813Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_344", "variant_name": null}, {"function_name": "Fn_simple_344", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_344\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"game\":\"Zelda\",\"username\":\"Sam\",\"meta\":\"Value\",\"platform\":\"Switch\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_344_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Fetch player statistics of 'Zelda' on Switch for user 'Sam'.\n\nHere is the function to invoke:\n\n\n{\n  // Fetch player statistics for a specific video game for a given user.\n  function_name: 'game_stats.fetch_player_statistics' or null,\n  // The name of the video game.\n  game: string,\n  // The username of the player.\n  username: string,\n  // The platform user is playing on. (default: PC)\n  platform: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"game_stats.fetch_player_statistics\",\n  \"game\": \"Zelda\",\n  \"username\": \"Sam\",\n  \"platform\": \"Switch\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 40, "total_tokens": 243, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9d8bb090-1d4a-4552-bb35-8d578415e4a4", "event_id": "9d8bb090-1d4a-4552-bb35-8d578415e4a4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28913, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_344", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0f08e3b5-1727-4b09-aabf-c748a674c56f", "event_id": "d98157b4-8006-41b1-bbcd-a477176092bc", "parent_event_id": "0f08e3b5-1727-4b09-aabf-c748a674c56f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 860, "start_time": "2024-06-19T03:24:19.925Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_346", "variant_name": null}, {"function_name": "Fn_simple_346", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_346\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"game_name\":\"Super Mario Bros.\",\"release_year\":1985,\"meta\":\"Value\",\"condition\":\"Value1\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_346_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the value of a vintage Super Mario Bros. game from 1985 like new.\n\nHere is the function to invoke:\n\n\n{\n  // Get the current market value of a vintage video game.\n  function_name: 'game_valuation' or null,\n  // The name of the game.\n  game_name: string,\n  // The year the game was released.\n  release_year: int,\n  // The condition of the game. Default is 'Used'.\n  condition: 'New' or 'Like New' or 'Used' or 'Fair' or 'Poor' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"game_valuation\",\n  \"game_name\": \"Super Mario Bros.\",\n  \"release_year\": 1985,\n  \"condition\": \"Like New\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 222, "output_tokens": 39, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0f08e3b5-1727-4b09-aabf-c748a674c56f", "event_id": "0f08e3b5-1727-4b09-aabf-c748a674c56f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 28953, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_346", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "adae4a63-98b9-4144-891a-9caffc18d465", "event_id": "2e1f9e66-f20c-4541-a07f-1b766fdcb5cb", "parent_event_id": "adae4a63-98b9-4144-891a-9caffc18d465", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1415, "start_time": "2024-06-19T03:24:19.541Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_341", "variant_name": null}, {"function_name": "Fn_simple_341", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_341\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"player1\":\"John\",\"hand1\":[\"8\u2665\",\"10\u2665\",\"J\u2665\",\"Q\u2665\",\"K\u2665\"],\"player2\":\"Mike\",\"hand2\":[\"9\u2660\",\"J\u2660\",\"10\u2660\",\"Q\u2660\",\"K\u2660\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_341_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660.\n\nHere is the function to invoke:\n\n\n{\n  // Determines the winner in a game of Poker based on the cards in each players' hands.\n  function_name: 'card_games.poker_determine_winner' or null,\n  // The first player's name.\n  player1: string,\n  // The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']\n  hand1: string[],\n  // The second player's name.\n  player2: string,\n  // The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']\n  hand2: string[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"card_games.poker_determine_winner\",\n  \"player1\": \"John\",\n  \"hand1\": [\"8\u2665\", \"10\u2665\", \"J\u2665\", \"Q\u2665\", \"K\u2665\"],\n  \"player2\": \"Mike\",\n  \"hand2\": [\"9\u2660\", \"J\u2660\", \"10\u2660\", \"Q\u2660\", \"K\u2660\"]\n}", "metadata": {"logprobs": null, "prompt_tokens": 295, "output_tokens": 87, "total_tokens": 382, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "adae4a63-98b9-4144-891a-9caffc18d465", "event_id": "adae4a63-98b9-4144-891a-9caffc18d465", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29122, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_341", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e570792a-e6e3-48b3-bdcf-78f0718a0ac2", "event_id": "9ed667fc-fe3a-477e-abf1-c54d37232c1f", "parent_event_id": "e570792a-e6e3-48b3-bdcf-78f0718a0ac2", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 740, "start_time": "2024-06-19T03:24:20.257Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_350", "variant_name": null}, {"function_name": "Fn_simple_350", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_350\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"game\":\"Overwatch\",\"platform\":\"PC\",\"meta\":\"Value\",\"region\":\"Global\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_350_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the highest score achieved by any player in the online game 'Overwatch' on PC globally.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the highest score achieved by any player in a specific game.\n  function_name: 'game_score.highest' or null,\n  // The name of the online game.\n  game: string,\n  // The platform where the game is played, e.g. PC, Xbox, Playstation\n  platform: string,\n  // The geographic region of the player. Defaults to 'Global'\n  region: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'game_score.highest',\n  game: 'Overwatch',\n  platform: 'PC',\n  region: 'Global'\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 31, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e570792a-e6e3-48b3-bdcf-78f0718a0ac2", "event_id": "e570792a-e6e3-48b3-bdcf-78f0718a0ac2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29164, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_350", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "816e83cd-b343-40f5-8ec6-3ee076ac5f47", "event_id": "2114bf8e-0edb-4c9d-8998-1a7656e2840d", "parent_event_id": "816e83cd-b343-40f5-8ec6-3ee076ac5f47", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1045, "start_time": "2024-06-19T03:24:19.977Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_347", "variant_name": null}, {"function_name": "Fn_simple_347", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_347\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"game_name\":\"Animal Crossing: New Horizons\",\"season\":\"Spring\",\"meta\":\"Value\",\"item_type\":\"all\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_347_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get all collectable items from the game 'Animal Crossing: New Horizons' during the Spring season.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve a list of collectable items in a specific game during a specified season.\n  function_name: 'get_collectables_in_season' or null,\n  // Name of the game.\n  game_name: string,\n  // The season for which to retrieve the collectable items.\n  season: string,\n  // The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\n  item_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_collectables_in_season\",\n  \"game_name\": \"Animal Crossing: New Horizons\",\n  \"season\": \"Spring\",\n  \"item_type\": \"all\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 46, "total_tokens": 282, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "816e83cd-b343-40f5-8ec6-3ee076ac5f47", "event_id": "816e83cd-b343-40f5-8ec6-3ee076ac5f47", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29188, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_347", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "12995784-4744-4e68-a18b-d51678f7b782", "event_id": "bde39373-0181-490e-8ba3-e8098aa61cbe", "parent_event_id": "12995784-4744-4e68-a18b-d51678f7b782", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 739, "start_time": "2024-06-19T03:24:20.290Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_351", "variant_name": null}, {"function_name": "Fn_simple_351", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_351\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"game\":\"Valorant\",\"season\":\"2022\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_351_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the highest scoring player of game 'Valorant' in 2022 season.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the highest scoring player in a specific game and season.\n  function_name: 'get_highest_scoring_player' or null,\n  // The game in which you want to find the highest scoring player.\n  game: string,\n  // The season during which the high score was achieved.\n  season: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"get_highest_scoring_player\",\n  \"game\": \"Valorant\",\n  \"season\": \"2022\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 194, "output_tokens": 35, "total_tokens": 229, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "12995784-4744-4e68-a18b-d51678f7b782", "event_id": "12995784-4744-4e68-a18b-d51678f7b782", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29195, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_351", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b3a08138-b5cc-45a7-a680-788aff94d205", "event_id": "8a96768c-88b8-4cd4-8c79-96355024419e", "parent_event_id": "b3a08138-b5cc-45a7-a680-788aff94d205", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 710, "start_time": "2024-06-19T03:24:20.336Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_352", "variant_name": null}, {"function_name": "Fn_simple_352", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_352\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"platform\":\"Windows 10\",\"rating\":4.5,\"meta\":\"Value\",\"genre\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_352_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.\n\nHere is the function to invoke:\n\n\n{\n  // Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.\n  function_name: 'multiplayer_game_finder' or null,\n  // The platform you want the game to be compatible with, e.g. Windows 10, PS5.\n  platform: string,\n  // Desired minimum game rating on a 5.0 scale.\n  rating: float,\n  // Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.\n  genre: 'Action' or 'Adventure' or 'Racing' or 'Strategy' or 'Simulation' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"multiplayer_game_finder\",\n  \"platform\": \"Windows 10\",\n  \"rating\": 4.5\n}", "metadata": {"logprobs": null, "prompt_tokens": 256, "output_tokens": 31, "total_tokens": 287, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b3a08138-b5cc-45a7-a680-788aff94d205", "event_id": "b3a08138-b5cc-45a7-a680-788aff94d205", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29213, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_352", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3800d66f-e136-4c06-94f8-b5b222c21acd", "event_id": "97b81b3d-b135-46cb-8191-4b39dc056840", "parent_event_id": "3800d66f-e136-4c06-94f8-b5b222c21acd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 811, "start_time": "2024-06-19T03:24:20.256Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_348", "variant_name": null}, {"function_name": "Fn_simple_348", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_348\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"team_name\":\"Liverpool F.C.\",\"meta\":\"Value\",\"include_stats\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_348_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me the details of the last game played by Liverpool F.C. Include its statistics.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the details of the last match played by a specified soccer club.\n  function_name: 'soccer.get_last_match' or null,\n  // The name of the soccer club.\n  team_name: string,\n  // If true, include match statistics like possession, shots on target etc. Default is false.\n  include_stats: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"soccer.get_last_match\",\n  \"team_name\": \"Liverpool F.C.\",\n  \"include_stats\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 31, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3800d66f-e136-4c06-94f8-b5b222c21acd", "event_id": "3800d66f-e136-4c06-94f8-b5b222c21acd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29234, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_348", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1934c789-14b0-4962-90cd-28e07cf5adcd", "event_id": "57944aa0-2649-4e31-a7c9-6663f1d2e5a7", "parent_event_id": "1934c789-14b0-4962-90cd-28e07cf5adcd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 915, "start_time": "2024-06-19T03:24:20.569Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_353", "variant_name": null}, {"function_name": "Fn_simple_353", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_353\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": null}, "error": {"code": 2, "message": "Failed to coerce value: Error parsing '<root>': Missing required field: platform", "traceback": null, "override": null}, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the average user score of a game from GameSpot.\n  function_name: 'gamespot.getAverageUserScore' or null,\n  // The name of the game.\n  game_name: string,\n  // The platform the game was released on (e.g., Nintendo Switch, PS5, etc.) (default: all platforms)\n  platform: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"gamespot.getAverageUserScore\",\n  \"game_name\": \"The Legend of Zelda: Breath of the Wild\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 209, "output_tokens": 31, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "716b9aac-b93f-4b01-b2d2-95d5e11167d0", "event_id": "ff552eea-8ad2-404f-ac25-7807a8ec5211", "parent_event_id": "716b9aac-b93f-4b01-b2d2-95d5e11167d0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 797, "start_time": "2024-06-19T03:24:20.686Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_354", "variant_name": null}, {"function_name": "Fn_simple_354", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_354\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"diet\":\"gluten-free\",\"meal_type\":\"dinner\",\"ingredients\":[],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_354_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are some gluten-free recipes for dinner?\n\nHere is the function to invoke:\n\n\n{\n  // Find recipes based on dietary restrictions, meal type, and preferred ingredients.\n  function_name: 'find_recipes' or null,\n  // The dietary restrictions, e.g., 'vegan', 'gluten-free'.\n  diet: string,\n  // The type of meal, e.g., 'dinner', 'breakfast'.\n  meal_type: string,\n  // The preferred ingredients. If left blank, it will default to return general recipes.\n  ingredients: string[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'find_recipes',\n  diet: 'gluten-free',\n  meal_type: 'dinner',\n  ingredients: []\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 31, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1934c789-14b0-4962-90cd-28e07cf5adcd", "event_id": "1934c789-14b0-4962-90cd-28e07cf5adcd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29652, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_353", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'baml_py.BamlError'>: \\u001b[33mClient: GPT35Turbo (gpt-3.5-turbo-0125) - 914ms\\u001b[0m\\n\\u001b[34m---PROMPT---\\u001b[0m\\n\\u001b[2m[\\u001b[2mchat\\u001b[0m\\u001b[2m] \\u001b[43msystem: \\u001b[0m\\u001b[2mYou are an expert in composing functions. You are given a question and a set of possible functions.\\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\\nalso point it out. You should only return the function call in tools call sections.\\n\\u001b[43muser: \\u001b[0m\\u001b[2mQuestion: Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.\\n\\nHere is the function to invoke:\\n\\n\\n{\\n  // Retrieve the average user score of a game from GameSpot.\\n  function_name: 'gamespot.getAverageUserScore' or null,\\n  // The name of the game.\\n  game_name: string,\\n  // The platform the game was released on (e.g., Nintendo Switch, PS5, etc.) (default: all platforms)\\n  platform: string,\\n}\\n\\n\\nFunction args in JSON format:\\n\\u001b[0m\\n\\u001b[34m---LLM REPLY---\\u001b[0m\\n\\u001b[2m{\\n  \\\"function_name\\\": \\\"gamespot.getAverageUserScore\\\",\\n  \\\"game_name\\\": \\\"The Legend of Zelda: Breath of the Wild\\\"\\n}\\u001b[0m\\n\\u001b[34m---Parsed Response---\\u001b[0m\\n\\u001b[31mFailed to coerce value: Error parsing '<root>': Missing required field: platform\\u001b[0m\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "716b9aac-b93f-4b01-b2d2-95d5e11167d0", "event_id": "716b9aac-b93f-4b01-b2d2-95d5e11167d0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29653, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_354", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6af79b33-c46d-433a-830f-662cb2b5f95a", "event_id": "88b85288-e42a-4892-9841-523156982716", "parent_event_id": "6af79b33-c46d-433a-830f-662cb2b5f95a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 832, "start_time": "2024-06-19T03:24:20.748Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_355", "variant_name": null}, {"function_name": "Fn_simple_355", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_355\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"dish_type\":\"Value0\",\"cooking_time\":30,\"ingredient_preference\":[],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_355_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a vegan soup recipe that takes under 30 minutes to make.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve a vegan soup recipe based on the provided cooking time.\n  function_name: 'get_vegan_recipe' or null,\n  // The type of dish, e.g. soup, dessert, etc.\n  dish_type: 'soup' or 'main dish' or 'dessert' or 'salad',\n  // The maximum cooking time for the recipe in minutes.\n  cooking_time: int,\n  // Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided.\n  ingredient_preference: string[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_vegan_recipe\",\n  \"dish_type\": \"soup\",\n  \"cooking_time\": 30,\n  \"ingredient_preference\": []\n}", "metadata": {"logprobs": null, "prompt_tokens": 237, "output_tokens": 36, "total_tokens": 273, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6af79b33-c46d-433a-830f-662cb2b5f95a", "event_id": "6af79b33-c46d-433a-830f-662cb2b5f95a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29747, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_355", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "97f42cb2-c8ee-43ba-9296-2f8291802664", "event_id": "4498ff30-7747-4dd1-8857-c1ea615d3911", "parent_event_id": "97f42cb2-c8ee-43ba-9296-2f8291802664", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 889, "start_time": "2024-06-19T03:24:20.787Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_356", "variant_name": null}, {"function_name": "Fn_simple_356", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_356\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"website\":\"Foodnetwork.com\",\"recipe\":\"Beef Lasagna Recipe\",\"meta\":\"Value\",\"optional_meal_time\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_356_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How many calories in the Beef Lasagna Recipe from Foodnetwork.com?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the amount of calories from a specific recipe in a food website.\n  function_name: 'recipe_info.get_calories' or null,\n  // The food website that has the recipe.\n  website: string,\n  // Name of the recipe.\n  recipe: string,\n  // Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified.\n  optional_meal_time: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"recipe_info.get_calories\",\n  \"website\": \"Foodnetwork.com\",\n  \"recipe\": \"Beef Lasagna Recipe\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 227, "output_tokens": 34, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "97f42cb2-c8ee-43ba-9296-2f8291802664", "event_id": "97f42cb2-c8ee-43ba-9296-2f8291802664", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29843, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_356", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f4007549-5bfa-4968-a49a-a65e16f3ec17", "event_id": "f1c3bce1-49aa-4d73-bc3b-25e0141341cd", "parent_event_id": "f4007549-5bfa-4968-a49a-a65e16f3ec17", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 760, "start_time": "2024-06-19T03:24:20.957Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_357", "variant_name": null}, {"function_name": "Fn_simple_357", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_357\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"servings\":2,\"diet\":\"vegan\",\"meta\":\"Value\",\"prep_time\":30}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_357_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare.\n\nHere is the function to invoke:\n\n\n{\n  // Find a recipe based on dietary preferences, number of servings, and preparation time.\n  function_name: 'recipe_finder.find' or null,\n  // The number of people that the recipe should serve.\n  servings: int,\n  // Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc.\n  diet: string,\n  // The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes.\n  prep_time: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"recipe_finder.find\",\n  \"servings\": 2,\n  \"diet\": \"vegan\",\n  \"prep_time\": 30\n}", "metadata": {"logprobs": null, "prompt_tokens": 236, "output_tokens": 36, "total_tokens": 272, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f4007549-5bfa-4968-a49a-a65e16f3ec17", "event_id": "f4007549-5bfa-4968-a49a-a65e16f3ec17", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29883, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_357", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c202e008-0abd-4ded-8cb1-790aac1555ab", "event_id": "c56f525c-354c-42ae-9554-a7f35122ecf0", "parent_event_id": "c202e008-0abd-4ded-8cb1-790aac1555ab", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 681, "start_time": "2024-06-19T03:24:21.048Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_361", "variant_name": null}, {"function_name": "Fn_simple_361", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_361\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"recipeName\":\"pasta carbonara\",\"meta\":\"Value\",\"maxCalories\":500}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_361_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a recipe for pasta carbonara which contains only less than 500 calories.\n\nHere is the function to invoke:\n\n\n{\n  // Locate a recipe based on name and its calorie content\n  function_name: 'find_recipe' or null,\n  // The recipe's name.\n  recipeName: string,\n  // The maximum calorie content of the recipe. (default: 1000)\n  maxCalories: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'find_recipe',\n  recipeName: 'pasta carbonara',\n  maxCalories: 500\n}", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 28, "total_tokens": 218, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c202e008-0abd-4ded-8cb1-790aac1555ab", "event_id": "c202e008-0abd-4ded-8cb1-790aac1555ab", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29895, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_361", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d2df4fe2-f570-4ea4-a093-49f462f81f4d", "event_id": "c783c521-e65a-4cd6-8952-e31c5c351973", "parent_event_id": "d2df4fe2-f570-4ea4-a093-49f462f81f4d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 747, "start_time": "2024-06-19T03:24:21.023Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_359", "variant_name": null}, {"function_name": "Fn_simple_359", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_359\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"diet\":[\"Value0\"],\"dish\":\"Cookie\",\"meta\":\"Value\",\"time_limit\":30}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_359_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a gluten-free cookie recipe that takes less than 30 minutes to prepare.\n\nHere is the function to invoke:\n\n\n{\n  // Search for a cooking recipe based on specific dietary needs and time constraint.\n  function_name: 'recipe_search' or null,\n  // Specific dietary need.\n  diet: [\n    'Gluten Free' or 'Dairy Free' or 'Vegan' or 'Vegetarian'\n  ],\n  // The maximum time to prepare the recipe in minutes. Default is 60 minutes.\n  time_limit: int or null,\n  // The name of the dish to search for. Default is not use if not specified.\n  dish: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'recipe_search',\n  diet: ['Gluten Free'],\n  time_limit: 30,\n  dish: 'Cookie'\n}", "metadata": {"logprobs": null, "prompt_tokens": 239, "output_tokens": 31, "total_tokens": 270, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d2df4fe2-f570-4ea4-a093-49f462f81f4d", "event_id": "d2df4fe2-f570-4ea4-a093-49f462f81f4d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29937, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_359", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2d7b1258-0292-4b16-91ea-f77fb1f1f3bd", "event_id": "7e1e28af-603e-4af4-9d17-2693b00826c0", "parent_event_id": "2d7b1258-0292-4b16-91ea-f77fb1f1f3bd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 762, "start_time": "2024-06-19T03:24:21.069Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_362", "variant_name": null}, {"function_name": "Fn_simple_362", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_362\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"city\":\"New York City\",\"cuisine\":\"Italian\",\"meta\":\"Value\",\"diet\":\"Gluten-free\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_362_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find Italian restaurants near New York city that serves gluten-free options.\n\nHere is the function to invoke:\n\n\n{\n  // Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences.\n  function_name: 'restaurant_finder' or null,\n  // City where you are looking for the restaurant.\n  city: string,\n  // Type of cuisine you are interested in.\n  cuisine: string,\n  // Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'.\n  diet: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'restaurant_finder',\n  city: 'New York City',\n  cuisine: 'Italian',\n  diet: 'Gluten-free'\n}", "metadata": {"logprobs": null, "prompt_tokens": 217, "output_tokens": 32, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2d7b1258-0292-4b16-91ea-f77fb1f1f3bd", "event_id": "2d7b1258-0292-4b16-91ea-f77fb1f1f3bd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 29997, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_362", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2da7c16c-19ac-4e6f-a9bd-c2b4434c5da2", "event_id": "8a32a53c-f10e-41e7-bab3-ca6ecb0206da", "parent_event_id": "2da7c16c-19ac-4e6f-a9bd-c2b4434c5da2", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 831, "start_time": "2024-06-19T03:24:21.030Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_360", "variant_name": null}, {"function_name": "Fn_simple_360", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_360\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"dietary_restriction\":\"Vegetarian\",\"ingredients\":[\"pasta\",\"cheese\"],\"servings\":2,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_360_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Give me a recipe for a vegetarian pasta with cheese for 2 servings.\n\nHere is the function to invoke:\n\n\n{\n  // Search for a recipe given dietary restriction, ingredients, and number of servings.\n  function_name: 'recipe_search' or null,\n  // The dietary restriction, e.g., 'Vegetarian'.\n  dietary_restriction: string,\n  // The list of ingredients.\n  ingredients: string[],\n  // The number of servings the recipe should make\n  servings: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"recipe_search\",\n  \"dietary_restriction\": \"Vegetarian\",\n  \"ingredients\": [\"pasta\", \"cheese\"],\n  \"servings\": 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 43, "total_tokens": 246, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2da7c16c-19ac-4e6f-a9bd-c2b4434c5da2", "event_id": "2da7c16c-19ac-4e6f-a9bd-c2b4434c5da2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 30028, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_360", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a329847b-bc0b-4d38-9890-c9a87392f7bd", "event_id": "b93f11fb-3062-4d8c-a734-1c215b3a38d6", "parent_event_id": "a329847b-bc0b-4d38-9890-c9a87392f7bd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 771, "start_time": "2024-06-19T03:24:21.487Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_364", "variant_name": null}, {"function_name": "Fn_simple_364", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_364\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Boston, MA\",\"cuisine\":\"Sushi\",\"amenities\":[\"Value0\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_364_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the closest sushi restaurant with a patio in Boston.\n\nHere is the function to invoke:\n\n\n{\n  // Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.\n  function_name: 'restaurant_search.find_closest' or null,\n  // The city, for instance Boston, MA\n  location: string,\n  // Type of food like Sushi.\n  cuisine: string,\n  // Preferred amenities in the restaurant. Default 'Wi-Fi'.\n  amenities: [\n    'Patio' or 'Wi-Fi' or 'Happy Hour' or 'Wheelchair Accessible'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'restaurant_search.find_closest',\n  location: 'Boston, MA',\n  cuisine: 'Sushi',\n  amenities: ['Patio']\n}", "metadata": {"logprobs": null, "prompt_tokens": 227, "output_tokens": 35, "total_tokens": 262, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a329847b-bc0b-4d38-9890-c9a87392f7bd", "event_id": "a329847b-bc0b-4d38-9890-c9a87392f7bd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 30425, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_364", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8a9dbccc-393f-46d8-82be-8fc032ec472c", "event_id": "b7098ed2-cf07-4463-b672-5925f0fa2373", "parent_event_id": "8a9dbccc-393f-46d8-82be-8fc032ec472c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 833, "start_time": "2024-06-19T03:24:21.487Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_363", "variant_name": null}, {"function_name": "Fn_simple_363", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_363\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"city\":\"Tokyo\",\"top\":5,\"meta\":\"Value\",\"review_rate\":4.0}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_363_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?\n\nHere is the function to invoke:\n\n\n{\n  // Returns the best sushi places given the city, review_rate and top number.\n  function_name: 'get_best_sushi_places' or null,\n  // The city in which to look for the sushi places.\n  city: string,\n  // The number of top sushi places to be returned.\n  top: int,\n  // The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00.\n  review_rate: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_best_sushi_places\",\n  \"city\": \"Tokyo\",\n  \"top\": 5,\n  \"review_rate\": 4\n}", "metadata": {"logprobs": null, "prompt_tokens": 234, "output_tokens": 37, "total_tokens": 271, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8a9dbccc-393f-46d8-82be-8fc032ec472c", "event_id": "8a9dbccc-393f-46d8-82be-8fc032ec472c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 30486, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_363", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "eb6cbacc-686d-4062-b680-98edbdd67764", "event_id": "1e70e5ce-d13f-47dc-8317-24b4da0ed1db", "parent_event_id": "eb6cbacc-686d-4062-b680-98edbdd67764", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 647, "start_time": "2024-06-19T03:24:21.772Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_369", "variant_name": null}, {"function_name": "Fn_simple_369", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_369\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"weight_kg\":1.5,\"meta\":\"Value\",\"cooking_method\":null,\"temp_celsius\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_369_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How much time will it take to cook a roast chicken of 1.5 kg?\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the cooking time for a roast chicken.\n  function_name: 'calculate_cooking_time' or null,\n  // The weight of the chicken in kilograms.\n  weight_kg: float,\n  // The method of cooking, defaults to 'roast'.\n  cooking_method: string or null,\n  // The cooking temperature in degrees celsius, defaults to 180.\n  temp_celsius: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_cooking_time',\n  weight_kg: 1.5,\n}", "metadata": {"logprobs": null, "prompt_tokens": 216, "output_tokens": 23, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "eb6cbacc-686d-4062-b680-98edbdd67764", "event_id": "eb6cbacc-686d-4062-b680-98edbdd67764", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 30585, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_369", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "89b9947d-4763-4418-b8b5-2f7e3379d4f7", "event_id": "b6702eab-c163-4941-8829-d575c0940eaf", "parent_event_id": "89b9947d-4763-4418-b8b5-2f7e3379d4f7", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 843, "start_time": "2024-06-19T03:24:21.582Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_365", "variant_name": null}, {"function_name": "Fn_simple_365", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_365\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Brooklyn\",\"type\":\"Italian\",\"diet_option\":\"Gluten-free\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_365_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Can I find an Italian restaurant with Gluten-free options near Brooklyn?\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby restaurants based on user defined criteria\n  function_name: 'find_restaurant' or null,\n  // The location where user wants to search for a restaurant.\n  location: string,\n  // The type of the cuisine/restaurant.\n  type: string,\n  // Special dietary preferences.\n  diet_option: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function args in JSON format:\n\n```json\n{\n  \"function_name\": \"find_restaurant\",\n  \"location\": \"Brooklyn\",\n  \"type\": \"Italian\",\n  \"diet_option\": \"Gluten-free\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 192, "output_tokens": 47, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "89b9947d-4763-4418-b8b5-2f7e3379d4f7", "event_id": "89b9947d-4763-4418-b8b5-2f7e3379d4f7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 30591, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_365", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "28e2c681-04e1-45b1-b207-2ea96eac141d", "event_id": "f6e84562-5c58-4c28-a54f-4998c729ac78", "parent_event_id": "28e2c681-04e1-45b1-b207-2ea96eac141d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 811, "start_time": "2024-06-19T03:24:21.678Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_366", "variant_name": null}, {"function_name": "Fn_simple_366", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_366\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"quantity\":2,\"from_unit\":\"pounds\",\"to_unit\":\"ounces\",\"item\":\"butter\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_366_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How many ounces in 2 pounds of butter?\n\nHere is the function to invoke:\n\n\n{\n  // Convert cooking measurements from one unit to another.\n  function_name: 'cooking_conversion.convert' or null,\n  // The quantity to be converted.\n  quantity: int,\n  // The unit to convert from.\n  from_unit: string,\n  // The unit to convert to.\n  to_unit: string,\n  // The item to be converted.\n  item: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'cooking_conversion.convert',\n  quantity: 2,\n  from_unit: 'pounds',\n  to_unit: 'ounces',\n  item: 'butter',\n}", "metadata": {"logprobs": null, "prompt_tokens": 199, "output_tokens": 40, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "28e2c681-04e1-45b1-b207-2ea96eac141d", "event_id": "28e2c681-04e1-45b1-b207-2ea96eac141d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 30655, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_366", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0691018d-d662-48f4-afc1-b72b41d5af9f", "event_id": "17c9d679-b956-407a-8e4e-54e2b7201d79", "parent_event_id": "0691018d-d662-48f4-afc1-b72b41d5af9f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 806, "start_time": "2024-06-19T03:24:21.718Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_367", "variant_name": null}, {"function_name": "Fn_simple_367", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_367\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"value\":2,\"from_unit\":\"tablespoon\",\"to_unit\":\"teaspoon\",\"meta\":\"Value\",\"precision\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_367_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How many teaspoons are in 2 tablespoons for measurement in my recipe?\n\nHere is the function to invoke:\n\n\n{\n  // Convert a value from one kitchen unit to another for cooking purposes.\n  function_name: 'recipe.unit_conversion' or null,\n  // The value to be converted.\n  value: int,\n  // The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc.\n  from_unit: string,\n  // The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc.\n  to_unit: string,\n  // The precision to round the output to, in case of a non-integer result. Optional, default is 1.\n  precision: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"recipe.unit_conversion\",\n  \"value\": 2,\n  \"from_unit\": \"tablespoon\",\n  \"to_unit\": \"teaspoon\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 258, "output_tokens": 39, "total_tokens": 297, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0691018d-d662-48f4-afc1-b72b41d5af9f", "event_id": "0691018d-d662-48f4-afc1-b72b41d5af9f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 30690, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_367", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c5fa3c6f-2bfe-4519-ac12-5e3203a82009", "event_id": "ee7ada8b-9be2-4ea1-8c4f-433849296275", "parent_event_id": "c5fa3c6f-2bfe-4519-ac12-5e3203a82009", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 862, "start_time": "2024-06-19T03:24:21.833Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_370", "variant_name": null}, {"function_name": "Fn_simple_370", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_370\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Houston, TX\",\"categories\":[\"Value0\",\"Value2\",\"Value1\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_370_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a grocery store near me with organic fruits and vegetables in Houston.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.\n  function_name: 'grocery_store.find_nearby' or null,\n  // The city and state, e.g. Houston, TX\n  location: string,\n  // Categories of items to be found in the grocery store. Default is all if not specified.\n  categories: [\n    'Organic' or 'Vegetables' or 'Fruits' or 'Dairy' or 'Seafood' or 'Bakery'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'grocery_store.find_nearby',\n  location: 'Houston, TX',\n  categories: ['Organic', 'Fruits', 'Vegetables']\n}", "metadata": {"logprobs": null, "prompt_tokens": 233, "output_tokens": 38, "total_tokens": 271, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c5fa3c6f-2bfe-4519-ac12-5e3203a82009", "event_id": "c5fa3c6f-2bfe-4519-ac12-5e3203a82009", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 30860, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_370", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "aa345a5f-0f7b-4eca-b77c-74a28373c711", "event_id": "9ab8dd3c-a951-44d2-84a2-e73ccca158bd", "parent_event_id": "aa345a5f-0f7b-4eca-b77c-74a28373c711", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1137, "start_time": "2024-06-19T03:24:21.730Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_368", "variant_name": null}, {"function_name": "Fn_simple_368", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_368\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"dietary_restrictions\":\"vegan\",\"recipe_type\":\"dessert\",\"time\":30,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_368_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me a vegan recipe for brownies which prep time is under 30 minutes.\n\nHere is the function to invoke:\n\n\n{\n  // Find a recipe based on the dietary restrictions, recipe type, and time constraints.\n  function_name: 'find_recipe' or null,\n  // Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\n  dietary_restrictions: string,\n  // Type of the recipe. E.g. dessert, main course, breakfast.\n  recipe_type: string,\n  // Time limit in minutes to prep the meal.\n  time: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"find_recipe\",\n  \"dietary_restrictions\": \"vegan\",\n  \"recipe_type\": \"dessert\",\n  \"time\": 30\n}", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 38, "total_tokens": 258, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "aa345a5f-0f7b-4eca-b77c-74a28373c711", "event_id": "aa345a5f-0f7b-4eca-b77c-74a28373c711", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31034, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_368", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "89906697-f813-4e1d-a971-9f79f9d71a5d", "event_id": "3d16d70c-aacf-40d6-9546-c54189cfb54a", "parent_event_id": "89906697-f813-4e1d-a971-9f79f9d71a5d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 647, "start_time": "2024-06-19T03:24:22.260Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_372", "variant_name": null}, {"function_name": "Fn_simple_372", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_372\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Los Angeles\",\"items\":[\"tomatoes\",\"lettuce\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_372_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles.\n\nHere is the function to invoke:\n\n\n{\n  // Check the price of items at a specific Whole Foods location.\n  function_name: 'whole_foods.check_price' or null,\n  // Location of the Whole Foods store.\n  location: string,\n  // List of items for which the price needs to be checked.\n  items: string[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'whole_foods.check_price',\n  location: 'Los Angeles',\n  items: ['tomatoes', 'lettuce']\n}", "metadata": {"logprobs": null, "prompt_tokens": 187, "output_tokens": 31, "total_tokens": 218, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "89906697-f813-4e1d-a971-9f79f9d71a5d", "event_id": "89906697-f813-4e1d-a971-9f79f9d71a5d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31073, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_372", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b6d36146-8dc5-4d74-8519-89a668a3e728", "event_id": "c693b2f7-e6c8-4339-8d35-763480ccfd38", "parent_event_id": "b6d36146-8dc5-4d74-8519-89a668a3e728", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1951, "start_time": "2024-06-19T03:24:20.998Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_358", "variant_name": null}, {"function_name": "Fn_simple_358", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_358\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"dish_name\":\"vegan chocolate cake\",\"meta\":\"Value\",\"diet_preference\":\"vegan\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_358_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the recipe for vegan chocolate cake including the steps for preparation.\n\nHere is the function to invoke:\n\n\n{\n  // Fetch the recipe for a specific dish along with preparation steps.\n  function_name: 'get_recipe' or null,\n  // Name of the dish whose recipe needs to be fetched.\n  dish_name: string,\n  // Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none. (default: none)\n  diet_preference: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_recipe',\n  dish_name: 'vegan chocolate cake',\n  diet_preference: 'vegan'\n}", "metadata": {"logprobs": null, "prompt_tokens": 199, "output_tokens": 28, "total_tokens": 227, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b6d36146-8dc5-4d74-8519-89a668a3e728", "event_id": "b6d36146-8dc5-4d74-8519-89a668a3e728", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31117, "start_time": "2024-06-19T03:23:51.834Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_358", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9c787a0d-b59c-418b-8575-6618707c4756", "event_id": "79ac9e3d-a1a8-44d3-8fd4-5e15cbe7673c", "parent_event_id": "9c787a0d-b59c-418b-8575-6618707c4756", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1122, "start_time": "2024-06-19T03:24:21.864Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_371", "variant_name": null}, {"function_name": "Fn_simple_371", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_371\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Palo Alto\",\"items\":[\"olive oil\",\"olive oil\",\"olive oil\",\"rice\"],\"quantity\":[1,1,1,1],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_371_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.\n\nHere is the function to invoke:\n\n\n{\n  // Order specified items from a Safeway location.\n  function_name: 'safeway.order' or null,\n  // The location of the Safeway store, e.g. Palo Alto, CA.\n  location: string,\n  // List of items to order.\n  items: string[],\n  // Quantity of each item in the order list.\n  quantity: int[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"safeway.order\",\n  \"location\": \"Palo Alto\",\n  \"items\": [\"olive oil\", \"olive oil\", \"olive oil\", \"rice\"],\n  \"quantity\": [1, 1, 1, 1]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 64, "total_tokens": 271, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9c787a0d-b59c-418b-8575-6618707c4756", "event_id": "9c787a0d-b59c-418b-8575-6618707c4756", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31152, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_371", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "da8d91f0-13b6-4979-8131-4cdb564597bd", "event_id": "773a8d21-9f40-4246-ae97-a3e76df7ad3d", "parent_event_id": "da8d91f0-13b6-4979-8131-4cdb564597bd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 805, "start_time": "2024-06-19T03:24:22.321Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_373", "variant_name": null}, {"function_name": "Fn_simple_373", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_373\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"product\":\"bananas\",\"meta\":\"Value\",\"number\":5,\"organic\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_373_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the top five organic bananas brands on the basis of rating from Whole Foods store.\n\nHere is the function to invoke:\n\n\n{\n  // Get top brands based on a specific product from Whole Foods\n  function_name: 'whole_foods.find_top_brands' or null,\n  // The product for which the top brands should be fetched.\n  product: string,\n  // Number of top brands to be fetched. Default is 5\n  number: int or null,\n  // If the product should be organic. Default is false\n  organic: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"whole_foods.find_top_brands\",\n  \"product\": \"bananas\",\n  \"number\": 5,\n  \"organic\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 218, "output_tokens": 37, "total_tokens": 255, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "da8d91f0-13b6-4979-8131-4cdb564597bd", "event_id": "da8d91f0-13b6-4979-8131-4cdb564597bd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31292, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_373", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fe5ee9b9-e199-4595-989b-2d3ab015016d", "event_id": "9ef17250-6afa-4e86-8d0a-45bee749d81f", "parent_event_id": "fe5ee9b9-e199-4595-989b-2d3ab015016d", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1009, "start_time": "2024-06-19T03:24:22.420Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_374", "variant_name": null}, {"function_name": "Fn_simple_374", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_374\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"loc\":\"San Jose\",\"product_list\":[\"apples\",\"rice\",\"bottled water\"],\"pack_size\":[12],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_374_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve information of items from Walmart including stock availability.\n  function_name: 'walmart.purchase' or null,\n  // Location of the nearest Walmart.\n  loc: string,\n  // Items to be purchased listed in an array.\n  product_list: string[],\n  // Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified.\n  pack_size: int[],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'walmart.purchase',\n  loc: 'San Jose',\n  product_list: ['apples', 'rice', 'bottled water'],\n  pack_size: [null, null, 12]\n}", "metadata": {"logprobs": null, "prompt_tokens": 233, "output_tokens": 47, "total_tokens": 280, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c4641487-5c13-4630-94fb-2ba319839c4e", "event_id": "6ebd628b-b0a0-4065-9fd6-cab6c6abd9b9", "parent_event_id": "c4641487-5c13-4630-94fb-2ba319839c4e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 904, "start_time": "2024-06-19T03:24:22.525Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_377", "variant_name": null}, {"function_name": "Fn_simple_377", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_377\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"city\":\"London\",\"country\":\"United Kingdom\",\"meta\":\"Value\",\"display_format\":\"24h\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_377_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What time is it currently in London, UK in 24 hour format?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the current time of a specific city.\n  function_name: 'time_zone_converter' or null,\n  // The city you want to know the current time for.\n  city: string,\n  // The country where the city is located.\n  country: string,\n  // The time display format: '12h' or '24h'. Default is '24h'.\n  display_format: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"time_zone_converter\",\n  \"city\": \"London\",\n  \"country\": \"United Kingdom\",\n  \"display_format\": \"24h\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 212, "output_tokens": 36, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fe82c875-e9ee-44ce-8ea4-b9cf8b19674b", "event_id": "88ffdb78-8209-4e8e-9a53-367d372519ae", "parent_event_id": "fe82c875-e9ee-44ce-8ea4-b9cf8b19674b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 939, "start_time": "2024-06-19T03:24:22.490Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_376", "variant_name": null}, {"function_name": "Fn_simple_376", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_376\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"items\":[\"pumpkin\",\"eggs\"],\"quantities\":[3,24],\"meta\":\"Value\",\"store_location\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_376_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Check the total price for three pumpkins and two dozen eggs at Walmart.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate total price for given items and their quantities at Walmart.\n  function_name: 'walmart.check_price' or null,\n  // List of items to be priced.\n  items: string[],\n  // Quantity of each item corresponding to the items list.\n  quantities: int[],\n  // The store location for specific pricing (optional). Default to all if not specified.\n  store_location: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'walmart.check_price',\n  items: ['pumpkin', 'eggs'],\n  quantities: [3, 24],\n  store_location: null\n}", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 39, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fe5ee9b9-e199-4595-989b-2d3ab015016d", "event_id": "fe5ee9b9-e199-4595-989b-2d3ab015016d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31595, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_374", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c4641487-5c13-4630-94fb-2ba319839c4e", "event_id": "c4641487-5c13-4630-94fb-2ba319839c4e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31596, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_377", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f78fe742-c26f-4110-8fda-24c801b8459a", "event_id": "e26b8054-fe03-4bc7-8dc3-af21e9fdfdd7", "parent_event_id": "f78fe742-c26f-4110-8fda-24c801b8459a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 735, "start_time": "2024-06-19T03:24:22.696Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_378", "variant_name": null}, {"function_name": "Fn_simple_378", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_378\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"city\":\"Sydney\",\"country\":\"Australia\",\"meta\":\"Value\",\"format\":\"HH:MM:SS\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_378_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the current time in Sydney, Australia?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the current time for a specified city and country.\n  function_name: 'get_current_time' or null,\n  // The city for which the current time is to be retrieved.\n  city: string,\n  // The country where the city is located.\n  country: string,\n  // The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS').\n  format: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_current_time',\n  city: 'Sydney',\n  country: 'Australia',\n  format: 'HH:MM:SS'\n}", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 34, "total_tokens": 245, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fe82c875-e9ee-44ce-8ea4-b9cf8b19674b", "event_id": "fe82c875-e9ee-44ce-8ea4-b9cf8b19674b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31596, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_376", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f78fe742-c26f-4110-8fda-24c801b8459a", "event_id": "f78fe742-c26f-4110-8fda-24c801b8459a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31597, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_378", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c5772a8c-ab31-4e87-8718-b05b0cd374c0", "event_id": "501c8ae1-6136-48d4-b719-b30d288d49ee", "parent_event_id": "c5772a8c-ab31-4e87-8718-b05b0cd374c0", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1056, "start_time": "2024-06-19T03:24:22.427Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_375", "variant_name": null}, {"function_name": "Fn_simple_375", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_375\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"store\":\"Walmart\",\"food\":\"avocado\",\"information\":[\"Value0\",\"Value1\",\"Value2\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_375_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Check the amount of protein, calories and carbs in an avocado from Walmart.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve nutritional information for a given food item from a particular store\n  function_name: 'grocery_info.nutritional_info' or null,\n  // The store where the item is available\n  store: string,\n  // Food item for which information is needed.\n  food: string,\n  // Nutritional details required.\n  information: [\n    'Protein' or 'Calories' or 'Carbohydrates' or 'Fat' or 'Fiber'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'grocery_info.nutritional_info',\n  store: 'Walmart',\n  food: 'avocado',\n  information: ['Protein', 'Calories', 'Carbohydrates']\n}", "metadata": {"logprobs": null, "prompt_tokens": 225, "output_tokens": 45, "total_tokens": 270, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c5772a8c-ab31-4e87-8718-b05b0cd374c0", "event_id": "c5772a8c-ab31-4e87-8718-b05b0cd374c0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31649, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_375", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0cb4b320-fbc1-44a5-8961-e107dc53b457", "event_id": "7aaf32fa-bfd3-4d4c-a61a-e67292bc4d59", "parent_event_id": "0cb4b320-fbc1-44a5-8961-e107dc53b457", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 804, "start_time": "2024-06-19T03:24:22.909Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_380", "variant_name": null}, {"function_name": "Fn_simple_380", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_380\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Sydney\",\"country\":\"Australia\",\"meta\":\"Value\",\"timezone\":\"Australia/Sydney\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_380_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What's the current time in Sydney, Australia?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the current time in a specific time zone.\n  function_name: 'get_current_time' or null,\n  // The name of the city.\n  location: string,\n  // The name of the country.\n  country: string,\n  // The optional timezone to get current time. Default \n  timezone: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_current_time\",\n  \"location\": \"Sydney\",\n  \"country\": \"Australia\",\n  \"timezone\": \"Australia/Sydney\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 37, "total_tokens": 227, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5225c6df-cb35-43ad-b170-0877d991289c", "event_id": "99a9d151-6460-41aa-84f8-9eea578671bb", "parent_event_id": "5225c6df-cb35-43ad-b170-0877d991289c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 844, "start_time": "2024-06-19T03:24:22.869Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_379", "variant_name": null}, {"function_name": "Fn_simple_379", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_379\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"time\":\"3pm\",\"from_timezone\":\"America/New_York\",\"to_timezone\":\"Europe/London\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_379_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Convert time 3pm from New York time zone to London time zone.\n\nHere is the function to invoke:\n\n\n{\n  // Convert time from one time zone to another.\n  function_name: 'timezone.convert' or null,\n  // The local time you want to convert, e.g. 3pm\n  time: string,\n  // The time zone you want to convert from.\n  from_timezone: string,\n  // The time zone you want to convert to.\n  to_timezone: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'timezone.convert',\n  time: '3pm',\n  from_timezone: 'America/New_York',\n  to_timezone: 'Europe/London',\n}", "metadata": {"logprobs": null, "prompt_tokens": 204, "output_tokens": 36, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0cb4b320-fbc1-44a5-8961-e107dc53b457", "event_id": "0cb4b320-fbc1-44a5-8961-e107dc53b457", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31878, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_380", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5225c6df-cb35-43ad-b170-0877d991289c", "event_id": "5225c6df-cb35-43ad-b170-0877d991289c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 31879, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_379", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "401e54c4-7db1-4826-ac11-714dfc3026ce", "event_id": "547936e6-926c-43ab-90b9-511e57d8c2d5", "parent_event_id": "401e54c4-7db1-4826-ac11-714dfc3026ce", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1162, "start_time": "2024-06-19T03:24:22.987Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_382", "variant_name": null}, {"function_name": "Fn_simple_382", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_382\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Paris\",\"check_in_date\":\"2023-04-04\",\"check_out_date\":\"2023-04-08\",\"no_of_adults\":2,\"meta\":\"Value\",\"hotel_chain\":\"Hilton\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_382_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Check if any Hilton Hotel is available for two adults in Paris from 2023 April 4th to April 8th?\n\nHere is the function to invoke:\n\n\n{\n  // Check hotel availability for a specific location and time frame.\n  function_name: 'hilton_hotel.check_availability' or null,\n  // The city where you want to check hotel availability.\n  location: string,\n  // The check-in date in the format YYYY-MM-DD.\n  check_in_date: string,\n  // The check-out date in the format YYYY-MM-DD.\n  check_out_date: string,\n  // The number of adults for the hotel booking.\n  no_of_adults: int,\n  // The hotel chain where you want to book the hotel. (default: Hilton)\n  hotel_chain: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"hilton_hotel.check_availability\",\n  \"location\": \"Paris\",\n  \"check_in_date\": \"2023-04-04\",\n  \"check_out_date\": \"2023-04-08\",\n  \"no_of_adults\": 2,\n  \"hotel_chain\": \"Hilton\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 269, "output_tokens": 71, "total_tokens": 340, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "401e54c4-7db1-4826-ac11-714dfc3026ce", "event_id": "401e54c4-7db1-4826-ac11-714dfc3026ce", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32315, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_382", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4238697c-95cd-4af4-9e87-7f52269f0ad8", "event_id": "82519be0-f78c-410a-b1f1-0b2ccb0ffd2f", "parent_event_id": "4238697c-95cd-4af4-9e87-7f52269f0ad8", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 931, "start_time": "2024-06-19T03:24:23.431Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_385", "variant_name": null}, {"function_name": "Fn_simple_385", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_385\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"city\":\"Paris, France\",\"from_date\":\"07-10-2022\",\"to_date\":\"07-20-2022\",\"adults\":2,\"children\":1,\"meta\":\"Value\",\"room_type\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_385_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Book a hotel room for two adults and one child in Paris, France from July 10, 2022 to July 20, 2022.\n\nHere is the function to invoke:\n\n\n{\n  // Book a hotel room given the city, date, and the number of adults and children.\n  function_name: 'hotel_booking.book' or null,\n  // The city where the hotel is located.\n  city: string,\n  // The start date of the booking. The format is MM-DD-YYYY.\n  from_date: string,\n  // The end date of the booking. The format is MM-DD-YYYY.\n  to_date: string,\n  // The number of adults for the booking.\n  adults: int,\n  // The number of children for the booking.\n  children: int,\n  // The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'. (default: Standard)\n  room_type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'hotel_booking.book',\n  city: 'Paris, France',\n  from_date: '07-10-2022',\n  to_date: '07-20-2022',\n  adults: 2,\n  children: 1\n}", "metadata": {"logprobs": null, "prompt_tokens": 303, "output_tokens": 55, "total_tokens": 358, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4238697c-95cd-4af4-9e87-7f52269f0ad8", "event_id": "4238697c-95cd-4af4-9e87-7f52269f0ad8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32528, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_385", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5573798b-f312-4cde-ad83-0c246dc90dfd", "event_id": "cba487e4-796b-41d6-bb33-a4918cce68eb", "parent_event_id": "5573798b-f312-4cde-ad83-0c246dc90dfd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1446, "start_time": "2024-06-19T03:24:22.952Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_381", "variant_name": null}, {"function_name": "Fn_simple_381", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_381\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Manhattan, New York\",\"room_type\":\"single\",\"duration\":3,\"start_date\":\"March 10th, 2023\",\"preferences\":[\"Value0\"],\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_381_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.\n\nHere is the function to invoke:\n\n\n{\n  // Books a hotel room given the location, room type, stay duration and any additional preferences.\n  function_name: 'hotel_booking' or null,\n  // The city where you want to book the hotel.\n  location: string,\n  // Type of the room required. Options: 'single', 'double', 'deluxe', etc.\n  room_type: string,\n  // The number of nights you want to book the hotel for.\n  duration: int,\n  // The date when your stay begins.\n  start_date: string,\n  // Optional preferences of stay at the hotel. Default to use all if not specified.\n  preferences: [\n    'pet_friendly' or 'gym' or 'swimming_pool' or 'free_breakfast' or 'parking'\n  ],\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "Function call:\n\n```json\n{\n  \"function_name\": \"hotel_booking\",\n  \"location\": \"Manhattan, New York\",\n  \"room_type\": \"single\",\n  \"duration\": 3,\n  \"start_date\": \"March 10th, 2023\",\n  \"preferences\": [\"pet_friendly\"]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 302, "output_tokens": 68, "total_tokens": 370, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5573798b-f312-4cde-ad83-0c246dc90dfd", "event_id": "5573798b-f312-4cde-ad83-0c246dc90dfd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32565, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_381", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d76cd121-67ef-4138-be51-e8b5814e1fcd", "event_id": "3791e333-c75d-4722-8f52-a76078c83d08", "parent_event_id": "d76cd121-67ef-4138-be51-e8b5814e1fcd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 969, "start_time": "2024-06-19T03:24:23.432Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_387", "variant_name": null}, {"function_name": "Fn_simple_387", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_387\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"hotel_name\":\"Hotel Paradise\",\"location\":\"Las Vegas\",\"room_type\":\"luxury\",\"start_date\":\"05-12-2022\",\"stay_duration\":3,\"meta\":\"Value\",\"view\":\"city\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_387_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.\n\nHere is the function to invoke:\n\n\n{\n  // Book a room in a specific hotel with particular preferences\n  function_name: 'book_hotel' or null,\n  // The name of the hotel.\n  hotel_name: string,\n  // The location of the hotel.\n  location: string,\n  // The type of room preferred.\n  room_type: string,\n  // The starting date of the stay in format MM-DD-YYYY.\n  start_date: string,\n  // The duration of the stay in days.\n  stay_duration: int,\n  // The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference. (default: No preference)\n  view: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'book_hotel',\n  hotel_name: 'Hotel Paradise',\n  location: 'Las Vegas',\n  room_type: 'luxury',\n  start_date: '05-12-2022',\n  stay_duration: 3,\n  view: 'city'\n}", "metadata": {"logprobs": null, "prompt_tokens": 280, "output_tokens": 59, "total_tokens": 339, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d76cd121-67ef-4138-be51-e8b5814e1fcd", "event_id": "d76cd121-67ef-4138-be51-e8b5814e1fcd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32567, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_387", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "70ee20d0-1265-44e3-9e11-496a548c4cdd", "event_id": "d3a92019-51f0-405c-8a5d-ad992243c40e", "parent_event_id": "70ee20d0-1265-44e3-9e11-496a548c4cdd", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1284, "start_time": "2024-06-19T03:24:23.128Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_383", "variant_name": null}, {"function_name": "Fn_simple_383", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_383\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"hotel_name\":\"Hilton Hotel\",\"location\":\"Chicago\",\"room_type\":\"single\",\"start_date\":\"2022-12-10\",\"nights\":2,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_383_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.\n\nHere is the function to invoke:\n\n\n{\n  // Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.\n  function_name: 'book_hotel' or null,\n  // The name of the hotel.\n  hotel_name: string,\n  // The city in which the hotel is located.\n  location: string,\n  // The type of room to be booked.\n  room_type: string,\n  // The start date for the booking.\n  start_date: string,\n  // The number of nights for which the booking is to be made.\n  nights: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"book_hotel\",\n  \"hotel_name\": \"Hilton Hotel\",\n  \"location\": \"Chicago\",\n  \"room_type\": \"single\",\n  \"start_date\": \"2022-12-10\",\n  \"nights\": 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 253, "output_tokens": 58, "total_tokens": 311, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "70ee20d0-1265-44e3-9e11-496a548c4cdd", "event_id": "70ee20d0-1265-44e3-9e11-496a548c4cdd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32577, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_383", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a382f600-02f2-419e-9a8b-3606c44b3982", "event_id": "228a5a6a-712b-4307-8d37-fd7cdb6cb56a", "parent_event_id": "a382f600-02f2-419e-9a8b-3606c44b3982", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 752, "start_time": "2024-06-19T03:24:23.714Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_390", "variant_name": null}, {"function_name": "Fn_simple_390", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_390\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base_currency\":\"USD\",\"target_currency\":\"GBP\",\"amount\":200.0,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_390_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the current cost in British Pounds if I need to convert 200 US dollars.\n\nHere is the function to invoke:\n\n\n{\n  // Calculates the cost in target currency given the amount in base currency and exchange rate\n  function_name: 'currency_converter' or null,\n  // The currency to convert from.\n  base_currency: string,\n  // The currency to convert to.\n  target_currency: string,\n  // The amount in base currency\n  amount: float,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"currency_converter\",\n  \"base_currency\": \"USD\",\n  \"target_currency\": \"GBP\",\n  \"amount\": 200\n}", "metadata": {"logprobs": null, "prompt_tokens": 199, "output_tokens": 34, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a382f600-02f2-419e-9a8b-3606c44b3982", "event_id": "a382f600-02f2-419e-9a8b-3606c44b3982", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32633, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_390", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b4725963-bb0d-4d36-a0d9-1bed3d4eab72", "event_id": "73833b2a-9229-459d-a00a-d1ae6903bff0", "parent_event_id": "b4725963-bb0d-4d36-a0d9-1bed3d4eab72", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1046, "start_time": "2024-06-19T03:24:23.431Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_384", "variant_name": null}, {"function_name": "Fn_simple_384", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_384\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"hotel_name\":\"The Plaza hotel\",\"room_type\":\"single\",\"num_nights\":2,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_384_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: I would like to book a single room for two nights at The Plaza hotel.\n\nHere is the function to invoke:\n\n\n{\n  // Book a room in a specified hotel.\n  function_name: 'book_room' or null,\n  // The name of the hotel.\n  hotel_name: string,\n  // The type of room to be booked.\n  room_type: string,\n  // The number of nights to book the room for.\n  num_nights: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"book_room\",\n  \"hotel_name\": \"The Plaza hotel\",\n  \"room_type\": \"single\",\n  \"num_nights\": 2\n}", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 38, "total_tokens": 235, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b4725963-bb0d-4d36-a0d9-1bed3d4eab72", "event_id": "b4725963-bb0d-4d36-a0d9-1bed3d4eab72", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32643, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_384", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "29d18fe3-de14-4573-9273-bd7282728df5", "event_id": "3e2e41eb-e14e-41be-9743-f66298362c51", "parent_event_id": "29d18fe3-de14-4573-9273-bd7282728df5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1061, "start_time": "2024-06-19T03:24:23.431Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_386", "variant_name": null}, {"function_name": "Fn_simple_386", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_386\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Los Angeles, CA\",\"room_type\":\"king size\",\"check_in_date\":\"15-10-2023\",\"no_of_nights\":2,\"meta\":\"Value\",\"no_of_rooms\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_386_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Book a hotel room with king size bed in Los Angeles for 2 nights starting from 15th October,2023.\n\nHere is the function to invoke:\n\n\n{\n  // Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates.\n  function_name: 'hotel_bookings.book_room' or null,\n  // The city and state where you want to book the hotel, e.g. Los Angeles, CA\n  location: string,\n  // Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc.\n  room_type: string,\n  // Check-in date for the hotel. Format - DD-MM-YYYY.\n  check_in_date: string,\n  // Number of nights for the stay.\n  no_of_nights: int,\n  // Number of rooms to book. Default is 1. (default: 1)\n  no_of_rooms: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"hotel_bookings.book_room\",\n  \"location\": \"Los Angeles, CA\",\n  \"room_type\": \"king size\",\n  \"check_in_date\": \"15-10-2023\",\n  \"no_of_nights\": 2\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 299, "output_tokens": 61, "total_tokens": 360, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "29d18fe3-de14-4573-9273-bd7282728df5", "event_id": "29d18fe3-de14-4573-9273-bd7282728df5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32659, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_386", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3b631a2d-9dff-4315-bad0-871448a8f92b", "event_id": "a43a0934-7246-4986-bfc9-12806c9532e0", "parent_event_id": "3b631a2d-9dff-4315-bad0-871448a8f92b", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 1070, "start_time": "2024-06-19T03:24:23.484Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_388", "variant_name": null}, {"function_name": "Fn_simple_388", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_388\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"hotel_name\":\"Plaza Hotel\",\"location\":\"New York, NY\",\"start_date\":\"2022-06-01\",\"end_date\":\"2022-06-04\",\"meta\":\"Value\",\"rooms\":1}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_388_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022\n\nHere is the function to invoke:\n\n\n{\n  // Books a hotel room for a specific date range.\n  function_name: 'hotel_booking' or null,\n  // The name of the hotel.\n  hotel_name: string,\n  // The city and state, e.g. New York, NY.\n  location: string,\n  // The start date of the reservation. Use format 'YYYY-MM-DD'.\n  start_date: string,\n  // The end date of the reservation. Use format 'YYYY-MM-DD'.\n  end_date: string,\n  // The number of rooms to reserve. (default: 1)\n  rooms: int or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"hotel_booking\",\n  \"hotel_name\": \"Plaza Hotel\",\n  \"location\": \"New York, NY\",\n  \"start_date\": \"2022-06-01\",\n  \"end_date\": \"2022-06-04\",\n  \"rooms\": 1\n}", "metadata": {"logprobs": null, "prompt_tokens": 259, "output_tokens": 64, "total_tokens": 323, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3b631a2d-9dff-4315-bad0-871448a8f92b", "event_id": "3b631a2d-9dff-4315-bad0-871448a8f92b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32720, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_388", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "49279900-c3c9-44fc-b835-67449a5d846a", "event_id": "ac270c2f-c0f7-4a26-9352-83929cab5b73", "parent_event_id": "49279900-c3c9-44fc-b835-67449a5d846a", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 903, "start_time": "2024-06-19T03:24:23.714Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_389", "variant_name": null}, {"function_name": "Fn_simple_389", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_389\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base_currency\":\"USD\",\"target_currency\":\"CAD\",\"amount\":500,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_389_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How many Canadian dollars can I get for 500 US dollars?\n\nHere is the function to invoke:\n\n\n{\n  // Convert an amount from a base currency to a target currency based on the current exchange rate.\n  function_name: 'currency_exchange.convert' or null,\n  // The currency to convert from.\n  base_currency: string,\n  // The currency to convert to.\n  target_currency: string,\n  // The amount in base currency to convert\n  amount: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"currency_exchange.convert\",\n  \"base_currency\": \"USD\",\n  \"target_currency\": \"CAD\",\n  \"amount\": 500\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 199, "output_tokens": 39, "total_tokens": 238, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "49279900-c3c9-44fc-b835-67449a5d846a", "event_id": "49279900-c3c9-44fc-b835-67449a5d846a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 32782, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_389", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "72928f4b-02e9-4194-847a-cdf46ba57474", "event_id": "e38961cf-e953-48d0-b1e3-846a33205a2a", "parent_event_id": "72928f4b-02e9-4194-847a-cdf46ba57474", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 817, "start_time": "2024-06-19T03:24:24.150Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_391", "variant_name": null}, {"function_name": "Fn_simple_391", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_391\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"amount\":150,\"from_currency\":\"EUR\",\"to_currency\":\"CAD\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_391_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Convert 150 Euros to Canadian dollars.\n\nHere is the function to invoke:\n\n\n{\n  // Convert a value from one currency to another.\n  function_name: 'currency_conversion.convert' or null,\n  // The amount to be converted.\n  amount: int,\n  // The currency to convert from.\n  from_currency: string,\n  // The currency to convert to.\n  to_currency: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'currency_conversion.convert',\n  amount: 150,\n  from_currency: 'EUR',\n  to_currency: 'CAD',\n}", "metadata": {"logprobs": null, "prompt_tokens": 183, "output_tokens": 31, "total_tokens": 214, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "72928f4b-02e9-4194-847a-cdf46ba57474", "event_id": "72928f4b-02e9-4194-847a-cdf46ba57474", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33134, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_391", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "74a4cc45-070b-460d-b84e-7ed850ede06e", "event_id": "cf06b5a0-61dd-4c07-a541-a5d555ebbf79", "parent_event_id": "74a4cc45-070b-460d-b84e-7ed850ede06e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 713, "start_time": "2024-06-19T03:24:24.364Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_392", "variant_name": null}, {"function_name": "Fn_simple_392", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_392\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base_currency\":\"GBP\",\"target_currency\":\"JPY\",\"fee\":0.02,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_392_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the exchange rate between two currencies including transaction fee.\n  function_name: 'get_exchange_rate_with_fee' or null,\n  // The base currency.\n  base_currency: string,\n  // The target currency.\n  target_currency: string,\n  // The transaction fee in percentage. Default is 0%.\n  fee: float,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_exchange_rate_with_fee\",\n  \"base_currency\": \"GBP\",\n  \"target_currency\": \"JPY\",\n  \"fee\": 0.02\n}", "metadata": {"logprobs": null, "prompt_tokens": 200, "output_tokens": 40, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "74a4cc45-070b-460d-b84e-7ed850ede06e", "event_id": "74a4cc45-070b-460d-b84e-7ed850ede06e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33243, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_392", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "90fe6edb-296a-401c-9db3-7e2a66434935", "event_id": "3ed65d5e-8fe6-43ef-8e26-a6b1223a47c4", "parent_event_id": "90fe6edb-296a-401c-9db3-7e2a66434935", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 724, "start_time": "2024-06-19T03:24:24.400Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_393", "variant_name": null}, {"function_name": "Fn_simple_393", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_393\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"source_currency\":\"GBP\",\"target_currency\":\"JPY\",\"meta\":\"Value\",\"amount\":null}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_393_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me the latest exchange rate from British Pounds to Japanese Yen.\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the latest exchange rate between two specified currencies.\n  function_name: 'latest_exchange_rate' or null,\n  // The currency you are converting from.\n  source_currency: string,\n  // The currency you are converting to.\n  target_currency: string,\n  // The amount to be converted. If omitted, default to exchange rate of 1 unit source currency\n  amount: float or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'latest_exchange_rate',\n  source_currency: 'GBP',\n  target_currency: 'JPY'\n}", "metadata": {"logprobs": null, "prompt_tokens": 209, "output_tokens": 26, "total_tokens": 235, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "90fe6edb-296a-401c-9db3-7e2a66434935", "event_id": "90fe6edb-296a-401c-9db3-7e2a66434935", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33290, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_393", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "efb336f5-ff12-4826-8978-f2ed10a6fe82", "event_id": "2b16e498-33f3-4976-b469-1fa09d0de476", "parent_event_id": "efb336f5-ff12-4826-8978-f2ed10a6fe82", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 728, "start_time": "2024-06-19T03:24:24.413Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_395", "variant_name": null}, {"function_name": "Fn_simple_395", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_395\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"start_location\":\"Eiffel Tower\",\"end_location\":\"Louvre Museum\",\"meta\":\"Value\",\"traffic\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_395_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve the travel distance and estimated travel time from one location to another via car\n  function_name: 'maps.get_distance_duration' or null,\n  // Starting point of the journey\n  start_location: string,\n  // Ending point of the journey\n  end_location: string,\n  // If true, considers current traffic. Default is false.\n  traffic: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'maps.get_distance_duration',\n  start_location: 'Eiffel Tower',\n  end_location: 'Louvre Museum',\n  traffic: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 209, "output_tokens": 36, "total_tokens": 245, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "efb336f5-ff12-4826-8978-f2ed10a6fe82", "event_id": "efb336f5-ff12-4826-8978-f2ed10a6fe82", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33306, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_395", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5f44ebe3-a50a-4fd9-93b4-b40a38fa09a9", "event_id": "02194132-ea90-41bc-817e-788c34c33994", "parent_event_id": "5f44ebe3-a50a-4fd9-93b4-b40a38fa09a9", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 765, "start_time": "2024-06-19T03:24:24.403Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_394", "variant_name": null}, {"function_name": "Fn_simple_394", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_394\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"base_currency\":\"JPY\",\"target_currency\":\"USD\",\"amount\":20000,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_394_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How much will 20000 Japanese Yen be in United States Dollar?\n\nHere is the function to invoke:\n\n\n{\n  // Converts an amount from a particular currency to another currency.\n  function_name: 'convert_currency' or null,\n  // The base currency in which the original amount is present.\n  base_currency: string,\n  // The currency to which you want to convert.\n  target_currency: string,\n  // The amount you want to convert.\n  amount: int,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'convert_currency',\n  base_currency: 'JPY',\n  target_currency: 'USD',\n  amount: 20000,\n}", "metadata": {"logprobs": null, "prompt_tokens": 200, "output_tokens": 32, "total_tokens": 232, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5f44ebe3-a50a-4fd9-93b4-b40a38fa09a9", "event_id": "5f44ebe3-a50a-4fd9-93b4-b40a38fa09a9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33334, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_394", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c3aa586e-f1d3-480a-b524-cc1dfb8ac5f5", "event_id": "8184508f-dfb0-4149-b4ac-7293853d2f9c", "parent_event_id": "c3aa586e-f1d3-480a-b524-cc1dfb8ac5f5", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 717, "start_time": "2024-06-19T03:24:24.495Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_398", "variant_name": null}, {"function_name": "Fn_simple_398", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_398\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"origin\":\"New York\",\"destination\":\"Boston\",\"meta\":\"Value\",\"consider_terrain\":true}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_398_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the distance between New York and Boston, accounting for terrain.\n\nHere is the function to invoke:\n\n\n{\n  // Calculate the distance between two locations, considering terrain.\n  function_name: 'distance_calculator.calculate' or null,\n  // Starting location of the distance measurement.\n  origin: string,\n  // Destination location of the distance measurement.\n  destination: string,\n  // Whether to account for terrain in distance calculation, defaults to false.\n  consider_terrain: bool or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'distance_calculator.calculate',\n  origin: 'New York',\n  destination: 'Boston',\n  consider_terrain: true\n}", "metadata": {"logprobs": null, "prompt_tokens": 201, "output_tokens": 32, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c3aa586e-f1d3-480a-b524-cc1dfb8ac5f5", "event_id": "c3aa586e-f1d3-480a-b524-cc1dfb8ac5f5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33378, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_398", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b8acaa71-515a-4e25-99b9-298502ad184f", "event_id": "22ea4e03-a3f0-4e79-a06d-0bf3d4793f80", "parent_event_id": "b8acaa71-515a-4e25-99b9-298502ad184f", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 781, "start_time": "2024-06-19T03:24:24.478Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_397", "variant_name": null}, {"function_name": "Fn_simple_397", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_397\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Denver, CO\",\"radius\":5,\"meta\":\"Value\",\"department\":\"Value2\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_397_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a hospital within 5 km radius around Denver, Colorado with pediatrics department.\n\nHere is the function to invoke:\n\n\n{\n  // Locate nearby hospitals based on location and radius. Options to include specific departments are available.\n  function_name: 'hospital.locate' or null,\n  // The city and state, e.g. Denver, CO\n  location: string,\n  // The radius within which you want to find the hospital in kms.\n  radius: int,\n  // Specific department within the hospital. Default is 'General Medicine'.\n  department: 'General Medicine' or 'Emergency' or 'Pediatrics' or 'Cardiology' or 'Orthopedics' or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"hospital.locate\",\n  \"location\": \"Denver, CO\",\n  \"radius\": 5,\n  \"department\": \"Pediatrics\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 242, "output_tokens": 36, "total_tokens": 278, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b8acaa71-515a-4e25-99b9-298502ad184f", "event_id": "b8acaa71-515a-4e25-99b9-298502ad184f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33425, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_397", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "115d820b-0273-47fe-86ea-3d47132f2f0c", "event_id": "70a17e0f-2098-481c-b8db-d481f72681fc", "parent_event_id": "115d820b-0273-47fe-86ea-3d47132f2f0c", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 831, "start_time": "2024-06-19T03:24:24.468Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_396", "variant_name": null}, {"function_name": "Fn_simple_396", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_396\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"Central Park, New York\",\"radius\":2,\"meta\":\"Value\",\"type\":\"public\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_396_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the nearest parking lot within 2 miles of Central Park in New York.\n\nHere is the function to invoke:\n\n\n{\n  // Locate the nearest parking lot based on a specific location and radius.\n  function_name: 'parking_lot.find_nearest' or null,\n  // The reference location e.g. Central Park, NY\n  location: string,\n  // The maximum distance from the location in miles. Default is 5 miles\n  radius: int,\n  // The type of parking lot. Default is 'public'.\n  type: string or null,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'parking_lot.find_nearest',\n  location: 'Central Park, New York',\n  radius: 2,\n  type: 'public'\n}", "metadata": {"logprobs": null, "prompt_tokens": 217, "output_tokens": 36, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "682de1be-5bc4-4bb4-afe9-46e1fccf7834", "event_id": "bac3e42c-2438-48a5-892a-cc4e3b06351e", "parent_event_id": "682de1be-5bc4-4bb4-afe9-46e1fccf7834", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 744, "start_time": "2024-06-19T03:24:24.556Z", "tags": {"baml.runtime": "0.40.0", "test_category": "simple", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_399", "variant_name": null}, {"function_name": "Fn_simple_399", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_399\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"museum_name\":\"Metropolitan Museum of Art\",\"day\":\"Saturday\",\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_399_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the opening hours of the Metropolitan Museum of Art on Saturday?\n\nHere is the function to invoke:\n\n\n{\n  // Retrieve opening hours of a specified museum for the specified day.\n  function_name: 'get_museum_hours' or null,\n  // The name of the museum.\n  museum_name: string,\n  // Day of the week. If not specified, returns the current day's hours.\n  day: string,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'get_museum_hours',\n  museum_name: 'Metropolitan Museum of Art',\n  day: 'Saturday'\n}", "metadata": {"logprobs": null, "prompt_tokens": 189, "output_tokens": 29, "total_tokens": 218, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "115d820b-0273-47fe-86ea-3d47132f2f0c", "event_id": "115d820b-0273-47fe-86ea-3d47132f2f0c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33465, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"baml.language": "python", "test_category": "simple", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_396", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "682de1be-5bc4-4bb4-afe9-46e1fccf7834", "event_id": "682de1be-5bc4-4bb4-afe9-46e1fccf7834", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33466, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_simple_399", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3b27d3fe-35a8-48f2-95ed-758bd9ba655e", "event_id": "dca3fdcb-3397-48cf-9020-05968c309418", "parent_event_id": "3b27d3fe-35a8-48f2-95ed-758bd9ba655e", "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 812, "start_time": "2024-06-19T03:24:24.618Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "simple"}, "event_chain": [{"function_name": "baml_Fn_simple_400", "variant_name": null}, {"function_name": "Fn_simple_400", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_simple_400\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "{\"location\":\"New York City, NY\",\"cuisine\":\"Italian\",\"rating\":4,\"accepts_credit_cards\":true,\"meta\":\"Value\"}", "override": null, "type": {"name": "single", "fields": {"value": "class Fn_simple_400_Output0"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards.\n\nHere is the function to invoke:\n\n\n{\n  // Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.\n  function_name: 'restaurant_search' or null,\n  // The city and state, e.g. New York City, NY\n  location: string,\n  // Preferred type of cuisine e.g., Italian, Indian, American, etc.\n  cuisine: string,\n  // Minimum average customer rating out of 5\n  rating: int,\n  // If the restaurant should accept credit cards.\n  accepts_credit_cards: bool,\n}\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"restaurant_search\",\n  \"location\": \"New York City, NY\",\n  \"cuisine\": \"Italian\",\n  \"rating\": 4,\n  \"accepts_credit_cards\": true\n}", "metadata": {"logprobs": null, "prompt_tokens": 244, "output_tokens": 46, "total_tokens": 290, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3b27d3fe-35a8-48f2-95ed-758bd9ba655e", "event_id": "3b27d3fe-35a8-48f2-95ed-758bd9ba655e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "18e8cb17-71ea-4fcc-a49e-9bfa2690a2d6", "stage": "development", "latency_ms": 33596, "start_time": "2024-06-19T03:23:51.835Z", "tags": {"test_category": "simple", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_simple_400", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
