{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ec0a788b-1007-485c-9fc9-6248baf1faae", "event_id": "40c1c44e-a0e4-4b00-bc44-d471bf9c0dc6", "parent_event_id": "ec0a788b-1007-485c-9fc9-6248baf1faae", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 842, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_4", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_4", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_4\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"perimeter\":14,\"area\":15,\"property\":\"length\",\"meta\":\"Value\",\"tolerance\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_4_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What are the length and the width of a rectangle which has a perimeter of 14 and area of 15.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the definite integral of a function over an interval [a, b].\n    function_name: 'integral' or null,\n    // The function to integrate.\n    function: string,\n    // The lower bound of the interval.\n    a: float,\n    // The upper bound of the interval.\n    b: float,\n  } or {\n    // Get specific property of the rectangle (like length, width) based on perimeter and area.\n    function_name: 'get_rectangle_property' or null,\n    // Perimeter of the rectangle.\n    perimeter: int,\n    // Area of the rectangle.\n    area: int,\n    // Specific property required. It can be length, width or diagonal.\n    property: string,\n    // Allowed error for calculations. (optional) Default 0.1\n    tolerance: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"get_rectangle_property\",\n  \"perimeter\": 14,\n  \"area\": 15,\n  \"property\": \"length\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 309, "output_tokens": 34, "total_tokens": 343, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ec0a788b-1007-485c-9fc9-6248baf1faae", "event_id": "ec0a788b-1007-485c-9fc9-6248baf1faae", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 848, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_4", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: property\\nExpected: any of ['width']\\nActual@1: meta=<Fn_parallel_multiple_function_4_Output1_TypeName.Value: 'Value'> perimeter=14 area=15 property='length' tolerance=None\\nActual all: [Fn_parallel_multiple_function_4_Output1(meta=<Fn_parallel_multiple_function_4_Output1_TypeName.Value: 'Value'>, perimeter=14, area=15, property='length', tolerance=None)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0330e379-f4b0-4246-92c0-d551d3a19b62", "event_id": "ea4bb1d4-e815-4cd0-80d4-d4eeca7ff49d", "parent_event_id": "0330e379-f4b0-4246-92c0-d551d3a19b62", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 969, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_2", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_2", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_2\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"length\":7.0,\"breadth\":3.0,\"meta\":\"Value\"},{\"radius\":5.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_2_Output2 | class Fn_parallel_multiple_function_2_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the area of a rectangle with length 7 and breadth 3. Also, calculate the area of a circle with radius 5.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the volume of a cylinder given the radius and the height.\n    function_name: 'volume_cylinder.calculate' or null,\n    // The radius of the cylinder.\n    radius: float,\n    // The height of the cylinder.\n    height: float,\n  } or {\n    // Calculate the area of a rectangle given the length and breadth.\n    function_name: 'area_rectangle.calculate' or null,\n    // The length of the rectangle.\n    length: float,\n    // The breadth of the rectangle.\n    breadth: float,\n  } or {\n    // Calculate the area of a circle given the radius.\n    function_name: 'area_circle.calculate' or null,\n    // The radius of the circle.\n    radius: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'area_rectangle.calculate',\n    length: 7,\n    breadth: 3\n  },\n  {\n    function_name: 'area_circle.calculate',\n    radius: 5\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 294, "output_tokens": 46, "total_tokens": 340, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0330e379-f4b0-4246-92c0-d551d3a19b62", "event_id": "0330e379-f4b0-4246-92c0-d551d3a19b62", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 970, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_2", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cbe44837-41c8-4ac3-a1b8-885e51c641ce", "event_id": "5fbb9ee3-c8a2-4e46-94f3-68e47d5ac05a", "parent_event_id": "cbe44837-41c8-4ac3-a1b8-885e51c641ce", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1073, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_6", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_6", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_6\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"num1\":96,\"num2\":128,\"meta\":\"Value\"},{\"num1\":15,\"num2\":25,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_6_Output1 | class Fn_parallel_multiple_function_6_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the Greatest Common Divisor (GCD) of 96 and 128, and the least common multiple (LCM) of 15 and 25.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find all prime factors of an integer.\n    function_name: 'primeFactors' or null,\n    // The integer.\n    num: int,\n    // If true, includes the multiplicity of each factor. (default: false)\n    withMultiplicity: bool or null,\n  } or {\n    // Calculate the least common multiple of two integers.\n    function_name: 'lcm' or null,\n    // The first integer.\n    num1: int,\n    // The second integer.\n    num2: int,\n  } or {\n    // Calculate the greatest common divisor of two integers.\n    function_name: 'gcd' or null,\n    // The first integer.\n    num1: int,\n    // The second integer.\n    num2: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"gcd\",\n    \"num1\": 96,\n    \"num2\": 128\n  },\n  {\n    \"function_name\": \"lcm\",\n    \"num1\": 15,\n    \"num2\": 25\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 304, "output_tokens": 59, "total_tokens": 363, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cbe44837-41c8-4ac3-a1b8-885e51c641ce", "event_id": "cbe44837-41c8-4ac3-a1b8-885e51c641ce", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1074, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_6", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: num1\\nExpected: any of [15]\\nActual@1: meta=<Fn_parallel_multiple_function_6_Output1_TypeName.Value: 'Value'> num1=96 num2=128\\nActual all: [Fn_parallel_multiple_function_6_Output1(meta=<Fn_parallel_multiple_function_6_Output1_TypeName.Value: 'Value'>, num1=96, num2=128), Fn_parallel_multiple_function_6_Output1(meta=<Fn_parallel_multiple_function_6_Output1_TypeName.Value: 'Value'>, num1=15, num2=25)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e1b15a17-b88f-49ce-87f3-2956d90cc5b4", "event_id": "20c5a686-c3ea-49ac-a2cd-d834e601971c", "parent_event_id": "e1b15a17-b88f-49ce-87f3-2956d90cc5b4", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1128, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_3", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_3", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_3\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"radius\":5,\"meta\":\"Value\"},{\"diameter\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_3_Output1 | class Fn_parallel_multiple_function_3_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the area and perimeter of a circle with a radius of 5 and also find the circumference of a circle with diameter of 10.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the circumference of a circle based on the diameter.\n    function_name: 'circle.calculate_circumference' or null,\n    // The diameter of the circle.\n    diameter: int,\n  } or {\n    // Calculate the area of a circle based on the radius.\n    function_name: 'circle.calculate_area' or null,\n    // The radius of the circle.\n    radius: int,\n  } or {\n    // Calculate the perimeter of a rectangle based on the length and breadth.\n    function_name: 'rectangle.calculate_perimeter' or null,\n    // The length of the rectangle.\n    length: int,\n    // The breadth of the rectangle.\n    breadth: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"circle.calculate_area\",\n    \"radius\": 5\n  },\n  {\n    \"function_name\": \"circle.calculate_circumference\",\n    \"diameter\": 10\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 284, "output_tokens": 52, "total_tokens": 336, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e1b15a17-b88f-49ce-87f3-2956d90cc5b4", "event_id": "e1b15a17-b88f-49ce-87f3-2956d90cc5b4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1129, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_3", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cc053fd0-0cda-4e45-9c47-5e2a1d0b7b0f", "event_id": "14a7b70e-f6d9-4fd5-882b-0649ea2be032", "parent_event_id": "cc053fd0-0cda-4e45-9c47-5e2a1d0b7b0f", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1134, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_9", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_9", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_9\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_velocity\":20.0,\"acceleration\":5.0,\"time\":6.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_9_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the final velocity of a moving object given initial velocity of 20 m/s, acceleration of 5 m/s^2 and time of 6 seconds. Also, compute the total distance covered by the object.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Computes the total distance covered by a moving object given initial velocity, acceleration and time.\n    function_name: 'kinematics.distance_traveled' or null,\n    // The initial velocity of the object in m/s.\n    initial_velocity: float,\n    // The acceleration of the object in m/s^2.\n    acceleration: float,\n    // The time for which the object has been moving in seconds.\n    time: float,\n  } or {\n    // Calculates the final velocity of a moving object given initial velocity, acceleration and time.\n    function_name: 'kinematics.final_velocity' or null,\n    // The initial velocity of the object in m/s.\n    initial_velocity: float,\n    // The acceleration of the object in m/s^2.\n    acceleration: float,\n    // The time for which the object has been moving in seconds.\n    time: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'kinematics.final_velocity',\n  initial_velocity: 20,\n  acceleration: 5,\n  time: 6\n}\n\nTools call: kinematics.final_velocity(20, 5, 6)", "metadata": {"logprobs": null, "prompt_tokens": 336, "output_tokens": 47, "total_tokens": 383, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cc053fd0-0cda-4e45-9c47-5e2a1d0b7b0f", "event_id": "cc053fd0-0cda-4e45-9c47-5e2a1d0b7b0f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1134, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_9", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8da4af1e-afde-4538-b897-935325742d1e", "event_id": "41d5ceaa-51ab-4ae5-b4d9-eef77a9e9bb1", "parent_event_id": "8da4af1e-afde-4538-b897-935325742d1e", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1366, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_7", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_7", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_7\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start\":50,\"end\":150,\"meta\":\"Value\"},{\"count\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_7_Output1 | class Fn_parallel_multiple_function_7_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find all prime numbers between 50 and 150. Then get the fibonacci series upto 150.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Count the number of items in a collection.\n    function_name: 'count_items' or null,\n    // The collection of items to count\n    collection: string[],\n  } or {\n    // Locate all prime numbers in a specific number range.\n    function_name: 'find_prime_numbers' or null,\n    // The start of the number range\n    start: int,\n    // The end of the number range\n    end: int,\n  } or {\n    // Generate a Fibonacci sequence up to a specific number of items.\n    function_name: 'get_fibonacci_sequence' or null,\n    // The number of items to generate\n    count: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"find_prime_numbers\",\n    \"start\": 50,\n    \"end\": 150\n  },\n  {\n    \"function_name\": \"get_fibonacci_sequence\",\n    \"count\": 10\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 273, "output_tokens": 57, "total_tokens": 330, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0e626a8f-3ff2-49c2-9901-11c7c34648b0", "event_id": "07791c65-ff59-41b9-8eab-4ec8deab7b88", "parent_event_id": "0e626a8f-3ff2-49c2-9901-11c7c34648b0", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1367, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_1", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_1", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_1\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"lower_limit\":1,\"upper_limit\":1000,\"multiples\":[3,5],\"meta\":\"Value\"},{\"count\":5,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_1_Output0 | class Fn_parallel_multiple_function_1_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the sum of all the multiples of 3 and 5 between 1 and 1000. Also find the product of the first five prime numbers.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find the sum of all multiples of specified numbers within a specified range.\n    function_name: 'math_toolkit.sum_of_multiples' or null,\n    // The start of the range (inclusive).\n    lower_limit: int,\n    // The end of the range (inclusive).\n    upper_limit: int,\n    // The numbers to find multiples of.\n    multiples: int[],\n  } or {\n    // Find the product of the first n prime numbers.\n    function_name: 'math_toolkit.product_of_primes' or null,\n    // The number of prime numbers to multiply together.\n    count: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"math_toolkit.sum_of_multiples\",\n    \"lower_limit\": 1,\n    \"upper_limit\": 1000,\n    \"multiples\": [3, 5]\n  },\n  {\n    \"function_name\": \"math_toolkit.product_of_primes\",\n    \"count\": 5\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 273, "output_tokens": 73, "total_tokens": 346, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8da4af1e-afde-4538-b897-935325742d1e", "event_id": "8da4af1e-afde-4538-b897-935325742d1e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1367, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_7", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: count\\nExpected: any of [150]\\nActual@1: meta=<Fn_parallel_multiple_function_7_Output2_TypeName.Value: 'Value'> count=10\\nActual all: [Fn_parallel_multiple_function_7_Output1(meta=<Fn_parallel_multiple_function_7_Output1_TypeName.Value: 'Value'>, start=50, end=150), Fn_parallel_multiple_function_7_Output2(meta=<Fn_parallel_multiple_function_7_Output2_TypeName.Value: 'Value'>, count=10)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0e626a8f-3ff2-49c2-9901-11c7c34648b0", "event_id": "0e626a8f-3ff2-49c2-9901-11c7c34648b0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1369, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_1", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e34919da-abc3-4a5a-a32e-a7ccf7861b71", "event_id": "a27917a5-ce49-4900-a71a-eab51e12f89b", "parent_event_id": "e34919da-abc3-4a5a-a32e-a7ccf7861b71", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1476, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_11", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_11", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_11\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"show\":\"Mamma Mia\",\"date\":\"next Friday\",\"meta\":\"Value\"},{\"origin\":\"New York\",\"destination\":\"Chicago\",\"date\":\"next Friday\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_11_Output1 | class Fn_parallel_multiple_function_11_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Buy me a ticket to the Mamma Mia musical for next Friday, also get me a train ticket from New York to Chicago for the same day.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Buy a train ticket for a specific date and route.\n    function_name: 'train_ticket.buy' or null,\n    // The departure full name of the city.\n    origin: string,\n    // The destination city.\n    destination: string,\n    // The date when the journey should be.\n    date: string,\n  } or {\n    // Buy a ticket for a musical\n    function_name: 'musical_ticket.buy' or null,\n    // Name of the show.\n    show: string,\n    // Date when the ticket should be bought for.\n    date: string,\n  } or {\n    // Buy a concert ticket\n    function_name: 'concert_ticket.buy' or null,\n    // Name of the artist.\n    artist: string,\n    // Date of the concert.\n    date: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"musical_ticket.buy\",\n    \"show\": \"Mamma Mia\",\n    \"date\": \"next Friday\"\n  },\n  {\n    \"function_name\": \"train_ticket.buy\",\n    \"origin\": \"New York\",\n    \"destination\": \"Chicago\",\n    \"date\": \"next Friday\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 312, "output_tokens": 75, "total_tokens": 387, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e34919da-abc3-4a5a-a32e-a7ccf7861b71", "event_id": "e34919da-abc3-4a5a-a32e-a7ccf7861b71", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1477, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_11", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "97cd4ee8-bafe-4378-8085-28e1831afbc3", "event_id": "3a8939f6-7518-4891-8897-78d13275557e", "parent_event_id": "97cd4ee8-bafe-4378-8085-28e1831afbc3", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1558, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_8", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_8", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_8\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"velocity\":50,\"distance\":600,\"meta\":\"Value\"},{\"velocity\":400,\"distance\":1000,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_8_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the time required for a car moving at 50 m/s to travel a distance of 600 m. Also calculate the time required for a bullet moving at 400 m/s to cover a distance of 1000 m.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the force required to move an object of a particular mass at a particular acceleration.\n    function_name: 'physics.calculate_force' or null,\n    // The mass of the object in kg.\n    mass: int,\n    // The acceleration of the object in m/s^2.\n    acceleration: int,\n  } or {\n    // Calculate time required for an object to travel a particular distance at a particular velocity.\n    function_name: 'kinematics.calculate_time' or null,\n    // The velocity of the object in m/s.\n    velocity: int,\n    // The distance covered by the object in meters.\n    distance: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```\n[\n  {\n    function_name: 'kinematics.calculate_time',\n    velocity: 50,\n    distance: 600,\n  },\n  {\n    function_name: 'kinematics.calculate_time',\n    velocity: 400,\n    distance: 1000,\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 292, "output_tokens": 58, "total_tokens": 350, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "97cd4ee8-bafe-4378-8085-28e1831afbc3", "event_id": "97cd4ee8-bafe-4378-8085-28e1831afbc3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1559, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_8", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5e48c4be-9687-4226-a4ee-d35eb58d6b35", "event_id": "f7be9115-9d13-466c-b5d0-0cab60167bd9", "parent_event_id": "5e48c4be-9687-4226-a4ee-d35eb58d6b35", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1718, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_5", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_5", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_5\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"function\":\"x^2\",\"a\":1.0,\"b\":5.0,\"meta\":\"Value\"},{\"function\":\"x^2\",\"x\":3.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_5_Output0 | class Fn_parallel_multiple_function_5_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the area under the curve from x=1 to x=5 for the function f(x)=x^2. And find the derivative at x=3.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the definite integral of a function over an interval [a, b].\n    function_name: 'integral' or null,\n    // The function to integrate.\n    function: string,\n    // The lower bound of the interval.\n    a: float,\n    // The upper bound of the interval.\n    b: float,\n  } or {\n    // Find the derivative of a function at a certain point.\n    function_name: 'derivative' or null,\n    // The function to differentiate.\n    function: string,\n    // The point to calculate the derivative at.\n    x: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"integral\",\n    \"function\": \"x^2\",\n    \"a\": 1,\n    \"b\": 5\n  },\n  {\n    \"function_name\": \"derivative\",\n    \"function\": \"x^2\",\n    \"x\": 3\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 270, "output_tokens": 66, "total_tokens": 336, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5e48c4be-9687-4226-a4ee-d35eb58d6b35", "event_id": "5e48c4be-9687-4226-a4ee-d35eb58d6b35", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1719, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_5", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a72f2c58-dd21-4f3b-b12a-51942b8135dd", "event_id": "8fc45d77-617a-4527-8fd1-a1b6e9ff0348", "parent_event_id": "a72f2c58-dd21-4f3b-b12a-51942b8135dd", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1242, "start_time": "2024-06-20T01:20:39.778Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_12", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_12", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_12\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"charge\":4.0,\"distance\":3.0,\"meta\":\"Value\"},{\"current\":0.5,\"turnsPerMeter\":25.0,\"length\":2.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_12_Output1 | class Fn_parallel_multiple_function_12_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the Electric field at 3m from a point charge with a value of 4C? Also, calculate the magnetic field for an electric current of 0.5A flowing through a solenoid having 25 turns per meter and a length of 2m.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate magnetic field for given current flowing through solenoid.\n    function_name: 'physics.magnetic_field' or null,\n    // Electric current in Amperes.\n    current: float,\n    // Number of turns of solenoid per meter.\n    turnsPerMeter: float,\n    // Length of the solenoid in meters.\n    length: float,\n  } or {\n    // Calculate electric field for a given point charge and distance.\n    function_name: 'physics.electric_field' or null,\n    // Value of point charge in Coulombs.\n    charge: float,\n    // Distance from the point charge in meters.\n    distance: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"physics.electric_field\",\n    \"charge\": 4,\n    \"distance\": 3\n  },\n  {\n    \"function_name\": \"physics.magnetic_field\",\n    \"current\": 0.5,\n    \"turnsPerMeter\": 25,\n    \"length\": 2\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 308, "output_tokens": 72, "total_tokens": 380, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a72f2c58-dd21-4f3b-b12a-51942b8135dd", "event_id": "a72f2c58-dd21-4f3b-b12a-51942b8135dd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2092, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_12", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "934e9304-d6e0-41f1-822a-55e35f5861db", "event_id": "a7c377fa-ff1b-49e2-b1d6-745ca1702063", "parent_event_id": "934e9304-d6e0-41f1-822a-55e35f5861db", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 958, "start_time": "2024-06-20T01:20:40.064Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_17", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_17", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_17\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number\":8,\"meta\":\"Value\"},{\"start\":1,\"end\":50,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_17_Output2 | class Fn_parallel_multiple_function_17_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the factorial of 8 and generate the prime numbers from 1 to 50.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the Fibonacci series up to a specific position.\n    function_name: 'calculate_fibonacci' or null,\n    // The position up to which you want to calculate the Fibonacci series.\n    position: int,\n  } or {\n    // Calculate the factorial of a given number.\n    function_name: 'calculate_factorial' or null,\n    // The number of which you want to calculate the factorial.\n    number: int,\n  } or {\n    // Generate prime numbers within a given range.\n    function_name: 'generate_prime' or null,\n    // The start of the range from which you want to find the prime numbers.\n    start: int,\n    // The end of the range from which you want to find the prime numbers.\n    end: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"calculate_factorial\",\n    \"number\": 8\n  },\n  {\n    \"function_name\": \"generate_prime\",\n    \"start\": 1,\n    \"end\": 50\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 291, "output_tokens": 50, "total_tokens": 341, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "934e9304-d6e0-41f1-822a-55e35f5861db", "event_id": "934e9304-d6e0-41f1-822a-55e35f5861db", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2094, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_17", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "160f46f8-129d-4f41-a07a-89014ada1845", "event_id": "9c99c5ac-4c4f-4f1c-9c7d-a789979d05a1", "parent_event_id": "160f46f8-129d-4f41-a07a-89014ada1845", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1503, "start_time": "2024-06-20T01:20:39.900Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_13", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_13", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_13\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"current\":4.0,\"distance\":2.0,\"meta\":\"Value\",\"permeability\":0.1},{\"electric_field\":5.0,\"distance\":3.0,\"meta\":\"Value\",\"charge\":-1.6e-19}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_13_Output1 | class Fn_parallel_multiple_function_13_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the magnetic field produced by a wire carrying a current of 4 amps with a distance of 2 m from the wire. And find the voltage difference of a region in the direction of the electric field that is 3 m apart, assuming the electric field is 5 N/C.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the voltage difference between two points in an electric field.\n    function_name: 'calculate_voltage_difference' or null,\n    // The electric field in newtons per coulomb.\n    electric_field: float,\n    // The distance between the two points in the direction of the field in meters.\n    distance: float,\n    // The charge of the test particle, typically an electron, in coulombs. Default to 0\n    charge: float or null,\n  } or {\n    // Calculate the magnetic field produced by a current-carrying wire.\n    function_name: 'calculate_magnetic_field' or null,\n    // The current in the wire in amperes.\n    current: float,\n    // The perpendicular distance from the wire in meters.\n    distance: float,\n    // The permeability of free space, a constant value. Default 0.1\n    permeability: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_magnetic_field',\n    current: 4,\n    distance: 2,\n    permeability: 0.1\n  },\n  {\n    function_name: 'calculate_voltage_difference',\n    electric_field: 5,\n    distance: 3,\n    charge: -1.6e-19\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 362, "output_tokens": 74, "total_tokens": 436, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "160f46f8-129d-4f41-a07a-89014ada1845", "event_id": "160f46f8-129d-4f41-a07a-89014ada1845", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2478, "start_time": "2024-06-20T01:20:38.929Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_13", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'KeyError'>: 'permeability'\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "831f2800-18b0-4834-9d44-6367ccc724be", "event_id": "601ddb29-f474-4ad5-bd0e-7efd28a30c8a", "parent_event_id": "831f2800-18b0-4834-9d44-6367ccc724be", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1416, "start_time": "2024-06-20T01:20:40.298Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_19", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_19", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_19\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"amount\":10.0,\"from_currency\":\"USD\",\"to_currency\":\"EUR\",\"meta\":\"Value\"},{\"account_id\":\"987654\",\"amount\":10.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_19_Output1 | class Fn_parallel_multiple_function_19_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: I need to convert 10 dollars to Euros and make a 10 dollar deposit in my local bank account with account number - 987654.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Make a deposit to a given bank account\n    function_name: 'banking_service' or null,\n    // Target account to make deposit to.\n    account_id: string,\n    // Amount to deposit.\n    amount: float,\n  } or {\n    // Convert a specific amount from one currency to another\n    function_name: 'currency_conversion' or null,\n    // Amount to convert.\n    amount: float,\n    // Source currency.\n    from_currency: string,\n    // Target currency.\n    to_currency: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"currency_conversion\",\n    \"amount\": 10,\n    \"from_currency\": \"USD\",\n    \"to_currency\": \"EUR\"\n  },\n  {\n    \"function_name\": \"banking_service\",\n    \"account_id\": \"987654\",\n    \"amount\": 10\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 253, "output_tokens": 72, "total_tokens": 325, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "831f2800-18b0-4834-9d44-6367ccc724be", "event_id": "831f2800-18b0-4834-9d44-6367ccc724be", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2785, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_19", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8d72f0da-c24f-49ec-8f25-adde83ba1653", "event_id": "cabdb003-e3f0-4c8d-a342-b477f5f1d06f", "parent_event_id": "8d72f0da-c24f-49ec-8f25-adde83ba1653", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1731, "start_time": "2024-06-20T01:20:40.004Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_14", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_14", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_14\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"substance\":\"water\",\"mass\":100.0,\"initial_temperature\":25.0,\"final_temperature\":100.0,\"meta\":\"Value\",\"unit\":null},{\"substance\":\"Aluminium\",\"mass\":100.0,\"initial_temperature\":25.0,\"final_temperature\":100.0,\"meta\":\"Value\",\"unit\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_14_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: 'Calculate the energy required to heat 100 grams of water from 25 degrees Celsius to 100 degrees Celsius in joules, and also calculate the energy required to heat the same mass of Aluminium under same conditions in joules\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Convert a temperature from one unit to another.\n    function_name: 'temperature_converter.convert' or null,\n    // The temperature to convert.\n    temperature: float,\n    // The unit to convert from.\n    from_unit: string,\n    // The unit to convert to.\n    to_unit: string,\n    // The number of decimal places to round the result to. Defaults to 2.\n    round_to: int or null,\n  } or {\n    // Calculate the energy needed to heat a substance from an initial to a final temperature.\n    function_name: 'energy_calculator.calculate' or null,\n    // The substance to be heated.\n    substance: string,\n    // The mass of the substance in grams.\n    mass: float,\n    // The initial temperature of the substance in degrees Celsius.\n    initial_temperature: float,\n    // The final temperature of the substance in degrees Celsius.\n    final_temperature: float,\n    // The unit to report the energy in. Options are 'joules' and 'calories'. Defaults to 'joules'.\n    unit: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'energy_calculator.calculate',\n    substance: 'water',\n    mass: 100,\n    initial_temperature: 25,\n    final_temperature: 100\n  },\n  {\n    function_name: 'energy_calculator.calculate',\n    substance: 'Aluminium',\n    mass: 100,\n    initial_temperature: 25,\n    final_temperature: 100\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 385, "output_tokens": 83, "total_tokens": 468, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8d72f0da-c24f-49ec-8f25-adde83ba1653", "event_id": "8d72f0da-c24f-49ec-8f25-adde83ba1653", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2806, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_14", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b2d8f26f-c43d-4b24-8ddb-0056c867eb82", "event_id": "a428ab9a-38f0-4e41-b8b2-b4d295d1eb16", "parent_event_id": "b2d8f26f-c43d-4b24-8ddb-0056c867eb82", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1134, "start_time": "2024-06-20T01:20:40.649Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_22", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_22", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_22\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"file_path\":\"dataset.csv\",\"meta\":\"Value\",\"delimiter\":null},{\"x\":[],\"y\":[],\"meta\":\"Value\",\"return_residuals\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_22_Output1 | class Fn_parallel_multiple_function_22_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Use the data from dataset.csv file and fit a linear regression model to predict future sales by setting x=data['sales'] and y=data['future_sales']. Additionally, calculate and return the residuals.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fit a linear regression model to data.\n    function_name: 'linear_regression_fit' or null,\n    // Array of the predictor variable.\n    x: float[],\n    // Array of the dependent variable.\n    y: float[],\n    // Flag indicating whether to return the residuals (the difference between the observed and predicted values). Optional. (default: false)\n    return_residuals: bool or null,\n  } or {\n    // Load data from a csv file into a data structure.\n    function_name: 'data_loading' or null,\n    // The path to the file to load.\n    file_path: string,\n    // The character used to separate values in the file. Optional. (default: ,)\n    delimiter: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"data_loading\",\n    \"file_path\": \"dataset.csv\"\n  },\n  {\n    \"function_name\": \"linear_regression_fit\",\n    \"x\": [\"sales\"],\n    \"y\": [\"future_sales\"],\n    \"return_residuals\": true\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 307, "output_tokens": 65, "total_tokens": 372, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b2d8f26f-c43d-4b24-8ddb-0056c867eb82", "event_id": "b2d8f26f-c43d-4b24-8ddb-0056c867eb82", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2854, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_22", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: x\\nExpected: any of [\\\"data['sales']\\\"]\\nActual@1: meta=<Fn_parallel_multiple_function_22_Output0_TypeName.Value: 'Value'> x=[] y=[] return_residuals=True\\nActual all: [Fn_parallel_multiple_function_22_Output1(meta=<Fn_parallel_multiple_function_22_Output1_TypeName.Value: 'Value'>, file_path='dataset.csv', delimiter=None), Fn_parallel_multiple_function_22_Output0(meta=<Fn_parallel_multiple_function_22_Output0_TypeName.Value: 'Value'>, x=[], y=[], return_residuals=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "890fb2fa-e608-4859-aefc-89f08b370577", "event_id": "38b34c95-43c5-4d38-9ddb-727f435d3132", "parent_event_id": "890fb2fa-e608-4859-aefc-89f08b370577", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 937, "start_time": "2024-06-20T01:20:41.022Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_23", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_23", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_23\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company\":\"XYZ\",\"years\":3,\"meta\":\"Value\"},{\"company_name\":\"XYZ\",\"years\":3,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_23_Output1 | class Fn_parallel_multiple_function_23_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the sales growth rate for company XYZ for the last 3 years and also the interest coverage ratio for the same duration.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate a company's interest coverage ratio given the company name and duration\n    function_name: 'financial_ratios.interest_coverage' or null,\n    // The name of the company.\n    company_name: string,\n    // Number of past years to calculate the ratio.\n    years: int,\n  } or {\n    // Calculate a company's sales growth rate given the company name and duration\n    function_name: 'sales_growth.calculate' or null,\n    // The company that you want to get the sales growth rate for.\n    company: string,\n    // Number of past years for which to calculate the sales growth rate.\n    years: int,\n  } or {\n    // Retrieve a weather forecast for a specific location and time frame.\n    function_name: 'weather_forecast' or null,\n    // The city that you want to get the weather for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'sales_growth.calculate',\n    company: 'XYZ',\n    years: 3,\n  },\n  {\n    function_name: 'financial_ratios.interest_coverage',\n    company_name: 'XYZ',\n    years: 3,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 336, "output_tokens": 56, "total_tokens": 392, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "890fb2fa-e608-4859-aefc-89f08b370577", "event_id": "890fb2fa-e608-4859-aefc-89f08b370577", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3030, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_23", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "46b60192-d2a4-4fe6-9602-7b94c3ca1087", "event_id": "5fabb986-a2ae-4580-8ea6-e22c0da4aa48", "parent_event_id": "46b60192-d2a4-4fe6-9602-7b94c3ca1087", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1589, "start_time": "2024-06-20T01:20:40.489Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_21", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_21", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_21\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"data\":[3,4,5,2,8,5],\"meta\":\"Value\",\"population\":true},{\"data\":[3,4,5,2,8,5],\"meta\":\"Value\"},{\"data\":[3,4,5,2,8,5],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_21_Output2 | class Fn_parallel_multiple_function_21_Output1 | class Fn_parallel_multiple_function_21_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Determine the median and variance for the following data points 3,4,5,2,8,5. Also determine the mode for these points.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // This function calculates the variance of a given set of numbers.\n    function_name: 'statistics.variance' or null,\n    // The list of data points.\n    data: int[],\n    // Determines whether to use population variance formula. Default to True (default: True)\n    population: bool or null,\n  } or {\n    // This function returns the median of the data set provided.\n    function_name: 'statistics.median' or null,\n    // The list of data points.\n    data: int[],\n  } or {\n    // This function determines the mode of a list of numbers.\n    function_name: 'statistics.mode' or null,\n    // The list of data points.\n    data: int[],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n    {\n        \"function_name\": \"statistics.variance\",\n        \"data\": [3, 4, 5, 2, 8, 5],\n        \"population\": true\n    },\n    {\n        \"function_name\": \"statistics.median\",\n        \"data\": [3, 4, 5, 2, 8, 5]\n    },\n    {\n        \"function_name\": \"statistics.mode\",\n        \"data\": [3, 4, 5, 2, 8, 5]\n    }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 292, "output_tokens": 118, "total_tokens": 410, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "46b60192-d2a4-4fe6-9602-7b94c3ca1087", "event_id": "46b60192-d2a4-4fe6-9602-7b94c3ca1087", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3149, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_21", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "47dc5bf3-cfd8-4439-b865-e5d26431ffaf", "event_id": "e7073dc8-c968-4248-b073-8ff7fe7a5be5", "parent_event_id": "47dc5bf3-cfd8-4439-b865-e5d26431ffaf", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1687, "start_time": "2024-06-20T01:20:40.407Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_20", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_20", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_20\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"function\":\"exp(-x^2)\",\"lower_limit\":-2.0,\"upper_limit\":2.0,\"meta\":\"Value\"},{\"function\":\"sin(x)\",\"lower_limit\":0.0,\"upper_limit\":3.1416,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_20_Output1 | class Fn_parallel_multiple_function_20_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Perform Gaussian integral of the function exp(-x^2) from -2 to 2. Also calculate the definite integral from 0 to 3.1416 of sin(x).\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Perform Gaussian integration over the range of the function.\n    function_name: 'math.gaussian_integral' or null,\n    // The function to integrate, given in terms of x.\n    function: string,\n    // The lower limit of the integral.\n    lower_limit: float,\n    // The upper limit of the integral.\n    upper_limit: float,\n  } or {\n    // Calculate the definite integral of a function within specified bounds.\n    function_name: 'math.definite_integral' or null,\n    // The function to integrate, given in terms of x.\n    function: string,\n    // The lower limit of the integral.\n    lower_limit: float,\n    // The upper limit of the integral.\n    upper_limit: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```\n[\n  {\n    \"function_name\": \"math.gaussian_integral\",\n    \"function\": \"exp(-x^2)\",\n    \"lower_limit\": -2,\n    \"upper_limit\": 2\n  },\n  {\n    \"function_name\": \"math.definite_integral\",\n    \"function\": \"sin(x)\",\n    \"lower_limit\": 0,\n    \"upper_limit\": 3.1416\n  } \n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 303, "output_tokens": 91, "total_tokens": 394, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "47dc5bf3-cfd8-4439-b865-e5d26431ffaf", "event_id": "47dc5bf3-cfd8-4439-b865-e5d26431ffaf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3165, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_20", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: function\\nExpected: any of ['exp(-x^2)']\\nActual@2: meta=<Fn_parallel_multiple_function_20_Output0_TypeName.Value: 'Value'> function='sin(x)' lower_limit=0.0 upper_limit=3.1416\\nActual all: [Fn_parallel_multiple_function_20_Output0(meta=<Fn_parallel_multiple_function_20_Output0_TypeName.Value: 'Value'>, function='exp(-x^2)', lower_limit=-2.0, upper_limit=2.0), Fn_parallel_multiple_function_20_Output0(meta=<Fn_parallel_multiple_function_20_Output0_TypeName.Value: 'Value'>, function='sin(x)', lower_limit=0.0, upper_limit=3.1416)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4fe59546-a01e-4271-8f80-a4b8e0cb6d7a", "event_id": "dcc2e3bb-b650-45b5-9a26-1fc94688f0f6", "parent_event_id": "4fe59546-a01e-4271-8f80-a4b8e0cb6d7a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1117, "start_time": "2024-06-20T01:20:41.024Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_24", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_24", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_24\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"net_income\":20000,\"total_revenue\":100000,\"meta\":\"Value\"},{\"total_liabilities\":10000,\"total_assets\":30000,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_24_Output0 | class Fn_parallel_multiple_function_24_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the net profit margin of Company XYZ given that the net income is $20,000 and total revenue is $100,000. Also calculate the debt ratio of the same company if the total liabilities are $10,000 and total assets are $30,000.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate net profit margin of a company given the net income and total revenue\n    function_name: 'financial_ratio.net_profit_margin' or null,\n    // The net income of the company.\n    net_income: int,\n    // The total revenue of the company.\n    total_revenue: int,\n  } or {\n    // Calculate the debt ratio of a company given the total liabilities and total assets.\n    function_name: 'financial_ratio.debt_ratio' or null,\n    // The total liabilities of the company.\n    total_liabilities: int,\n    // The total assets of the company.\n    total_assets: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"financial_ratio.net_profit_margin\",\n    \"net_income\": 20000,\n    \"total_revenue\": 100000\n  },\n  {\n    \"function_name\": \"financial_ratio.debt_ratio\",\n    \"total_liabilities\": 10000,\n    \"total_assets\": 30000\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 297, "output_tokens": 76, "total_tokens": 373, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4fe59546-a01e-4271-8f80-a4b8e0cb6d7a", "event_id": "4fe59546-a01e-4271-8f80-a4b8e0cb6d7a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3212, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_24", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "004d5dc9-7a2a-4be8-bb6a-7129f4894061", "event_id": "c64e1ccd-e763-4337-bbcf-7f5f2ba631a0", "parent_event_id": "004d5dc9-7a2a-4be8-bb6a-7129f4894061", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2018, "start_time": "2024-06-20T01:20:40.297Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_18", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_18", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_18\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"items\":[],\"quantities\":[],\"meta\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_18_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How many steps do I need to walk in order to lose 500 calories and how much water do I need to intake today if I exercise for 2 hours?\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate how much a person should pay given the items purchased and their quantities\n    function_name: 'payment_calculation' or null,\n    // List of items purchased.\n    items: string[],\n    // Quantity of each item purchased in correspondence with the previous items list.\n    quantities: int[],\n  } or {\n    // Calculate how many steps you need to walk to burn a specified amount of calories.\n    function_name: 'steps_calorie_calculation' or null,\n    // The amount of calories to burn.\n    calorie: float,\n  } or {\n    // Calculate the amount of water to drink in a day given the hours of exercise.\n    function_name: 'hydration_calculator' or null,\n    // The number of hours of exercise.\n    exercise_time: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"payment_calculation\": {\n    \"function_name\": \"payment_calculation\",\n    \"items\": [\"treadmill\", \"dumbbells\"],\n    \"quantities\": [1, 2]\n  },\n  \"steps_calorie_calculation\": {\n    \"function_name\": \"steps_calorie_calculation\",\n    \"calorie\": 500\n  },\n  \"hydration_calculator\": {\n    \"function_name\": \"hydration_calculator\",\n    \"exercise_time\": 2\n  }\n}", "metadata": {"logprobs": null, "prompt_tokens": 308, "output_tokens": 105, "total_tokens": 413, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "004d5dc9-7a2a-4be8-bb6a-7129f4894061", "event_id": "004d5dc9-7a2a-4be8-bb6a-7129f4894061", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3387, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_18", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: LLM returned payment_calculation\\nExpected: any of dict_keys(['steps_calorie_calculation', 'hydration_calculator'])\\nActual@1: meta=None items=[] quantities=[]\\nActual all: [Fn_parallel_multiple_function_18_Output0(meta=None, items=[], quantities=[])]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "431e290b-dc04-4968-841b-c2cb01188c3b", "event_id": "12fe0cde-128c-4b7b-92f6-cb6ba1c7187f", "parent_event_id": "431e290b-dc04-4968-841b-c2cb01188c3b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1081, "start_time": "2024-06-20T01:20:41.408Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_25", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_25", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_25\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company\":\"Google\",\"amount\":2000.0,\"meta\":\"Value\"},{\"company\":\"Apple\",\"amount\":1000.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_25_Output0 | class Fn_parallel_multiple_function_25_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Invest $2000 in Google and withdraw $1000 from Apple.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Withdraw a specific amount from a company's stock.\n    function_name: 'investment.withdraw' or null,\n    // The company you want to withdraw from.\n    company: string,\n    // The amount you want to withdraw.\n    amount: float,\n  } or {\n    // Invest a specific amount in a company's stock.\n    function_name: 'investment.invest' or null,\n    // The company you want to invest in.\n    company: string,\n    // The amount you want to invest.\n    amount: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"investment.invest\",\n    \"company\": \"Google\",\n    \"amount\": 2000\n  },\n  {\n    \"function_name\": \"investment.withdraw\",\n    \"company\": \"Apple\",\n    \"amount\": 1000\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 239, "output_tokens": 60, "total_tokens": 299, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "431e290b-dc04-4968-841b-c2cb01188c3b", "event_id": "431e290b-dc04-4968-841b-c2cb01188c3b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3561, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_25", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: company\\nExpected: any of ['Apple', 'AAPL']\\nActual@1: meta=<Fn_parallel_multiple_function_25_Output0_TypeName.Value: 'Value'> company='Google' amount=2000.0\\nActual all: [Fn_parallel_multiple_function_25_Output0(meta=<Fn_parallel_multiple_function_25_Output0_TypeName.Value: 'Value'>, company='Google', amount=2000.0), Fn_parallel_multiple_function_25_Output0(meta=<Fn_parallel_multiple_function_25_Output0_TypeName.Value: 'Value'>, company='Apple', amount=1000.0)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ea96070d-fbad-40f8-9369-6b70992b701e", "event_id": "27810574-4db3-4a75-872b-23442913f14b", "parent_event_id": "ea96070d-fbad-40f8-9369-6b70992b701e", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2517, "start_time": "2024-06-20T01:20:40.059Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_15", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_15", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_15\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"country\":\"Bangladesh\",\"species\":\"tiger\",\"years\":5,\"meta\":\"Value\"},{\"country\":\"India\",\"species\":\"tiger\",\"years\":5,\"meta\":\"Value\"},{\"country\":\"Nepal\",\"species\":\"tiger\",\"years\":10,\"meta\":\"Value\"},{\"country\":\"Malaysia\",\"species\":\"tiger\",\"years\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_15_Output1 | class Fn_parallel_multiple_function_15_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Give me the population size of tigers in Bangladesh and India for the last 5 years. Also provide the projected population size of tigers in Nepal and Malaysia for the next 10 years.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve historical crop yield data of a specific crop in a given country.\n    function_name: 'crop_yield.get_history' or null,\n    // The country of interest.\n    country: string,\n    // Type of crop.\n    crop: string,\n    // Number of years of history to retrieve.\n    years: int,\n  } or {\n    // Retrieve historical population size of a specific species in a given country.\n    function_name: 'animal_population.get_history' or null,\n    // The country of interest.\n    country: string,\n    // Species of the animal.\n    species: string,\n    // Number of years of history to retrieve.\n    years: int,\n  } or {\n    // Predict the future population size of a specific species in a given country.\n    function_name: 'animal_population.get_projection' or null,\n    // The country of interest.\n    country: string,\n    // Species of the animal.\n    species: string,\n    // Number of years in the future to predict.\n    years: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"animal_population.get_history\",\n    \"country\": \"Bangladesh\",\n    \"species\": \"tiger\",\n    \"years\": 5\n  },\n  {\n    \"function_name\": \"animal_population.get_history\",\n    \"country\": \"India\",\n    \"species\": \"tiger\",\n    \"years\": 5\n  },\n  {\n    \"function_name\": \"animal_population.get_projection\",\n    \"country\": \"Nepal\",\n    \"species\": \"tiger\",\n    \"years\": 10\n  },\n  {\n    \"function_name\": \"animal_population.get_projection\",\n    \"country\": \"Malaysia\",\n    \"species\": \"tiger\",\n    \"years\": 10\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 365, "output_tokens": 158, "total_tokens": 523, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ea96070d-fbad-40f8-9369-6b70992b701e", "event_id": "ea96070d-fbad-40f8-9369-6b70992b701e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3647, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_15", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: LLM returned animal_population.get_history\\nExpected: any of dict_keys(['animal_population.get_history_1', 'animal_population.get_history_2', 'animal_population.get_projection_1', 'animal_population.get_projection_2'])\\nActual@3: meta=<Fn_parallel_multiple_function_15_Output1_TypeName.Value: 'Value'> country='Nepal' species='tiger' years=10\\nActual all: [Fn_parallel_multiple_function_15_Output1(meta=<Fn_parallel_multiple_function_15_Output1_TypeName.Value: 'Value'>, country='Bangladesh', species='tiger', years=5), Fn_parallel_multiple_function_15_Output1(meta=<Fn_parallel_multiple_function_15_Output1_TypeName.Value: 'Value'>, country='India', species='tiger', years=5), Fn_parallel_multiple_function_15_Output1(meta=<Fn_parallel_multiple_function_15_Output1_TypeName.Value: 'Value'>, country='Nepal', species='tiger', years=10), Fn_parallel_multiple_function_15_Output1(meta=<Fn_parallel_multiple_function_15_Output1_TypeName.Value: 'Value'>, country='Malaysia', species='tiger', years=10)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ed73e7d8-5251-430d-a7bb-d6aecafb326b", "event_id": "2ce272c6-94fb-4433-93e1-7a4326537d18", "parent_event_id": "ed73e7d8-5251-430d-a7bb-d6aecafb326b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 753, "start_time": "2024-06-20T01:20:41.960Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_29", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_29", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_29\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"criminal_name\":\"John Doe\",\"region\":\"New York\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_29_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the conviction status of a criminal with name John Doe in New York, also find the nature of the criminal offenses he committed.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get details about the nature of offenses committed by a criminal.\n    function_name: 'criminal_record.get_offense_nature' or null,\n    // Name of the criminal.\n    criminal_name: string,\n    // Optionally retrieve additional details, by default this is set to false.\n    optional_param: bool or null,\n  } or {\n    // Find the conviction status of a criminal in a specified region.\n    function_name: 'criminal_record.get_status' or null,\n    // Name of the criminal.\n    criminal_name: string,\n    // Region where criminal record is to be searched.\n    region: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"criminal_record.get_status\",\n  \"criminal_name\": \"John Doe\",\n  \"region\": \"New York\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 267, "output_tokens": 34, "total_tokens": 301, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ed73e7d8-5251-430d-a7bb-d6aecafb326b", "event_id": "ed73e7d8-5251-430d-a7bb-d6aecafb326b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3784, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_29", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7712455f-31f2-49a9-a91b-0efd7589509c", "event_id": "6b953e7d-80bf-40e0-bece-311087c1b675", "parent_event_id": "7712455f-31f2-49a9-a91b-0efd7589509c", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1121, "start_time": "2024-06-20T01:20:41.736Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_27", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_27", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_27\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"account\":\"00125648\",\"days\":7,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_27_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me the transaction history for my account '00125648' for the past 7 days and also calculate the total balance.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve transaction history for a specific bank account over a specified time frame.\n    function_name: 'bank.get_transaction_history' or null,\n    // The account number for which transaction history is required.\n    account: string,\n    // Number of past days for which to retrieve the transaction history.\n    days: int,\n  } or {\n    // Calculate the balance of a specified bank account based on the transactions.\n    function_name: 'bank.calculate_balance' or null,\n    // The account number for which balance is to be calculated.\n    account: string,\n    // Transaction array Default is empty array.\n    transactions: [\n      {\n        // The amount of the transaction. Default 0\n        amount: float or null,\n        // Type of the transaction. Default is credit. (default: credit)\n        type: 'credit' or 'debit' or null,\n      }\n    ],\n    // The starting balance of the account, if known. Default 0.0\n    starting_balance: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'bank.get_transaction_history',\n  account: '00125648',\n  days: 7\n}\n{\n  function_name: 'bank.calculate_balance',\n  account: '00125648',\n  transactions: [transaction1, transaction2, ...], // List of transactions for the past 7 days\n  starting_balance: starting_balance // Starting balance of the account\n}", "metadata": {"logprobs": null, "prompt_tokens": 348, "output_tokens": 81, "total_tokens": 429, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7712455f-31f2-49a9-a91b-0efd7589509c", "event_id": "7712455f-31f2-49a9-a91b-0efd7589509c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3928, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_27", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8a5ac766-9dd5-46f4-9413-074640410089", "event_id": "c3b4b518-76c1-40bd-9322-ff63b0075156", "parent_event_id": "8a5ac766-9dd5-46f4-9413-074640410089", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 830, "start_time": "2024-06-20T01:20:42.079Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_30", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_30", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_30\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York\",\"query\":\"Theft\",\"year\":2021,\"meta\":\"Value\",\"limit\":5}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_30_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find cases that pertain to 'Theft' from court record in 'New York' and from 'San Francisco', filed in year 2021, and display briefs of top 5 relevant cases.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Display briefs of the cases\n    function_name: 'briefs.display_cases' or null,\n    // A list of unique identifiers for cases.\n    case_id: string[],\n  } or {\n    // Search for court cases based on specific criteria.\n    function_name: 'court_records.search_cases' or null,\n    // The city where the court is located\n    location: string,\n    // Search string to look for specific cases\n    query: string,\n    // Year the case was filed\n    year: int,\n    // Limits the number of results returned (default: 5)\n    limit: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"court_records.search_cases\",\n  \"location\": \"New York\",\n  \"query\": \"Theft\",\n  \"year\": 2021,\n  \"limit\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 287, "output_tokens": 44, "total_tokens": 331, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8a5ac766-9dd5-46f4-9413-074640410089", "event_id": "8a5ac766-9dd5-46f4-9413-074640410089", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3980, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_30", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7af5021e-a07c-40a9-9540-317b75a2235a", "event_id": "9cd05343-479f-4d36-82a3-a9c480b3cbbb", "parent_event_id": "7af5021e-a07c-40a9-9540-317b75a2235a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1535, "start_time": "2024-06-20T01:20:41.715Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_26", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_26", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_26\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company\":\"Apple\",\"shares\":50,\"meta\":\"Value\"},{\"shares\":50,\"dividend_per_share\":1.3,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_26_Output0 | class Fn_parallel_multiple_function_26_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: How much would it cost me to invest in 50 shares of Apple's stock right now? Also calculate the total dividend payout if each share returns $1.30 as dividend.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the cost of investing in a specific number of shares from a given company.\n    function_name: 'stock_invest.calculate_investment_cost' or null,\n    // The company that you want to invest in.\n    company: string,\n    // Number of shares to invest.\n    shares: int,\n  } or {\n    // Calculate the total dividend payout for a specific number of shares with known dividend per share.\n    function_name: 'stock_invest.calculate_dividend_payout' or null,\n    // Number of shares to calculate dividends.\n    shares: int,\n    // Known dividend per share.\n    dividend_per_share: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"stock_invest.calculate_investment_cost\",\n    \"company\": \"Apple\",\n    \"shares\": 50\n  },\n  {\n    \"function_name\": \"stock_invest.calculate_dividend_payout\",\n    \"shares\": 50,\n    \"dividend_per_share\": 1.30\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 282, "output_tokens": 72, "total_tokens": 354, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9c54ce7e-de1b-4dc3-9b26-a4a9266662ab", "event_id": "58aea92b-03c6-42ec-92c1-5a74e722260d", "parent_event_id": "9c54ce7e-de1b-4dc3-9b26-a4a9266662ab", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1466, "start_time": "2024-06-20T01:20:41.784Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_28", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_28", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_28\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"from_account\":\"checking\",\"to_account\":\"saving\",\"amount\":5000.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_28_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Transfer $5000 from my checking to saving account. And calculate my potential interests after 5 years if the annual interest rate is 3%.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Transfer a given amount from one account to another.\n    function_name: 'bank_account.transfer' or null,\n    // The account to transfer from.\n    from_account: string,\n    // The account to transfer to.\n    to_account: string,\n    // The amount to be transferred.\n    amount: float,\n  } or {\n    // Calculate the amount of interest accrued over a given time period.\n    function_name: 'bank_account.calculate_interest' or null,\n    // The initial amount of money.\n    principal: float,\n    // The annual interest rate as a decimal.\n    rate: float,\n    // The number of years the money is invested for.\n    time: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"bank_account.transfer\",\n  \"from_account\": \"checking\",\n  \"to_account\": \"saving\",\n  \"amount\": 5000\n}\n\n{\n  \"function_name\": \"bank_account.calculate_interest\",\n  \"principal\": 5000,\n  \"rate\": 0.03,\n  \"time\": 5\n}", "metadata": {"logprobs": null, "prompt_tokens": 285, "output_tokens": 73, "total_tokens": 358, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7af5021e-a07c-40a9-9540-317b75a2235a", "event_id": "7af5021e-a07c-40a9-9540-317b75a2235a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4321, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_26", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9c54ce7e-de1b-4dc3-9b26-a4a9266662ab", "event_id": "9c54ce7e-de1b-4dc3-9b26-a4a9266662ab", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4322, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_28", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0f816d8c-aaec-48ab-b59c-146392e34a2f", "event_id": "84d65b03-4da9-419d-ab09-a43a713eaab3", "parent_event_id": "0f816d8c-aaec-48ab-b59c-146392e34a2f", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1332, "start_time": "2024-06-20T01:20:42.095Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_31", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_31", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_31\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"party_name\":\"Charles Dickens\",\"city\":\"Boston\",\"meta\":\"Value\"},{\"party_name\":\"University of California\",\"city\":\"Los Angeles\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_31_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find all law cases where Charles Dickens is a party and it happened in Boston. Also, get cases where University of California was a party and happened in Los Angeles.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get a movie by its name.\n    function_name: 'movie_ratings.get_movie' or null,\n    // The name of the movie to be retrieved\n    movie_name: string,\n  } or {\n    // Get a summary of a legal case\n    function_name: 'legal_case.get_summary' or null,\n    // The unique ID of the case to summarise\n    case_id: string,\n    // Type of the summary to get, e.g., brief, full (default: brief)\n    summary_type: string or null,\n  } or {\n    // Locate legal cases involving a specified party in a particular city\n    function_name: 'legal_case.find_parties' or null,\n    // The name of the party involved in the case\n    party_name: string,\n    // The city where the case was heard\n    city: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"legal_case.find_parties\",\n    \"party_name\": \"Charles Dickens\",\n    \"city\": \"Boston\"\n  },\n  {\n    \"function_name\": \"legal_case.find_parties\",\n    \"party_name\": \"University of California\",\n    \"city\": \"Los Angeles\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 325, "output_tokens": 72, "total_tokens": 397, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0f816d8c-aaec-48ab-b59c-146392e34a2f", "event_id": "0f816d8c-aaec-48ab-b59c-146392e34a2f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4499, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_31", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "64b02f83-cc8b-4937-ac9e-633e831291e5", "event_id": "9a5735b2-f399-4b60-aa39-0e324b52dfd7", "parent_event_id": "64b02f83-cc8b-4937-ac9e-633e831291e5", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1509, "start_time": "2024-06-20T01:20:42.142Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_32", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_32", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_32\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company_name\":\"Pacific Gas and Electric\",\"meta\":\"Value\"},{\"company_name\":\"Tesla Inc\",\"meta\":\"Value\"},{\"company_name\":\"Pacific Gas and Electric\",\"meta\":null},{\"company_name\":\"Tesla Inc\",\"meta\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_32_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find how many cases and the judge handling a specific lawsuit for Pacific Gas and Electric and Tesla Inc.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fetch the details of a lawsuit for a specific company.\n    function_name: 'lawsuit.fetch_details' or null,\n    // The company involved in the lawsuit.\n    company_name: string,\n  } or {\n    // Fetch the judge handling a lawsuit for a specific company.\n    function_name: 'lawsuit.judge' or null,\n    // The company involved in the lawsuit.\n    company_name: string,\n    // The ID number of the lawsuit. Default to 123 (default: 123)\n    lawsuit_id: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"lawsuit.fetch_details\",\n    \"company_name\": \"Pacific Gas and Electric\"\n  },\n  {\n    \"function_name\": \"lawsuit.fetch_details\",\n    \"company_name\": \"Tesla Inc\"\n  },\n  {\n    \"function_name\": \"lawsuit.judge\",\n    \"company_name\": \"Pacific Gas and Electric\"\n  },\n  {\n    \"function_name\": \"lawsuit.judge\",\n    \"company_name\": \"Tesla Inc\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 248, "output_tokens": 106, "total_tokens": 354, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "64b02f83-cc8b-4937-ac9e-633e831291e5", "event_id": "64b02f83-cc8b-4937-ac9e-633e831291e5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4722, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_32", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: company_name\\nExpected: any of ['Tesla Inc.', 'Tesla']\\nActual@2: meta=<Fn_parallel_multiple_function_32_Output0_TypeName.Value: 'Value'> company_name='Tesla Inc'\\nActual all: [Fn_parallel_multiple_function_32_Output0(meta=<Fn_parallel_multiple_function_32_Output0_TypeName.Value: 'Value'>, company_name='Pacific Gas and Electric'), Fn_parallel_multiple_function_32_Output0(meta=<Fn_parallel_multiple_function_32_Output0_TypeName.Value: 'Value'>, company_name='Tesla Inc'), Fn_parallel_multiple_function_32_Output0(meta=None, company_name='Pacific Gas and Electric'), Fn_parallel_multiple_function_32_Output0(meta=None, company_name='Tesla Inc')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f7d91985-80f6-40f5-98a5-ed7cf95ee53a", "event_id": "deac2457-c482-40c9-a2b4-30d248c8f22a", "parent_event_id": "f7d91985-80f6-40f5-98a5-ed7cf95ee53a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 992, "start_time": "2024-06-20T01:20:42.714Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_36", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_36", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_36\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"image_url\":\"my_backyard_image_url\",\"meta\":\"Value\"},{\"text\":\"my_journal_entry_text\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_36_Output0 | class Fn_parallel_multiple_function_36_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Identify objects in my backyard image my_backyard_image_url and analyze the sentiment of today's journal entry my_journal_entry_text.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Identify objects in a given image.\n    function_name: 'image_processing.object_identification' or null,\n    // The URL of the image.\n    image_url: string,\n  } or {\n    // Analyze the sentiment of a given text.\n    function_name: 'text_analysis.sentiment_analysis' or null,\n    // The text to be analyzed.\n    text: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"image_processing.object_identification\",\n    \"image_url\": \"my_backyard_image_url\"\n  },\n  {\n    \"function_name\": \"text_analysis.sentiment_analysis\",\n    \"text\": \"my_journal_entry_text\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 60, "total_tokens": 279, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f7d91985-80f6-40f5-98a5-ed7cf95ee53a", "event_id": "f7d91985-80f6-40f5-98a5-ed7cf95ee53a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4777, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_36", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "662ea025-cc23-42e1-9363-6757bbc5758b", "event_id": "5b6dc4ae-f50a-4ca7-a416-2d9909e7e53a", "parent_event_id": "662ea025-cc23-42e1-9363-6757bbc5758b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1455, "start_time": "2024-06-20T01:20:42.317Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_33", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_33", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_33\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Boston, USA\",\"days\":10,\"meta\":\"Value\"},{\"location\":\"Boston, USA\",\"days\":10,\"meta\":\"Value\"},{\"location\":\"Rome, Italy\",\"days\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_33_Output2 | class Fn_parallel_multiple_function_33_Output1 | class Fn_parallel_multiple_function_33_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get temperature and humidity forecast for Boston, USA and precipitation forecast for Rome, Italy for next 10 days.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve a precipitation forecast for a specific location for a certain number of days.\n    function_name: 'weather_forecast_precipitation' or null,\n    // The city that you want to get the precipitation forecast for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  } or {\n    // Retrieve a humidity forecast for a specific location for a certain number of days.\n    function_name: 'weather_forecast_humidity' or null,\n    // The city that you want to get the humidity forecast for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  } or {\n    // Retrieve a temperature forecast for a specific location for a certain number of days.\n    function_name: 'weather_forecast_temperature' or null,\n    // The city that you want to get the temperature forecast for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"weather_forecast_temperature\",\n    \"location\": \"Boston, USA\",\n    \"days\": 10\n  },\n  {\n    \"function_name\": \"weather_forecast_humidity\",\n    \"location\": \"Boston, USA\",\n    \"days\": 10\n  },\n  {\n    \"function_name\": \"weather_forecast_precipitation\",\n    \"location\": \"Rome, Italy\",\n    \"days\": 10\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 337, "output_tokens": 99, "total_tokens": 436, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "662ea025-cc23-42e1-9363-6757bbc5758b", "event_id": "662ea025-cc23-42e1-9363-6757bbc5758b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4843, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_33", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: location\\nExpected: any of ['Rome, Italy']\\nActual@1: meta=<Fn_parallel_multiple_function_33_Output0_TypeName.Value: 'Value'> location='Boston, USA' days=10\\nActual all: [Fn_parallel_multiple_function_33_Output0(meta=<Fn_parallel_multiple_function_33_Output0_TypeName.Value: 'Value'>, location='Boston, USA', days=10), Fn_parallel_multiple_function_33_Output0(meta=<Fn_parallel_multiple_function_33_Output0_TypeName.Value: 'Value'>, location='Boston, USA', days=10), Fn_parallel_multiple_function_33_Output0(meta=<Fn_parallel_multiple_function_33_Output0_TypeName.Value: 'Value'>, location='Rome, Italy', days=10)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "866c7958-664e-4b82-84a8-4105efb5c913", "event_id": "e6f0ad64-721f-4db6-87f0-ef4095a36333", "parent_event_id": "866c7958-664e-4b82-84a8-4105efb5c913", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1208, "start_time": "2024-06-20T01:20:42.858Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_37", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_37", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_37\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"battle_name\":\"Battle of Waterloo\",\"specific_info\":[\"Value0\"],\"meta\":\"Value\"},{\"treaty_name\":\"Treaty of Tordesillas\",\"info_requested\":[\"Value3\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_37_Output0 | class Fn_parallel_multiple_function_37_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find overview about the Battle of Waterloo and the signing of the Treaty of Tordesillas.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve specific information about a signed European treaty.\n    function_name: 'euro_history.treaty_info' or null,\n    // The name of the treaty.\n    treaty_name: string,\n    // Specific aspects of the treaty for which to return information.\n    info_requested: [\n      'signatories' or 'ratification date' or 'clauses' or 'overview'\n    ],\n  } or {\n    // Retrieve detailed information about a specific European historical battle.\n    function_name: 'euro_history.battle_details' or null,\n    // The name of the historical battle.\n    battle_name: string,\n    // The specific types of information to return about the battle.\n    specific_info: [\n      'overview' or 'causalities' or 'date'\n    ],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'euro_history.battle_details',\n    battle_name: 'Battle of Waterloo',\n    specific_info: ['overview']\n  },\n  {\n    function_name: 'euro_history.treaty_info',\n    treaty_name: 'Treaty of Tordesillas',\n    info_requested: ['overview']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 294, "output_tokens": 71, "total_tokens": 365, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "76570142-a661-49f0-849b-dba47a969d57", "event_id": "9e9e140f-34bb-49c5-a97e-04410652bb31", "parent_event_id": "76570142-a661-49f0-849b-dba47a969d57", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1157, "start_time": "2024-06-20T01:20:42.910Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_38", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_38", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_38\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"event\":\"World War 2\",\"meta\":\"Value\",\"region\":\"Europe\"},{\"event\":\"World War 2\",\"meta\":\"Value\",\"number\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_38_Output1 | class Fn_parallel_multiple_function_38_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Get me the timeline of World War 2 in Europe and then get me an array of important leaders involved during the war.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the timeline for a specific historical event\n    function_name: 'history.get_timeline' or null,\n    // The historical event you want the timeline for.\n    event: string,\n    // Region of the event. (default: Europe)\n    region: string or null,\n  } or {\n    // Retrieve array of important figures involved during a specific historical event.\n    function_name: 'history.get_important_figures' or null,\n    // The historical event for which you want the array of important figures.\n    event: string,\n    // Number of top figures you want. Default to 1 (default: 1)\n    number: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"history.get_timeline\",\n    \"event\": \"World War 2\",\n    \"region\": \"Europe\"\n  },\n  {\n    \"function_name\": \"history.get_important_figures\",\n    \"event\": \"World War 2\",\n    \"number\": null\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 277, "output_tokens": 70, "total_tokens": 347, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "866c7958-664e-4b82-84a8-4105efb5c913", "event_id": "866c7958-664e-4b82-84a8-4105efb5c913", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 5137, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_37", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "76570142-a661-49f0-849b-dba47a969d57", "event_id": "76570142-a661-49f0-849b-dba47a969d57", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 5138, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_38", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "62b9e0a8-d19b-4428-a133-28219ecad5d2", "event_id": "4d4174bf-a48a-4dea-8846-d11496d152d2", "parent_event_id": "62b9e0a8-d19b-4428-a133-28219ecad5d2", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 946, "start_time": "2024-06-20T01:20:43.252Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_40", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_40", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_40\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"name\":\"Nikola Tesla\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_40_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the exact birthdate of Nikola Tesla and what his most famous discovery was?\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the birthdate of a specific scientist.\n    function_name: 'scientist_info.get_birthdate' or null,\n    // The name of the scientist.\n    name: string,\n  } or {\n    // Retrieve the most famous discovery made by a specific scientist.\n    function_name: 'scientist_info.get_famous_discovery' or null,\n    // The name of the scientist.\n    name: string,\n    // The order of discoveries if the scientist made multiple discoveries. If not provided, the first (or most famous) discovery will be returned. (default: 1)\n    discovery_order: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"scientist_info.get_birthdate\",\n  \"name\": \"Nikola Tesla\"\n} \n\n{\n  \"function_name\": \"scientist_info.get_famous_discovery\",\n  \"name\": \"Nikola Tesla\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 261, "output_tokens": 53, "total_tokens": 314, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "62b9e0a8-d19b-4428-a133-28219ecad5d2", "event_id": "62b9e0a8-d19b-4428-a133-28219ecad5d2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 5269, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_40", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3fb6eb9d-f1d4-4313-94d4-8671ebe9fe5b", "event_id": "92e15d01-dd57-415d-98e6-60ca5d0da0f7", "parent_event_id": "3fb6eb9d-f1d4-4313-94d4-8671ebe9fe5b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2086, "start_time": "2024-06-20T01:20:42.491Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_34", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_34", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_34\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[]", "override": null, "type": {"name": "single", "fields": {"value": "list<?>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Locate all supermarkets in Los Angeles and find the most popular site seeing place in Miami.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find all supermarkets in a given city.\n    function_name: 'supermarket.find_in_city' or null,\n    // The city to locate supermarkets in.\n    city: string,\n    // The state to further narrow down the search.\n    state: string,\n    // If true, returns only supermarkets that are currently open. Default to true\n    openNow: bool or null,\n  } or {\n    // Find the most popular sightseeing place in a given city.\n    function_name: 'sightseeing.popular_in_city' or null,\n    // The city to find sightseeing in.\n    city: string,\n    // The state to further narrow down the search.\n    state: string,\n    // If true, returns only kids friendly sightseeing places.Default to true\n    kidsFriendly: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"questions\": [\n    {\n      \"question\": \"Locate all supermarkets in Los Angeles\",\n      \"function\": {\n        \"function_name\": \"supermarket.find_in_city\",\n        \"city\": \"Los Angeles\",\n        \"state\": \"California\",\n        \"openNow\": true\n      }\n    },\n    {\n      \"question\": \"Find the most popular sightseeing place in Miami\",\n      \"function\": {\n        \"function_name\": \"sightseeing.popular_in_city\",\n        \"city\": \"Miami\",\n        \"state\": \"Florida\",\n        \"kidsFriendly\": true\n      }\n    }\n  ]\n}", "metadata": {"logprobs": null, "prompt_tokens": 300, "output_tokens": 128, "total_tokens": 428, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3fb6eb9d-f1d4-4313-94d4-8671ebe9fe5b", "event_id": "3fb6eb9d-f1d4-4313-94d4-8671ebe9fe5b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 5649, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_34", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c75e97b0-c339-4ac6-b33d-9f72322890d8", "event_id": "9ffd43bc-4472-4a9d-a5ee-d8e140305c9f", "parent_event_id": "c75e97b0-c339-4ac6-b33d-9f72322890d8", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1413, "start_time": "2024-06-20T01:20:43.251Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_39", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_39", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_39\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"year\":1900,\"meta\":\"Value\"},{\"year\":1950,\"meta\":\"Value\"},{\"year\":1900,\"meta\":\"Value\"},{\"year\":1950,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_39_Output0 | class Fn_parallel_multiple_function_39_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What was the average life expectancy in the USA in the year 1900 and 1950? Additionally, what was the Gross Domestic Product (GDP) of the USA in these years?\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieves the Gross Domestic Product of the USA for a specific year.\n    function_name: 'us_history.gdp' or null,\n    // The year for which to retrieve GDP data.\n    year: int,\n  } or {\n    // Retrieves the average life expectancy of the USA for a specific year.\n    function_name: 'us_history.life_expectancy' or null,\n    // The year for which to retrieve life expectancy.\n    year: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"us_history.life_expectancy\",\n    \"year\": 1900\n  },\n  {\n    \"function_name\": \"us_history.life_expectancy\",\n    \"year\": 1950\n  },\n  {\n    \"function_name\": \"us_history.gdp\",\n    \"year\": 1900\n  },\n  {\n    \"function_name\": \"us_history.gdp\",\n    \"year\": 1950\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 247, "output_tokens": 96, "total_tokens": 343, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c75e97b0-c339-4ac6-b33d-9f72322890d8", "event_id": "c75e97b0-c339-4ac6-b33d-9f72322890d8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 5736, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_39", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: LLM returned us_history.gdp\\nExpected: any of dict_keys(['us_history.life_expectancy_1', 'us_history.life_expectancy_2', 'us_history.gdp_1', 'us_history.gdp_2'])\\nActual@3: meta=<Fn_parallel_multiple_function_39_Output0_TypeName.Value: 'Value'> year=1900\\nActual all: [Fn_parallel_multiple_function_39_Output0(meta=<Fn_parallel_multiple_function_39_Output0_TypeName.Value: 'Value'>, year=1900), Fn_parallel_multiple_function_39_Output0(meta=<Fn_parallel_multiple_function_39_Output0_TypeName.Value: 'Value'>, year=1950), Fn_parallel_multiple_function_39_Output0(meta=<Fn_parallel_multiple_function_39_Output0_TypeName.Value: 'Value'>, year=1900), Fn_parallel_multiple_function_39_Output0(meta=<Fn_parallel_multiple_function_39_Output0_TypeName.Value: 'Value'>, year=1950)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "386dac02-6732-4f5e-a6bf-2dfda66c1177", "event_id": "ab2bce12-1c9e-4274-8829-495e5249742d", "parent_event_id": "386dac02-6732-4f5e-a6bf-2dfda66c1177", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2150, "start_time": "2024-06-20T01:20:42.577Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_35", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_35", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_35\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"text\":\"Hello World\",\"from_lang\":\"en\",\"to_lang\":\"es\",\"meta\":\"Value\"},{\"text\":\"Adieu\",\"from_lang\":\"fr\",\"to_lang\":\"en\",\"meta\":\"Value\"},{\"location\":\"Los Angeles\",\"meta\":\"Value\"},{\"location\":\"London\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_35_Output0 | class Fn_parallel_multiple_function_35_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Translate the phrase 'Hello World' from English to Spanish and translate 'Goodbye' from French to English. In addition to that get current time in 'Los Angeles' and 'London'.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fetches current time for a given location\n    function_name: 'get_current_time' or null,\n    // The location for which to fetch current time\n    location: string,\n  } or {\n    // Translates a given text from one language to another\n    function_name: 'translate_text' or null,\n    // The text that needs to be translated\n    text: string,\n    // The source language from which to translate\n    from_lang: string,\n    // The target language to which to translate\n    to_lang: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"translate_text\",\n    \"text\": \"Hello World\",\n    \"from_lang\": \"en\",\n    \"to_lang\": \"es\"\n  },\n  {\n    \"function_name\": \"translate_text\",\n    \"text\": \"Adieu\",\n    \"from_lang\": \"fr\",\n    \"to_lang\": \"en\"\n  },\n  {\n    \"function_name\": \"get_current_time\",\n    \"location\": \"Los Angeles\"\n  },\n  {\n    \"function_name\": \"get_current_time\",\n    \"location\": \"London\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 267, "output_tokens": 119, "total_tokens": 386, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "386dac02-6732-4f5e-a6bf-2dfda66c1177", "event_id": "386dac02-6732-4f5e-a6bf-2dfda66c1177", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 5799, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_35", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: from_lang\\nExpected: any of ['English', 'EN']\\nActual@1: meta=<Fn_parallel_multiple_function_35_Output1_TypeName.Value: 'Value'> text='Hello World' from_lang='en' to_lang='es'\\nActual all: [Fn_parallel_multiple_function_35_Output1(meta=<Fn_parallel_multiple_function_35_Output1_TypeName.Value: 'Value'>, text='Hello World', from_lang='en', to_lang='es'), Fn_parallel_multiple_function_35_Output1(meta=<Fn_parallel_multiple_function_35_Output1_TypeName.Value: 'Value'>, text='Adieu', from_lang='fr', to_lang='en'), Fn_parallel_multiple_function_35_Output0(meta=<Fn_parallel_multiple_function_35_Output0_TypeName.Value: 'Value'>, location='Los Angeles'), Fn_parallel_multiple_function_35_Output0(meta=<Fn_parallel_multiple_function_35_Output0_TypeName.Value: 'Value'>, location='London')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ecdcae77-c49f-4de3-9b2a-56461b638f9e", "event_id": "687f441b-dfb5-4f8c-a566-d483c9f89d63", "parent_event_id": "ecdcae77-c49f-4de3-9b2a-56461b638f9e", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1319, "start_time": "2024-06-20T01:20:43.653Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_42", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_42", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_42\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"shape\":\"square\",\"background_color\":\"blue\",\"dimensions\":[16,16],\"meta\":\"Value\"},{\"percentage\":70,\"duration\":30,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_42_Output0 | class Fn_parallel_multiple_function_42_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Create a square painting with blue background and dimensions 16x16 inches, then display it for 30 seconds with 70% screen brightness\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Creates a new painting with specified parameters\n    function_name: 'painting.create' or null,\n    // Shape of the painting to be created.\n    shape: string,\n    // Background color of the painting.\n    background_color: string,\n    // Dimensions of the painting in inches.\n    dimensions: int[],\n  } or {\n    // Sets the screen brightness for viewing the painting\n    function_name: 'display.set_screen_brightness' or null,\n    // Screen brightness level in percentage.\n    percentage: int,\n    // Duration to maintain the brightness level in seconds.\n    duration: int,\n  } or {\n    // Displays a created painting for a specific amount of time\n    function_name: 'painting.display' or null,\n    // Time in seconds the painting will be displayed for.\n    time: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"painting.create\",\n    \"shape\": \"square\",\n    \"background_color\": \"blue\",\n    \"dimensions\": [16, 16]\n  },\n  {\n    \"function_name\": \"display.set_screen_brightness\",\n    \"percentage\": 70,\n    \"duration\": 30\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 312, "output_tokens": 74, "total_tokens": 386, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ecdcae77-c49f-4de3-9b2a-56461b638f9e", "event_id": "ecdcae77-c49f-4de3-9b2a-56461b638f9e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6043, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_42", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5d8bfd67-887c-43e6-b1db-8795059f25f3", "event_id": "35a99f15-a0c8-4117-ac4d-67f9ce461ab3", "parent_event_id": "5d8bfd67-887c-43e6-b1db-8795059f25f3", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1230, "start_time": "2024-06-20T01:20:43.773Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_44", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_44", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_44\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"museum_location\":\"Philadelphia\",\"sculpture_id\":123,\"meta\":\"Value\"},{\"museum_location\":\"New York\",\"sculpture_id\":456,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_44_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the average price of a 4 ft x 4 ft marble statue in the museum of Philadelphia and 6 ft x 3 ft bronze sculpture in New York museum? \n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieves details of a sculpture, such as its material and size, from a museum database.\n    function_name: 'get_sculpture_details' or null,\n    // Location of the museum housing the sculpture.\n    museum_location: string,\n    // Database ID of the sculpture.\n    sculpture_id: int,\n  } or {\n    // Retrieves the price of a sculpture based on size and material.\n    function_name: 'get_artwork_price' or null,\n    // Location of the museum housing the sculpture.\n    museum_location: string,\n    // Material of the sculpture.\n    sculpture_material: string,\n    // Dimensions of the sculpture.\n    sculpture_size: int[],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"get_sculpture_details\",\n    \"museum_location\": \"Philadelphia\",\n    \"sculpture_id\": 123\n  },\n  {\n    \"function_name\": \"get_sculpture_details\",\n    \"museum_location\": \"New York\",\n    \"sculpture_id\": 456\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 290, "output_tokens": 79, "total_tokens": 369, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5d8bfd67-887c-43e6-b1db-8795059f25f3", "event_id": "5d8bfd67-887c-43e6-b1db-8795059f25f3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6074, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_44", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: LLM returned get_sculpture_details\\nExpected: any of dict_keys(['get_artwork_price_1', 'get_artwork_price_2'])\\nActual@1: meta=<Fn_parallel_multiple_function_44_Output0_TypeName.Value: 'Value'> museum_location='Philadelphia' sculpture_id=123\\nActual all: [Fn_parallel_multiple_function_44_Output0(meta=<Fn_parallel_multiple_function_44_Output0_TypeName.Value: 'Value'>, museum_location='Philadelphia', sculpture_id=123), Fn_parallel_multiple_function_44_Output0(meta=<Fn_parallel_multiple_function_44_Output0_TypeName.Value: 'Value'>, museum_location='New York', sculpture_id=456)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e61f2cd4-155f-4b4d-a874-5cfd7a67657f", "event_id": "1d70956a-520e-4f69-af4d-2778bdcfea8e", "parent_event_id": "e61f2cd4-155f-4b4d-a874-5cfd7a67657f", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 995, "start_time": "2024-06-20T01:20:44.068Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_45", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_45", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_45\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"bedrooms\":3,\"bathrooms\":2,\"meta\":\"Value\",\"garden\":true},{\"rooms\":5,\"meeting_room\":\"Value2\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_45_Output1 | class Fn_parallel_multiple_function_45_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Design a house with 3 bedrooms, 2 bathrooms and a garden. Also, design an office with 5 rooms and a large meeting room\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Design an office space based on specific requirements\n    function_name: 'office_designer.design' or null,\n    // Number of rooms in the office.\n    rooms: int,\n    // Size of the meeting room\n    meeting_room: 'small' or 'medium' or 'large',\n  } or {\n    // Design a house based on specific criteria\n    function_name: 'house_designer.design' or null,\n    // Number of bedrooms desired.\n    bedrooms: int,\n    // Number of bathrooms needed.\n    bathrooms: int,\n    // Does the house need a garden? Default is False\n    garden: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"house_designer.design\",\n    \"bedrooms\": 3,\n    \"bathrooms\": 2,\n    \"garden\": true\n  },\n  {\n    \"function_name\": \"office_designer.design\",\n    \"rooms\": 5,\n    \"meeting_room\": \"large\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 277, "output_tokens": 71, "total_tokens": 348, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e61f2cd4-155f-4b4d-a874-5cfd7a67657f", "event_id": "e61f2cd4-155f-4b4d-a874-5cfd7a67657f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6134, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_45", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "10d3b8e9-d30a-41f5-ad27-6381917733c1", "event_id": "5b7fe9f7-3f7f-4dec-88db-abcbbbdccf59", "parent_event_id": "10d3b8e9-d30a-41f5-ad27-6381917733c1", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1091, "start_time": "2024-06-20T01:20:44.068Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_46", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_46", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_46\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"height\":10.0,\"width\":5.0,\"depth\":8.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_46_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Calculate the volume of a cuboid with a height of 10m, a width of 5m, and a depth of 8m. And find out the volume of a sphere with a radius of 4m.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculates the volume of a cuboid.\n    function_name: 'calcVolume.cuboid' or null,\n    // The height of the cuboid.\n    height: float,\n    // The width of the cuboid.\n    width: float,\n    // The depth of the cuboid.\n    depth: float,\n  } or {\n    // Calculates the volume of a sphere.\n    function_name: 'calcVolume.sphere' or null,\n    // The radius of the sphere.\n    radius: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"calcVolume.cuboid\",\n  \"height\": 10,\n  \"width\": 5,\n  \"depth\": 8\n}\n\n{\n  \"function_name\": \"calcVolume.sphere\",\n  \"radius\": 4\n}", "metadata": {"logprobs": null, "prompt_tokens": 266, "output_tokens": 55, "total_tokens": 321, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "10d3b8e9-d30a-41f5-ad27-6381917733c1", "event_id": "10d3b8e9-d30a-41f5-ad27-6381917733c1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6231, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_46", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6ef3fb50-b77b-4bd2-966a-963a36eb8968", "event_id": "8511db77-e11c-4372-82ed-f735f0138734", "parent_event_id": "6ef3fb50-b77b-4bd2-966a-963a36eb8968", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 834, "start_time": "2024-06-20T01:20:44.666Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_49", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_49", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_49\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"note\":\"C\",\"meta\":\"Value\"},{\"frequency\":440.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_49_Output1 | class Fn_parallel_multiple_function_49_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the equivalent note of C in Indian musical scale? And convert the frequency 440 Hz to wavelength?\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Converts the frequency of a musical note to its wavelength.\n    function_name: 'frequency_to_wavelength' or null,\n    // The frequency in hertz of the musical note.\n    frequency: float,\n  } or {\n    // Converts a note in Western music to Indian classical music.\n    function_name: 'note_conversion.indian' or null,\n    // The note in Western musical scale.\n    note: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n    {\n        \"function_name\": \"note_conversion.indian\",\n        \"note\": \"C\"\n    },\n    {\n        \"function_name\": \"frequency_to_wavelength\",\n        \"frequency\": 440\n    }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 50, "total_tokens": 274, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6ef3fb50-b77b-4bd2-966a-963a36eb8968", "event_id": "6ef3fb50-b77b-4bd2-966a-963a36eb8968", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6571, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_49", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "83714661-ed22-4a2c-87af-86e7c9b6aa3b", "event_id": "dc6ea318-cc20-4386-82cb-a6ad399c0352", "parent_event_id": "83714661-ed22-4a2c-87af-86e7c9b6aa3b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1331, "start_time": "2024-06-20T01:20:44.200Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_47", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_47", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_47\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"museum_name\":\"Louvre Museum\",\"meta\":\"Value\"},{\"museum_name\":\"Louvre Museum\",\"meta\":null},{\"destination\":\"Louvre Museum\",\"meta\":\"Value\",\"mode\":\"Value0\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_47_Output0 | class Fn_parallel_multiple_function_47_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find the operational hours for Louvre Museum and the waiting time, then tell me how long it will take to travel from my current location to the museum.\n\nHere is the function to invoke:\n\n\nEnum_Fn_parallel_multiple_function_47_Enum1\n----\n- Monday\n- Tuesday\n- Wednesday\n- Thursday\n- Friday\n- Saturday\n- Sunday\n\n[\n  {\n    // Retrieve the operational hours of a specified museum.\n    function_name: 'museum.get_hours' or null,\n    // The name of the museum.\n    museum_name: string,\n  } or {\n    // Retrieve the estimated travel time from current location to a specific destination.\n    function_name: 'location.get_travel_time' or null,\n    // The destination location.\n    destination: string,\n    // Mode of travel. (default: Driving)\n    mode: 'Driving' or 'Biking' or 'Walking' or null,\n  } or {\n    // Retrieve the estimated waiting time at a specific museum.\n    function_name: 'museum.get_waiting_time' or null,\n    // The name of the museum.\n    museum_name: string,\n    // Day of the week. (default: Monday)\n    day: Enum_Fn_parallel_multiple_function_47_Enum1 or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"museum.get_hours\",\n    \"museum_name\": \"Louvre Museum\"\n  },\n  {\n    \"function_name\": \"museum.get_waiting_time\",\n    \"museum_name\": \"Louvre Museum\"\n  },\n  {\n    \"function_name\": \"location.get_travel_time\",\n    \"destination\": \"Louvre Museum\",\n    \"mode\": \"Driving\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 363, "output_tokens": 90, "total_tokens": 453, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "83714661-ed22-4a2c-87af-86e7c9b6aa3b", "event_id": "83714661-ed22-4a2c-87af-86e7c9b6aa3b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6602, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_47", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "96efd6a8-fc77-4a99-bcb3-558a6e2bcb29", "event_id": "b37b8fa8-8658-42c3-9011-40555fa6fced", "parent_event_id": "96efd6a8-fc77-4a99-bcb3-558a6e2bcb29", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2258, "start_time": "2024-06-20T01:20:43.429Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_41", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_41", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_41\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"particle\":\"Neutron\",\"unit\":\"amu\",\"meta\":\"Value\"},{\"particle\":\"Proton\",\"unit\":\"amu\",\"meta\":\"Value\"},{\"particle\":\"Proton\",\"unit\":\"femtometers\",\"meta\":\"Value\"},{\"particle\":\"Neutron\",\"unit\":\"femtometers\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_41_Output2 | class Fn_parallel_multiple_function_41_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the weight of Neutron and Proton in atomic mass unit (amu) ? Also what is the diameter of a Proton and Neutron in femtometers?\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fetch the electric charge of an atomic particle\n    function_name: 'scienceFacts.getCharge' or null,\n    // The atomic particle. e.g. Electron, Proton\n    particle: string,\n    // Unit to retrieve electric charge. For example, 'coulombs' etc.\n    unit: string,\n  } or {\n    // Fetch the atomic weight of an atomic particle\n    function_name: 'scienceFacts.getWeight' or null,\n    // The atomic particle. e.g. Electron, Proton\n    particle: string,\n    // Unit to retrieve weight. For example, 'kg', 'pound', 'amu' etc.\n    unit: string,\n  } or {\n    // Fetch the diameter of an atomic particle\n    function_name: 'scienceFacts.getDiameter' or null,\n    // The atomic particle. e.g. Electron, Proton\n    particle: string,\n    // Unit to retrieve diameter. For example, 'meter', 'cm', 'femtometers' etc.\n    unit: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"scienceFacts.getWeight\",\n    \"particle\": \"Neutron\",\n    \"unit\": \"amu\"\n  },\n  {\n    \"function_name\": \"scienceFacts.getWeight\",\n    \"particle\": \"Proton\",\n    \"unit\": \"amu\"\n  },\n  {\n    \"function_name\": \"scienceFacts.getDiameter\",\n    \"particle\": \"Proton\",\n    \"unit\": \"femtometers\"\n  },\n  {\n    \"function_name\": \"scienceFacts.getDiameter\",\n    \"particle\": \"Neutron\",\n    \"unit\": \"femtometers\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 368, "output_tokens": 136, "total_tokens": 504, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "96efd6a8-fc77-4a99-bcb3-558a6e2bcb29", "event_id": "96efd6a8-fc77-4a99-bcb3-558a6e2bcb29", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6758, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_41", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: LLM returned scienceFacts.getCharge\\nExpected: any of dict_keys(['scienceFacts.getWeight_1', 'scienceFacts.getWeight_2', 'scienceFacts.getDiameter_1', 'scienceFacts.getDiameter_2'])\\nActual@1: meta=<Fn_parallel_multiple_function_41_Output0_TypeName.Value: 'Value'> particle='Neutron' unit='amu'\\nActual all: [Fn_parallel_multiple_function_41_Output0(meta=<Fn_parallel_multiple_function_41_Output0_TypeName.Value: 'Value'>, particle='Neutron', unit='amu'), Fn_parallel_multiple_function_41_Output0(meta=<Fn_parallel_multiple_function_41_Output0_TypeName.Value: 'Value'>, particle='Proton', unit='amu'), Fn_parallel_multiple_function_41_Output0(meta=<Fn_parallel_multiple_function_41_Output0_TypeName.Value: 'Value'>, particle='Proton', unit='femtometers'), Fn_parallel_multiple_function_41_Output0(meta=<Fn_parallel_multiple_function_41_Output0_TypeName.Value: 'Value'>, particle='Neutron', unit='femtometers')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4349fb71-c322-412a-89ef-0f8bc5d6f14f", "event_id": "0c0c1f03-958f-480a-8f04-78549da007cf", "parent_event_id": "4349fb71-c322-412a-89ef-0f8bc5d6f14f", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2174, "start_time": "2024-06-20T01:20:43.708Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_43", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_43", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_43\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"museum\":\"Modern Arts Museum, New York\",\"type\":\"Sculpture\",\"meta\":\"Value\",\"material\":\"Bronze\",\"artist\":null},{\"museum\":\"Louvre Museum, Paris\",\"type\":\"Sculpture\",\"meta\":\"Value\",\"material\":\"Stone\",\"artist\":null},{\"museum\":\"Metropolitan Museum of Art\",\"type\":\"Painting\",\"meta\":\"Value\",\"material\":null,\"artist\":\"Picasso\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_43_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me a bronze statue in the Modern Arts Museum in New York and a stone sculpture in the Louvre Museum in Paris. Also, find me a painting made by Picasso in the Metropolitan Museum of Art.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find a book in a library based on specific criteria like author, genre or publication year.\n    function_name: 'book.find' or null,\n    // The name of the library.\n    library: string,\n    // Author of the book.\n    author: string,\n    // Genre of the book. (default: Sci-Fi)\n    genre: string or null,\n    // Year of publication. (default: 2000)\n    year: int or null,\n  } or {\n    // Find historical landmarks based on specific criteria like location or era.\n    function_name: 'historical_landmark.find' or null,\n    // Location of the landmark.\n    location: string,\n    // Era of the landmark. E.g. Middle Ages, Renaissance (default: Renaissance)\n    era: string or null,\n  } or {\n    // Locate artwork in museums based on specific criteria like type of material, artist, or era.\n    function_name: 'artwork.find' or null,\n    // The name of the museum, e.g. Modern Arts Museum, New York\n    museum: string,\n    // Type of the artwork. E.g. Painting, Sculpture\n    type: string,\n    // Material of the artwork if it's a sculpture. E.g. Bronze, Marble\n    material: string or null,\n    // Name of the artist.\n    artist: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"artwork.find\",\n    \"museum\": \"Modern Arts Museum, New York\",\n    \"type\": \"Sculpture\",\n    \"material\": \"Bronze\",\n    \"artist\": null\n  },\n  {\n    \"function_name\": \"artwork.find\",\n    \"museum\": \"Louvre Museum, Paris\",\n    \"type\": \"Sculpture\",\n    \"material\": \"Stone\",\n    \"artist\": null\n  },\n  {\n    \"function_name\": \"artwork.find\",\n    \"museum\": \"Metropolitan Museum of Art\",\n    \"type\": \"Painting\",\n    \"artist\": \"Picasso\",\n    \"material\": null\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 441, "output_tokens": 154, "total_tokens": 595, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4349fb71-c322-412a-89ef-0f8bc5d6f14f", "event_id": "4349fb71-c322-412a-89ef-0f8bc5d6f14f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6953, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_43", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: type\\nExpected: any of ['painting']\\nActual@3: meta=<Fn_parallel_multiple_function_43_Output2_TypeName.Value: 'Value'> museum='Metropolitan Museum of Art' type='Painting' material=None artist='Picasso'\\nActual all: [Fn_parallel_multiple_function_43_Output2(meta=<Fn_parallel_multiple_function_43_Output2_TypeName.Value: 'Value'>, museum='Modern Arts Museum, New York', type='Sculpture', material='Bronze', artist=None), Fn_parallel_multiple_function_43_Output2(meta=<Fn_parallel_multiple_function_43_Output2_TypeName.Value: 'Value'>, museum='Louvre Museum, Paris', type='Sculpture', material='Stone', artist=None), Fn_parallel_multiple_function_43_Output2(meta=<Fn_parallel_multiple_function_43_Output2_TypeName.Value: 'Value'>, museum='Metropolitan Museum of Art', type='Painting', material=None, artist='Picasso')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a17bceaf-fdff-4728-9b9e-791e563432d2", "event_id": "19959c00-aba3-4421-8c1f-66b643809aca", "parent_event_id": "a17bceaf-fdff-4728-9b9e-791e563432d2", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1184, "start_time": "2024-06-20T01:20:44.729Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_50", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_50", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_50\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"genre\":\"Hip Hop\",\"bpm\":95,\"meta\":\"Value\",\"scale\":\"Major\"},{\"note_sequence\":[\"C4\",\"E4\",\"F4\",\"G4\"],\"meta\":\"Value\",\"instrument\":\"Bass\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_50_Output1 | class Fn_parallel_multiple_function_50_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Create a hip hop beat at 95 beats per minute with a major scale and make a bass melody with C4, E4, F4, G4.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Create a melody based on specified notes.\n    function_name: 'melody_generator' or null,\n    // The sequence of notes for the melody.\n    note_sequence: string[],\n    // The instrument to play the melody, e.g. Bass. (default: Bass)\n    instrument: string or null,\n  } or {\n    // Generate a beat based on specified genre and beats per minute.\n    function_name: 'beat_generator' or null,\n    // The genre of the beat, e.g. Hip Hop.\n    genre: string,\n    // The beats per minute of the beat.\n    bpm: int,\n    // The scale for the beat, e.g. Major. (default: Major)\n    scale: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n    {\n        \"function_name\": \"beat_generator\",\n        \"genre\": \"Hip Hop\",\n        \"bpm\": 95,\n        \"scale\": \"Major\"\n    },\n    {\n        \"function_name\": \"melody_generator\",\n        \"note_sequence\": [\"C4\", \"E4\", \"F4\", \"G4\"],\n        \"instrument\": \"Bass\"\n    }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 300, "output_tokens": 85, "total_tokens": 385, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a17bceaf-fdff-4728-9b9e-791e563432d2", "event_id": "a17bceaf-fdff-4728-9b9e-791e563432d2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 6984, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_50", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "21fa695f-f38a-4f37-8605-c7a69b5b068a", "event_id": "60d15a40-997f-4103-a9b4-75bced17b2e5", "parent_event_id": "21fa695f-f38a-4f37-8605-c7a69b5b068a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1151, "start_time": "2024-06-20T01:20:45.005Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_52", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_52", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_52\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"player\":\"Michael Jordan\",\"stat\":\"highest_scoring_game\",\"meta\":\"Value\"},{\"player\":\"Michael Jordan\",\"stat\":\"total_championships\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_52_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Can you find information on Michael Jordan's highest scoring game and the total championships he won?\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve information for a specific team, such as championships won.\n    function_name: 'get_team_info' or null,\n    // The name of the team.\n    team: string,\n    // The information sought. E.g., 'championships_won'.\n    info: string,\n  } or {\n    // Retrieve record stats for a specific player and stat type.\n    function_name: 'get_player_record' or null,\n    // The name of the player.\n    player: string,\n    // The type of statistic. E.g., 'highest_scoring_game', 'total_championships'.\n    stat: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"get_player_record\",\n    \"player\": \"Michael Jordan\",\n    \"stat\": \"highest_scoring_game\"\n  },\n  {\n    \"function_name\": \"get_player_record\",\n    \"player\": \"Michael Jordan\",\n    \"stat\": \"total_championships\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 262, "output_tokens": 70, "total_tokens": 332, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "21fa695f-f38a-4f37-8605-c7a69b5b068a", "event_id": "21fa695f-f38a-4f37-8605-c7a69b5b068a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 7227, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_52", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "69507e45-1205-4ed4-b40a-31d1ebd41e67", "event_id": "81ded4ee-0cb8-4edf-a0cc-02e0e6cc1822", "parent_event_id": "69507e45-1205-4ed4-b40a-31d1ebd41e67", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1107, "start_time": "2024-06-20T01:20:45.064Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_53", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_53", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_53\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"rounds\":3,\"start_board\":[],\"meta\":\"Value\"},{\"moves\":[\"e4\",\"e5\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_53_Output0 | class Fn_parallel_multiple_function_53_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Play the Game of life for 3 rounds starting from an empty board, then play chess where the 1st move is e4 and the 2nd move is e5.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Makes moves in a chess game.\n    function_name: 'chess.play' or null,\n    // List of moves to play in the game.\n    moves: string[],\n  } or {\n    // Runs a round of game of life based on provided board.\n    function_name: 'game_of_life.play' or null,\n    // Number of rounds to play.\n    rounds: int,\n    // Starting board of game, leave empty for random starting point.\n    start_board: int[],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n    {\n        \"function_name\": \"game_of_life.play\",\n        \"rounds\": 3,\n        \"start_board\": []\n    },\n    {\n        \"function_name\": \"chess.play\",\n        \"moves\": [\"e4\", \"e5\"]\n    }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 253, "output_tokens": 61, "total_tokens": 314, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "69507e45-1205-4ed4-b40a-31d1ebd41e67", "event_id": "69507e45-1205-4ed4-b40a-31d1ebd41e67", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 7242, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_53", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cd75895a-aecf-4fb8-b885-249496d7cab5", "event_id": "65a7892c-cb22-4667-b662-3a006f3cce59", "parent_event_id": "cd75895a-aecf-4fb8-b885-249496d7cab5", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1753, "start_time": "2024-06-20T01:20:44.579Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_48", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_48", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_48\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"city\":\"Austin\",\"product\":\"Yamaha Acoustic Guitar\",\"meta\":\"Value\"},{\"city\":\"New York\",\"product\":\"Yamaha Acoustic Guitar\",\"meta\":\"Value\"},{\"city\":\"Austin\",\"product\":\"Yamaha Acoustic Guitar\",\"meta\":\"Value\"},{\"city\":\"New York\",\"product\":\"Yamaha Acoustic Guitar\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_48_Output0 | class Fn_parallel_multiple_function_48_Output1 | class Fn_parallel_multiple_function_48_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find me the lowest price for a Yamaha Acoustic Guitar in Austin and compare it to the average price of Yamaha Acoustic Guitar in New York. Also tell me how many stores carry Yamaha Acoustic Guitar in each city.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Returns the lowest price for a particular product within a given city.\n    function_name: 'lowest_price' or null,\n    // The city where the product will be searched.\n    city: string,\n    // The product for which the lowest price will be searched.\n    product: string,\n  } or {\n    // Returns the average price for a particular product within a given city.\n    function_name: 'average_price' or null,\n    // The city where the product will be searched.\n    city: string,\n    // The product for which the average price will be searched.\n    product: string,\n  } or {\n    // Returns the number of stores that carry a particular product within a given city.\n    function_name: 'store_count' or null,\n    // The city where the product will be searched.\n    city: string,\n    // The product for which the number of stores will be searched.\n    product: string,\n  } or {\n    // Searches a particular product within a given city.\n    function_name: 'product_search' or null,\n    // The city where the product will be searched.\n    city: string,\n    // The product that will be searched.\n    product: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'lowest_price',\n    city: 'Austin',\n    product: 'Yamaha Acoustic Guitar',\n  },\n  {\n    function_name: 'average_price',\n    city: 'New York',\n    product: 'Yamaha Acoustic Guitar',\n  },\n  {\n    function_name: 'store_count',\n    city: 'Austin',\n    product: 'Yamaha Acoustic Guitar',\n  },\n  {\n    function_name: 'store_count',\n    city: 'New York',\n    product: 'Yamaha Acoustic Guitar',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 406, "output_tokens": 116, "total_tokens": 522, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cd75895a-aecf-4fb8-b885-249496d7cab5", "event_id": "cd75895a-aecf-4fb8-b885-249496d7cab5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 7403, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_48", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: city\\nExpected: any of ['Austin']\\nActual@2: meta=<Fn_parallel_multiple_function_48_Output0_TypeName.Value: 'Value'> city='New York' product='Yamaha Acoustic Guitar'\\nActual all: [Fn_parallel_multiple_function_48_Output0(meta=<Fn_parallel_multiple_function_48_Output0_TypeName.Value: 'Value'>, city='Austin', product='Yamaha Acoustic Guitar'), Fn_parallel_multiple_function_48_Output0(meta=<Fn_parallel_multiple_function_48_Output0_TypeName.Value: 'Value'>, city='New York', product='Yamaha Acoustic Guitar'), Fn_parallel_multiple_function_48_Output0(meta=<Fn_parallel_multiple_function_48_Output0_TypeName.Value: 'Value'>, city='Austin', product='Yamaha Acoustic Guitar'), Fn_parallel_multiple_function_48_Output0(meta=<Fn_parallel_multiple_function_48_Output0_TypeName.Value: 'Value'>, city='New York', product='Yamaha Acoustic Guitar')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4631df17-b902-48c1-91c3-297f34b37cf9", "event_id": "8792f3ea-ad54-4f97-8953-2361a0f29801", "parent_event_id": "4631df17-b902-48c1-91c3-297f34b37cf9", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 915, "start_time": "2024-06-20T01:20:45.533Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_56", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_56", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_56\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"ingredient\":\"spaghetti\",\"dietary_requirements\":[\"Value0\"],\"isHomemade\":true,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_56_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: I want a homemade healthy spaghetti recipe that is gluten free, how long will it take to prepare and cook, and what nutritional information could it provide me.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the estimated preparation and cooking time for a specified recipe.\n    function_name: 'recipe_prep_time' or null,\n    // Name of the recipe to calculate time for.\n    recipe: string,\n  } or {\n    // Provide detailed nutritional information for a specified recipe.\n    function_name: 'recipe_nutrition_info' or null,\n    // Name of the recipe to fetch nutrition info for.\n    recipe: string,\n  } or {\n    // Search for a recipe based on a particular ingredient or dietary requirement.\n    function_name: 'recipe_search' or null,\n    // The ingredient that you want to have in the recipe.\n    ingredient: string,\n    // Dietary requirements in the recipe.\n    dietary_requirements: [\n      'gluten_free' or 'dairy_free' or 'vegetarian' or 'vegan'\n    ],\n    // If true, returns homemade recipe; otherwise, return not homemade recipe.\n    isHomemade: bool,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"recipe_search\",\n  \"ingredient\": \"spaghetti\",\n  \"dietary_requirements\": [\"gluten_free\"],\n  \"isHomemade\": true\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 342, "output_tokens": 42, "total_tokens": 384, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4631df17-b902-48c1-91c3-297f34b37cf9", "event_id": "4631df17-b902-48c1-91c3-297f34b37cf9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 7519, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_56", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3725a59d-3b02-4eee-a3e0-41676dd68d13", "event_id": "bb04192d-b154-40b7-85e4-c53eb4f8a727", "parent_event_id": "3725a59d-3b02-4eee-a3e0-41676dd68d13", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1291, "start_time": "2024-06-20T01:20:45.161Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_54", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_54", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_54\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"complexity\":2.5,\"player_count\":6,\"meta\":\"Value\"},{\"duration\":60.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_54_Output1 | class Fn_parallel_multiple_function_54_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Find a board game with complexity rating under 2.5 and that supports more than 5 players, as well as a trivia game that could be played within 60 minutes.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Locate a card game based on a specific theme.\n    function_name: 'card_game_search' or null,\n    // The theme for the card game.\n    theme: string,\n  } or {\n    // Locate a board game based on specific criteria.\n    function_name: 'board_game_search' or null,\n    // The maximum complexity rating of the board game (lower is simpler).\n    complexity: float,\n    // The minimum player count for the board game.\n    player_count: int,\n  } or {\n    // Locate a trivia game based on play duration.\n    function_name: 'trivia_game_search' or null,\n    // The maximum playing duration for the trivia game in minutes.\n    duration: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"board_game_search\",\n    \"complexity\": 2.5,\n    \"player_count\": 6\n  },\n  {\n    \"function_name\": \"trivia_game_search\",\n    \"duration\": 60\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 299, "output_tokens": 60, "total_tokens": 359, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3725a59d-3b02-4eee-a3e0-41676dd68d13", "event_id": "3725a59d-3b02-4eee-a3e0-41676dd68d13", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 7522, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_54", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e021d05f-654f-4120-8e1c-f1c83537d579", "event_id": "c5d4edc2-c897-495f-bd68-60ee2c5dc834", "parent_event_id": "e021d05f-654f-4120-8e1c-f1c83537d579", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1602, "start_time": "2024-06-20T01:20:44.973Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_51", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_51", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_51\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"team\":\"L.A Lakers\",\"details\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"team\":\"L.A Lakers\",\"seasons\":[\"2018-2019\",\"2019-2020\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_51_Output0 | class Fn_parallel_multiple_function_51_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: Analyze the performance of the L.A Lakers in their last game and give me the field goal percentage and free throw percentage. Also, compare the team's points per game (ppg) average from 2018-2019 and 2019-2020 season.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Analyzes the team's performance in their most recent game.\n    function_name: 'sport_analysis.last_game_performance' or null,\n    // The sports team that needs to be analyzed.\n    team: string,\n    // Key performance indicators that you want for the analysis\n    details: [\n      'field goal %' or 'free throw %'\n    ],\n  } or {\n    // Compares a team's average points per game in two different seasons.\n    function_name: 'sport_analysis.compare_ppg' or null,\n    // The sports team that needs to be compared.\n    team: string,\n    // The seasons that you want to compare the ppg.\n    seasons: string[],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"sport_analysis.last_game_performance\",\n    \"team\": \"L.A Lakers\",\n    \"details\": [\n      \"field goal %\",\n      \"free throw %\"\n    ]\n  },\n  {\n    \"function_name\": \"sport_analysis.compare_ppg\",\n    \"team\": \"L.A Lakers\",\n    \"seasons\": [\n      \"2018-2019\",\n      \"2019-2020\"\n    ]\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 312, "output_tokens": 99, "total_tokens": 411, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e021d05f-654f-4120-8e1c-f1c83537d579", "event_id": "e021d05f-654f-4120-8e1c-f1c83537d579", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 7646, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_51", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dc563a4d-f7fd-4834-8a75-ff7638e44c01", "event_id": "3ae5aaf2-cf4e-4434-bd3d-7546d27fb339", "parent_event_id": "dc563a4d-f7fd-4834-8a75-ff7638e44c01", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1327, "start_time": "2024-06-20T01:20:45.914Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_60", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_60", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_60\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"side1\":7.0,\"side2\":10.0,\"side3\":5.0,\"meta\":\"Value\"},{\"base\":8.0,\"height\":6.0,\"meta\":\"Value\"},{\"radius\":4.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_60_Output1 | class Fn_parallel_multiple_function_60_Output0 | class Fn_parallel_multiple_function_60_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a math teacher preparing for a geometry class. You want to create a worksheet for your students that includes problems on calculating areas of different shapes. You have decided to include a problem on calculating the area of a triangle using Heron's formula, another problem on calculating the area of a triangle using the base and height, and a problem on calculating the area of a circle. For the first problem, you have chosen a triangle with sides of lengths 7 units, 10 units, and 5 units. For the second problem, you have chosen a triangle with a base of 8 units and a height of 6 units. For the third problem, you have chosen a circle with a radius of 4 units. Could you calculate the areas of these shapes for your worksheet?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculates the area of a triangle using Heron's formula, given the lengths of its three sides.\n    function_name: 'math.triangle_area_heron' or null,\n    // Length of the first side of the triangle.\n    side1: float,\n    // Length of the second side of the triangle.\n    side2: float,\n    // Length of the third side of the triangle.\n    side3: float,\n  } or {\n    // Calculates the area of a triangle using the formula (1/2)base*height.\n    function_name: 'math.triangle_area_base_height' or null,\n    // The base length of the triangle.\n    base: float,\n    // The height of the triangle.\n    height: float,\n  } or {\n    // Calculates the area of a circle given its radius.\n    function_name: 'math.circle_area' or null,\n    // The radius of the circle.\n    radius: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"math.triangle_area_heron\",\n    \"side1\": 7,\n    \"side2\": 10,\n    \"side3\": 5\n  },\n  {\n    \"function_name\": \"math.triangle_area_base_height\",\n    \"base\": 8,\n    \"height\": 6\n  },\n  {\n    \"function_name\": \"math.circle_area\",\n    \"radius\": 4\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 470, "output_tokens": 99, "total_tokens": 569, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dece8d75-4b70-4402-920b-5baf9651e95b", "event_id": "f42e0b87-d4e2-46bc-b22d-4d7dd79ed083", "parent_event_id": "dece8d75-4b70-4402-920b-5baf9651e95b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1553, "start_time": "2024-06-20T01:20:45.689Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_57", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_57", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_57\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Beijing\",\"meta\":\"Value\"},{\"location\":\"Tokyo\",\"meta\":\"Value\"},{\"city_1\":\"Beijing\",\"city_2\":\"Tokyo\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_57_Output0 | class Fn_parallel_multiple_function_57_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: What is the current time in Beijing and Tokyo and what's the time difference between two cities?\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve current time for the specified location\n    function_name: 'time_zones.get_current_time' or null,\n    // The city that you want to get the current time for.\n    location: string,\n  } or {\n    // Retrieve the time difference between two cities\n    function_name: 'time_zones.get_time_difference' or null,\n    // First city for calculating the time difference.\n    city_1: string,\n    // Second city for calculating the time difference.\n    city_2: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"time_zones.get_current_time\",\n    \"location\": \"Beijing\"\n  },\n  {\n    \"function_name\": \"time_zones.get_current_time\",\n    \"location\": \"Tokyo\"\n  },\n  {\n    \"function_name\": \"time_zones.get_time_difference\",\n    \"city_1\": \"Beijing\",\n    \"city_2\": \"Tokyo\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 239, "output_tokens": 90, "total_tokens": 329, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dc563a4d-f7fd-4834-8a75-ff7638e44c01", "event_id": "dc563a4d-f7fd-4834-8a75-ff7638e44c01", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 8312, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_60", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dece8d75-4b70-4402-920b-5baf9651e95b", "event_id": "dece8d75-4b70-4402-920b-5baf9651e95b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 8312, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_57", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4d7f4af2-03da-467f-a0c4-e790984c5d25", "event_id": "819fcb06-4d06-405d-be64-c966e31e1a7f", "parent_event_id": "4d7f4af2-03da-467f-a0c4-e790984c5d25", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1117, "start_time": "2024-06-20T01:20:46.157Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_61", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_61", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_61\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"country\":\"Australia\",\"meta\":\"Value\"},{\"country\":\"Canada\",\"meta\":\"Value\"},{\"country\":\"Brazil\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_61_Output1 | class Fn_parallel_multiple_function_61_Output0 | class Fn_parallel_multiple_function_61_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"What is the capital city of Australia, what is the current population of Canada, and what is the largest city in Brazil?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fetch the largest city of a specified country.\n    function_name: 'country_info.largest_city' or null,\n    // Name of the country.\n    country: string,\n  } or {\n    // Fetch the current population of a specified country.\n    function_name: 'country_info.population' or null,\n    // Name of the country.\n    country: string,\n  } or {\n    // Fetch the capital city of a specified country.\n    function_name: 'country_info.capital' or null,\n    // Name of the country.\n    country: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"country_info.capital\",\n    \"country\": \"Australia\"\n  },\n  {\n    \"function_name\": \"country_info.population\",\n    \"country\": \"Canada\"\n  },\n  {\n    \"function_name\": \"country_info.largest_city\",\n    \"country\": \"Brazil\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 257, "output_tokens": 72, "total_tokens": 329, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4d7f4af2-03da-467f-a0c4-e790984c5d25", "event_id": "4d7f4af2-03da-467f-a0c4-e790984c5d25", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 8345, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_61", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: country\\nExpected: any of ['Brazil']\\nActual@1: meta=<Fn_parallel_multiple_function_61_Output0_TypeName.Value: 'Value'> country='Australia'\\nActual all: [Fn_parallel_multiple_function_61_Output0(meta=<Fn_parallel_multiple_function_61_Output0_TypeName.Value: 'Value'>, country='Australia'), Fn_parallel_multiple_function_61_Output0(meta=<Fn_parallel_multiple_function_61_Output0_TypeName.Value: 'Value'>, country='Canada'), Fn_parallel_multiple_function_61_Output0(meta=<Fn_parallel_multiple_function_61_Output0_TypeName.Value: 'Value'>, country='Brazil')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7dbe1c9b-dc5d-48a7-979e-ed291e944dc2", "event_id": "0ebe2cbe-1e6b-4c21-b9bf-a79df0dd8c65", "parent_event_id": "7dbe1c9b-dc5d-48a7-979e-ed291e944dc2", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1905, "start_time": "2024-06-20T01:20:45.502Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_55", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_55", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_55\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"attribute\":\"armor\",\"level\":5,\"meta\":\"Value\",\"playerID\":123},{\"game\":\"Battle Reign\",\"meta\":\"Value\",\"condition\":\"snowy weather\",\"type\":\"strategy\"},{\"game\":\"Shadow Fall\",\"meta\":\"Value\",\"condition\":null,\"type\":\"strategy\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_55_Output0 | class Fn_parallel_multiple_function_55_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: In game Battle Reign, change the armor level to 5 and find me a game guide for how to win in snowy weather conditions. Also find me any strategy guides available for game Shadow Fall.\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Modify the player's equipment level for specified attributes\n    function_name: 'BattleReignGameAPI.update_player_equipment' or null,\n    // The attribute of the equipment to modify.\n    attribute: string,\n    // The level to modify the attribute to.\n    level: int,\n    // Player ID of the player. Default to 123 (default: 123)\n    playerID: int or null,\n  } or {\n    // Search for game guides given specific conditions and preferences\n    function_name: 'GameGuideAPI.search_guide' or null,\n    // Name of the game.\n    game: string,\n    // Specific game conditions. (eg: 'snowy weather', 'hard mode').\n    condition: string or null,\n    // Specific type of guide. (eg: 'strategy', 'walkthrough')\n    type: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'BattleReignGameAPI.update_player_equipment',\n    attribute: 'armor',\n    level: 5,\n    playerID: 123\n  },\n  {\n    function_name: 'GameGuideAPI.search_guide',\n    game: 'Battle Reign',\n    condition: 'snowy weather',\n    type: 'strategy'\n  },\n  {\n    function_name: 'GameGuideAPI.search_guide',\n    game: 'Shadow Fall',\n    condition: null,\n    type: 'strategy'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 331, "output_tokens": 109, "total_tokens": 440, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7dbe1c9b-dc5d-48a7-979e-ed291e944dc2", "event_id": "7dbe1c9b-dc5d-48a7-979e-ed291e944dc2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 8478, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_55", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: type\\nExpected: any of ['', None, []]\\nActual@1: meta=<Fn_parallel_multiple_function_55_Output1_TypeName.Value: 'Value'> game='Battle Reign' condition='snowy weather' type='strategy'\\nActual all: [Fn_parallel_multiple_function_55_Output0(meta=<Fn_parallel_multiple_function_55_Output0_TypeName.Value: 'Value'>, attribute='armor', level=5, playerID=123), Fn_parallel_multiple_function_55_Output1(meta=<Fn_parallel_multiple_function_55_Output1_TypeName.Value: 'Value'>, game='Battle Reign', condition='snowy weather', type='strategy'), Fn_parallel_multiple_function_55_Output1(meta=<Fn_parallel_multiple_function_55_Output1_TypeName.Value: 'Value'>, game='Shadow Fall', condition=None, type='strategy')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "bb8aaec4-3fdc-45b5-93c5-417489d5c1b2", "event_id": "2315889a-ecc4-49aa-aa29-3ec62011fdb6", "parent_event_id": "bb8aaec4-3fdc-45b5-93c5-417489d5c1b2", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1566, "start_time": "2024-06-20T01:20:45.883Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_59", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_59", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_59\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"side1\":5.0,\"side2\":7.0,\"side3\":9.0,\"meta\":\"Value\",\"get_area\":true,\"get_perimeter\":true,\"get_angles\":true},{\"radius\":3.0,\"meta\":\"Value\",\"get_area\":true,\"get_circumference\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_59_Output0 | class Fn_parallel_multiple_function_59_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a geometry teacher preparing for your next class. You have two shapes, a triangle and a circle, that you want to discuss in detail. For the triangle, the lengths of the sides are 5 units, 7 units, and 9 units respectively. You want to calculate the area, perimeter, and internal angles of this triangle. For the circle, the radius is 3 units. You want to calculate the area and circumference of this circle. Can you provide these details?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the dimensions, such as area and circumference, of a circle if radius is given.\n    function_name: 'circle_properties.get' or null,\n    // The length of radius of the circle.\n    radius: float,\n    // A flag to determine whether to calculate the area of circle. Default is true.\n    get_area: bool or null,\n    // A flag to determine whether to calculate the circumference of circle. Default is true.\n    get_circumference: bool or null,\n  } or {\n    // Retrieve the dimensions, such as area and perimeter, of a triangle if lengths of three sides are given.\n    function_name: 'triangle_properties.get' or null,\n    // The length of first side of the triangle.\n    side1: float,\n    // The length of second side of the triangle.\n    side2: float,\n    // The length of third side of the triangle.\n    side3: float,\n    // A flag to determine whether to calculate the area of triangle. Default is true.\n    get_area: bool or null,\n    // A flag to determine whether to calculate the perimeter of triangle. Default is true.\n    get_perimeter: bool or null,\n    // A flag to determine whether to calculate the internal angles of triangle. Default is true.\n    get_angles: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"triangle_properties.get\",\n    \"side1\": 5,\n    \"side2\": 7,\n    \"side3\": 9,\n    \"get_area\": true,\n    \"get_perimeter\": true,\n    \"get_angles\": true\n  },\n  {\n    \"function_name\": \"circle_properties.get\",\n    \"radius\": 3,\n    \"get_area\": true,\n    \"get_circumference\": true\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 488, "output_tokens": 104, "total_tokens": 592, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "bb8aaec4-3fdc-45b5-93c5-417489d5c1b2", "event_id": "bb8aaec4-3fdc-45b5-93c5-417489d5c1b2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 8519, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_59", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0a6556df-03c0-40b7-9886-1fa98d297a89", "event_id": "6f3d1885-1657-4b58-8738-7ff61153e60a", "parent_event_id": "0a6556df-03c0-40b7-9886-1fa98d297a89", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1932, "start_time": "2024-06-20T01:20:46.334Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_63", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_63", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_63\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_speed\":5.0,\"acceleration\":2.0,\"time\":10.0,\"meta\":\"Value\",\"rounding\":2},{\"initial_speed\":5.0,\"acceleration\":2.0,\"time\":10.0,\"meta\":\"Value\",\"rounding\":2}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_63_Output0 | class Fn_parallel_multiple_function_63_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"A car is traveling on a straight road. At the start, it has an initial speed of 5 m/s. Suddenly, the driver sees a traffic light turning red in the distance and starts to accelerate at a rate of 2 m/s^2. The driver keeps this acceleration for 10 seconds. Can you calculate the displacement of the car during this time? Also, what is the final speed of the car after this 10 seconds? Please round off your answers to 2 decimal places.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the final speed of an object that starts from an initial speed and then accelerates for a certain duration.\n    function_name: 'kinematics.calculate_final_speed' or null,\n    // The initial speed of the moving object in m/s.\n    initial_speed: float,\n    // The rate of change of speed, m/s^2.\n    acceleration: float,\n    // The time interval during which the acceleration is applied, in seconds.\n    time: float,\n    // The number of decimals to round off the result (optional). (default: 2)\n    rounding: int or null,\n  } or {\n    // Calculate displacement based on initial speed, acceleration, and time interval for a motion along a straight line.\n    function_name: 'kinematics.calculate_displacement' or null,\n    // The initial speed of the moving object in m/s.\n    initial_speed: float,\n    // The rate of change of speed, m/s^2.\n    acceleration: float,\n    // The time interval during which the acceleration is applied, in seconds.\n    time: float,\n    // The number of decimals to round off the result (optional). (default: 2)\n    rounding: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"kinematics.calculate_displacement\",\n    \"initial_speed\": 5,\n    \"acceleration\": 2,\n    \"time\": 10,\n    \"rounding\": 2\n  },\n  {\n    \"function_name\": \"kinematics.calculate_final_speed\",\n    \"initial_speed\": 5,\n    \"acceleration\": 2,\n    \"time\": 10,\n    \"rounding\": 2\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 465, "output_tokens": 100, "total_tokens": 565, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0a6556df-03c0-40b7-9886-1fa98d297a89", "event_id": "0a6556df-03c0-40b7-9886-1fa98d297a89", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 9336, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_63", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fb8c2859-0f1c-4e2f-abec-842efcfa030f", "event_id": "d5cfe817-1c43-4222-b06b-6994012ebe35", "parent_event_id": "fb8c2859-0f1c-4e2f-abec-842efcfa030f", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2141, "start_time": "2024-06-20T01:20:46.172Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_62", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_62", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_62\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"pointA\":[3,2],\"pointB\":[7,5],\"meta\":\"Value\",\"rounding\":2},{\"pointA\":[3,2],\"pointB\":[7,5],\"meta\":\"Value\",\"rounding\":2},{\"pointA\":[10,8],\"pointB\":[14,12],\"meta\":\"Value\",\"rounding\":2},{\"pointA\":[10,8],\"pointB\":[14,12],\"meta\":\"Value\",\"rounding\":2}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_62_Output1 | class Fn_parallel_multiple_function_62_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with a couple of calculations? I have two points in a 2D space, Point A with coordinates [3, 2] and Point B with coordinates [7, 5]. First, I would like to know the Euclidean distance between these two points, rounded to 2 decimal places. Then, I would like to find out the angle between these two points with respect to the x-axis, also rounded to 2 decimal places. After that, I have another set of points, Point C with coordinates [10, 8] and Point D with coordinates [14, 12]. Could you please calculate the Euclidean distance and the angle to the x-axis for these points as well, both rounded to 2 decimal places?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the angle between two points with respect to x-axis.\n    function_name: 'angleToXAxis.calculate' or null,\n    // Coordinates for Point A.\n    pointA: int[],\n    // Coordinates for Point B.\n    pointB: int[],\n    // Optional: The number of decimals to round off the result. (default: 2)\n    rounding: int or null,\n  } or {\n    // Calculate the Euclidean distance between two points.\n    function_name: 'EuclideanDistance.calculate' or null,\n    // Coordinates for Point A.\n    pointA: int[],\n    // Coordinates for Point B.\n    pointB: int[],\n    // Optional: The number of decimals to round off the result. (default: 2)\n    rounding: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"EuclideanDistance.calculate\",\n    \"pointA\": [3, 2],\n    \"pointB\": [7, 5],\n    \"rounding\": 2\n  },\n  {\n    \"function_name\": \"angleToXAxis.calculate\",\n    \"pointA\": [3, 2],\n    \"pointB\": [7, 5],\n    \"rounding\": 2\n  },\n  {\n    \"function_name\": \"EuclideanDistance.calculate\",\n    \"pointA\": [10, 8],\n    \"pointB\": [14, 12],\n    \"rounding\": 2\n  },\n  {\n    \"function_name\": \"angleToXAxis.calculate\",\n    \"pointA\": [10, 8],\n    \"pointB\": [14, 12],\n    \"rounding\": 2\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 433, "output_tokens": 188, "total_tokens": 621, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fb8c2859-0f1c-4e2f-abec-842efcfa030f", "event_id": "fb8c2859-0f1c-4e2f-abec-842efcfa030f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 9385, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_62", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: pointA\\nExpected: any of [[10, 8]]\\nActual@2: meta=<Fn_parallel_multiple_function_62_Output0_TypeName.Value: 'Value'> pointA=[3, 2] pointB=[7, 5] rounding=2\\nActual all: [Fn_parallel_multiple_function_62_Output0(meta=<Fn_parallel_multiple_function_62_Output0_TypeName.Value: 'Value'>, pointA=[3, 2], pointB=[7, 5], rounding=2), Fn_parallel_multiple_function_62_Output0(meta=<Fn_parallel_multiple_function_62_Output0_TypeName.Value: 'Value'>, pointA=[3, 2], pointB=[7, 5], rounding=2), Fn_parallel_multiple_function_62_Output0(meta=<Fn_parallel_multiple_function_62_Output0_TypeName.Value: 'Value'>, pointA=[10, 8], pointB=[14, 12], rounding=2), Fn_parallel_multiple_function_62_Output0(meta=<Fn_parallel_multiple_function_62_Output0_TypeName.Value: 'Value'>, pointA=[10, 8], pointB=[14, 12], rounding=2)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4ff76d8e-e214-4735-ac4c-e0b17915a94b", "event_id": "1480e8b6-bf75-4a16-892c-1558173d9b9f", "parent_event_id": "4ff76d8e-e214-4735-ac4c-e0b17915a94b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2222, "start_time": "2024-06-20T01:20:46.453Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_65", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_65", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_65\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"species\":\"African Elephant\",\"location\":\"Serengeti\",\"duration\":10,\"meta\":\"Value\"},{\"species\":\"African Elephant\",\"ecosystem\":\"Serengeti\",\"location\":\"Serengeti\",\"meta\":\"Value\",\"timeframe\":5},{\"species\":\"Bengal Tiger\",\"location\":\"Sundarbans\",\"duration\":7,\"meta\":\"Value\"},{\"species\":\"Bengal Tiger\",\"ecosystem\":\"Sundarbans\",\"location\":\"Sundarbans\",\"meta\":\"Value\",\"timeframe\":3}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_65_Output1 | class Fn_parallel_multiple_function_65_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me understand the ecological impact of the African Elephant in the Serengeti ecosystem over the last 5 years and also assess the population growth of the same species in the same location over the last 10 years? After that, I would also like to know the ecological impact of the Bengal Tiger in the Sundarbans ecosystem over the last 3 years and assess the population growth of the same species in the same location over the last 7 years.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Assesses the population growth of a specific species in a specified location over a period.\n    function_name: 'wildlife_population.assess_growth' or null,\n    // The species for which the growth is to be calculated.\n    species: string,\n    // The area where the species is present.\n    location: string,\n    // The time period for which the population growth should be calculated in years.\n    duration: int,\n  } or {\n    // Analyzes the impact of a species on a particular ecosystem.\n    function_name: 'ecological_impact.analyze' or null,\n    // The species whose impact is to be calculated.\n    species: string,\n    // The ecosystem being affected.\n    ecosystem: string,\n    // The area where the impact is analyzed.\n    location: string,\n    // The time period for which the impact analysis should be carried out in years. (default: 5)\n    timeframe: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"wildlife_population.assess_growth\",\n    \"species\": \"African Elephant\",\n    \"location\": \"Serengeti\",\n    \"duration\": 10\n  },\n  {\n    \"function_name\": \"ecological_impact.analyze\",\n    \"species\": \"African Elephant\",\n    \"ecosystem\": \"Serengeti\",\n    \"location\": \"Serengeti\",\n    \"timeframe\": 5\n  },\n  {\n    \"function_name\": \"wildlife_population.assess_growth\",\n    \"species\": \"Bengal Tiger\",\n    \"location\": \"Sundarbans\",\n    \"duration\": 7\n  },\n  {\n    \"function_name\": \"ecological_impact.analyze\",\n    \"species\": \"Bengal Tiger\",\n    \"ecosystem\": \"Sundarbans\",\n    \"location\": \"Sundarbans\",\n    \"timeframe\": 3\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 405, "output_tokens": 208, "total_tokens": 613, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c0c4aa14-5752-4b72-9533-1999e58ff103", "event_id": "508c9cbb-6578-4d1c-885e-4bde6b54013c", "parent_event_id": "c0c4aa14-5752-4b72-9533-1999e58ff103", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1432, "start_time": "2024-06-20T01:20:47.243Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_69", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_69", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_69\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company_name\":\"Tech Innovators\",\"year1\":2018,\"year1_revenue\":500000.0,\"year2\":2019,\"year2_revenue\":750000.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_69_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me analyze the financial performance of a company named 'Tech Innovators'? I would like to understand their year over year (YOY) growth rate from 2018 to 2019. In 2018, their revenue was $500,000 and in 2019, it increased to $750,000. Additionally, I would like to know their return on equity (ROE) for the year 2019, where their net income was $100,000 and the average shareholder equity was $200,000. Lastly, I am also interested in their return on assets (ROA) for the same year, given that their total average assets were $1,000,000.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the return on assets (ROA) for a company.\n    function_name: 'financial_ratios.calculate_ROA' or null,\n    // Net income for the period.\n    net_income: float,\n    // Total average assets for the period.\n    total_assets: float,\n  } or {\n    // Calculate the year over year (YOY) growth rate for a company.\n    function_name: 'corporate_finance.calculate_YOY_growth_rate' or null,\n    // The name of the company for which to calculate the YOY growth rate.\n    company_name: string,\n    // The initial year.\n    year1: int,\n    // The revenue for the initial year.\n    year1_revenue: float,\n    // The subsequent year.\n    year2: int,\n    // The revenue for the subsequent year.\n    year2_revenue: float,\n  } or {\n    // Calculate the return on equity (ROE) for a company.\n    function_name: 'financial_ratios.calculate_ROE' or null,\n    // Net income for the period.\n    net_income: float,\n    // Average shareholder equity for the period.\n    shareholder_equity: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"corporate_finance.calculate_YOY_growth_rate\",\n  \"company_name\": \"Tech Innovators\",\n  \"year1\": 2018,\n  \"year1_revenue\": 500000,\n  \"year2\": 2019,\n  \"year2_revenue\": 750000\n}", "metadata": {"logprobs": null, "prompt_tokens": 504, "output_tokens": 69, "total_tokens": 573, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4ff76d8e-e214-4735-ac4c-e0b17915a94b", "event_id": "4ff76d8e-e214-4735-ac4c-e0b17915a94b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 9746, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_65", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c0c4aa14-5752-4b72-9533-1999e58ff103", "event_id": "c0c4aa14-5752-4b72-9533-1999e58ff103", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 9746, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_69", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3d0457d5-889a-405f-80c7-7ff6711b58e6", "event_id": "2d86e833-85a1-418f-b087-d1db7186bceb", "parent_event_id": "3d0457d5-889a-405f-80c7-7ff6711b58e6", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2238, "start_time": "2024-06-20T01:20:46.577Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_66", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_66", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_66\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"San Francisco, CA\",\"propertyType\":\"condo\",\"bedrooms\":2,\"budget\":{\"min\":500000.0,\"max\":800000.0},\"meta\":\"Value\"},{\"location\":\"Los Angeles, CA\",\"propertyType\":\"villa\",\"bedrooms\":3,\"age\":5,\"meta\":\"Value\"},{\"location\":\"New York, NY\",\"propertyType\":\"apartment\",\"bedrooms\":1,\"age\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_66_Output0 | class Fn_parallel_multiple_function_66_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find a property in San Francisco, CA that is a condo with 2 bedrooms and fits within my budget range of $500,000 to $800,000? After that, could you also provide an estimated value for a villa in Los Angeles, CA with 3 bedrooms that is 5 years old? Lastly, I would also like to know the estimated value of an apartment in New York, NY with 1 bedroom that is 10 years old.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get estimated value of a property based on location, specifications and age\n    function_name: 'property_valuation.get' or null,\n    // City and state where the property is located, e.g. San Diego, CA.\n    location: string,\n    // Type of property such as villa, condo, apartment, etc.\n    propertyType: string,\n    // Number of bedrooms required in the property.\n    bedrooms: int,\n    // Age of the property in years.\n    age: int,\n  } or {\n    // Find properties based on location, budget, and specifications\n    function_name: 'realestate.find_properties' or null,\n    // City and state where the property is located, e.g. San Diego, CA.\n    location: string,\n    // Type of property such as villa, condo, apartment, etc.\n    propertyType: string,\n    // Number of bedrooms required in the property.\n    bedrooms: int,\n    // Budget range for the property.\n    budget: {\n      // Minimum budget limit.\n      min: float or null,\n      // Maximum budget limit.\n      max: float or null,\n    },\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"realestate.find_properties\",\n    \"location\": \"San Francisco, CA\",\n    \"propertyType\": \"condo\",\n    \"bedrooms\": 2,\n    \"budget\": {\n      \"min\": 500000,\n      \"max\": 800000\n    }\n  },\n  {\n    \"function_name\": \"property_valuation.get\",\n    \"location\": \"Los Angeles, CA\",\n    \"propertyType\": \"villa\",\n    \"bedrooms\": 3,\n    \"age\": 5\n  },\n  {\n    \"function_name\": \"property_valuation.get\",\n    \"location\": \"New York, NY\",\n    \"propertyType\": \"apartment\",\n    \"bedrooms\": 1,\n    \"age\": 10\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 446, "output_tokens": 169, "total_tokens": 615, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3d0457d5-889a-405f-80c7-7ff6711b58e6", "event_id": "3d0457d5-889a-405f-80c7-7ff6711b58e6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 9886, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_66", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: budget\\nExpected: any of [{'min': [500000], 'max': [800000]}]\\nActual@1: meta=<Fn_parallel_multiple_function_66_Output1_TypeName.Value: 'Value'> location='San Francisco, CA' propertyType='condo' bedrooms=2 budget=Class_Fn_parallel_multiple_function_66_Class0(min=500000.0, max=800000.0)\\nActual all: [Fn_parallel_multiple_function_66_Output1(meta=<Fn_parallel_multiple_function_66_Output1_TypeName.Value: 'Value'>, location='San Francisco, CA', propertyType='condo', bedrooms=2, budget=Class_Fn_parallel_multiple_function_66_Class0(min=500000.0, max=800000.0)), Fn_parallel_multiple_function_66_Output0(meta=<Fn_parallel_multiple_function_66_Output0_TypeName.Value: 'Value'>, location='Los Angeles, CA', propertyType='villa', bedrooms=3, age=5), Fn_parallel_multiple_function_66_Output0(meta=<Fn_parallel_multiple_function_66_Output0_TypeName.Value: 'Value'>, location='New York, NY', propertyType='apartment', bedrooms=1, age=10)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a825635b-a34f-4d68-ae10-3176899b5329", "event_id": "fd3b7250-3e7b-4ccc-80b0-d3a7354baef5", "parent_event_id": "a825635b-a34f-4d68-ae10-3176899b5329", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1737, "start_time": "2024-06-20T01:20:47.450Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_72", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_72", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_72\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"sculpture_name\":\"The Thinker\",\"material\":\"bronze\",\"meta\":\"Value\"},{\"name\":\"Auguste Rodin\",\"meta\":\"Value\"},{\"material\":\"marble\",\"size\":10,\"meta\":\"Value\",\"complexity\":\"Value2\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_72_Output2 | class Fn_parallel_multiple_function_72_Output0 | class Fn_parallel_multiple_function_72_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you first check the availability of a sculpture named 'The Thinker' made of bronze in the inventory using the 'sculpture_availability.check' function? Then, could you provide information about a sculptor named 'Auguste Rodin' using the 'sculptor_info.get' function? Lastly, could you calculate the estimated price to commission a sculpture made of marble, 10 feet in size, and with high complexity using the 'sculpture_price.calculate' function?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Check the availability of a specific sculpture in the inventory.\n    function_name: 'sculpture_availability.check' or null,\n    // The name of the sculpture.\n    sculpture_name: string,\n    // The material of the sculpture.\n    material: string,\n  } or {\n    // Get information about a specific sculptor.\n    function_name: 'sculptor_info.get' or null,\n    // The name of the sculptor.\n    name: string,\n  } or {\n    // Calculate the estimated price to commission a sculpture based on the material and size.\n    function_name: 'sculpture_price.calculate' or null,\n    // The material used for the sculpture.\n    material: string,\n    // The size of the sculpture in feet.\n    size: int,\n    // The complexity level of the sculpture. Default is 'medium'. (default: medium)\n    complexity: 'low' or 'medium' or 'high' or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"sculpture_availability.check\",\n    \"sculpture_name\": \"The Thinker\",\n    \"material\": \"bronze\"\n  },\n  {\n    \"function_name\": \"sculptor_info.get\",\n    \"name\": \"Auguste Rodin\"\n  },\n  {\n    \"function_name\": \"sculpture_price.calculate\",\n    \"material\": \"marble\",\n    \"size\": 10,\n    \"complexity\": \"high\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 411, "output_tokens": 108, "total_tokens": 519, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a825635b-a34f-4d68-ae10-3176899b5329", "event_id": "a825635b-a34f-4d68-ae10-3176899b5329", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 10257, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_72", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9c38825b-4e96-4b1a-a583-b76167cc0980", "event_id": "5fef5f4d-c6b5-4d06-b04e-0f47de7886ff", "parent_event_id": "9c38825b-4e96-4b1a-a583-b76167cc0980", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1817, "start_time": "2024-06-20T01:20:47.409Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_71", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_71", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_71\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"coordinates\":[37.7749,-122.4194],\"panelArea\":50000.0,\"meta\":\"Value\",\"month\":\"July\"},{\"coordinates\":[40.7128,-74.006],\"turbineCount\":100.0,\"meta\":\"Value\",\"month\":\"July\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_71_Output1 | class Fn_parallel_multiple_function_71_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me compare the potential energy output of two different renewable energy projects? The first project is a solar farm located at coordinates 37.7749 and -122.4194 with a total solar panel area of 50000 square feet. I would like to know the estimated energy output for the month of July. The second project is a wind farm located at coordinates 40.7128 and -74.0060 with a total of 100 wind turbines. I would also like to know the estimated energy output for this wind farm for the month of July.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Estimate the energy output of a wind farm given its location and turbine count for a particular month.\n    function_name: 'windFarm.potential' or null,\n    // The geographic coordinates of the location of the wind farm.\n    coordinates: float[],\n    // The total number of wind turbines at the location.\n    turbineCount: float,\n    // The month for which to calculate the potential energy output.\n    month: string or null,\n  } or {\n    // Estimate the energy output of a solar farm given its location and panel area for a particular month.\n    function_name: 'solarFarm.potential' or null,\n    // The geographic coordinates of the location of the solar farm.\n    coordinates: float[],\n    // The total solar panel area in square feet at the location.\n    panelArea: float,\n    // The month for which to calculate the potential energy output.\n    month: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"solarFarm.potential\",\n    \"coordinates\": [37.7749, -122.4194],\n    \"panelArea\": 50000,\n    \"month\": \"July\"\n  },\n  {\n    \"function_name\": \"windFarm.potential\",\n    \"coordinates\": [40.7128, -74.0060],\n    \"turbineCount\": 100,\n    \"month\": \"July\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 420, "output_tokens": 104, "total_tokens": 524, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9c38825b-4e96-4b1a-a583-b76167cc0980", "event_id": "9c38825b-4e96-4b1a-a583-b76167cc0980", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 10296, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_71", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "377b1e04-c1b6-4654-be62-7bdfb8ed30b0", "event_id": "c76da049-22ba-425d-81cd-1a22deb6ad1d", "parent_event_id": "377b1e04-c1b6-4654-be62-7bdfb8ed30b0", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2107, "start_time": "2024-06-20T01:20:47.243Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_68", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_68", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_68\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"a\":3.0,\"b\":4.0,\"c\":-7.0,\"meta\":null},{\"a\":2.0,\"b\":-5.0,\"c\":3.0,\"d\":-1.0,\"meta\":\"Value\"},{\"coefficients\":[6.0,-3.0,2.0,-1.0,1.0],\"meta\":\"Value\",\"degree\":4.0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_68_Output1 | class Fn_parallel_multiple_function_68_Output2 | class Fn_parallel_multiple_function_68_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\n  Based on the question, you will need to make one or more function/tool calls to achieve the purpose.\n  If none of the function can be used, point it out. If the given question lacks the parameters required by the function,\n  also point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with some math problems? First, I need to find the roots of a quadratic equation. The equation is 3x^2 + 4x - 7 = 0, where 3 is the coefficient of the second-degree term, 4 is the coefficient of the first-degree term, and -7 is the constant term. \n\nSecond, I have a cubic equation, 2x^3 - 5x^2 + 3x - 1 = 0. Here, 2 is the coefficient of the third-degree term, -5 is the coefficient of the second-degree term, 3 is the coefficient of the first-degree term, and -1 is the constant term. \n\nFinally, I have a polynomial equation of degree 4, which is 6x^4 - 3x^3 + 2x^2 - x + 1 = 0. The array of coefficients of the polynomial equation starting from the highest degree term is [6, -3, 2, -1, 1]. Can you calculate the roots for these equations?\"\n\n  Here is the function to invoke:\n\n\n  [\n  {\n    // Calculate the roots of a polynomial equation.\n    function_name: 'math.roots.polynomial' or null,\n    // Array of coefficients of the polynomial equation starting from highest degree term.\n    coefficients: float[],\n    // Degree of the polynomial equation. (default: 4)\n    degree: float or null,\n  } or {\n    // Calculate the roots of a cubic equation.\n    function_name: 'math.roots.cubic' or null,\n    // Coefficient of the third-degree term.\n    a: float,\n    // Coefficient of the second-degree term.\n    b: float,\n    // Coefficient of the first-degree term.\n    c: float,\n    // Constant term.\n    d: float,\n  } or {\n    // Calculate the roots of a quadratic equation.\n    function_name: 'math_roots.quadratic' or null,\n    // Coefficient of the second-degree term.\n    a: float,\n    // Coefficient of the first-degree term.\n    b: float,\n    // Constant term.\n    c: float,\n  }\n]\n\n\n  Function args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"math.roots.quadratic\",\n    \"a\": 3,\n    \"b\": 4,\n    \"c\": -7\n  },\n  {\n    \"function_name\": \"math.roots.cubic\",\n    \"a\": 2,\n    \"b\": -5,\n    \"c\": 3,\n    \"d\": -1\n  },\n  {\n    \"function_name\": \"math.roots.polynomial\",\n    \"coefficients\": [6, -3, 2, -1, 1],\n    \"degree\": 4\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 564, "output_tokens": 130, "total_tokens": 694, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "377b1e04-c1b6-4654-be62-7bdfb8ed30b0", "event_id": "377b1e04-c1b6-4654-be62-7bdfb8ed30b0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 10420, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_68", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8de329b2-9f6e-486b-ab45-d4a65ded78f1", "event_id": "6003e635-2c73-42e3-baa3-497d6dbefb1e", "parent_event_id": "8de329b2-9f6e-486b-ab45-d4a65ded78f1", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3103, "start_time": "2024-06-20T01:20:46.449Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_64", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_64", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_64\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"city\":\"New York City\",\"date\":\"2020-12-25\",\"meta\":\"Value\"},{\"city\":\"New York City\",\"date\":\"2021-01-01\",\"meta\":\"Value\"},{\"coordinates\":[40.7128,-74.006],\"date\":\"2021-01-15\",\"meta\":\"Value\"},{\"coordinates\":[40.7128,-74.006],\"meta\":\"Value\",\"days_ahead\":10}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_64_Output0 | class Fn_parallel_multiple_function_64_Output2 | class Fn_parallel_multiple_function_64_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me what the weather was like in New York City on 2020-12-25 and 2021-01-01, and also provide the historical weather data for the geographical coordinates (40.7128, -74.0060) on 2021-01-15? Additionally, can you forecast the weather for the same coordinates for the next 10 days?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get the weather forecast for a specific geographical coordinates.\n    function_name: 'weather.get_forecast_by_coordinates' or null,\n    // The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude.\n    coordinates: float[],\n    // Number of days to forecast from current date (optional, default is 7).\n    days_ahead: int or null,\n  } or {\n    // Retrieves the historical weather data based on coordinates and date.\n    function_name: 'weather.get_by_coordinates_date' or null,\n    // The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude.\n    coordinates: float[],\n    // The date for which to retrieve the historical weather data in the format YYYY-MM-DD.\n    date: string,\n  } or {\n    // Retrieves the historical weather data based on city and date.\n    function_name: 'weather.get_by_city_date' or null,\n    // The city for which to retrieve the weather.\n    city: string,\n    // The date for which to retrieve the historical weather data in the format YYYY-MM-DD.\n    date: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"weather.get_by_city_date\",\n    \"city\": \"New York City\",\n    \"date\": \"2020-12-25\"\n  },\n  {\n    \"function_name\": \"weather.get_by_city_date\",\n    \"city\": \"New York City\",\n    \"date\": \"2021-01-01\"\n  },\n  {\n    \"function_name\": \"weather.get_by_coordinates_date\",\n    \"coordinates\": [40.7128, -74.006],\n    \"date\": \"2021-01-15\"\n  },\n  {\n    \"function_name\": \"weather.get_forecast_by_coordinates\",\n    \"coordinates\": [40.7128, -74.006],\n    \"days_ahead\": 10\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 442, "output_tokens": 160, "total_tokens": 602, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8de329b2-9f6e-486b-ab45-d4a65ded78f1", "event_id": "8de329b2-9f6e-486b-ab45-d4a65ded78f1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 10623, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_64", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: days_ahead\\nExpected: any of [10]\\nActual@1: meta=<Fn_parallel_multiple_function_64_Output0_TypeName.Value: 'Value'> coordinates=[40.7128, -74.006] days_ahead=None\\nActual all: [Fn_parallel_multiple_function_64_Output2(meta=<Fn_parallel_multiple_function_64_Output2_TypeName.Value: 'Value'>, city='New York City', date='2020-12-25'), Fn_parallel_multiple_function_64_Output2(meta=<Fn_parallel_multiple_function_64_Output2_TypeName.Value: 'Value'>, city='New York City', date='2021-01-01'), Fn_parallel_multiple_function_64_Output0(meta=<Fn_parallel_multiple_function_64_Output0_TypeName.Value: 'Value'>, coordinates=[40.7128, -74.006], days_ahead=None), Fn_parallel_multiple_function_64_Output0(meta=<Fn_parallel_multiple_function_64_Output0_TypeName.Value: 'Value'>, coordinates=[40.7128, -74.006], days_ahead=10)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8f9b44f9-ac24-4c8d-9cd3-0d1830f54ab7", "event_id": "e213f90d-61a9-4bb4-ae59-a706920f5441", "parent_event_id": "8f9b44f9-ac24-4c8d-9cd3-0d1830f54ab7", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2450, "start_time": "2024-06-20T01:20:47.276Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_70", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_70", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_70\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_cost\":500000.0,\"depreciation_rate\":2.0,\"years\":5,\"meta\":\"Value\",\"monthly\":null},{\"initial_sum\":200000.0,\"years\":5,\"inflation_rate\":3.0,\"meta\":\"Value\"},{\"loan_amount\":300000.0,\"interest_rate\":4.0,\"loan_term\":10,\"meta\":\"Value\"},{\"initial_cost\":500000.0,\"depreciation_rate\":2.0,\"years\":5,\"meta\":\"Value\",\"monthly\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_70_Output1 | class Fn_parallel_multiple_function_70_Output2 | class Fn_parallel_multiple_function_70_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a real estate investor. You bought a property 5 years ago for $500,000. The annual depreciation rate for the property is 2%. Can you calculate the current depreciated value of the property? Now, consider you had a sum of $200,000 at the same time you bought the property. If the annual inflation rate has been 3% for the past 5 years, how much would that sum be worth today? Also, suppose you took out a loan of $300,000 with an annual interest rate of 4% to help finance the property purchase. If the loan term was 10 years, what would be your monthly repayment for the loan? Lastly, if you calculate the property depreciation monthly instead of annually, what would be the depreciated value of the property now?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculates the monthly repayment for a loan.\n    function_name: 'finance.loan_repayment' or null,\n    // The amount borrowed or loaned.\n    loan_amount: float,\n    // The annual interest rate.\n    interest_rate: float,\n    // The term of the loan in years.\n    loan_term: int,\n  } or {\n    // Adjusts a sum of money for inflation based on the consumer price index (CPI).\n    function_name: 'finance.inflation_adjustment' or null,\n    // The initial sum of money.\n    initial_sum: float,\n    // The number of years over which inflation is calculated.\n    years: int,\n    // The annual rate of inflation.\n    inflation_rate: float,\n  } or {\n    // Calculates the depreciated value of a property given its initial cost, depreciation rate, and the number of years.\n    function_name: 'finance.property_depreciation' or null,\n    // The initial cost of the property.\n    initial_cost: float,\n    // The annual depreciation rate in percentage.\n    depreciation_rate: float,\n    // The number of years for which to calculate the depreciation.\n    years: int,\n    // If set to true, it will calculate monthly depreciation instead of annually. (optional)\n    monthly: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"finance.property_depreciation\",\n    \"initial_cost\": 500000,\n    \"depreciation_rate\": 2,\n    \"years\": 5\n  },\n  {\n    \"function_name\": \"finance.inflation_adjustment\",\n    \"initial_sum\": 200000,\n    \"years\": 5,\n    \"inflation_rate\": 3\n  },\n  {\n    \"function_name\": \"finance.loan_repayment\",\n    \"loan_amount\": 300000,\n    \"interest_rate\": 4,\n    \"loan_term\": 10\n  },\n  {\n    \"function_name\": \"finance.property_depreciation\",\n    \"initial_cost\": 500000,\n    \"depreciation_rate\": 2,\n    \"years\": 5,\n    \"monthly\": true\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 548, "output_tokens": 178, "total_tokens": 726, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8f9b44f9-ac24-4c8d-9cd3-0d1830f54ab7", "event_id": "8f9b44f9-ac24-4c8d-9cd3-0d1830f54ab7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 10796, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_70", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: depreciation_rate\\nExpected: any of [0.02]\\nActual@1: meta=<Fn_parallel_multiple_function_70_Output2_TypeName.Value: 'Value'> initial_cost=500000.0 depreciation_rate=2.0 years=5 monthly=None\\nActual all: [Fn_parallel_multiple_function_70_Output2(meta=<Fn_parallel_multiple_function_70_Output2_TypeName.Value: 'Value'>, initial_cost=500000.0, depreciation_rate=2.0, years=5, monthly=None), Fn_parallel_multiple_function_70_Output1(meta=<Fn_parallel_multiple_function_70_Output1_TypeName.Value: 'Value'>, initial_sum=200000.0, years=5, inflation_rate=3.0), Fn_parallel_multiple_function_70_Output0(meta=<Fn_parallel_multiple_function_70_Output0_TypeName.Value: 'Value'>, loan_amount=300000.0, interest_rate=4.0, loan_term=10), Fn_parallel_multiple_function_70_Output2(meta=<Fn_parallel_multiple_function_70_Output2_TypeName.Value: 'Value'>, initial_cost=500000.0, depreciation_rate=2.0, years=5, monthly=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "71724b3a-79b7-49d2-8561-568ce40ffe24", "event_id": "3197b841-d780-4b68-b701-c5db3a1e203b", "parent_event_id": "71724b3a-79b7-49d2-8561-568ce40ffe24", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1516, "start_time": "2024-06-20T01:20:48.315Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_74", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_74", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_74\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"league\":\"NBA\",\"meta\":\"Value\"},{\"league\":\"NBA\",\"meta\":\"Value\"},{\"league\":\"NBA\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_74_Output2 | class Fn_parallel_multiple_function_74_Output1 | class Fn_parallel_multiple_function_74_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you provide me with the following information about the NBA league: the record for the most points scored by a single player in one game, including the player's name, points scored, and game date; the record for the most points scored by a single player in one season, including the player's name, points scored, and season; and the record for the most points scored by a player in his career, including the player's name, total points scored, and career span?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Returns the record for the most points scored by a single player in one game of NBA, including the player name, points scored, and game date.\n    function_name: 'sports_data.basketball.most_points_single_game' or null,\n    // The specific basketball league for which to fetch the record. In this case, 'NBA'.\n    league: string,\n  } or {\n    // Returns the record for the most points scored by a player in his career in NBA, including the player name, total points scored, and career span.\n    function_name: 'sports_data.basketball.most_points_career' or null,\n    // The specific basketball league for which to fetch the record. In this case, 'NBA'.\n    league: string,\n  } or {\n    // Returns the record for the most points scored by a single player in one season of NBA, including the player name, points scored, and season.\n    function_name: 'sports_data.basketball.most_points_single_season' or null,\n    // The specific basketball league for which to fetch the record. In this case, 'NBA'.\n    league: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"sports_data.basketball.most_points_single_game\",\n    \"league\": \"NBA\"\n  },\n  {\n    \"function_name\": \"sports_data.basketball.most_points_single_season\",\n    \"league\": \"NBA\"\n  },\n  {\n    \"function_name\": \"sports_data.basketball.most_points_career\",\n    \"league\": \"NBA\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 452, "output_tokens": 94, "total_tokens": 546, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "71724b3a-79b7-49d2-8561-568ce40ffe24", "event_id": "71724b3a-79b7-49d2-8561-568ce40ffe24", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 10902, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_74", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9217a474-febd-49ed-aa64-f57a23394138", "event_id": "0d8a4302-b245-4413-99ea-2f8e87d6847d", "parent_event_id": "9217a474-febd-49ed-aa64-f57a23394138", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1765, "start_time": "2024-06-20T01:20:48.267Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_73", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_73", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_73\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"frequency\":440.0,\"duration\":5,\"meta\":\"Value\",\"wave_type\":\"Value0\"},{\"frequency\":880.0,\"duration\":10,\"meta\":\"Value\",\"wave_type\":\"Value1\"},{\"wave_file\":\"test.wav\",\"meta\":\"Value\",\"volume\":0.8},{\"wave_file\":\"test2.wav\",\"meta\":\"Value\",\"volume\":0.6}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_73_Output0 | class Fn_parallel_multiple_function_73_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please generate a sinusoidal sound wave with a frequency of 440 Hz and a duration of 5 seconds, save it to a WAV file named 'test.wav', then generate a square wave sound with a frequency of 880 Hz and a duration of 10 seconds, save it to a file named 'test2.wav', and finally play the 'test.wav' file at a volume level of 0.8 and the 'test2.wav' file at a volume level of 0.6?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // This function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.\n    function_name: 'generate_sound_wave' or null,\n    // The frequency of the sound wave in Hz.\n    frequency: float,\n    // The duration of the sound in seconds.\n    duration: int,\n    // The waveform to be used to generate the sound. (default: sine)\n    wave_type: 'sine' or 'square' or 'sawtooth' or null,\n  } or {\n    // This function is for playing a sound wave file.\n    function_name: 'play_sound_wave' or null,\n    // The filename of the sound wave file to be played.\n    wave_file: string,\n    // The volume level at which the sound is to be played (1 is 100%). (default: 1)\n    volume: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"generate_sound_wave\",\n    \"frequency\": 440,\n    \"duration\": 5,\n    \"wave_type\": \"sine\"\n  },\n  {\n    \"function_name\": \"generate_sound_wave\",\n    \"frequency\": 880,\n    \"duration\": 10,\n    \"wave_type\": \"square\"\n  },\n  {\n    \"function_name\": \"play_sound_wave\",\n    \"wave_file\": \"test.wav\",\n    \"volume\": 0.8\n  },\n  {\n    \"function_name\": \"play_sound_wave\",\n    \"wave_file\": \"test2.wav\",\n    \"volume\": 0.6\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 409, "output_tokens": 140, "total_tokens": 549, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9217a474-febd-49ed-aa64-f57a23394138", "event_id": "9217a474-febd-49ed-aa64-f57a23394138", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 11102, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_73", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5616ba03-8acb-4fbc-beca-fbe32eb1a4af", "event_id": "281e7cf7-4d58-42bf-bdf6-c27077636baa", "parent_event_id": "5616ba03-8acb-4fbc-beca-fbe32eb1a4af", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1100, "start_time": "2024-06-20T01:20:49.554Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_81", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_81", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_81\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"function1\":\"4x+7\",\"function2\":\"2x+5\",\"meta\":\"Value\"},{\"function\":\"3x+9\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_81_Output1 | class Fn_parallel_multiple_function_81_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a math problem? I have two functions, the first one is '4x+7' and the second one is '2x+5'. I need to find the intersection points of these two functions. After that, I have another function '3x+9'. I need to find the zero points of this function. Can you solve these for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Locate the intersection points of two functions.\n    function_name: 'functions.intersect' or null,\n    // First function given as a string with x as the variable, e.g. 3x+2\n    function1: string,\n    // Second function given as a string with x as the variable, e.g. 2x+3\n    function2: string,\n  } or {\n    // Find the zero points of a function.\n    function_name: 'functions.zero' or null,\n    // Function given as a string with x as the variable, e.g. 3x+2\n    function: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"functions.intersect\",\n    \"function1\": \"4x+7\",\n    \"function2\": \"2x+5\"\n  },\n  {\n    \"function_name\": \"functions.zero\",\n    \"function\": \"3x+9\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 326, "output_tokens": 61, "total_tokens": 387, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5616ba03-8acb-4fbc-beca-fbe32eb1a4af", "event_id": "5616ba03-8acb-4fbc-beca-fbe32eb1a4af", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 11724, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_81", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "11351e2e-22fc-41ee-888a-d734db8e9fe3", "event_id": "d8b97d19-990a-450a-ac7b-e8f9457ffaf7", "parent_event_id": "11351e2e-22fc-41ee-888a-d734db8e9fe3", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1444, "start_time": "2024-06-20T01:20:49.227Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_79", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_79", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_79\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_location\":\"New York City\",\"end_location\":\"Metropolitan Museum of Art\",\"meta\":\"Value\",\"mode\":\"walk\"},{\"route\":\"Metropolitan Museum of Art to Central Park\",\"meta\":\"Value\",\"mode\":\"bike\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_79_Output0 | class Fn_parallel_multiple_function_79_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan a trip? I would like to first find the shortest path from my home in New York City to the Metropolitan Museum of Art by walking. Then, I want to estimate how long it will take to walk this route. After visiting the museum, I plan to bike to Central Park. Could you find the shortest path for this bike trip? And finally, I would like to know how long it would take to bike this route.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find the shortest path from one location to another by using a specific mode of transportation.\n    function_name: 'maps.shortest_path' or null,\n    // The name or coordinates of the start location.\n    start_location: string,\n    // The name or coordinates of the end location.\n    end_location: string,\n    // The mode of transportation (walk, bike, transit, drive). (default: walk)\n    mode: string or null,\n  } or {\n    // Estimates the time it will take to travel from one location to another by a specific mode of transportation.\n    function_name: 'maps.route_times' or null,\n    // The string representation of the route.  Format is location 1 to location 2\n    route: string,\n    // The mode of transportation (walk, bike, transit, drive). (default: walk)\n    mode: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"maps.shortest_path\",\n    \"start_location\": \"New York City\",\n    \"end_location\": \"Metropolitan Museum of Art\",\n    \"mode\": \"walk\"\n  },\n  {\n    \"function_name\": \"maps.route_times\",\n    \"route\": \"Metropolitan Museum of Art to Central Park\",\n    \"mode\": \"bike\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 390, "output_tokens": 81, "total_tokens": 471, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "11351e2e-22fc-41ee-888a-d734db8e9fe3", "event_id": "11351e2e-22fc-41ee-888a-d734db8e9fe3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 11741, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_79", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: route\\nExpected: any of ['New York City to Metropolitan Museum of Art']\\nActual@1: meta=<Fn_parallel_multiple_function_79_Output1_TypeName.Value: 'Value'> route='Metropolitan Museum of Art to Central Park' mode='bike'\\nActual all: [Fn_parallel_multiple_function_79_Output0(meta=<Fn_parallel_multiple_function_79_Output0_TypeName.Value: 'Value'>, start_location='New York City', end_location='Metropolitan Museum of Art', mode='walk'), Fn_parallel_multiple_function_79_Output1(meta=<Fn_parallel_multiple_function_79_Output1_TypeName.Value: 'Value'>, route='Metropolitan Museum of Art to Central Park', mode='bike')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7f929be3-c746-4ef3-9ab0-1b30267193f9", "event_id": "f8e20dac-741d-4f90-8c72-cdc5db50c045", "parent_event_id": "7f929be3-c746-4ef3-9ab0-1b30267193f9", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1236, "start_time": "2024-06-20T01:20:49.727Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_82", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_82", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_82\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"width\":30,\"length\":50,\"meta\":\"Value\"},{\"side\":5,\"meta\":\"Value\"},{\"radius\":3,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_82_Output0 | class Fn_parallel_multiple_function_82_Output1 | class Fn_parallel_multiple_function_82_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"In a park, there is a rectangular playground with a length of 50 meters and a width of 30 meters. Next to it, there is a square sandbox with a side length of 5 meters. A circular fountain with a radius of 3 meters is located at the center of the park. Can you calculate the area and perimeter of the playground, the area and perimeter of the sandbox, and the area and circumference of the fountain?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculates the area and perimeter of a rectangle given the width and length.\n    function_name: 'geometry_rectangle.calculate' or null,\n    // The width of the rectangle.\n    width: int,\n    // The length of the rectangle.\n    length: int,\n  } or {\n    // Calculates the area and circumference of a circle given the radius.\n    function_name: 'geometry_circle.calculate' or null,\n    // The radius of the circle.\n    radius: int,\n  } or {\n    // Calculates the area and perimeter of a square given the side length.\n    function_name: 'geometry_square.calculate' or null,\n    // The length of a side of the square.\n    side: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"geometry_rectangle.calculate\",\n    \"width\": 30,\n    \"length\": 50\n  },\n  {\n    \"function_name\": \"geometry_square.calculate\",\n    \"side\": 5\n  },\n  {\n    \"function_name\": \"geometry_circle.calculate\",\n    \"radius\": 3\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 349, "output_tokens": 76, "total_tokens": 425, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7f929be3-c746-4ef3-9ab0-1b30267193f9", "event_id": "7f929be3-c746-4ef3-9ab0-1b30267193f9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 12033, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_82", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9cb33e21-f458-4958-87cf-16aa24203818", "event_id": "40eb46fd-9a8c-4cb4-a281-dd09ee3159bd", "parent_event_id": "9cb33e21-f458-4958-87cf-16aa24203818", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1986, "start_time": "2024-06-20T01:20:49.351Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_80", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_80", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_80\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"a\":5,\"b\":6,\"c\":1,\"meta\":\"Value\"},{\"r\":255,\"g\":160,\"b\":0,\"meta\":\"Value\"},{\"input_string\":\"Hello, World!\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_80_Output1 | class Fn_parallel_multiple_function_80_Output2 | class Fn_parallel_multiple_function_80_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are working on a programming project and you encounter the following tasks. First, you need to solve a quadratic equation where the coefficient of x^2 is 5, the coefficient of x is 6, and the constant term is 1. After that, you need to convert an RGB color code to a hexadecimal color code. The RGB values are Red: 255, Green: 160, and Blue: 0. Finally, you have a string 'Hello, World!' that needs to be reversed. Can you perform these tasks using the appropriate functions?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Reverses a given string.\n    function_name: 'perform.string_reverse' or null,\n    // The string to be reversed.\n    input_string: string,\n  } or {\n    // Converts RGB values to Hexadecimal color code.\n    function_name: 'convert.rgb_to_hex' or null,\n    // The Red component.\n    r: int,\n    // The Green component.\n    g: int,\n    // The Blue component.\n    b: int,\n  } or {\n    // Solve a quadratic equation with given coefficients a, b, and c.\n    function_name: 'solve.quadratic_equation' or null,\n    // Coefficient of x^2.\n    a: int,\n    // Coefficient of x.\n    b: int,\n    // Constant term.\n    c: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"solve.quadratic_equation\",\n    \"a\": 5,\n    \"b\": 6,\n    \"c\": 1\n  },\n  {\n    \"function_name\": \"convert.rgb_to_hex\",\n    \"r\": 255,\n    \"g\": 160,\n    \"b\": 0\n  },\n  {\n    \"function_name\": \"perform.string_reverse\",\n    \"input_string\": \"Hello, World!\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 397, "output_tokens": 99, "total_tokens": 496, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9cb33e21-f458-4958-87cf-16aa24203818", "event_id": "9cb33e21-f458-4958-87cf-16aa24203818", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 12407, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_80", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a0f99582-0fab-477a-b0a2-618a3db0e369", "event_id": "24fe2fe0-2ba8-43cd-93ba-22dfe9ba15ce", "parent_event_id": "a0f99582-0fab-477a-b0a2-618a3db0e369", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2635, "start_time": "2024-06-20T01:20:48.817Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_77", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_77", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_77\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"game_title\":\"The Legend of Zelda: Breath of the Wild\",\"platform\":\"Nintendo Switch\",\"meta\":\"Value\",\"region\":\"United States\"},{\"game_title\":\"Super Mario Odyssey\",\"platform\":\"Nintendo Switch\",\"meta\":\"Value\",\"region\":\"United States\"},{\"platform\":\"PlayStation\",\"meta\":\"Value\",\"region\":\"United States\"},{\"game_title\":\"God of War\",\"platform\":\"PlayStation\",\"meta\":\"Value\",\"region\":\"United Kingdom\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_77_Output2 | class Fn_parallel_multiple_function_77_Output1 | class Fn_parallel_multiple_function_77_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please tell me the selling price of the video game 'The Legend of Zelda: Breath of the Wild' on the Nintendo Switch platform in the United States, and also let me know if the game 'Super Mario Odyssey' is currently on sale on the same platform and region? Additionally, could you fetch the currency used in the United States on the PlayStation platform, and also tell me the selling price of 'God of War' on the PlayStation platform in the United Kingdom?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fetches the currency used in a specific region in a gaming platform store.\n    function_name: 'video_games.store_currency' or null,\n    // The gaming platform e.g. PlayStation, Xbox, Nintendo Switch\n    platform: string,\n    // The region e.g. United States, United Kingdom, Japan. Default United States\n    region: string or null,\n  } or {\n    // Checks if a particular game is currently on sale in a specific gaming platform store and in a specific region.\n    function_name: 'video_games.on_sale' or null,\n    // The title of the video game\n    game_title: string,\n    // The gaming platform e.g. PlayStation, Xbox, Nintendo Switch\n    platform: string,\n    // The region e.g. United States, United Kingdom, Japan. Default United States\n    region: string or null,\n  } or {\n    // Fetches the selling price of a specified game in a particular gaming platform store and in a specific region.\n    function_name: 'video_games.store_price' or null,\n    // The title of the video game\n    game_title: string,\n    // The gaming platform e.g. PlayStation, Xbox, Nintendo Switch\n    platform: string,\n    // The region e.g. United States, United Kingdom, Japan. Default United States\n    region: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"video_games.store_price\",\n    \"game_title\": \"The Legend of Zelda: Breath of the Wild\",\n    \"platform\": \"Nintendo Switch\",\n    \"region\": \"United States\"\n  },\n  {\n    \"function_name\": \"video_games.on_sale\",\n    \"game_title\": \"Super Mario Odyssey\",\n    \"platform\": \"Nintendo Switch\",\n    \"region\": \"United States\"\n  },\n  {\n    \"function_name\": \"video_games.store_currency\",\n    \"platform\": \"PlayStation\",\n    \"region\": \"United States\"\n  },\n  {\n    \"function_name\": \"video_games.store_price\",\n    \"game_title\": \"God of War\",\n    \"platform\": \"PlayStation\",\n    \"region\": \"United Kingdom\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 490, "output_tokens": 162, "total_tokens": 652, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a0f99582-0fab-477a-b0a2-618a3db0e369", "event_id": "a0f99582-0fab-477a-b0a2-618a3db0e369", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 12522, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_77", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: platform\\nExpected: any of ['PlayStation']\\nActual@1: meta=<Fn_parallel_multiple_function_77_Output0_TypeName.Value: 'Value'> platform='Nintendo Switch' region='United States'\\nActual all: [Fn_parallel_multiple_function_77_Output0(meta=<Fn_parallel_multiple_function_77_Output0_TypeName.Value: 'Value'>, platform='Nintendo Switch', region='United States'), Fn_parallel_multiple_function_77_Output0(meta=<Fn_parallel_multiple_function_77_Output0_TypeName.Value: 'Value'>, platform='Nintendo Switch', region='United States'), Fn_parallel_multiple_function_77_Output0(meta=<Fn_parallel_multiple_function_77_Output0_TypeName.Value: 'Value'>, platform='PlayStation', region='United States'), Fn_parallel_multiple_function_77_Output0(meta=<Fn_parallel_multiple_function_77_Output0_TypeName.Value: 'Value'>, platform='PlayStation', region='United Kingdom')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "98317e53-c003-4b25-8189-f216e167f08c", "event_id": "f3b9fba0-b075-47ed-b39f-b8f595861838", "parent_event_id": "98317e53-c003-4b25-8189-f216e167f08c", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1094, "start_time": "2024-06-20T01:20:50.655Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_85", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_85", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_85\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[]", "override": null, "type": {"name": "single", "fields": {"value": "list<?>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a math teacher preparing for a class. You want to create a challenging problem for your students that involves multiple steps. You decide to create a problem that involves finding the least common multiple (LCM) and the greatest common divisor (GCD) of two numbers, and then calculating the square root of these results. You choose the numbers 36 and 48 for the LCM and GCD calculations. For the square root calculations, you want the results to be accurate to 3 decimal places. What are the square roots of the LCM and GCD of 36 and 48, accurate to 3 decimal places?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculates the square root of a number.\n    function_name: 'math.sqrt' or null,\n    // The number.\n    num: float,\n    // The number of decimal places in the result. (default: 2.0)\n    accuracy: float or null,\n  } or {\n    // Calculates the greatest common divisor of two numbers.\n    function_name: 'math.gcd' or null,\n    // The first number.\n    num1: int,\n    // The second number.\n    num2: int,\n  } or {\n    // Calculates the least common multiple of two numbers.\n    function_name: 'math.lcm' or null,\n    // The first number.\n    num1: int,\n    // The second number.\n    num2: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.sqrt',\n    num: 36, \n    accuracy: 3\n  },\n  {\n    function_name: 'math.sqrt',\n    num: 12, \n    accuracy: 3\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 404, "output_tokens": 52, "total_tokens": 456, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "98317e53-c003-4b25-8189-f216e167f08c", "event_id": "98317e53-c003-4b25-8189-f216e167f08c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 12820, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_85", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "932249a2-477f-4912-91b8-beca4b2c153b", "event_id": "b0f576c8-9a05-4488-8d6e-bfa55a82547f", "parent_event_id": "932249a2-477f-4912-91b8-beca4b2c153b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2597, "start_time": "2024-06-20T01:20:49.188Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_78", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_78", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_78\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"game\":\"Call of Duty\",\"platform\":\"Playstation\",\"meta\":\"Value\",\"mission\":null,\"trophy\":null},{\"game\":\"FIFA\",\"platform\":\"Xbox\",\"level\":3,\"meta\":\"Value\",\"player\":null},{\"game\":\"Assassin Creed\",\"meta\":\"Value\"},{\"game\":\"Fortnite\",\"platform\":\"PC\",\"meta\":\"Value\",\"mission\":null,\"trophy\":\"Master\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_78_Output1 | class Fn_parallel_multiple_function_78_Output0 | class Fn_parallel_multiple_function_78_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with some gaming information? First, I want to know about the rewards I can get from playing 'Call of Duty' on my 'Playstation'. Second, I am curious about the scores and rankings on level 3 of 'FIFA' on 'Xbox'. Third, I would like to know all the missions for 'Assassin Creed'. Lastly, I want to know the rewards for the 'Master' trophy level in 'Fortnite' on my 'PC'.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve scores and rankings based on player\u2019s performance in a certain game.\n    function_name: 'game_scores.get' or null,\n    // The name of the game.\n    game: string,\n    // The gaming platform e.g. Xbox, Playstation, PC\n    platform: string,\n    // The level of the game for which you want to retrieve the scores.\n    level: int,\n    // The name of the player for whom you want to retrieve scores.\n    player: string or null,\n  } or {\n    // List all missions for a certain game.\n    function_name: 'game_missions.list' or null,\n    // The name of the game.\n    game: string,\n  } or {\n    // Retrieve information about different types of rewards that you can receive when playing a certain game.\n    function_name: 'game_rewards.get' or null,\n    // The name of the game.\n    game: string,\n    // The gaming platform e.g. Xbox, Playstation, PC\n    platform: string,\n    // The mission for which you want to know the rewards.\n    mission: string or null,\n    // The trophy level for which you want to know the rewards.\n    trophy: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"game_rewards.get\",\n    \"game\": \"Call of Duty\",\n    \"platform\": \"Playstation\",\n    \"mission\": null,\n    \"trophy\": null\n  },\n  {\n    \"function_name\": \"game_scores.get\",\n    \"game\": \"FIFA\",\n    \"platform\": \"Xbox\",\n    \"level\": 3,\n    \"player\": null\n  },\n  {\n    \"function_name\": \"game_missions.list\",\n    \"game\": \"Assassin Creed\"\n  },\n  {\n    \"function_name\": \"game_rewards.get\",\n    \"game\": \"Fortnite\",\n    \"platform\": \"PC\",\n    \"mission\": null,\n    \"trophy\": \"Master\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 467, "output_tokens": 156, "total_tokens": 623, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "932249a2-477f-4912-91b8-beca4b2c153b", "event_id": "932249a2-477f-4912-91b8-beca4b2c153b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 12856, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_78", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: game\\nExpected: any of ['Assassin Creed']\\nActual@1: meta=<Fn_parallel_multiple_function_78_Output1_TypeName.Value: 'Value'> game='Call of Duty'\\nActual all: [Fn_parallel_multiple_function_78_Output1(meta=<Fn_parallel_multiple_function_78_Output1_TypeName.Value: 'Value'>, game='Call of Duty'), Fn_parallel_multiple_function_78_Output0(meta=<Fn_parallel_multiple_function_78_Output0_TypeName.Value: 'Value'>, game='FIFA', platform='Xbox', level=3, player=None), Fn_parallel_multiple_function_78_Output1(meta=<Fn_parallel_multiple_function_78_Output1_TypeName.Value: 'Value'>, game='Assassin Creed'), Fn_parallel_multiple_function_78_Output1(meta=<Fn_parallel_multiple_function_78_Output1_TypeName.Value: 'Value'>, game='Fortnite')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7251b9e5-65e5-425d-a68a-4b06f39a6551", "event_id": "f800feda-8e43-4169-94e1-0b66d819b9c5", "parent_event_id": "7251b9e5-65e5-425d-a68a-4b06f39a6551", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2530, "start_time": "2024-06-20T01:20:49.833Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_83", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_83", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_83\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"radius\":10.0,\"height\":30.0,\"meta\":\"Value\",\"round_off\":2},{\"radius\":10.0,\"height\":30.0,\"meta\":\"Value\",\"round_off\":2},{\"radius\":10.0,\"height\":30.0,\"density\":5.2,\"meta\":\"Value\"},{\"radius\":10.0,\"height\":30.0,\"density\":7.8,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_83_Output1 | class Fn_parallel_multiple_function_83_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a sculptor working on a large project. You have two different types of materials available to you, each with a different density. The first material has a density of 5.2 g/cm^3 and the second material has a density of 7.8 g/cm^3. You are planning to create two identical cones, each with a base radius of 10 cm and a height of 30 cm. The first cone will be made from the first material and the second cone will be made from the second material. Can you calculate the volume of each cone, rounding off to 2 decimal places, and then calculate the mass of each cone using their respective densities?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the volume of a cone given the radius and height.\n    function_name: 'geometry.calculate_cone_volume' or null,\n    // Radius of the cone base.\n    radius: float,\n    // Height of the cone.\n    height: float,\n    // Number of decimal places to round off the answer. (default: 2)\n    round_off: int or null,\n  } or {\n    // Calculate the mass of a cone given the radius, height, and density.\n    function_name: 'physics.calculate_cone_mass' or null,\n    // Radius of the cone base.\n    radius: float,\n    // Height of the cone.\n    height: float,\n    // Density of the material the cone is made of.\n    density: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"geometry.calculate_cone_volume\",\n    \"radius\": 10,\n    \"height\": 30,\n    \"round_off\": 2\n  },\n  {\n    \"function_name\": \"geometry.calculate_cone_volume\",\n    \"radius\": 10,\n    \"height\": 30,\n    \"round_off\": 2\n  },\n  {\n    \"function_name\": \"physics.calculate_cone_mass\",\n    \"radius\": 10,\n    \"height\": 30,\n    \"density\": 5.2\n  },\n  {\n    \"function_name\": \"physics.calculate_cone_mass\",\n    \"radius\": 10,\n    \"height\": 30,\n    \"density\": 7.8\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 411, "output_tokens": 160, "total_tokens": 571, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7251b9e5-65e5-425d-a68a-4b06f39a6551", "event_id": "7251b9e5-65e5-425d-a68a-4b06f39a6551", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 13434, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_83", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fc71bff1-35be-4063-a816-99d2f2eea614", "event_id": "ae856536-0830-40e0-a635-fa62f4ab5bf6", "parent_event_id": "fc71bff1-35be-4063-a816-99d2f2eea614", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2385, "start_time": "2024-06-20T01:20:50.033Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_84", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_84", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_84\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"func\":\"3*x^2 - 2*x + 1\",\"a\":1,\"b\":4,\"meta\":\"Value\"},{\"func\":\"2*x^3 - 3*x^2 + 4*x - 5\",\"x_value\":2,\"meta\":\"Value\",\"order\":1},{\"func\":\"2*x^3 - 3*x^2 + 4*x - 5\",\"x_value\":2,\"meta\":\"Value\",\"order\":2}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_84_Output1 | class Fn_parallel_multiple_function_84_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with my calculus homework? I have two problems that I'm stuck on. The first one is to calculate the definite integral of the function 3x^2 - 2x + 1 from x = 1 to x = 4. The second problem is to calculate the derivative of the function 2x^3 - 3x^2 + 4x - 5 at x = 2. And for extra credit, I need to find the second order derivative of the same function at x = 2. Can you solve these for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the definite integral of a single-variable function.\n    function_name: 'calculate_integral' or null,\n    // The function to be integrated.\n    func: string,\n    // The lower bound of the integration.\n    a: int,\n    // The upper bound of the integration.\n    b: int,\n  } or {\n    // Calculate the derivative of a single-variable function.\n    function_name: 'calculate_derivative' or null,\n    // The function to be differentiated.\n    func: string,\n    // The x-value at which the derivative should be calculated.\n    x_value: int,\n    // The order of the derivative (optional). Default is 1st order. (default: 1)\n    order: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"calculate_integral\",\n    \"func\": \"3*x^2 - 2*x + 1\",\n    \"a\": 1,\n    \"b\": 4\n  },\n  {\n    \"function_name\": \"calculate_derivative\",\n    \"func\": \"2*x^3 - 3*x^2 + 4*x - 5\",\n    \"x_value\": 2,\n    \"order\": 1\n  },\n  {\n    \"function_name\": \"calculate_derivative\",\n    \"func\": \"2*x^3 - 3*x^2 + 4*x - 5\",\n    \"x_value\": 2,\n    \"order\": 2\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 387, "output_tokens": 152, "total_tokens": 539, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fc71bff1-35be-4063-a816-99d2f2eea614", "event_id": "fc71bff1-35be-4063-a816-99d2f2eea614", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 13488, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_84", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: order\\nExpected: any of ['', None, []]\\nActual@1: meta=<Fn_parallel_multiple_function_84_Output1_TypeName.Value: 'Value'> func='2*x^3 - 3*x^2 + 4*x - 5' x_value=2 order=1\\nActual all: [Fn_parallel_multiple_function_84_Output0(meta=<Fn_parallel_multiple_function_84_Output0_TypeName.Value: 'Value'>, func='3*x^2 - 2*x + 1', a=1, b=4), Fn_parallel_multiple_function_84_Output1(meta=<Fn_parallel_multiple_function_84_Output1_TypeName.Value: 'Value'>, func='2*x^3 - 3*x^2 + 4*x - 5', x_value=2, order=1), Fn_parallel_multiple_function_84_Output1(meta=<Fn_parallel_multiple_function_84_Output1_TypeName.Value: 'Value'>, func='2*x^3 - 3*x^2 + 4*x - 5', x_value=2, order=2)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "51ccda3f-d66b-4f83-b022-d2cd008d5fa4", "event_id": "f642431e-5107-4764-b0fd-f470389258a5", "parent_event_id": "51ccda3f-d66b-4f83-b022-d2cd008d5fa4", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1734, "start_time": "2024-06-20T01:20:50.964Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_87", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_87", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_87\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"distance\":120.0,\"time\":10.0,\"meta\":\"Value\",\"initial_speed\":0.0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_87_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"A car starts from rest and travels a distance of 120 meters in 10 seconds. What is the speed of the car at the end of this time period? After reaching this speed, the car continues to accelerate for another 5 seconds from 12 m/s until it reaches a final speed doubling the initial speed. The final speed is twice the speed calculated in the first part. What is the acceleration of the car in this second phase?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculates the acceleration of an object under given conditions.\n    function_name: 'kinematics.calculate_acceleration' or null,\n    // The initial speed of the object.\n    initial_speed: float,\n    // The final speed of the object.\n    final_speed: float,\n    // The time in seconds it took the object to reach the final speed.\n    time: float,\n    // The distance in meters the object has traveled.\n    distance: float or null,\n  } or {\n    // Calculates the speed of an object that starts from rest under a constant acceleration over a specified distance.\n    function_name: 'kinematics.calculate_speed_from_rest' or null,\n    // The distance in meters the object has traveled.\n    distance: float,\n    // The time in seconds it took the object to travel.\n    time: float,\n    // The initial speed of the object.\n    initial_speed: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"kinematics.calculate_speed_from_rest\",\n    \"distance\": 120,\n    \"time\": 10,\n    \"initial_speed\": 0\n  },\n  {\n    \"function_name\": \"kinematics.calculate_acceleration\",\n    \"initial_speed\": 12,\n    \"final_speed\": 2 * speed_calculated_first_part,\n    \"time\": 5\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 391, "output_tokens": 86, "total_tokens": 477, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "51ccda3f-d66b-4f83-b022-d2cd008d5fa4", "event_id": "51ccda3f-d66b-4f83-b022-d2cd008d5fa4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 13769, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_87", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "515d2606-3868-431a-ac79-e8739c1e3a97", "event_id": "10bde379-c2d4-4c65-9862-b78374a83ab3", "parent_event_id": "515d2606-3868-431a-ac79-e8739c1e3a97", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4102, "start_time": "2024-06-20T01:20:48.677Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_76", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_76", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_76\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start\":\"New York\",\"destination\":\"Boston\",\"meta\":\"Value\",\"method\":\"Value0\"},{\"name\":\"Knight Gambit\",\"city\":\"Boston\",\"meta\":\"Value\",\"event\":null},{\"start\":\"Boston\",\"destination\":\"Philadelphia\",\"meta\":\"Value\",\"method\":\"Value0\"},{\"name\":\"Rook Corner\",\"city\":\"Philadelphia\",\"meta\":\"Value\",\"event\":null},{\"start\":\"Philadelphia\",\"destination\":\"New York\",\"meta\":\"Value\",\"method\":\"Value1\"},{\"name\":\"Knight Gambit\",\"city\":\"Boston\",\"meta\":\"Value\",\"event\":null},{\"name\":\"Rook Corner\",\"city\":\"Philadelphia\",\"meta\":\"Value\",\"event\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_76_Output0 | class Fn_parallel_multiple_function_76_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan my day? I want to start from my home in New York and go to a chess club named 'Knight Gambit' located in Boston. I want to take the fastest route. After that, I want to go to another chess club named 'Rook Corner' in Philadelphia, again taking the fastest route. Finally, I want to return home, but this time I want to take the shortest route. Can you also provide me with the details of the events hosted by both chess clubs?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Provides details about a chess club, including location.\n    function_name: 'chess_club_details.find' or null,\n    // The name of the chess club.\n    name: string,\n    // The city in which the chess club is located.\n    city: string,\n    // The event hosted by the club. (default: null)\n    event: string or null,\n  } or {\n    // Determines the best route between two points.\n    function_name: 'route_planner.calculate_route' or null,\n    // The starting point of the journey.\n    start: string,\n    // The destination of the journey.\n    destination: string,\n    // The method to use when calculating the route (default is 'fastest'). (default: fastest)\n    method: 'fastest' or 'shortest' or 'balanced' or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'route_planner.calculate_route',\n    start: 'New York',\n    destination: 'Boston',\n    method: 'fastest'\n  },\n  {\n    function_name: 'chess_club_details.find',\n    name: 'Knight Gambit',\n    city: 'Boston'\n  },\n  {\n    function_name: 'route_planner.calculate_route',\n    start: 'Boston',\n    destination: 'Philadelphia',\n    method: 'fastest'\n  },\n  {\n    function_name: 'chess_club_details.find',\n    name: 'Rook Corner',\n    city: 'Philadelphia'\n  },\n  {\n    function_name: 'route_planner.calculate_route',\n    start: 'Philadelphia',\n    destination: 'New York',\n    method: 'shortest'\n  },\n  {\n    function_name: 'chess_club_details.find',\n    name: 'Knight Gambit',\n    city: 'Boston'\n  },\n  {\n    function_name: 'chess_club_details.find',\n    name: 'Rook Corner',\n    city: 'Philadelphia'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 395, "output_tokens": 226, "total_tokens": 621, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "515d2606-3868-431a-ac79-e8739c1e3a97", "event_id": "515d2606-3868-431a-ac79-e8739c1e3a97", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 13850, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_76", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'KeyError'>: 'event'\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1836da68-4d0d-4068-886b-bc539ba4e139", "event_id": "764a279e-b58c-46d6-a478-290642520e7b", "parent_event_id": "1836da68-4d0d-4068-886b-bc539ba4e139", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2145, "start_time": "2024-06-20T01:20:50.672Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_86", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_86", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_86\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"num1\":56,\"num2\":98,\"meta\":\"Value\",\"algorithm\":\"euclidean\"},{\"num1\":81,\"num2\":27,\"meta\":\"Value\",\"algorithm\":\"binary\"},{\"num1\":15,\"num2\":25,\"meta\":\"Value\",\"method\":\"standard\"},{\"num1\":21,\"num2\":14,\"meta\":\"Value\",\"method\":\"reduced\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_86_Output0 | class Fn_parallel_multiple_function_86_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with a couple of calculations? First, I need to find the greatest common divisor of 56 and 98 using the Euclidean algorithm. After that, I would like to know the greatest common divisor of 81 and 27, but this time using the binary algorithm. Once we have those, I need to calculate the least common multiple of 15 and 25 using the standard method. And finally, could you find the least common multiple of 21 and 14 using the reduced method?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the least common multiple (lcm) between two integers.\n    function_name: 'calculate_lcm' or null,\n    // First number to calculate lcm for.\n    num1: int,\n    // Second number to calculate lcm for.\n    num2: int,\n    // The specific method to use in the calculation. Supported values: 'standard', 'reduced' (default: standard)\n    method: string or null,\n  } or {\n    // Calculate the greatest common divisor (gcd) between two integers.\n    function_name: 'calculate_gcd' or null,\n    // First number to calculate gcd for.\n    num1: int,\n    // Second number to calculate gcd for.\n    num2: int,\n    // The specific algorithm to use in the calculation. Supported values: 'euclidean', 'binary' (default: euclidean)\n    algorithm: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n    {\n        \"function_name\": \"calculate_gcd\",\n        \"num1\": 56,\n        \"num2\": 98,\n        \"algorithm\": \"euclidean\"\n    },\n    {\n        \"function_name\": \"calculate_gcd\",\n        \"num1\": 81,\n        \"num2\": 27,\n        \"algorithm\": \"binary\"\n    },\n    {\n        \"function_name\": \"calculate_lcm\",\n        \"num1\": 15,\n        \"num2\": 25,\n        \"method\": \"standard\"\n    },\n    {\n        \"function_name\": \"calculate_lcm\",\n        \"num1\": 21,\n        \"num2\": 14,\n        \"method\": \"reduced\"\n    }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 405, "output_tokens": 156, "total_tokens": 561, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1836da68-4d0d-4068-886b-bc539ba4e139", "event_id": "1836da68-4d0d-4068-886b-bc539ba4e139", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 13888, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_86", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: num1\\nExpected: any of [15]\\nActual@1: meta=<Fn_parallel_multiple_function_86_Output0_TypeName.Value: 'Value'> num1=56 num2=98 method=None\\nActual all: [Fn_parallel_multiple_function_86_Output0(meta=<Fn_parallel_multiple_function_86_Output0_TypeName.Value: 'Value'>, num1=56, num2=98, method=None), Fn_parallel_multiple_function_86_Output0(meta=<Fn_parallel_multiple_function_86_Output0_TypeName.Value: 'Value'>, num1=81, num2=27, method=None), Fn_parallel_multiple_function_86_Output0(meta=<Fn_parallel_multiple_function_86_Output0_TypeName.Value: 'Value'>, num1=15, num2=25, method='standard'), Fn_parallel_multiple_function_86_Output0(meta=<Fn_parallel_multiple_function_86_Output0_TypeName.Value: 'Value'>, num1=21, num2=14, method='reduced')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6f69d663-a252-4bdd-96a2-eb2b4866aa7f", "event_id": "cd886f2f-16e7-41d5-ba8d-f3ff67b67fac", "parent_event_id": "6f69d663-a252-4bdd-96a2-eb2b4866aa7f", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1515, "start_time": "2024-06-20T01:20:51.338Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_88", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_88", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_88\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_velocity\":0.0,\"time\":5.0,\"meta\":\"Value\",\"acceleration\":3.0},{\"frequency\":50.0,\"wavelength\":3.0,\"meta\":\"Value\"},{\"initial_velocity\":0.0,\"time\":12.0,\"meta\":\"Value\",\"acceleration\":3.0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_88_Output2 | class Fn_parallel_multiple_function_88_Output0 | class Fn_parallel_multiple_function_88_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"A car is initially at rest and then starts moving with a constant acceleration of 3 m/s^2. After 5 seconds, what is its final velocity? Now, imagine a wave with a frequency of 50 Hz and a wavelength of 3 meters. What is the velocity of this wave? Going back to the car, if it continues to move with the same acceleration for another 7 seconds, what is the total distance it has traveled from the start?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find the distance traveled by an object moving under constant acceleration.\n    function_name: 'kinematics.distance' or null,\n    // The initial velocity of the object in m/s.\n    initial_velocity: float,\n    // The time in seconds the object has been moving.\n    time: float,\n    // The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)\n    acceleration: float or null,\n  } or {\n    // Find the final velocity of an object moving under constant acceleration.\n    function_name: 'kinematics.final_velocity' or null,\n    // The initial velocity of the object in m/s.\n    initial_velocity: float,\n    // The time in seconds the object has been moving.\n    time: float,\n    // The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)\n    acceleration: float or null,\n  } or {\n    // Calculate the velocity of a wave based on its frequency and wavelength.\n    function_name: 'physics.wave_velocity' or null,\n    // The frequency of the wave in Hz.\n    frequency: float,\n    // The wavelength of the wave in m.\n    wavelength: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        \"function_name\": \"kinematics.final_velocity\",\n        \"initial_velocity\": 0,\n        \"time\": 5,\n        \"acceleration\": 3\n    },\n    {\n        \"function_name\": \"physics.wave_velocity\",\n        \"frequency\": 50,\n        \"wavelength\": 3\n    },\n    {\n        \"function_name\": \"kinematics.distance\",\n        \"initial_velocity\": 0,\n        \"time\": 12,\n        \"acceleration\": 3\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 463, "output_tokens": 107, "total_tokens": 570, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6f69d663-a252-4bdd-96a2-eb2b4866aa7f", "event_id": "6f69d663-a252-4bdd-96a2-eb2b4866aa7f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 13924, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_88", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: time\\nExpected: any of [12.0]\\nActual@1: meta=<Fn_parallel_multiple_function_88_Output0_TypeName.Value: 'Value'> initial_velocity=0.0 time=5.0 acceleration=3.0\\nActual all: [Fn_parallel_multiple_function_88_Output0(meta=<Fn_parallel_multiple_function_88_Output0_TypeName.Value: 'Value'>, initial_velocity=0.0, time=5.0, acceleration=3.0), Fn_parallel_multiple_function_88_Output2(meta=<Fn_parallel_multiple_function_88_Output2_TypeName.Value: 'Value'>, frequency=50.0, wavelength=3.0), Fn_parallel_multiple_function_88_Output0(meta=<Fn_parallel_multiple_function_88_Output0_TypeName.Value: 'Value'>, initial_velocity=0.0, time=12.0, acceleration=3.0)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "73f948f2-2bf7-4866-a8c7-a192dfb21064", "event_id": "70b4d5a8-5ec6-493e-a7ce-229e676ffc8b", "parent_event_id": "73f948f2-2bf7-4866-a8c7-a192dfb21064", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1115, "start_time": "2024-06-20T01:20:51.787Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_91", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_91", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_91\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"quantity1\":5.0,\"temperature1\":300.0,\"quantity2\":3.0,\"temperature2\":500.0,\"meta\":\"Value\"},{\"quantity\":4.0,\"molar_mass\":16.0,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_91_Output0 | class Fn_parallel_multiple_function_91_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\n  Based on the question, you will need to make one or more function/tool calls to achieve the purpose.\n  If none of the function can be used, point it out. If the given question lacks the parameters required by the function,\n  also point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a chemist working in a lab. You have two samples of the same gas. The first sample has a quantity of 5 moles and is at a temperature of 300 Kelvin. The second sample has a quantity of 3 moles and is at a temperature of 500 Kelvin. You decide to mix these two samples together. What would be the final temperature of the mixture? \n\nLater, you obtain another gas sample with a quantity of 4 moles. You know that the molar mass of this gas is 16 g/mol. Can you calculate the mass of this gas sample?\"\n\n  Here is the function to invoke:\n\n\n  [\n  {\n    // Calculate the final temperature when different quantities of the same gas at different temperatures are mixed.\n    function_name: 'calculate_final_temperature' or null,\n    // The quantity of the first sample of gas.\n    quantity1: float,\n    // The temperature of the first sample of gas.\n    temperature1: float,\n    // The quantity of the second sample of gas.\n    quantity2: float,\n    // The temperature of the second sample of gas.\n    temperature2: float,\n  } or {\n    // Calculate the mass of a gas given its quantity and molar mass.\n    function_name: 'calculate_mass' or null,\n    // The quantity of the gas.\n    quantity: float,\n    // The molar mass of the gas.\n    molar_mass: float,\n  }\n]\n\n\n  Function args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"calculate_final_temperature\",\n    \"quantity1\": 5,\n    \"temperature1\": 300,\n    \"quantity2\": 3,\n    \"temperature2\": 500\n  },\n  {\n    \"function_name\": \"calculate_mass\",\n    \"quantity\": 4,\n    \"molar_mass\": 16\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 406, "output_tokens": 81, "total_tokens": 487, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "73f948f2-2bf7-4866-a8c7-a192dfb21064", "event_id": "73f948f2-2bf7-4866-a8c7-a192dfb21064", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 13972, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_91", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0d365317-896d-4c89-9233-929d927f8f16", "event_id": "2f190e63-97e6-49ba-8bac-14eb45d2d878", "parent_event_id": "0d365317-896d-4c89-9233-929d927f8f16", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4383, "start_time": "2024-06-20T01:20:48.677Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_75", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_75", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_75\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"player_name\":\"LeBron James\",\"stats_fields\":[\"points\",\"assists\",\"rebounds\",\"minutes\"],\"meta\":\"Value\"},{\"team_name\":\"Los Angeles Lakers\",\"stats_fields\":[\"total points\",\"total assists\",\"total rebounds\",\"win rate\"],\"meta\":\"Value\"},{\"team1\":\"Los Angeles Lakers\",\"team2\":\"Golden State Warriors\",\"date\":\"2021-01-18\",\"stats_fields\":[\"total points\",\"total assists\",\"total rebounds\",\"turnovers\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_75_Output0 | class Fn_parallel_multiple_function_75_Output1 | class Fn_parallel_multiple_function_75_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you provide me with the current statistics for the basketball player LeBron James, specifically his points, assists, rebounds, and minutes played? Then, can you also provide the current statistics for the Los Angeles Lakers, including their total points, total assists, total rebounds, and win rate? After that, could you give me the detailed statistical data from the game between the Los Angeles Lakers and the Golden State Warriors that occurred on January 18, 2021, including total points, total assists, total rebounds, and turnovers?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get current statistics for a specified basketball player\n    function_name: 'basketball.player_stats.get' or null,\n    // The name of the player.\n    player_name: string,\n    // List of statistical categories to be fetched, including points, assists, rebounds, minutes.\n    stats_fields: string[],\n  } or {\n    // Get current statistics for a specific basketball team\n    function_name: 'basketball.team_stats.get' or null,\n    // The name of the team.\n    team_name: string,\n    // List of statistical categories to be fetched, including total points, total assists, total rebounds, win rate.\n    stats_fields: string[],\n  } or {\n    // Get the detailed statistical data from a specific basketball game\n    function_name: 'basketball.game_stats.get' or null,\n    // One of the competing teams in the game.\n    team1: string,\n    // One of the competing teams in the game.\n    team2: string,\n    // The date when the game occurred.\n    date: string,\n    // List of statistical categories to be fetched, including total points, total assists, total rebounds, turnovers.\n    stats_fields: string[],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"basketball.player_stats.get\",\n    \"player_name\": \"LeBron James\",\n    \"stats_fields\": [\"points\", \"assists\", \"rebounds\", \"minutes\"]\n  },\n  {\n    \"function_name\": \"basketball.team_stats.get\",\n    \"team_name\": \"Los Angeles Lakers\",\n    \"stats_fields\": [\"total points\", \"total assists\", \"total rebounds\", \"win rate\"]\n  },\n  {\n    \"function_name\": \"basketball.game_stats.get\",\n    \"team1\": \"Los Angeles Lakers\",\n    \"team2\": \"Golden State Warriors\",\n    \"date\": \"2021-01-18\",\n    \"stats_fields\": [\"total points\", \"total assists\", \"total rebounds\", \"turnovers\"]\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 464, "output_tokens": 168, "total_tokens": 632, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0d365317-896d-4c89-9233-929d927f8f16", "event_id": "0d365317-896d-4c89-9233-929d927f8f16", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 14130, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_75", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "49ebfb72-f52c-42bd-b04a-ab95b55c65ec", "event_id": "1809ca17-4509-4f18-b013-20caa7ffa103", "parent_event_id": "49ebfb72-f52c-42bd-b04a-ab95b55c65ec", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1659, "start_time": "2024-06-20T01:20:51.453Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_89", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_89", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_89\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"book_name\":\"To Kill a Mockingbird\",\"city\":\"New York\",\"meta\":\"Value\",\"availability\":true,\"genre\":\"Fiction\"},{\"book_id\":\"123ABC\",\"branch_id\":\"XYZ789\",\"meta\":\"Value\",\"return_date\":\"2022-12-31\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_89_Output1 | class Fn_parallel_multiple_function_89_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me find a book in the library? I am looking for a book named 'To Kill a Mockingbird' in the city of New York. I would like to know if it's available. Also, I am interested in the genre of 'Fiction'. Once you find it, can you reserve it for me? The book id is '123ABC' and the branch id is 'XYZ789'. I plan to return it by '2022-12-31'.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Searches for a book in the library within the specified city.\n    function_name: 'library.search_book' or null,\n    // The name of the book to search for.\n    book_name: string,\n    // The city to search within.\n    city: string,\n    // If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default false\n    availability: bool or null,\n    // The genre of the book to filter search (optional).\n    genre: string or null,\n  } or {\n    // Reserves a book in the library if available.\n    function_name: 'library.reserve_book' or null,\n    // The id of the book to reserve.\n    book_id: string,\n    // The id of the library branch to reserve from.\n    branch_id: string,\n    // The date the book is to be returned (optional).\n    return_date: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"library.search_book\",\n    \"book_name\": \"To Kill a Mockingbird\",\n    \"city\": \"New York\",\n    \"availability\": true,\n    \"genre\": \"Fiction\"\n  },\n  {\n    \"function_name\": \"library.reserve_book\",\n    \"book_id\": \"123ABC\",\n    \"branch_id\": \"XYZ789\",\n    \"return_date\": \"2022-12-31\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 408, "output_tokens": 100, "total_tokens": 508, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "49ebfb72-f52c-42bd-b04a-ab95b55c65ec", "event_id": "49ebfb72-f52c-42bd-b04a-ab95b55c65ec", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 14183, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_89", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0deb79e0-ba09-42dc-8118-51447d5af95a", "event_id": "5b95964c-b2c8-419b-ae53-78c79aad6b3c", "parent_event_id": "0deb79e0-ba09-42dc-8118-51447d5af95a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1182, "start_time": "2024-06-20T01:20:52.365Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_92", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_92", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_92\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"mols\":5.0,\"substance\":\"C6H12O6\",\"meta\":\"Value\",\"joules_per_mol\":2800.0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_92_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\n  Based on the question, you will need to make one or more function/tool calls to achieve the purpose.\n  If none of the function can be used, point it out. If the given question lacks the parameters required by the function,\n  also point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a scientist studying the energy production of a certain type of bacteria. You have a sample of this bacteria that has consumed 5 moles of glucose (C6H12O6) and you know that the energy produced from glucose is typically 2800 kJ/mol. You also know that the bacteria's conversion efficiency, or the percentage of energy from glucose that is converted into biomass, is 10%. \n\nFirst, calculate the total energy produced by the bacteria from consuming the glucose. \n\nSecond, calculate the amount of biomass produced by the bacteria given the energy produced and the conversion efficiency. \n\nNow, imagine you are using this bacteria in a bioreactor to power a small machine. The machine needs to move a distance of 2 meters and you want to calculate the work done by the machine. \n\nThird, calculate the work done by the machine given the total energy produced by the bacteria and the distance the machine needs to move.\"\n\n  Here is the function to invoke:\n\n\n  [\n  {\n    // Calculate the biomass from the energy given the energy conversion efficiency.\n    function_name: 'biological.calc_biomass' or null,\n    // The total energy produced.\n    energy: float,\n    // The conversion efficiency, default value is 10%. (default: 0.1)\n    efficiency: float or null,\n  } or {\n    // Calculate energy from amount of substance based on its molecular composition.\n    function_name: 'biological.calc_energy' or null,\n    // Amount of substance in moles.\n    mols: float,\n    // The chemical formula of the substance.\n    substance: string,\n    // The energy produced or required for the reaction, default value for glucose is 2800 kJ/mol (default: 2800.0)\n    joules_per_mol: float or null,\n  } or {\n    // Calculate the work from energy.\n    function_name: 'physical.calc_work' or null,\n    // The total energy produced.\n    energy: float,\n    // The distance over which the work is done.\n    distance: float,\n  }\n]\n\n\n  Function args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"biological.calc_energy\",\n  \"mols\": 5,\n  \"substance\": \"C6H12O6\",\n  \"joules_per_mol\": 2800\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 536, "output_tokens": 51, "total_tokens": 587, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0deb79e0-ba09-42dc-8118-51447d5af95a", "event_id": "0deb79e0-ba09-42dc-8118-51447d5af95a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 14617, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_92", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fe8cec8b-9030-4877-b6a7-56d175b66811", "event_id": "ecf4bd8f-67ed-49c6-a0b7-8072e4cd6228", "parent_event_id": "fe8cec8b-9030-4877-b6a7-56d175b66811", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 714, "start_time": "2024-06-20T01:20:52.854Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_97", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_97", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_97\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York City, NY\",\"preferences\":[\"Value0\",\"Value3\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_97_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find a pet-friendly library with a cafe inside in New York City, NY and then a store in the same city that has disabled access and operates 24 hours?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Locate nearby libraries based on specific preferences such as being pet-friendly and having disabled access facilities.\n    function_name: 'library.find_nearby' or null,\n    // The city, for example, New York City, NY\n    location: string,\n    // Your preferences for the library.\n    preferences: [\n      'Pet-friendly' or 'Disabled Access' or '24 hours' or 'Cafe Inside'\n    ],\n  } or {\n    // Locate nearby stores based on specific preferences such as being pet-friendly and having disabled access facilities.\n    function_name: 'store.find_nearby' or null,\n    // The city, for example, New York City, NY\n    location: string,\n    // Your preferences for the store.\n    preferences: [\n      'Pet-friendly' or 'Disabled Access' or '24 hours' or 'Cafe Inside'\n    ],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'library.find_nearby',\n  location: 'New York City, NY',\n  preferences: ['Pet-friendly', 'Cafe Inside']\n} ", "metadata": {"logprobs": null, "prompt_tokens": 331, "output_tokens": 35, "total_tokens": 366, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fe8cec8b-9030-4877-b6a7-56d175b66811", "event_id": "fe8cec8b-9030-4877-b6a7-56d175b66811", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 14638, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_97", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4d6d23f3-c263-489c-b69f-8992638acdd3", "event_id": "63c8eaeb-7eba-42e8-b1e2-52875029d086", "parent_event_id": "4d6d23f3-c263-489c-b69f-8992638acdd3", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1113, "start_time": "2024-06-20T01:20:52.700Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_94", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_94", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_94\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"era_name\":\"Jurassic\",\"meta\":\"Value\",\"calculate_years_ago\":true},{\"event_name\":\"Signing of the Magna Carta\",\"meta\":\"Value\",\"calculate_years_ago\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_94_Output0 | class Fn_parallel_multiple_function_94_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you tell me the estimated date of the Jurassic geological era and calculate how many years ago it was? Also, could you provide the date of the signing of the Magna Carta and calculate how many years ago that event took place?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get the estimated date of a geological era.\n    function_name: 'geology.get_era' or null,\n    // The name of the geological era. e.g Ice age\n    era_name: string,\n    // True if years ago is to be calculated. False by default\n    calculate_years_ago: bool or null,\n  } or {\n    // Get the date of an historical event.\n    function_name: 'history.get_event_date' or null,\n    // The name of the event.\n    event_name: string,\n    // True if years ago is to be calculated. False by default\n    calculate_years_ago: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"geology.get_era\",\n    \"era_name\": \"Jurassic\",\n    \"calculate_years_ago\": true\n  },\n  {\n    \"function_name\": \"history.get_event_date\",\n    \"event_name\": \"Signing of the Magna Carta\",\n    \"calculate_years_ago\": true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 300, "output_tokens": 74, "total_tokens": 374, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4d6d23f3-c263-489c-b69f-8992638acdd3", "event_id": "4d6d23f3-c263-489c-b69f-8992638acdd3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 14883, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_94", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: event_name\\nExpected: any of ['signing of the Magna Carta', 'Magna Carta']\\nActual@1: meta=<Fn_parallel_multiple_function_94_Output1_TypeName.Value: 'Value'> event_name='Signing of the Magna Carta' calculate_years_ago=True\\nActual all: [Fn_parallel_multiple_function_94_Output0(meta=<Fn_parallel_multiple_function_94_Output0_TypeName.Value: 'Value'>, era_name='Jurassic', calculate_years_ago=True), Fn_parallel_multiple_function_94_Output1(meta=<Fn_parallel_multiple_function_94_Output1_TypeName.Value: 'Value'>, event_name='Signing of the Magna Carta', calculate_years_ago=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e8376178-a1a5-4270-8bc7-00075b089769", "event_id": "1b12b6c9-0b97-4db0-9613-afed446d6381", "parent_event_id": "e8376178-a1a5-4270-8bc7-00075b089769", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1784, "start_time": "2024-06-20T01:20:52.419Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_93", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_93", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_93\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"weight_earth_kg\":75.0,\"planet\":\"Mars\",\"meta\":\"Value\"},{\"amount\":5000.0,\"from_currency\":\"USD\",\"to_currency\":\"JPY\",\"meta\":\"Value\"},{\"value\":24.0,\"from_unit\":\"inches\",\"to_unit\":\"centimeters\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_93_Output2 | class Fn_parallel_multiple_function_93_Output1 | class Fn_parallel_multiple_function_93_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are planning a trip to Mars. You weigh 75 kilograms on Earth and you are curious about how much you would weigh on Mars. After your trip to Mars, you plan to visit Japan. You have 5000 US dollars and you want to know how much it would be in Japanese Yen. During your stay in Japan, you come across a beautiful antique vase that is 24 inches tall, but you are more familiar with measurements in centimeters. How tall is the vase in centimeters?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate your weight on different planets given your weight on earth\n    function_name: 'calculate.weight_in_space' or null,\n    // Your weight on Earth in Kilograms.\n    weight_earth_kg: float,\n    // The planet you want to know your weight on.\n    planet: string,\n  } or {\n    // Convert a value from one currency to another.\n    function_name: 'currency_conversion' or null,\n    // The amount to be converted.\n    amount: float,\n    // The currency to convert from.\n    from_currency: string,\n    // The currency to convert to.\n    to_currency: string,\n  } or {\n    // Convert a value from one unit to another.\n    function_name: 'unit_conversion.convert' or null,\n    // The value to be converted.\n    value: float,\n    // The unit to convert from.\n    from_unit: string,\n    // The unit to convert to.\n    to_unit: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"calculate.weight_in_space\",\n    \"weight_earth_kg\": 75,\n    \"planet\": \"Mars\"\n  },\n  {\n    \"function_name\": \"currency_conversion\",\n    \"amount\": 5000,\n    \"from_currency\": \"USD\",\n    \"to_currency\": \"JPY\"\n  },\n  {\n    \"function_name\": \"unit_conversion.convert\",\n    \"value\": 24,\n    \"from_unit\": \"inches\",\n    \"to_unit\": \"centimeters\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 417, "output_tokens": 113, "total_tokens": 530, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e8376178-a1a5-4270-8bc7-00075b089769", "event_id": "e8376178-a1a5-4270-8bc7-00075b089769", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 15274, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_93", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "982a41c3-c1f8-4a77-8411-c3c59240f0d4", "event_id": "536124f2-af63-4041-a716-ddcd41e7b754", "parent_event_id": "982a41c3-c1f8-4a77-8411-c3c59240f0d4", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1451, "start_time": "2024-06-20T01:20:53.061Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_99", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_99", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_99\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"amount\":5000.0,\"from_currency\":\"JPY\",\"to_currency\":\"USD\",\"meta\":\"Value\"},{\"value\":15.0,\"from_unit\":\"kilometers\",\"to_unit\":\"miles\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_99_Output1 | class Fn_parallel_multiple_function_99_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a two-step conversion? First, I have 5000 Japanese Yen that I would like to convert into US Dollars. After that, I have a measurement of 15 kilometers that I would like to convert into miles. Can you tell me how much I would have in US Dollars and how many miles I would have?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Convert a value from one currency to another.\n    function_name: 'currency_conversion' or null,\n    // The amount to be converted.\n    amount: float,\n    // The currency to convert from.\n    from_currency: string,\n    // The currency to convert to.\n    to_currency: string,\n  } or {\n    // Convert a value from one unit to another.\n    function_name: 'unit_conversion' or null,\n    // The value to be converted.\n    value: float,\n    // The unit to convert from.\n    from_unit: string,\n    // The unit to convert to.\n    to_unit: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"currency_conversion\",\n    \"amount\": 5000,\n    \"from_currency\": \"JPY\",\n    \"to_currency\": \"USD\"\n  },\n  {\n    \"function_name\": \"unit_conversion\",\n    \"value\": 15,\n    \"from_unit\": \"kilometers\",\n    \"to_unit\": \"miles\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 316, "output_tokens": 82, "total_tokens": 398, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "982a41c3-c1f8-4a77-8411-c3c59240f0d4", "event_id": "982a41c3-c1f8-4a77-8411-c3c59240f0d4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 15582, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_99", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b42ba924-b44c-4850-9e34-8eed9cb2fe6d", "event_id": "f99febd2-7ce5-41a5-94e9-dd64b16ff3ed", "parent_event_id": "b42ba924-b44c-4850-9e34-8eed9cb2fe6d", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 994, "start_time": "2024-06-20T01:20:53.814Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_103", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_103", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_103\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"principle\":5000,\"rate\":0.04,\"time\":5,\"n\":4,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_103_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"John has $5000 that he wants to invest. He is considering two options. The first option is a savings account that compounds interest quarterly at an annual rate of 4% for 5 years. The second option is a bond that offers simple interest at an annual rate of 3.5% for 5 years. How much would John have at the end of 5 years for both options?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculates compound interest.\n    function_name: 'financial.compound_interest' or null,\n    // The initial amount of money that is being compounded.\n    principle: int,\n    // The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05.\n    rate: float,\n    // The amount of time, in years, that the money is to be compounded for.\n    time: int,\n    // The number of times interest applied per time period.\n    n: int,\n  } or {\n    // Calculates simple interest.\n    function_name: 'financial.simple_interest' or null,\n    // The initial amount of money that interest is being calculated for.\n    principle: int,\n    // The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05.\n    rate: float,\n    // The amount of time, in years, that the money is to be compounded for.\n    time: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"financial.compound_interest\",\n  \"principle\": 5000,\n  \"rate\": 0.04,\n  \"time\": 5,\n  \"n\": 4\n}", "metadata": {"logprobs": null, "prompt_tokens": 412, "output_tokens": 45, "total_tokens": 457, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b42ba924-b44c-4850-9e34-8eed9cb2fe6d", "event_id": "b42ba924-b44c-4850-9e34-8eed9cb2fe6d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 15879, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_103", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "68428b9c-4b45-458a-bceb-049f41164065", "event_id": "8032eae1-90d4-405c-91d6-c01d833e5018", "parent_event_id": "68428b9c-4b45-458a-bceb-049f41164065", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2131, "start_time": "2024-06-20T01:20:52.781Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_95", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_95", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_95\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"elements\":[],\"meta\":\"Value\",\"order\":\"desc\"},{\"elements\":[\"apple\",\"banana\",\"cherry\",\"date\",\"elderberry\"],\"condition\":\"b\",\"meta\":\"Value\"},{\"elements\":[5,10,15,20,25],\"meta\":\"Value\"},{\"elements\":[35,10,25,5,15],\"meta\":\"Value\",\"order\":\"asc\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_95_Output2 | class Fn_parallel_multiple_function_95_Output1 | class Fn_parallel_multiple_function_95_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Given the list of words ['apple', 'banana', 'cherry', 'date', 'elderberry'], can you first use the 'sort_list' function to sort this list in descending order? Then, using the 'filter_list' function, can you filter out the fruits that start with the letter 'b'? After that, consider the list of numbers [5, 10, 15, 20, 25]. Can you use the 'sum_elements' function to find the total sum of these numbers? Finally, use the 'sort_list' function again to sort the numbers [35, 10, 25, 5, 15] in ascending order?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Sort the elements of a list in ascending or descending order\n    function_name: 'sort_list' or null,\n    // The list of elements to sort.\n    elements: int[],\n    // The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order. (default: asc)\n    order: string or null,\n  } or {\n    // Add all elements of a numeric list\n    function_name: 'sum_elements' or null,\n    // The list of numeric elements to add.\n    elements: int[],\n  } or {\n    // Filters elements of a list based on a given condition\n    function_name: 'filter_list' or null,\n    // The list of elements to filter.\n    elements: string[],\n    // The condition to filter the elements on.\n    condition: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"sort_list\",\n    \"elements\": [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"],\n    \"order\": \"desc\"\n  },\n  {\n    \"function_name\": \"filter_list\",\n    \"elements\": [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"],\n    \"condition\": \"b\"\n  },\n  {\n    \"function_name\": \"sum_elements\",\n    \"elements\": [5, 10, 15, 20, 25]\n  },\n  {\n    \"function_name\": \"sort_list\",\n    \"elements\": [35, 10, 25, 5, 15],\n    \"order\": \"asc\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 431, "output_tokens": 155, "total_tokens": 586, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "68428b9c-4b45-458a-bceb-049f41164065", "event_id": "68428b9c-4b45-458a-bceb-049f41164065", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 15983, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_95", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: elements\\nExpected: any of [['apple', 'banana', 'cherry', 'date', 'elderberry'], ['elderberry', 'cherry', 'banana', 'apple', 'date']]\\nActual@1: meta=<Fn_parallel_multiple_function_95_Output0_TypeName.Value: 'Value'> elements=[] order='desc'\\nActual all: [Fn_parallel_multiple_function_95_Output0(meta=<Fn_parallel_multiple_function_95_Output0_TypeName.Value: 'Value'>, elements=[], order='desc'), Fn_parallel_multiple_function_95_Output2(meta=<Fn_parallel_multiple_function_95_Output2_TypeName.Value: 'Value'>, elements=['apple', 'banana', 'cherry', 'date', 'elderberry'], condition='b'), Fn_parallel_multiple_function_95_Output0(meta=<Fn_parallel_multiple_function_95_Output0_TypeName.Value: 'Value'>, elements=[5, 10, 15, 20, 25], order=None), Fn_parallel_multiple_function_95_Output0(meta=<Fn_parallel_multiple_function_95_Output0_TypeName.Value: 'Value'>, elements=[35, 10, 25, 5, 15], order='asc')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2654bbf0-fd0d-435a-b295-d12129f58205", "event_id": "7350e19a-834a-4a6e-a604-8e872fda2580", "parent_event_id": "2654bbf0-fd0d-435a-b295-d12129f58205", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2025, "start_time": "2024-06-20T01:20:52.903Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_98", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_98", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_98\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"principle_amount\":5000.0,\"duration\":5.0,\"annual_rate\":4.0,\"meta\":\"Value\"},{\"principle_amount\":5000.0,\"duration\":5.0,\"annual_rate\":3.5,\"meta\":null},{\"initial_investment\":3000.0,\"interest_rate\":0.05,\"time\":6,\"meta\":\"Value\",\"num_compoundings\":2}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_98_Output0 | class Fn_parallel_multiple_function_98_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"John has decided to invest his savings. He has $5000 that he wants to invest for a period of 5 years. He is considering two options. The first option is a simple interest scheme that offers an annual interest rate of 4%. The second option is a compound interest scheme that offers an annual interest rate of 3.5% and compounds interest annually. He also came across a third option where he can invest an initial amount of $3000 at an annual interest rate of 5% for 6 years with interest compounded twice a year. Can you help him calculate the returns for each of these options using the calc_Simple_Interest, calc_Compound_Interest, and future_value functions respectively?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Compute simple interest.\n    function_name: 'calc_Simple_Interest' or null,\n    // The principle amount that is invested.\n    principle_amount: float,\n    // Duration of time period in years.\n    duration: float,\n    // Interest rate in percentage.\n    annual_rate: float,\n  } or {\n    // Calculates the future value of an investment given an interest rate and time period.\n    function_name: 'future_value' or null,\n    // The initial investment amount.\n    initial_investment: float,\n    // The annual interest rate (as a decimal).\n    interest_rate: float,\n    // The number of time periods the money is invested for.\n    time: int,\n    // The number of times that interest is compounded per time period. (default: 1)\n    num_compoundings: int or null,\n  } or {\n    // Compute compound interest.\n    function_name: 'calc_Compound_Interest' or null,\n    // The principle amount that is invested.\n    principle_amount: float,\n    // Duration of time period in years.\n    duration: float,\n    // Interest rate in percentage.\n    annual_rate: float,\n    // The number of times that interest is compounded per unit time. (default: 1)\n    compound_freq: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"calc_Simple_Interest\",\n    \"principle_amount\": 5000,\n    \"duration\": 5,\n    \"annual_rate\": 4\n  },\n  {\n    \"function_name\": \"calc_Compound_Interest\",\n    \"principle_amount\": 5000,\n    \"duration\": 5,\n    \"annual_rate\": 3.5\n  },\n  {\n    \"function_name\": \"future_value\",\n    \"initial_investment\": 3000,\n    \"interest_rate\": 0.05,\n    \"time\": 6,\n    \"num_compoundings\": 2\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 530, "output_tokens": 141, "total_tokens": 671, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2654bbf0-fd0d-435a-b295-d12129f58205", "event_id": "2654bbf0-fd0d-435a-b295-d12129f58205", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 15999, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_98", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: annual_rate\\nExpected: any of [0.04]\\nActual@1: meta=<Fn_parallel_multiple_function_98_Output0_TypeName.Value: 'Value'> principle_amount=5000.0 duration=5.0 annual_rate=4.0\\nActual all: [Fn_parallel_multiple_function_98_Output0(meta=<Fn_parallel_multiple_function_98_Output0_TypeName.Value: 'Value'>, principle_amount=5000.0, duration=5.0, annual_rate=4.0), Fn_parallel_multiple_function_98_Output0(meta=None, principle_amount=5000.0, duration=5.0, annual_rate=3.5), Fn_parallel_multiple_function_98_Output1(meta=<Fn_parallel_multiple_function_98_Output1_TypeName.Value: 'Value'>, initial_investment=3000.0, interest_rate=0.05, time=6, num_compoundings=2)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4abc9a70-375a-45d1-a093-7cfe31d686d0", "event_id": "dbe8e1e0-b20f-4c6f-90d4-7c5975762c99", "parent_event_id": "4abc9a70-375a-45d1-a093-7cfe31d686d0", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3351, "start_time": "2024-06-20T01:20:51.751Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_90", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_90", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_90\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[]", "override": null, "type": {"name": "single", "fields": {"value": "list<?>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me plan my day? I need to go from my home at 123 Main Street to my office at 456 Park Avenue, and I don't want to spend more than $30 on the ride. After work, I need to order groceries from the Whole Foods at 789 Broadway. The items I need are milk, bread, eggs, and apples. I don't want to spend more than $10 on delivery. Then, I need to get a ride from my office to my friend's house at 321 Elm Street, and I don't want to spend more than $20 on that ride. Finally, I need to get a ride from my friend's house back to my home, and I don't want to spend more than $25 on that ride. Can you help me with all of this?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Order grocery items from a specific location with optional delivery price limit\n    function_name: 'grocery_delivery.order' or null,\n    // The location of the grocery store\n    location: string,\n    // List of items to order\n    items: string[],\n    // The maximum delivery cost. It is optional (default: 10.0)\n    max_delivery_cost: float or null,\n  } or {\n    // Find ride from source to destination with an optional cost limit\n    function_name: 'ride_hailing.get_rides' or null,\n    // The starting point of the journey\n    source: string,\n    // The endpoint of the journey\n    destination: string,\n    // The maximum cost of the ride. It is optional (default: 30.0)\n    max_cost: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n    \"functions\": [\n        {\n            \"function_name\": \"ride_hailing.get_rides\",\n            \"source\": \"123 Main Street\",\n            \"destination\": \"456 Park Avenue\",\n            \"max_cost\": 30\n        },\n        {\n            \"function_name\": \"grocery_delivery.order\",\n            \"location\": \"789 Broadway\",\n            \"items\": [\"milk\", \"bread\", \"eggs\", \"apples\"],\n            \"max_delivery_cost\": 10\n        },\n        {\n            \"function_name\": \"ride_hailing.get_rides\",\n            \"source\": \"456 Park Avenue\",\n            \"destination\": \"321 Elm Street\",\n            \"max_cost\": 20\n        },\n        {\n            \"function_name\": \"ride_hailing.get_rides\",\n            \"source\": \"321 Elm Street\",\n            \"destination\": \"123 Main Street\",\n            \"max_cost\": 25\n        }\n    ]\n}", "metadata": {"logprobs": null, "prompt_tokens": 453, "output_tokens": 189, "total_tokens": 642, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4abc9a70-375a-45d1-a093-7cfe31d686d0", "event_id": "4abc9a70-375a-45d1-a093-7cfe31d686d0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 16173, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_90", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dc19d217-73df-4892-a4a2-5f635738b256", "event_id": "657bd53f-5e44-484b-a77b-6f568370dfce", "parent_event_id": "dc19d217-73df-4892-a4a2-5f635738b256", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2003, "start_time": "2024-06-20T01:20:53.114Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_100", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_100", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_100\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company\":\"Microsoft\",\"years\":5,\"meta\":\"Value\",\"frequency\":\"Value0\"},{\"company\":\"Microsoft\",\"years\":5,\"meta\":\"Value\",\"frequency\":\"Value1\"},{\"company\":\"Microsoft\",\"days\":60,\"meta\":\"Value\"},{\"company\":\"Microsoft\",\"days\":120,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_100_Output1 | class Fn_parallel_multiple_function_100_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please provide me with the historical dividend data for Microsoft for the past 5 years on a quarterly basis, then the same data but on an annual basis? After that, could you retrieve the stock market data for Microsoft for the past 60 days and then for the past 120 days?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get historical dividend data of a specific company within a particular duration.\n    function_name: 'corporate_finance.dividend_data' or null,\n    // The company that you want to get the dividend data for.\n    company: string,\n    // Number of past years for which to retrieve the data.\n    years: int,\n    // The frequency of the dividend payment. (default: annually)\n    frequency: 'quarterly' or 'annually' or null,\n  } or {\n    // Retrieve stock market data for a specific company and time frame.\n    function_name: 'stock_market_data' or null,\n    // The company that you want to get the stock market data for.\n    company: string,\n    // Number of past days for which to retrieve the data.\n    days: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"corporate_finance.dividend_data\",\n    \"company\": \"Microsoft\",\n    \"years\": 5,\n    \"frequency\": \"quarterly\"\n  },\n  {\n    \"function_name\": \"corporate_finance.dividend_data\",\n    \"company\": \"Microsoft\",\n    \"years\": 5,\n    \"frequency\": \"annually\"\n  },\n  {\n    \"function_name\": \"stock_market_data\",\n    \"company\": \"Microsoft\",\n    \"days\": 60\n  },\n  {\n    \"function_name\": \"stock_market_data\",\n    \"company\": \"Microsoft\",\n    \"days\": 120\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 341, "output_tokens": 142, "total_tokens": 483, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dc19d217-73df-4892-a4a2-5f635738b256", "event_id": "dc19d217-73df-4892-a4a2-5f635738b256", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 16187, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_100", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "149c7d8c-b66a-4aff-b5ae-a4f93fe8eed5", "event_id": "0fa7b369-8e16-4c6b-8639-cf40160a3419", "parent_event_id": "149c7d8c-b66a-4aff-b5ae-a4f93fe8eed5", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1552, "start_time": "2024-06-20T01:20:53.569Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_102", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_102", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_102\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company\":\"Microsoft\",\"days\":30,\"meta\":\"Value\",\"data_source\":null},{\"company\":\"Apple\",\"days\":30,\"meta\":\"Value\",\"data_source\":null},{\"company\":\"Microsoft\",\"days\":30,\"meta\":\"Value\",\"data_source\":null},{\"company\":\"Apple\",\"days\":30,\"meta\":\"Value\",\"data_source\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_102_Output2 | class Fn_parallel_multiple_function_102_Output1 | class Fn_parallel_multiple_function_102_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please provide me with the following financial data for Microsoft and Apple over the past 30 days? First, I would like to know the average closing price of Microsoft's stocks using data from Yahoo Finance. Second, I need to know the total revenue of Apple using data from Google Finance. Third, I am interested in the total volume of stocks traded for both Microsoft and Apple, again using data from Yahoo Finance. Could you please calculate these for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the total volume of stocks traded over a certain period of time\n    function_name: 'volume_traded' or null,\n    // Name of the company to get data for\n    company: string,\n    // Number of past days to calculate volume traded for\n    days: int,\n    // Source to fetch the financial data. default is 'yahoo finance'\n    data_source: string or null,\n  } or {\n    // Calculate the total revenue of a company over a specific period of time\n    function_name: 'total_revenue' or null,\n    // Name of the company to get data for\n    company: string,\n    // Number of past days to calculate total revenue for\n    days: int,\n    // Source to fetch the financial data. default is 'google finance'\n    data_source: string or null,\n  } or {\n    // Calculate the average closing price of a specific company over a given period of time\n    function_name: 'avg_closing_price' or null,\n    // Name of the company to get data for\n    company: string,\n    // Number of past days to calculate average closing price for\n    days: int,\n    // Source to fetch the stock data. default is 'yahoo finance'\n    data_source: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"avg_closing_price\",\n    \"company\": \"Microsoft\",\n    \"days\": 30\n  },\n  {\n    \"function_name\": \"total_revenue\",\n    \"company\": \"Apple\",\n    \"days\": 30\n  },\n  {\n    \"function_name\": \"volume_traded\",\n    \"company\": \"Microsoft\",\n    \"days\": 30\n  },\n  {\n    \"function_name\": \"volume_traded\",\n    \"company\": \"Apple\",\n    \"days\": 30\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 472, "output_tokens": 119, "total_tokens": 591, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "149c7d8c-b66a-4aff-b5ae-a4f93fe8eed5", "event_id": "149c7d8c-b66a-4aff-b5ae-a4f93fe8eed5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 16192, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_102", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: LLM returned volume_traded\\nExpected: any of dict_keys(['avg_closing_price', 'total_revenue', 'volume_traded_1', 'volume_traded_2'])\\nActual@3: meta=<Fn_parallel_multiple_function_102_Output0_TypeName.Value: 'Value'> company='Microsoft' days=30 data_source=None\\nActual all: [Fn_parallel_multiple_function_102_Output0(meta=<Fn_parallel_multiple_function_102_Output0_TypeName.Value: 'Value'>, company='Microsoft', days=30, data_source=None), Fn_parallel_multiple_function_102_Output0(meta=<Fn_parallel_multiple_function_102_Output0_TypeName.Value: 'Value'>, company='Apple', days=30, data_source=None), Fn_parallel_multiple_function_102_Output0(meta=<Fn_parallel_multiple_function_102_Output0_TypeName.Value: 'Value'>, company='Microsoft', days=30, data_source=None), Fn_parallel_multiple_function_102_Output0(meta=<Fn_parallel_multiple_function_102_Output0_TypeName.Value: 'Value'>, company='Apple', days=30, data_source=None)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "8137f7ba-6231-47ac-9a95-9d48927c8c48", "event_id": "c355ad66-16fb-4942-b910-c81c744f1fc4", "parent_event_id": "8137f7ba-6231-47ac-9a95-9d48927c8c48", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2400, "start_time": "2024-06-20T01:20:52.819Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_96", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_96", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_96\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"vector1\":[1,2,3],\"vector2\":[4,5,6],\"meta\":\"Value\",\"rounding\":2},{\"array1\":[7,8,9],\"array2\":[10,11,12],\"meta\":\"Value\",\"type\":\"Value0\"},{\"array1\":[13,14,15],\"array2\":[16,17,18],\"meta\":\"Value\",\"type\":\"Value1\"},{\"vector1\":[19,20,21],\"vector2\":[22,23,24],\"meta\":\"Value\",\"rounding\":3}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_96_Output0 | class Fn_parallel_multiple_function_96_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with some calculations? First, I have two vectors, [1, 2, 3] and [4, 5, 6], and I need to calculate the cosine similarity between them. I want the result to be rounded off to 2 decimal places. Then, I have two arrays of numbers, [7, 8, 9] and [10, 11, 12], and I need to calculate the Pearson correlation coefficient between them. After that, I have another two arrays of numbers, [13, 14, 15] and [16, 17, 18], and I need to calculate the Spearman correlation coefficient between them. Lastly, I have two more vectors, [19, 20, 21] and [22, 23, 24], and I need to calculate the cosine similarity between them, but this time I want the result to be rounded off to 3 decimal places.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the cosine similarity between two vectors.\n    function_name: 'cosine_similarity.calculate' or null,\n    // The first vector for calculating cosine similarity.\n    vector1: int[],\n    // The second vector for calculating cosine similarity.\n    vector2: int[],\n    // Optional: The number of decimals to round off the result. Default 0\n    rounding: int or null,\n  } or {\n    // Calculate the correlation coefficient between two arrays of numbers.\n    function_name: 'correlation.calculate' or null,\n    // The first array of numbers.\n    array1: int[],\n    // The second array of numbers.\n    array2: int[],\n    // Optional: The type of correlation coefficient to calculate. Default is 'pearson'.\n    type: 'pearson' or 'spearman' or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"cosine_similarity.calculate\",\n    \"vector1\": [1, 2, 3],\n    \"vector2\": [4, 5, 6],\n    \"rounding\": 2\n  },\n  {\n    \"function_name\": \"correlation.calculate\",\n    \"array1\": [7, 8, 9],\n    \"array2\": [10, 11, 12],\n    \"type\": \"pearson\"\n  },\n  {\n    \"function_name\": \"correlation.calculate\",\n    \"array1\": [13, 14, 15],\n    \"array2\": [16, 17, 18],\n    \"type\": \"spearman\"\n  },\n  {\n    \"function_name\": \"cosine_similarity.calculate\",\n    \"vector1\": [19, 20, 21],\n    \"vector2\": [22, 23, 24],\n    \"rounding\": 3\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 483, "output_tokens": 205, "total_tokens": 688, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "8137f7ba-6231-47ac-9a95-9d48927c8c48", "event_id": "8137f7ba-6231-47ac-9a95-9d48927c8c48", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 16290, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_96", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "89282f70-59d0-4f7d-9d03-2924a0551086", "event_id": "ef94effd-a283-4b7c-8381-c7a668c8e1f6", "parent_event_id": "89282f70-59d0-4f7d-9d03-2924a0551086", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1322, "start_time": "2024-06-20T01:20:54.930Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_108", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_108", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_108\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York City\",\"genre\":\"Mystery\",\"meta\":\"Value\",\"title\":null},{\"genre\":\"Mystery\",\"meta\":\"Value\",\"title\":null},{\"genre\":\"Mystery\",\"meta\":\"Value\",\"title\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_108_Output1 | class Fn_parallel_multiple_function_108_Output0 | class Fn_parallel_multiple_function_108_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find a book? I'm not sure of the title, but I know it's a mystery novel. I'd like to search in the library in New York City first, then I'd like to check Google Books and Open Library. Can you assist with these searches?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Search for a book in the Google Books library with optional parameters\n    function_name: 'google.books_search' or null,\n    // Genre of the book\n    genre: string,\n    // Title of the book. Default is not use it if not specified.\n    title: string or null,\n  } or {\n    // Search for a book in a given library with optional parameters\n    function_name: 'library.search_books' or null,\n    // Name or city of library\n    location: string,\n    // Genre of the book\n    genre: string,\n    // Title of the book. Default is not use it if not specified.\n    title: string or null,\n  } or {\n    // Search for a book in the Open Library with optional parameters\n    function_name: 'openlibrary.books_search' or null,\n    // Genre of the book\n    genre: string,\n    // Title of the book. Default is not use it if not specified.\n    title: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'library.search_books',\n    location: 'New York City',\n    genre: 'Mystery',\n    title: null,\n  },\n  {\n    function_name: 'google.books_search',\n    genre: 'Mystery',\n    title: null,\n  },\n  {\n    function_name: 'openlibrary.books_search',\n    genre: 'Mystery',\n    title: null,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 380, "output_tokens": 86, "total_tokens": 466, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "614a1ac8-df00-46c3-b65d-e564177f9801", "event_id": "10eb9136-d36b-41f8-bb3c-9db1fd2cebcc", "parent_event_id": "614a1ac8-df00-46c3-b65d-e564177f9801", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1148, "start_time": "2024-06-20T01:20:55.104Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_109", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_109", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_109\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"talkative\":true,\"nervous\":false,\"artistic_interests\":true,\"lazy\":false,\"forgiving\":true,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_109_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please analyze my personality based on the five-factor model and the Myers-Briggs Type Indicator (MBTI)? For the five-factor model, consider that I am quite talkative, I don't get nervous easily, I have many artistic interests, I am not lazy, and I am quite forgiving. For the MBTI, my preferences are more towards feeling than thinking, I am more extroverted than introverted, I lean more towards perceiving than judging, and I prefer intuition over sensing.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Analyse personality based on the Myers-Briggs Type Indicator (MBTI) which sorts for preferences and generates a 4-letter personality type.\n    function_name: 'MBTI.analyse' or null,\n    // Preference of user between thinking and feeling.\n    thinking_vs_feeling: string,\n    // Preference of user between introverted and extroverted.\n    introverted_vs_extroverted: string,\n    // Preference of user between judging and perceiving.\n    judging_vs_perceiving: string,\n    // Preference of user between sensing and intuition.\n    sensing_vs_intuition: string,\n  } or {\n    // Analyse personality based on the five-factor model, also known as the Big Five, which measures openness, conscientiousness, extraversion, agreeableness, and neuroticism.\n    function_name: 'five_factor_model.analyse' or null,\n    // Indicates if the user is talkative.\n    talkative: bool,\n    // Indicates if the user gets nervous easily.\n    nervous: bool,\n    // Indicates if the user has many artistic interests.\n    artistic_interests: bool,\n    // Indicates if the user tends to be lazy.\n    lazy: bool,\n    // Indicates if the user is forgiving.\n    forgiving: bool,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"five_factor_model.analyse\",\n  \"talkative\": true,\n  \"nervous\": false,\n  \"artistic_interests\": true,\n  \"lazy\": false,\n  \"forgiving\": true\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 478, "output_tokens": 56, "total_tokens": 534, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "89282f70-59d0-4f7d-9d03-2924a0551086", "event_id": "89282f70-59d0-4f7d-9d03-2924a0551086", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 17322, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_108", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: genre\\nExpected: any of ['mystery']\\nActual@1: meta=<Fn_parallel_multiple_function_108_Output0_TypeName.Value: 'Value'> genre='Mystery' title=None\\nActual all: [Fn_parallel_multiple_function_108_Output0(meta=<Fn_parallel_multiple_function_108_Output0_TypeName.Value: 'Value'>, genre='Mystery', title=None), Fn_parallel_multiple_function_108_Output0(meta=<Fn_parallel_multiple_function_108_Output0_TypeName.Value: 'Value'>, genre='Mystery', title=None), Fn_parallel_multiple_function_108_Output0(meta=<Fn_parallel_multiple_function_108_Output0_TypeName.Value: 'Value'>, genre='Mystery', title=None)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "614a1ac8-df00-46c3-b65d-e564177f9801", "event_id": "614a1ac8-df00-46c3-b65d-e564177f9801", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 17323, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_109", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0fb3670f-92fe-4ca8-9569-8e0dcab7f9ff", "event_id": "93596c82-0e71-4b5f-aa12-9a9c41b8f42a", "parent_event_id": "0fb3670f-92fe-4ca8-9569-8e0dcab7f9ff", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2241, "start_time": "2024-06-20T01:20:54.205Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_104", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_104", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_104\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York, NY\",\"expertise\":\"Divorce\",\"meta\":\"Value\"},{\"location\":\"Los Angeles, CA\",\"expertise\":\"Criminal\",\"meta\":\"Value\"},{\"location\":\"Chicago, IL\",\"specialization\":\"Cardiology\",\"meta\":\"Value\"},{\"location\":\"Houston, TX\",\"specialization\":\"Orthopedics\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_104_Output0 | class Fn_parallel_multiple_function_104_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find a divorce lawyer in New York, NY and then a criminal lawyer in Los Angeles, CA? After that, I need to find a cardiologist in Chicago, IL and an orthopedic doctor in Houston, TX.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Search for a lawyer based on area of expertise and location\n    function_name: 'lawyer.search' or null,\n    // The city and state, e.g. Los Angeles, CA\n    location: string,\n    // Area of legal expertise. For example, 'Divorce', 'Criminal', 'Business'.\n    expertise: string,\n  } or {\n    // Search for a doctor based on area of expertise and location\n    function_name: 'doctor.search' or null,\n    // The city and state, e.g. Los Angeles, CA\n    location: string,\n    // Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'.\n    specialization: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'lawyer.search',\n    location: 'New York, NY',\n    expertise: 'Divorce',\n  },\n  {\n    function_name: 'lawyer.search',\n    location: 'Los Angeles, CA',\n    expertise: 'Criminal',\n  },\n  {\n    function_name: 'doctor.search',\n    location: 'Chicago, IL',\n    specialization: 'Cardiology',\n  },\n  {\n    function_name: 'doctor.search',\n    location: 'Houston, TX',\n    specialization: 'Orthopedics',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 313, "output_tokens": 115, "total_tokens": 428, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0fb3670f-92fe-4ca8-9569-8e0dcab7f9ff", "event_id": "0fb3670f-92fe-4ca8-9569-8e0dcab7f9ff", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 17517, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_104", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "371718b2-a3aa-4e73-aa6d-8b15dd9aba72", "event_id": "dddf99ad-8ea5-4646-a7d7-cc1f2aeaa718", "parent_event_id": "371718b2-a3aa-4e73-aa6d-8b15dd9aba72", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2250, "start_time": "2024-06-20T01:20:54.513Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_105", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_105", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_105\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York\",\"days\":5,\"meta\":\"Value\"},{\"location\":\"Los Angeles\",\"days\":7,\"meta\":\"Value\"},{\"topic\":\"global warming\",\"days\":3,\"meta\":\"Value\"},{\"location\":\"Beijing\",\"days\":2,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_105_Output1 | class Fn_parallel_multiple_function_105_Output2 | class Fn_parallel_multiple_function_105_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you provide me with a 5-day air quality forecast for New York, a 7-day weather forecast for Los Angeles, news articles on 'global warming' for the past 3 days, and a 2-day air quality forecast for Beijing?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve news articles for a specific topic.\n    function_name: 'news' or null,\n    // The topic that you want to get the news for.\n    topic: string,\n    // Number of past days for which to retrieve the news.\n    days: int,\n  } or {\n    // Retrieve an air quality forecast for a specific location and time frame.\n    function_name: 'air_quality_forecast' or null,\n    // The city that you want to get the air quality forecast for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  } or {\n    // Retrieve a weather forecast for a specific location and time frame.\n    function_name: 'weather_forecast' or null,\n    // The city that you want to get the weather for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"air_quality_forecast\",\n    \"location\": \"New York\",\n    \"days\": 5\n  },\n  {\n    \"function_name\": \"weather_forecast\",\n    \"location\": \"Los Angeles\",\n    \"days\": 7\n  },\n  {\n    \"function_name\": \"news\",\n    \"topic\": \"global warming\",\n    \"days\": 3\n  },\n  {\n    \"function_name\": \"air_quality_forecast\",\n    \"location\": \"Beijing\",\n    \"days\": 2\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 351, "output_tokens": 122, "total_tokens": 473, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "371718b2-a3aa-4e73-aa6d-8b15dd9aba72", "event_id": "371718b2-a3aa-4e73-aa6d-8b15dd9aba72", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 17834, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_105", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: location\\nExpected: any of ['Beijing']\\nActual@2: meta=<Fn_parallel_multiple_function_105_Output1_TypeName.Value: 'Value'> location='Los Angeles' days=7\\nActual all: [Fn_parallel_multiple_function_105_Output1(meta=<Fn_parallel_multiple_function_105_Output1_TypeName.Value: 'Value'>, location='New York', days=5), Fn_parallel_multiple_function_105_Output1(meta=<Fn_parallel_multiple_function_105_Output1_TypeName.Value: 'Value'>, location='Los Angeles', days=7), Fn_parallel_multiple_function_105_Output0(meta=<Fn_parallel_multiple_function_105_Output0_TypeName.Value: 'Value'>, topic='global warming', days=3), Fn_parallel_multiple_function_105_Output1(meta=<Fn_parallel_multiple_function_105_Output1_TypeName.Value: 'Value'>, location='Beijing', days=2)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4c6bfd5c-4540-4498-8244-46f7afb350d8", "event_id": "6c2524d9-43dd-4920-bb90-9ff733006a01", "parent_event_id": "4c6bfd5c-4540-4498-8244-46f7afb350d8", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2051, "start_time": "2024-06-20T01:20:54.810Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_106", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_106", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_106\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"origin\":\"New York\",\"destination\":\"London\",\"meta\":\"Value\",\"unit\":\"km\"},{\"city1\":\"New York\",\"city2\":\"London\",\"meta\":\"Value\"},{\"from_city\":\"New York\",\"to_city\":\"London\",\"meta\":\"Value\",\"date\":\"next friday\"},{\"origin\":\"London\",\"destination\":\"Paris\",\"meta\":\"Value\",\"unit\":\"miles\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_106_Output2 | class Fn_parallel_multiple_function_106_Output1 | class Fn_parallel_multiple_function_106_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan a trip? I need to know the distance in kilometers from New York to London using the 'geodistance.find' function, then I want to know the time difference between New York and London using the 'timezones.get_difference' function. After that, I want to find flights from New York to London on the date of 'next friday' using the 'flights.search' function. Finally, I want to know the distance in miles from London to Paris using the 'geodistance.find' function again.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find flights between two cities.\n    function_name: 'flights.search' or null,\n    // The city to depart from.\n    from_city: string,\n    // The city to arrive at.\n    to_city: string,\n    // The date to fly. Default is today if not specified.\n    date: string or null,\n  } or {\n    // Find the time difference between two cities.\n    function_name: 'timezones.get_difference' or null,\n    // The first city.\n    city1: string,\n    // The second city.\n    city2: string,\n  } or {\n    // Find the distance between two cities on the globe.\n    function_name: 'geodistance.find' or null,\n    // The originating city for the distance calculation.\n    origin: string,\n    // The destination city for the distance calculation.\n    destination: string,\n    // The unit of measure for the distance calculation. (default: miles)\n    unit: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'geodistance.find',\n    origin: 'New York',\n    destination: 'London',\n    unit: 'km'\n  },\n  {\n    function_name: 'timezones.get_difference',\n    city1: 'New York',\n    city2: 'London'\n  },\n  {\n    function_name: 'flights.search',\n    from_city: 'New York',\n    to_city: 'London',\n    date: 'next friday'\n  },\n  {\n    function_name: 'geodistance.find',\n    origin: 'London',\n    destination: 'Paris',\n    unit: 'miles'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 427, "output_tokens": 132, "total_tokens": 559, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4c6bfd5c-4540-4498-8244-46f7afb350d8", "event_id": "4c6bfd5c-4540-4498-8244-46f7afb350d8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 17931, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_106", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "061b1b9f-b27f-4aa4-b6e6-40a2a8121dd5", "event_id": "f440d2ee-83fd-4b4a-b505-747d640a6f2e", "parent_event_id": "061b1b9f-b27f-4aa4-b6e6-40a2a8121dd5", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1791, "start_time": "2024-06-20T01:20:55.118Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_110", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_110", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_110\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"country\":\"France\",\"century\":17,\"meta\":\"Value\"},{\"country\":\"England\",\"century\":18,\"meta\":\"Value\",\"event_type\":\"war\"},{\"country\":\"Italy\",\"century\":19,\"meta\":\"Value\",\"aspect\":\"art\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_110_Output2 | class Fn_parallel_multiple_function_110_Output1 | class Fn_parallel_multiple_function_110_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me about the monarchs of France during the 17th century, major wars that took place in England during the 18th century, and the prominent art movements in Italy during the 19th century?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Provides a list of major historical events based on the specified country and century.\n    function_name: 'european_history.get_events' or null,\n    // Country name.\n    country: string,\n    // Century as an integer. For example, for the 1700s, input '18'.\n    century: int,\n    // Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional. Default to 'war'.\n    event_type: string or null,\n  } or {\n    // Provides a list of monarchs based on the specified country and century.\n    function_name: 'european_history.get_monarchs' or null,\n    // Country name.\n    country: string,\n    // Century as an integer. For example, for the 1700s, input '18'.\n    century: int,\n  } or {\n    // Provides information on cultural trends, art movements, philosophical ideas based on the specified country and century.\n    function_name: 'european_history.get_culture' or null,\n    // Country name.\n    country: string,\n    // Century as an integer. For example, for the 1700s, input '18'.\n    century: int,\n    // Aspect of culture such as 'literature', 'art', 'philosophy' etc. This field is optional. Default to 'art'.\n    aspect: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"european_history.get_monarchs\",\n    \"country\": \"France\",\n    \"century\": 17\n  },\n  {\n    \"function_name\": \"european_history.get_events\",\n    \"country\": \"England\",\n    \"century\": 18,\n    \"event_type\": \"war\"\n  },\n  {\n    \"function_name\": \"european_history.get_culture\",\n    \"country\": \"Italy\",\n    \"century\": 19,\n    \"aspect\": \"art\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 451, "output_tokens": 116, "total_tokens": 567, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "061b1b9f-b27f-4aa4-b6e6-40a2a8121dd5", "event_id": "061b1b9f-b27f-4aa4-b6e6-40a2a8121dd5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 17980, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_110", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: country\\nExpected: any of ['England']\\nActual@1: meta=<Fn_parallel_multiple_function_110_Output0_TypeName.Value: 'Value'> country='France' century=17 event_type=None\\nActual all: [Fn_parallel_multiple_function_110_Output0(meta=<Fn_parallel_multiple_function_110_Output0_TypeName.Value: 'Value'>, country='France', century=17, event_type=None), Fn_parallel_multiple_function_110_Output0(meta=<Fn_parallel_multiple_function_110_Output0_TypeName.Value: 'Value'>, country='England', century=18, event_type='war'), Fn_parallel_multiple_function_110_Output0(meta=<Fn_parallel_multiple_function_110_Output0_TypeName.Value: 'Value'>, country='Italy', century=19, event_type=None)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e47b733e-4d3f-47be-8f1a-78a60551fc73", "event_id": "254df508-5fff-4d91-9f05-e96e1aee5581", "parent_event_id": "e47b733e-4d3f-47be-8f1a-78a60551fc73", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3574, "start_time": "2024-06-20T01:20:53.548Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_101", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_101", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_101\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company\":\"Apple Inc.\",\"days\":30,\"meta\":\"Value\",\"model\":\"ARIMA\"},{\"company\":\"Microsoft Corporation\",\"days\":45,\"meta\":\"Value\",\"model\":\"LSTM\"},{\"location\":\"New York City\",\"days\":7,\"meta\":\"Value\"},{\"location\":\"Los Angeles\",\"days\":14,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_101_Output1 | class Fn_parallel_multiple_function_101_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me what the stock price prediction for Apple Inc. is for the next 30 days using the ARIMA model, and then provide the stock forecast for Microsoft Corporation for the next 45 days using the LSTM model? After that, could you provide the weather forecast for New York City for the next 7 days, and then give the weather forecast for Los Angeles for the next 14 days?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve a weather forecast for a specific location and time frame.\n    function_name: 'weather_forecast' or null,\n    // The city that you want to get the weather for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  } or {\n    // Predict the future stock price for a specific company and time frame.\n    function_name: 'stock_forecast' or null,\n    // The company that you want to get the stock price prediction for.\n    company: string,\n    // Number of future days for which to predict the stock price.\n    days: int,\n    // The model to use for prediction. Default is 'ARIMA'.\n    model: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"stock_forecast\",\n    \"company\": \"Apple Inc.\",\n    \"days\": 30,\n    \"model\": \"ARIMA\"\n  },\n  {\n    \"function_name\": \"stock_forecast\",\n    \"company\": \"Microsoft Corporation\",\n    \"days\": 45,\n    \"model\": \"LSTM\"\n  },\n  {\n    \"function_name\": \"weather_forecast\",\n    \"location\": \"New York City\",\n    \"days\": 7\n  },\n  {\n    \"function_name\": \"weather_forecast\",\n    \"location\": \"Los Angeles\",\n    \"days\": 14\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 348, "output_tokens": 135, "total_tokens": 483, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e47b733e-4d3f-47be-8f1a-78a60551fc73", "event_id": "e47b733e-4d3f-47be-8f1a-78a60551fc73", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 18191, "start_time": "2024-06-20T01:20:38.930Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_101", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c5382bbf-b1ad-4e92-982f-7e4e75399b0a", "event_id": "9465ec3d-ce85-46dd-8663-1dd940b63c2c", "parent_event_id": "c5382bbf-b1ad-4e92-982f-7e4e75399b0a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2256, "start_time": "2024-06-20T01:20:54.914Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_107", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_107", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_107\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_location\":\"San Francisco\",\"end_location\":\"Palo Alto\",\"meta\":\"Value\",\"time_period\":\"weekday\"},{\"start_point\":\"San Francisco\",\"end_point\":\"Palo Alto\",\"meta\":\"Value\"},{\"start_location\":\"Palo Alto\",\"end_location\":\"Los Angeles\",\"meta\":\"Value\",\"time_period\":\"weekend\"},{\"location\":\"Los Angeles\",\"days\":5,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_107_Output1 | class Fn_parallel_multiple_function_107_Output0 | class Fn_parallel_multiple_function_107_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan my upcoming trip? I need to know the estimated traffic from my home in San Francisco to my office in Palo Alto on a typical weekday. Also, I'm curious about the distance between these two locations. Furthermore, I'm planning a weekend getaway to Los Angeles, so I'd like to know the traffic estimate from Palo Alto to Los Angeles for the coming weekend. Lastly, could you provide me with a 5-day weather forecast for Los Angeles?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate distance between two locations.\n    function_name: 'calculate_distance' or null,\n    // Starting point of the journey.\n    start_point: string,\n    // Ending point of the journey.\n    end_point: string,\n  } or {\n    // Retrieve a weather forecast for a specific location and time frame.\n    function_name: 'weather_forecast' or null,\n    // The city that you want to get the weather for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  } or {\n    // Estimate traffic from one location to another for a specific time period.\n    function_name: 'traffic_estimate' or null,\n    // Starting location for the journey.\n    start_location: string,\n    // Ending location for the journey.\n    end_location: string,\n    // Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend. Default is 'now'.\n    time_period: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"traffic_estimate\",\n    \"start_location\": \"San Francisco\",\n    \"end_location\": \"Palo Alto\",\n    \"time_period\": \"weekday\"\n  },\n  {\n    \"function_name\": \"calculate_distance\",\n    \"start_point\": \"San Francisco\",\n    \"end_point\": \"Palo Alto\"\n  },\n  {\n    \"function_name\": \"traffic_estimate\",\n    \"start_location\": \"Palo Alto\",\n    \"end_location\": \"Los Angeles\",\n    \"time_period\": \"weekend\"\n  },\n  {\n    \"function_name\": \"weather_forecast\",\n    \"location\": \"Los Angeles\",\n    \"days\": 5\n  }\n]  ", "metadata": {"logprobs": null, "prompt_tokens": 417, "output_tokens": 145, "total_tokens": 562, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c5382bbf-b1ad-4e92-982f-7e4e75399b0a", "event_id": "c5382bbf-b1ad-4e92-982f-7e4e75399b0a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 18240, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_107", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c7a98a30-5f7d-4072-9d54-bb0f7c97a9c2", "event_id": "e8a83d2e-6753-43fa-953b-798ef75231b1", "parent_event_id": "c7a98a30-5f7d-4072-9d54-bb0f7c97a9c2", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1988, "start_time": "2024-06-20T01:20:55.221Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_112", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_112", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_112\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"religion\":\"Buddhism\",\"meta\":\"Value\"},{\"religion\":\"Hinduism\",\"meta\":\"Value\"},{\"religion\":\"Buddhism\",\"meta\":\"Value\"},{\"religion\":\"Hinduism\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_112_Output0 | class Fn_parallel_multiple_function_112_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please provide me with the origin and founder information of Buddhism, and then do the same for Hinduism? After that, could you also tell me about the core beliefs and practices of both these religions?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieves the core beliefs and practices of a specified religion.\n    function_name: 'religion.get_core_beliefs' or null,\n    // Name of the religion for which to retrieve the core beliefs and practices.\n    religion: string,\n  } or {\n    // Retrieves the origin and founder information of a specified religion.\n    function_name: 'religion.get_origin' or null,\n    // Name of the religion for which to retrieve the founder and origin.\n    religion: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"religion.get_origin\",\n    \"religion\": \"Buddhism\"\n  },\n  {\n    \"function_name\": \"religion.get_origin\",\n    \"religion\": \"Hinduism\"\n  },\n  {\n    \"function_name\": \"religion.get_core_beliefs\",\n    \"religion\": \"Buddhism\"\n  },\n  {\n    \"function_name\": \"religion.get_core_beliefs\",\n    \"religion\": \"Hinduism\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 257, "output_tokens": 114, "total_tokens": 371, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c7a98a30-5f7d-4072-9d54-bb0f7c97a9c2", "event_id": "c7a98a30-5f7d-4072-9d54-bb0f7c97a9c2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 18279, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_112", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: religion\\nExpected: any of ['Hinduism']\\nActual@1: meta=<Fn_parallel_multiple_function_112_Output0_TypeName.Value: 'Value'> religion='Buddhism'\\nActual all: [Fn_parallel_multiple_function_112_Output0(meta=<Fn_parallel_multiple_function_112_Output0_TypeName.Value: 'Value'>, religion='Buddhism'), Fn_parallel_multiple_function_112_Output0(meta=<Fn_parallel_multiple_function_112_Output0_TypeName.Value: 'Value'>, religion='Hinduism'), Fn_parallel_multiple_function_112_Output0(meta=<Fn_parallel_multiple_function_112_Output0_TypeName.Value: 'Value'>, religion='Buddhism'), Fn_parallel_multiple_function_112_Output0(meta=<Fn_parallel_multiple_function_112_Output0_TypeName.Value: 'Value'>, religion='Hinduism')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3aed6ad7-8822-435c-b422-a284ec010c1a", "event_id": "cf8c5de9-ea30-4000-b43e-d8a68cb380b6", "parent_event_id": "3aed6ad7-8822-435c-b422-a284ec010c1a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1328, "start_time": "2024-06-20T01:20:56.254Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_114", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_114", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_114\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"room\":\"Living room\",\"meta\":\"Value\",\"period\":\"Value2\"},{\"location\":\"Seattle\",\"days\":5,\"meta\":\"Value\"},{\"location\":\"San Francisco, CA\",\"meta\":\"Value\",\"period\":\"Value0\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_114_Output1 | class Fn_parallel_multiple_function_114_Output2 | class Fn_parallel_multiple_function_114_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with some information? I am planning to renovate my house and need to know the most popular paint color for the living room over the past month. Also, I am planning a trip to Seattle in the next 5 days, so I would like to know the weather forecast for that period. Lastly, I am considering moving to San Francisco, CA and would like to know the average house price there over the last quarter.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find the most popular paint color for a specific area in the home.\n    function_name: 'paint_color.trends' or null,\n    // Type of the room e.g. Living room, Bathroom etc.\n    room: string,\n    // The period over which to check the paint color trend. Default is 'Monthly' if not specified.\n    period: 'Daily' or 'Weekly' or 'Monthly' or 'Quarterly' or null,\n  } or {\n    // Retrieve a weather forecast for a specific location and time frame.\n    function_name: 'weather_forecast' or null,\n    // The city that you want to get the weather for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n  } or {\n    // Find the average house price in a specific area.\n    function_name: 'house_price_trends' or null,\n    // City and state, e.g. New York, NY.\n    location: string,\n    // The period over which to check the price trend. Default is 'Yearly' if not specified.\n    period: 'Quarterly' or 'Yearly' or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"paint_color.trends\",\n    \"room\": \"Living room\",\n    \"period\": \"Monthly\"\n  },\n  {\n    \"function_name\": \"weather_forecast\",\n    \"location\": \"Seattle\",\n    \"days\": 5\n  },\n  {\n    \"function_name\": \"house_price_trends\",\n    \"location\": \"San Francisco, CA\",\n    \"period\": \"Quarterly\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 446, "output_tokens": 93, "total_tokens": 539, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3aed6ad7-8822-435c-b422-a284ec010c1a", "event_id": "3aed6ad7-8822-435c-b422-a284ec010c1a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 18652, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_114", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "93014781-2541-412d-a242-70086a670196", "event_id": "040805cc-fabe-4846-9c6f-2a350a0227e3", "parent_event_id": "93014781-2541-412d-a242-70086a670196", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2666, "start_time": "2024-06-20T01:20:55.123Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_111", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_111", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_111\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"state\":\"California\",\"year\":1980,\"meta\":\"Value\"},{\"state\":\"California\",\"year\":1990,\"meta\":\"Value\"},{\"state\":\"California\",\"year\":1980,\"meta\":\"Value\",\"adjustment\":\"Value0\"},{\"state\":\"California\",\"year\":1990,\"meta\":\"Value\",\"adjustment\":\"Value0\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_111_Output0 | class Fn_parallel_multiple_function_111_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"What was the population of California in 1980 and 1990 according to the 'us_history.population_by_state_year' function, and what was the Real GDP of California in those same years according to the 'us_economy.gdp_by_state_year' function with the adjustment set to 'Real'?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve historical population data for a specific U.S. state and year.\n    function_name: 'us_history.population_by_state_year' or null,\n    // The U.S. state for which to retrieve the population.\n    state: string,\n    // The year for which to retrieve the population.\n    year: int,\n  } or {\n    // Retrieve historical GDP data for a specific U.S. state and year.\n    function_name: 'us_economy.gdp_by_state_year' or null,\n    // The U.S. state for which to retrieve the GDP.\n    state: string,\n    // The year for which to retrieve the GDP.\n    year: int,\n    // The type of adjustment for inflation, 'Real' or 'Nominal'. Optional, 'Nominal' by default.\n    adjustment: 'Real' or 'Nominal' or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'us_history.population_by_state_year',\n    state: 'California',\n    year: 1980,\n  },\n  {\n    function_name: 'us_history.population_by_state_year',\n    state: 'California',\n    year: 1990,\n  },\n  {\n    function_name: 'us_economy.gdp_by_state_year',\n    state: 'California',\n    year: 1980,\n    adjustment: 'Real',\n  },\n  {\n    function_name: 'us_economy.gdp_by_state_year',\n    state: 'California',\n    year: 1990,\n    adjustment: 'Real',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 356, "output_tokens": 134, "total_tokens": 490, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "93014781-2541-412d-a242-70086a670196", "event_id": "93014781-2541-412d-a242-70086a670196", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 18860, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_111", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: LLM returned us_history.population_by_state_year\\nExpected: any of dict_keys(['us_history.population_by_state_year_1', 'us_history.population_by_state_year_2', 'us_economy.gdp_by_state_year_1', 'us_economy.gdp_by_state_year_2'])\\nActual@3: meta=<Fn_parallel_multiple_function_111_Output0_TypeName.Value: 'Value'> state='California' year=1980\\nActual all: [Fn_parallel_multiple_function_111_Output0(meta=<Fn_parallel_multiple_function_111_Output0_TypeName.Value: 'Value'>, state='California', year=1980), Fn_parallel_multiple_function_111_Output0(meta=<Fn_parallel_multiple_function_111_Output0_TypeName.Value: 'Value'>, state='California', year=1990), Fn_parallel_multiple_function_111_Output0(meta=<Fn_parallel_multiple_function_111_Output0_TypeName.Value: 'Value'>, state='California', year=1980), Fn_parallel_multiple_function_111_Output0(meta=<Fn_parallel_multiple_function_111_Output0_TypeName.Value: 'Value'>, state='California', year=1990)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9485afba-c171-46c6-8142-2abfc5a92961", "event_id": "67dcd4db-d2c9-4510-8084-ec408dc82560", "parent_event_id": "9485afba-c171-46c6-8142-2abfc5a92961", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1235, "start_time": "2024-06-20T01:20:56.862Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_117", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_117", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_117\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"museum_name\":\"Louvre\",\"meta\":\"Value\",\"month\":3},{\"location\":\"Paris\",\"meta\":\"Value\",\"food_type\":\"Value0\"},{\"location\":\"Paris\",\"meta\":\"Value\",\"food_type\":\"Value1\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_117_Output1 | class Fn_parallel_multiple_function_117_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you provide me with the exhibition information for the Louvre museum for the next 3 months and then tell me about the best Italian and Chinese restaurants in the area of Paris?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get restaurant information for a specific area.\n    function_name: 'restaurant_info' or null,\n    // Location for which to find restaurants.\n    location: string,\n    // Type of cuisine for which to find restaurants. Default is 'all' if not specified.\n    food_type: 'Italian' or 'Chinese' or 'Mexican' or 'American' or null,\n  } or {\n    // Get exhibition information for a specific museum.\n    function_name: 'exhibition_info' or null,\n    // Name of the museum for which to find exhibitions.\n    museum_name: string,\n    // Number of upcoming months for which to retrieve exhibition details. Default is 1 if not specified.\n    month: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"exhibition_info\",\n    \"museum_name\": \"Louvre\",\n    \"month\": 3\n  },\n  {\n    \"function_name\": \"restaurant_info\",\n    \"location\": \"Paris\",\n    \"food_type\": \"Italian\"\n  },\n  {\n    \"function_name\": \"restaurant_info\",\n    \"location\": \"Paris\",\n    \"food_type\": \"Chinese\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 302, "output_tokens": 89, "total_tokens": 391, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9485afba-c171-46c6-8142-2abfc5a92961", "event_id": "9485afba-c171-46c6-8142-2abfc5a92961", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 19167, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_117", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b69c96e6-fe45-47a3-bfd0-2ea840aafb75", "event_id": "ca5f6b1a-c63f-4926-ae30-8be38abe7184", "parent_event_id": "b69c96e6-fe45-47a3-bfd0-2ea840aafb75", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2160, "start_time": "2024-06-20T01:20:56.448Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_115", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_115", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_115\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"item\":\"horse\",\"material\":\"Value1\",\"meta\":\"Value\",\"size\":20},{\"item\":\"dog\",\"material\":\"Value3\",\"meta\":\"Value\",\"size\":15},{\"subject\":\"sunset\",\"color\":\"Value0\",\"meta\":\"Value\",\"size\":30},{\"subject\":\"cityscape\",\"color\":\"Value1\",\"meta\":\"Value\",\"size\":25}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_115_Output0 | class Fn_parallel_multiple_function_115_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me order a custom sculpture of a horse made from Marble that is 20 inches in size, then another sculpture of a dog made from Wood that is 15 inches in size, followed by a custom painting of a sunset with the main color being Red that is 30 inches in size, and finally a painting of a cityscape with the main color being Blue that is 25 inches in size?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Order a custom sculpture with your preferred material.\n    function_name: 'sculpture.create_custom' or null,\n    // The subject of the sculpture, e.g. horse\n    item: string,\n    // Preferred material for the sculpture.\n    material: 'Bronze' or 'Marble' or 'Terracotta' or 'Wood' or 'Stone',\n    // The desired size for the sculpture in inches. This parameter is optional. Default is 10 inches if not specified.\n    size: int or null,\n  } or {\n    // Order a custom painting with your preferred color.\n    function_name: 'painting.create_custom' or null,\n    // The subject of the painting, e.g. horse\n    subject: string,\n    // Preferred main color for the painting.\n    color: 'Red' or 'Blue' or 'Green' or 'Yellow' or 'Black',\n    // The desired size for the painting in inches. This parameter is optional. Default is 20 inches if not specified.\n    size: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"sculpture.create_custom\",\n    \"item\": \"horse\",\n    \"material\": \"Marble\",\n    \"size\": 20\n  },\n  {\n    \"function_name\": \"sculpture.create_custom\",\n    \"item\": \"dog\",\n    \"material\": \"Wood\",\n    \"size\": 15\n  },\n  {\n    \"function_name\": \"painting.create_custom\",\n    \"subject\": \"sunset\",\n    \"color\": \"Red\",\n    \"size\": 30\n  },\n  {\n    \"function_name\": \"painting.create_custom\",\n    \"subject\": \"cityscape\",\n    \"color\": \"Blue\",\n    \"size\": 25\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 418, "output_tokens": 156, "total_tokens": 574, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6fc3e080-afec-4349-84db-5aa4cd02d783", "event_id": "ad702f68-574b-4c8f-9b6c-24f770f971ad", "parent_event_id": "6fc3e080-afec-4349-84db-5aa4cd02d783", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1436, "start_time": "2024-06-20T01:20:57.172Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_120", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_120", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_120\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"player_name\":\"Cristiano Ronaldo\",\"team_name\":\"Manchester United\",\"meta\":\"Value\",\"competition\":\"Premier League\"},{\"team_name\":\"Manchester United\",\"meta\":\"Value\",\"competition\":\"Premier League\"},{\"league_name\":\"Premier League\",\"meta\":\"Value\",\"season\":\"2019-2020\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_120_Output2 | class Fn_parallel_multiple_function_120_Output1 | class Fn_parallel_multiple_function_120_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me how many all-time goals Cristiano Ronaldo scored for Manchester United in the Premier League, then compare that with the top scorer of Manchester United in the same competition, and finally, tell me who was the top scorer of the Premier League in the 2019-2020 season?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fetch the top scorer of a specified football team.\n    function_name: 'team_stats.get_top_scorer' or null,\n    // The name of the football team.\n    team_name: string,\n    // Competition for which to fetch stats (optional). Default is 'Premier League' if not specified.\n    competition: string or null,\n  } or {\n    // Fetch the top scorer of a specified football league.\n    function_name: 'league_stats.get_top_scorer' or null,\n    // The name of the football league.\n    league_name: string,\n    // Season for which to fetch stats (optional). Default is '2019-2020' if not specified.\n    season: string or null,\n  } or {\n    // Fetch all-time goals scored by a particular football player for a specified team.\n    function_name: 'player_stats.get_all_time_goals' or null,\n    // The name of the football player.\n    player_name: string,\n    // The name of the team for which player has played.\n    team_name: string,\n    // Competition for which to fetch stats (optional). Default is 'Premier League' if not specified.\n    competition: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'player_stats.get_all_time_goals',\n    player_name: 'Cristiano Ronaldo',\n    team_name: 'Manchester United',\n    competition: 'Premier League'\n  },\n  {\n    function_name: 'team_stats.get_top_scorer',\n    team_name: 'Manchester United',\n    competition: 'Premier League'\n  },\n  {\n    function_name: 'league_stats.get_top_scorer',\n    league_name: 'Premier League',\n    season: '2019-2020'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 424, "output_tokens": 113, "total_tokens": 537, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b69c96e6-fe45-47a3-bfd0-2ea840aafb75", "event_id": "b69c96e6-fe45-47a3-bfd0-2ea840aafb75", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 19678, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_115", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6fc3e080-afec-4349-84db-5aa4cd02d783", "event_id": "6fc3e080-afec-4349-84db-5aa4cd02d783", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 19679, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_120", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b87224ef-ff50-4de3-a0aa-b7f8a035d228", "event_id": "f5114d9a-01ca-4578-89fe-0925ab549a9d", "parent_event_id": "b87224ef-ff50-4de3-a0aa-b7f8a035d228", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2107, "start_time": "2024-06-20T01:20:56.911Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_118", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_118", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_118\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"artist\":\"Taylor Swift\",\"location\":\"New York\",\"add_ons\":[\"Value1\"],\"meta\":\"Value\"},{\"artist\":\"Ed Sheeran\",\"location\":\"Los Angeles\",\"add_ons\":[\"Value0\",\"Value2\"],\"meta\":\"Value\"},{\"festival\":\"Coachella\",\"location\":\"Indio\",\"add_ons\":[\"Value0\",\"Value2\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_118_Output0 | class Fn_parallel_multiple_function_118_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me book a ticket for a concert of Taylor Swift in New York with a VIP Seating add-on, then book another ticket for a concert of Ed Sheeran in Los Angeles with a Backstage Pass and Parking Pass add-ons, and finally book a ticket for the Coachella festival in Indio with a Camping Pass and Parking Pass add-ons?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Book a ticket for a concert at a specific location with various add-ons like backstage pass.\n    function_name: 'concert.book_ticket' or null,\n    // Name of the artist for the concert.\n    artist: string,\n    // City where the concert will take place.\n    location: string,\n    // Add-ons for the concert. Default is 'VIP Seating' if not specified.\n    add_ons: [\n      'Backstage Pass' or 'VIP Seating' or 'Parking Pass'\n    ],\n  } or {\n    // Book a ticket for a festival at a specific location with various add-ons like camping access.\n    function_name: 'festival.book_ticket' or null,\n    // Name of the festival.\n    festival: string,\n    // City where the festival will take place.\n    location: string,\n    // Add-ons for the festival. Default is 'Camping Pass' if not specified.\n    add_ons: [\n      'Camping Pass' or 'VIP Seating' or 'Parking Pass'\n    ],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'concert.book_ticket',\n    artist: 'Taylor Swift',\n    location: 'New York',\n    add_ons: ['VIP Seating'],\n  },\n  {\n    function_name: 'concert.book_ticket',\n    artist: 'Ed Sheeran',\n    location: 'Los Angeles',\n    add_ons: ['Backstage Pass', 'Parking Pass'],\n  },\n  {\n    function_name: 'festival.book_ticket',\n    festival: 'Coachella',\n    location: 'Indio',\n    add_ons: ['Camping Pass', 'Parking Pass'],\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 403, "output_tokens": 124, "total_tokens": 527, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b87224ef-ff50-4de3-a0aa-b7f8a035d228", "event_id": "b87224ef-ff50-4de3-a0aa-b7f8a035d228", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 20088, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_118", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dedd69c0-d059-4444-835a-e63bc1211433", "event_id": "8d017edb-3b84-4098-88d0-ebd63ad21624", "parent_event_id": "dedd69c0-d059-4444-835a-e63bc1211433", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2787, "start_time": "2024-06-20T01:20:56.254Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_113", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_113", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_113\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"artwork_name\":\"Starry Night\",\"artist\":\"Vincent Van Gogh\",\"meta\":\"Value\",\"platform\":\"Sotheby\"},{\"artwork_name\":\"The Scream\",\"artist\":\"Edvard Munch\",\"meta\":\"Value\",\"platform\":\"Christie\"},{\"title\":\"To Kill a Mockingbird\",\"author\":\"Harper Lee\",\"meta\":\"Value\",\"platform\":\"New York Public Library\"},{\"title\":\"1984\",\"author\":\"George Orwell\",\"meta\":\"Value\",\"platform\":\"British Library\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_113_Output0 | class Fn_parallel_multiple_function_113_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me find the price of the artwork named 'Starry Night' by the artist 'Vincent Van Gogh' on the 'Sotheby' auction platform, and then fetch the price of another artwork called 'The Scream' by 'Edvard Munch' on the 'Christie' platform? After that, I would like to search for a book titled 'To Kill a Mockingbird' by the author 'Harper Lee' in the 'New York Public Library', and then look for another book named '1984' by 'George Orwell' in the 'British Library'.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Search for a specific book in the library.\n    function_name: 'library.search_book' or null,\n    // The title of the book to be searched.\n    title: string,\n    // The author of the book to ensure the precise book is fetched.\n    author: string,\n    // The library where the book should be fetched from. (default: all)\n    platform: string or null,\n  } or {\n    // Fetch the price of a specific artwork on the auction platform.\n    function_name: 'art_auction.fetch_artwork_price' or null,\n    // The name of the artwork to be searched.\n    artwork_name: string,\n    // The artist's name to ensure the precise artwork is fetched.\n    artist: string,\n    // The platform where the artwork's price should be fetched from. (default: all)\n    platform: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"art_auction.fetch_artwork_price\",\n    \"artwork_name\": \"Starry Night\",\n    \"artist\": \"Vincent Van Gogh\",\n    \"platform\": \"Sotheby\"\n  },\n  {\n    \"function_name\": \"art_auction.fetch_artwork_price\",\n    \"artwork_name\": \"The Scream\",\n    \"artist\": \"Edvard Munch\",\n    \"platform\": \"Christie\"\n  },\n  {\n    \"function_name\": \"library.search_book\",\n    \"title\": \"To Kill a Mockingbird\",\n    \"author\": \"Harper Lee\",\n    \"platform\": \"New York Public Library\"\n  },\n  {\n    \"function_name\": \"library.search_book\",\n    \"title\": \"1984\",\n    \"author\": \"George Orwell\",\n    \"platform\": \"British Library\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 420, "output_tokens": 181, "total_tokens": 601, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dedd69c0-d059-4444-835a-e63bc1211433", "event_id": "dedd69c0-d059-4444-835a-e63bc1211433", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 20111, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_113", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: title\\nExpected: any of ['1984']\\nActual@1: meta=<Fn_parallel_multiple_function_113_Output0_TypeName.Value: 'Value'> title='To Kill a Mockingbird' author='Harper Lee' platform='New York Public Library'\\nActual all: [Fn_parallel_multiple_function_113_Output1(meta=<Fn_parallel_multiple_function_113_Output1_TypeName.Value: 'Value'>, artwork_name='Starry Night', artist='Vincent Van Gogh', platform='Sotheby'), Fn_parallel_multiple_function_113_Output1(meta=<Fn_parallel_multiple_function_113_Output1_TypeName.Value: 'Value'>, artwork_name='The Scream', artist='Edvard Munch', platform='Christie'), Fn_parallel_multiple_function_113_Output0(meta=<Fn_parallel_multiple_function_113_Output0_TypeName.Value: 'Value'>, title='To Kill a Mockingbird', author='Harper Lee', platform='New York Public Library'), Fn_parallel_multiple_function_113_Output0(meta=<Fn_parallel_multiple_function_113_Output0_TypeName.Value: 'Value'>, title='1984', author='George Orwell', platform='British Library')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f92b4c8d-0bdb-494b-a736-49cd5698011d", "event_id": "4f946417-6817-4278-9690-acd547f8bcd9", "parent_event_id": "f92b4c8d-0bdb-494b-a736-49cd5698011d", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2406, "start_time": "2024-06-20T01:20:57.122Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_119", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_119", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_119\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"key\":\"D Minor\",\"tempo\":120,\"meta\":\"Value\",\"time_signature\":null},{\"frequency\":440,\"amplitude\":0.5,\"meta\":\"Value\",\"duration\":null},{\"key\":\"E Major\",\"tempo\":90,\"meta\":\"Value\",\"time_signature\":\"3/4\"},{\"frequency\":300,\"amplitude\":0.7,\"meta\":\"Value\",\"duration\":5.0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_119_Output1 | class Fn_parallel_multiple_function_119_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me create a piece of music in D Minor with a tempo of 120 beats per minute and then generate an audio signal with a frequency of 440 Hz and an amplitude of 0.5? After that, I would like to generate another piece of music in E Major with a tempo of 90 beats per minute and a time signature of 3/4. Finally, generate another audio signal with a frequency of 300 Hz, an amplitude of 0.7, and a duration of 5 seconds.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Generate an audio signal given a frequency, amplitude, and duration.\n    function_name: 'audio.generate' or null,\n    // Frequency of the audio signal in Hz.\n    frequency: int,\n    // Amplitude of the audio signal.\n    amplitude: float,\n    // Duration of the audio signal in seconds. Default is 1 second if not specified.\n    duration: float or null,\n  } or {\n    // Generate a piece of music given a key, tempo, and time signature.\n    function_name: 'music.generate' or null,\n    // The key of the piece, e.g., C Major.\n    key: string,\n    // Tempo of the piece in beats per minute.\n    tempo: int,\n    // Time signature of the piece, e.g., 4/4. Default is '4/4' if not specified.\n    time_signature: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"music.generate\",\n    \"key\": \"D Minor\",\n    \"tempo\": 120\n  },\n  {\n    \"function_name\": \"audio.generate\",\n    \"frequency\": 440,\n    \"amplitude\": 0.5\n  },\n  {\n    \"function_name\": \"music.generate\",\n    \"key\": \"E Major\",\n    \"tempo\": 90,\n    \"time_signature\": \"3/4\"\n  },\n  {\n    \"function_name\": \"audio.generate\",\n    \"frequency\": 300,\n    \"amplitude\": 0.7,\n    \"duration\": 5\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 406, "output_tokens": 137, "total_tokens": 543, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f92b4c8d-0bdb-494b-a736-49cd5698011d", "event_id": "f92b4c8d-0bdb-494b-a736-49cd5698011d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 20599, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_119", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c6840d95-d3c0-4e31-9442-7c0191dc11e2", "event_id": "320174d6-ee49-479e-b3d5-7e2d20f94e74", "parent_event_id": "c6840d95-d3c0-4e31-9442-7c0191dc11e2", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2817, "start_time": "2024-06-20T01:20:56.765Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_116", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_116", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_116\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[]", "override": null, "type": {"name": "single", "fields": {"value": "list<?>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan my trip to New York? I would like to visit a modern art installation, a park with a playground and a picnic area, and a popular monument. Could you find these for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Search for artworks based on type and location.\n    function_name: 'artwork_search.find' or null,\n    // Type of the artwork. E.g., painting, sculpture, installation.\n    type: string,\n    // Location or city where the artwork is.\n    location: string,\n    // Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc. Default is 'contemporary' if not specified.\n    era: string or null,\n  } or {\n    // Search for parks based on facilities and location.\n    function_name: 'park_search.find' or null,\n    // List of facilities in the park.\n    facilities: string[],\n    // Location or city where the park is.\n    location: string,\n  } or {\n    // Search for tourist attractions based on type and location.\n    function_name: 'tourist_attraction.find' or null,\n    // Type of the attraction. E.g., monument, museum, park.\n    attractionType: string,\n    // Location or city where the attraction is.\n    location: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"questions\": [\n    {\n      \"question\": \"Can you help me plan my trip to New York? I would like to visit a modern art installation, a park with a playground and a picnic area, and a popular monument. Could you find these for me?\",\n      \"functions\": [\n        {\n          \"function_name\": \"artwork_search.find\",\n          \"type\": \"installation\",\n          \"location\": \"New York\",\n          \"era\": \"modern\"\n        },\n        {\n          \"function_name\": \"park_search.find\",\n          \"facilities\": [\"playground\", \"picnic area\"],\n          \"location\": \"New York\"\n        },\n        {\n          \"function_name\": \"tourist_attraction.find\",\n          \"attractionType\": \"monument\",\n          \"location\": \"New York\"\n        }\n      ]\n    }\n  ]\n}", "metadata": {"logprobs": null, "prompt_tokens": 382, "output_tokens": 175, "total_tokens": 557, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c6840d95-d3c0-4e31-9442-7c0191dc11e2", "event_id": "c6840d95-d3c0-4e31-9442-7c0191dc11e2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 20652, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_116", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3a26f975-2000-4a37-9d19-d86a42199275", "event_id": "56a6297b-8460-4117-ae41-9457b8e6865c", "parent_event_id": "3a26f975-2000-4a37-9d19-d86a42199275", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2545, "start_time": "2024-06-20T01:20:57.210Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_121", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_121", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_121\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"team\":\"Manchester United\",\"league\":\"English Premier League\",\"rounds\":5,\"meta\":\"Value\"},{\"team\":\"Los Angeles Lakers\",\"league\":\"NBA\",\"rounds\":7,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_121_Output1 | class Fn_parallel_multiple_function_121_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me the scores for the Manchester United soccer team in the English Premier League for the last 5 rounds and also the scores for the Los Angeles Lakers basketball team in the NBA for the last 7 rounds?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve basketball scores for a specific team and league within a certain range of rounds.\n    function_name: 'basketball_scores.get_scores' or null,\n    // The basketball team whose scores are to be retrieved.\n    team: string,\n    // The league in which the team competes.\n    league: string,\n    // Number of past rounds for which to retrieve the scores.\n    rounds: int,\n  } or {\n    // Retrieve soccer scores for a specific team and league within a certain range of rounds.\n    function_name: 'soccer_scores.get_scores' or null,\n    // The soccer team whose scores are to be retrieved.\n    team: string,\n    // The league in which the team competes.\n    league: string,\n    // Number of past rounds for which to retrieve the scores.\n    rounds: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'soccer_scores.get_scores',\n    team: 'Manchester United',\n    league: 'English Premier League',\n    rounds: 5,\n  },\n  {\n    function_name: 'basketball_scores.get_scores',\n    team: 'Los Angeles Lakers',\n    league: 'NBA',\n    rounds: 7,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 330, "output_tokens": 74, "total_tokens": 404, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3a26f975-2000-4a37-9d19-d86a42199275", "event_id": "3a26f975-2000-4a37-9d19-d86a42199275", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 20825, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_121", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: team\\nExpected: any of ['Los Angeles Lakers', 'Lakers']\\nActual@1: meta=<Fn_parallel_multiple_function_121_Output0_TypeName.Value: 'Value'> team='Manchester United' league='English Premier League' rounds=5\\nActual all: [Fn_parallel_multiple_function_121_Output0(meta=<Fn_parallel_multiple_function_121_Output0_TypeName.Value: 'Value'>, team='Manchester United', league='English Premier League', rounds=5), Fn_parallel_multiple_function_121_Output0(meta=<Fn_parallel_multiple_function_121_Output0_TypeName.Value: 'Value'>, team='Los Angeles Lakers', league='NBA', rounds=7)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7130ba0e-c1e4-4576-a8f2-bfa3471e27f8", "event_id": "8fae3ffe-e2d2-4ca6-a419-35bccc78a322", "parent_event_id": "7130ba0e-c1e4-4576-a8f2-bfa3471e27f8", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1467, "start_time": "2024-06-20T01:20:58.610Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_126", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_126", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_126\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Seattle, WA\",\"cuisine\":[\"Value0\",\"Value1\"],\"group_size\":10,\"meta\":\"Value\"},{\"location\":\"Seattle, WA\",\"event_type\":[\"Value0\",\"Value1\"],\"group_size\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_126_Output0 | class Fn_parallel_multiple_function_126_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan a day out in Seattle, WA for my group of 10 friends? We are food lovers and would like to try some Seafood and Italian cuisine for lunch. Later in the evening, we are interested in attending a Concert or a Sports event. Could you find suitable restaurants and events for us?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find restaurants suitable for groups based on specified criteria such as location and cuisine.\n    function_name: 'restaurant.find_group' or null,\n    // The city and state, e.g. Seattle, WA\n    location: string,\n    // Preferred cuisine at the restaurant. Default is all if not specified.\n    cuisine: [\n      'Seafood' or 'Italian' or 'Indian' or 'Chinese'\n    ],\n    // Size of the group that the restaurant should accommodate.\n    group_size: int,\n  } or {\n    // Find events suitable for groups based on specified criteria such as location and event type.\n    function_name: 'events.find_event' or null,\n    // The city and state, e.g. Seattle, WA\n    location: string,\n    // Type of event. Default is all if not specified.\n    event_type: [\n      'Concert' or 'Sports' or 'Exhibition' or 'Festival'\n    ],\n    // Size of the group that the event should accommodate.\n    group_size: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'restaurant.find_group',\n    location: 'Seattle, WA',\n    cuisine: ['Seafood', 'Italian'],\n    group_size: 10,\n  },\n  {\n    function_name: 'events.find_event',\n    location: 'Seattle, WA',\n    event_type: ['Concert', 'Sports'],\n    group_size: 10,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 395, "output_tokens": 79, "total_tokens": 474, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7130ba0e-c1e4-4576-a8f2-bfa3471e27f8", "event_id": "7130ba0e-c1e4-4576-a8f2-bfa3471e27f8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 21147, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_126", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ff827865-d35c-437e-ae61-9ef49ac5209d", "event_id": "c8fc2692-43da-4fa1-8f7f-15176367aa87", "parent_event_id": "ff827865-d35c-437e-ae61-9ef49ac5209d", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2617, "start_time": "2024-06-20T01:20:57.583Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_122", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_122", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_122\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"numPlayers\":6,\"category\":\"strategy\",\"meta\":\"Value\",\"difficulty\":\"beginner\"},{\"numPlayers\":4,\"category\":\"party\",\"meta\":\"Value\",\"difficulty\":\"intermediate\"},{\"numOfPlayers\":6,\"category\":\"strategy\",\"meta\":\"Value\",\"priceRange\":\"$20-$30\"},{\"numOfPlayers\":4,\"category\":\"party\",\"meta\":\"Value\",\"priceRange\":\"$20-$30\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_122_Output1 | class Fn_parallel_multiple_function_122_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"I'm planning a game night and I need some board game recommendations. I have a group of 5 friends coming over, so we'll be 6 players in total. We all enjoy strategy games but we're all beginners, so nothing too complex. Can you recommend some games from BoardGameGeek that fit this criteria? Also, I have another group of 4 friends who love party games. We're not beginners but we're not advanced players either, so something in the middle would be great. Can you recommend some games from BoardGameGeek for this group as well? Lastly, I'm also considering buying some games from Amazon Game Store. I have a budget of $20-$30. Can you recommend some strategy games for 6 players and party games for 4 players within this price range?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Generate game recommendation from Amazon Game Store based on number of players and category.\n    function_name: 'AmazonGameStore.recommend' or null,\n    // The number of players who will play the game.\n    numOfPlayers: int,\n    // The preferred category of board game. E.g. strategy, family, party etc.\n    category: string,\n    // The price range you are willing to pay for the board game. E.g. $10-$20, $20-$30 etc. This is an optional parameter. Default to '$10-$20' if not specified.\n    priceRange: string or null,\n  } or {\n    // Generate game recommendation from BoardGameGeek store based on number of players and category.\n    function_name: 'BoardGameGeek.recommend' or null,\n    // The number of players who will play the game.\n    numPlayers: int,\n    // The preferred category of board game. E.g. strategy, family, party etc.\n    category: string,\n    // Preferred difficulty level. E.g. beginner, intermediate, advanced etc. This is an optional parameter. Default to 'beginner' if not specified.\n    difficulty: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"BoardGameGeek.recommend\",\n    \"numPlayers\": 6,\n    \"category\": \"strategy\",\n    \"difficulty\": \"beginner\"\n  },\n  {\n    \"function_name\": \"BoardGameGeek.recommend\",\n    \"numPlayers\": 4,\n    \"category\": \"party\",\n    \"difficulty\": \"intermediate\"\n  },\n  {\n    \"function_name\": \"AmazonGameStore.recommend\",\n    \"numOfPlayers\": 6,\n    \"category\": \"strategy\",\n    \"priceRange\": \"$20-$30\"\n  },\n  {\n    \"function_name\": \"AmazonGameStore.recommend\",\n    \"numOfPlayers\": 4,\n    \"category\": \"party\",\n    \"priceRange\": \"$20-$30\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 526, "output_tokens": 166, "total_tokens": 692, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ff827865-d35c-437e-ae61-9ef49ac5209d", "event_id": "ff827865-d35c-437e-ae61-9ef49ac5209d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 21270, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_122", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "af46fff4-23aa-4d85-9ae1-bd80b527952b", "event_id": "f8a593f2-7580-475e-b36f-2e611170a698", "parent_event_id": "af46fff4-23aa-4d85-9ae1-bd80b527952b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2460, "start_time": "2024-06-20T01:20:57.791Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_123", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_123", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_123\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"game\":\"Call of Duty\",\"platform\":\"Playstation\",\"meta\":\"Value\",\"region\":\"European\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_123_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please find the latest updates for the game 'Call of Duty' on the 'Playstation' platform for the 'European' region, then find the current price for the same game on the 'Xbox' platform, and finally find reviews for the game 'FIFA 21' from the 'American' region?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find the latest updates or patches for a specific game on a specified gaming platform.\n    function_name: 'games.update.find' or null,\n    // The name of the game.\n    game: string,\n    // The gaming platform, e.g. Xbox, Playstation, PC.\n    platform: string,\n    // The region of the update (optional, default is 'global')\n    region: string or null,\n  } or {\n    // Find reviews for a specific game.\n    function_name: 'games.reviews.find' or null,\n    // The name of the game.\n    game: string,\n    // The region where the reviews are coming from (optional, default is 'global')\n    region: string or null,\n  } or {\n    // Find the current price for a specific game on a specified gaming platform.\n    function_name: 'games.price.find' or null,\n    // The name of the game.\n    game: string,\n    // The gaming platform, e.g. Xbox, Playstation, PC.\n    platform: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "1. Find the latest updates for the game 'Call of Duty' on the 'Playstation' platform for the 'European' region:\n\n```json\n{\n  \"function_name\": \"games.update.find\",\n  \"game\": \"Call of Duty\",\n  \"platform\": \"Playstation\",\n  \"region\": \"European\"\n}\n```\n\n2. Find the current price for the game 'Call of Duty' on the 'Xbox' platform:\n\n```json\n{\n  \"function_name\": \"games.price.find\",\n  \"game\": \"Call of Duty\",\n  \"platform\": \"Xbox\"\n}\n```\n\n3. Find reviews for the game 'FIFA 21' from the 'American' region:\n\n```json\n{\n  \"function_name\": \"games.reviews.find\",\n  \"game\": \"FIFA 21\",\n  \"region\": \"American\"\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 396, "output_tokens": 179, "total_tokens": 575, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "af46fff4-23aa-4d85-9ae1-bd80b527952b", "event_id": "af46fff4-23aa-4d85-9ae1-bd80b527952b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 21321, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_123", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "89066408-5c9b-43ec-a7f8-a817d35f0df8", "event_id": "84307956-0e4e-4100-8af3-5db50d400e23", "parent_event_id": "89066408-5c9b-43ec-a7f8-a817d35f0df8", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2659, "start_time": "2024-06-20T01:20:58.099Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_124", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_124", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_124\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"game_title\":\"Call of Duty: Modern Warfare\",\"year\":2019,\"meta\":\"Value\",\"platform\":\"Playstation\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_124_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me how many active players were engaged with the video game 'Call of Duty: Modern Warfare' in the year 2019 on the 'Playstation' platform, and then compare that with the number of active players for the same game in the year 2020 on the 'PC' platform? Also, could you provide the sales figures for 'Call of Duty: Modern Warfare' for the year 2019 on the 'Playstation' platform and then for the year 2020 on the 'PC' platform?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieves the number of active players for a specified video game and year.\n    function_name: 'video_games.get_player_count' or null,\n    // The title of the video game.\n    game_title: string,\n    // The year in question.\n    year: int,\n    // The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default is all if not specified.\n    platform: string or null,\n  } or {\n    // Retrieves the sales figures for a specified video game and year.\n    function_name: 'video_games.get_sales' or null,\n    // The title of the video game.\n    game_title: string,\n    // The year in question.\n    year: int,\n    // The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default is all if not specified.\n    platform: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"video_games.get_player_count\",\n  \"game_title\": \"Call of Duty: Modern Warfare\",\n  \"year\": 2019,\n  \"platform\": \"Playstation\"\n}\n\n{\n  \"function_name\": \"video_games.get_player_count\",\n  \"game_title\": \"Call of Duty: Modern Warfare\",\n  \"year\": 2020,\n  \"platform\": \"PC\"\n}\n\n{\n  \"function_name\": \"video_games.get_sales\",\n  \"game_title\": \"Call of Duty: Modern Warfare\",\n  \"year\": 2019,\n  \"platform\": \"Playstation\"\n}\n\n{\n  \"function_name\": \"video_games.get_sales\",\n  \"game_title\": \"Call of Duty: Modern Warfare\",\n  \"year\": 2020,\n  \"platform\": \"PC\"\n}", "metadata": {"logprobs": null, "prompt_tokens": 407, "output_tokens": 168, "total_tokens": 575, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "89066408-5c9b-43ec-a7f8-a817d35f0df8", "event_id": "89066408-5c9b-43ec-a7f8-a817d35f0df8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 21827, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_124", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "670ee7da-2673-46c5-b136-a06831b10c51", "event_id": "dc45fd4b-8397-40a7-9f0a-1a332bdcae00", "parent_event_id": "670ee7da-2673-46c5-b136-a06831b10c51", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1831, "start_time": "2024-06-20T01:20:59.020Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_127", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_127", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_127\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"mainIngredient\":\"chicken\",\"ingredientLimit\":5,\"meta\":\"Value\"},{\"cuisine\":\"Italian\",\"price\":[\"mid\"],\"meta\":\"Value\"},{\"mainIngredient\":\"beef\",\"ingredientLimit\":7,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_127_Output1 | class Fn_parallel_multiple_function_127_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find a recipe that uses chicken as the main ingredient and doesn't require more than 5 ingredients? After that, could you also find a restaurant that serves Italian cuisine and falls within a mid-range price? And finally, could you find another recipe that uses beef as the main ingredient and requires no more than 7 ingredients?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Locate restaurants based on specific criteria such as cuisine and price range\n    function_name: 'restaurant.find' or null,\n    // The type of cuisine preferred.\n    cuisine: string,\n    // Price range of the restaurant in format ['low', 'mid', 'high']. Default is 'mid' if not specified.\n    price: string[],\n  } or {\n    // Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients\n    function_name: 'recipe.find' or null,\n    // Main ingredient for the recipe.\n    mainIngredient: string,\n    // Max number of ingredients the recipe should use.\n    ingredientLimit: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"recipe.find\",\n    \"mainIngredient\": \"chicken\",\n    \"ingredientLimit\": 5\n  },\n  {\n    \"function_name\": \"restaurant.find\",\n    \"cuisine\": \"Italian\",\n    \"price\": [\"mid\"]\n  },\n  {\n    \"function_name\": \"recipe.find\",\n    \"mainIngredient\": \"beef\",\n    \"ingredientLimit\": 7\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 320, "output_tokens": 90, "total_tokens": 410, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "670ee7da-2673-46c5-b136-a06831b10c51", "event_id": "670ee7da-2673-46c5-b136-a06831b10c51", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 21920, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_127", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c15cd519-3f82-457a-bb98-c39e3722e010", "event_id": "62a3ee12-768c-4d19-a1a6-fb3e7a85119b", "parent_event_id": "c15cd519-3f82-457a-bb98-c39e3722e010", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2252, "start_time": "2024-06-20T01:20:58.609Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_125", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_125", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_125\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"ingredients\":[\"eggs\",\"milk\",\"bread\"],\"calories\":300,\"meta\":\"Value\",\"meal\":\"breakfast\"},{\"ingredients\":[\"chicken\",\"tomatoes\",\"lettuce\"],\"calories\":500,\"meta\":\"Value\",\"meal\":\"lunch\"},{\"original_ingredient\":\"beef\",\"replacement_ingredient\":\"tofu\",\"calories\":600,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_125_Output0 | class Fn_parallel_multiple_function_125_Output2 | class Fn_parallel_multiple_function_125_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan my meals for the day? I want to start with a breakfast recipe using eggs, milk, and bread, and it should not exceed 300 calories. Then, for lunch, I want to try a new restaurant that serves dishes with chicken, tomatoes, and lettuce, and the dishes should not be more than 500 calories. In the evening, I have a recipe for dinner that uses beef, but I want to replace the beef with tofu and keep the total calories under 600. Can you assist me with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Searches for recipes based on a list of ingredients and a maximum caloric value.\n    function_name: 'recipe_search' or null,\n    // A list of ingredients you want to use in the recipe.\n    ingredients: string[],\n    // The maximum number of calories for the recipe.\n    calories: int,\n    // Type of the meal for the recipe, it's optional and could be breakfast, lunch or dinner. Default is all if not specified.\n    meal: string or null,\n  } or {\n    // Replaces an ingredient in a recipe with a substitute, keeping the calories below a certain number.\n    function_name: 'ingredient_replace' or null,\n    // The ingredient in the recipe to replace.\n    original_ingredient: string,\n    // The substitute ingredient to replace the original one.\n    replacement_ingredient: string,\n    // The maximum number of calories for the recipe after replacement.\n    calories: int,\n  } or {\n    // Searches for restaurants based on a list of preferred ingredients and maximum calorie count.\n    function_name: 'restaurant_search' or null,\n    // A list of ingredients you prefer in the restaurant's dishes.\n    ingredients: string[],\n    // The maximum calorie count you prefer for the restaurant's dishes.\n    calories: int,\n    // Type of the meal for the restaurant's dishes, it's optional and could be breakfast, lunch or dinner. Default is all if not specified.\n    meal: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"recipe_search\",\n    \"ingredients\": [\"eggs\", \"milk\", \"bread\"],\n    \"calories\": 300,\n    \"meal\": \"breakfast\"\n  },\n  {\n    \"function_name\": \"restaurant_search\",\n    \"ingredients\": [\"chicken\", \"tomatoes\", \"lettuce\"],\n    \"calories\": 500,\n    \"meal\": \"lunch\"\n  },\n  {\n    \"function_name\": \"ingredient_replace\",\n    \"original_ingredient\": \"beef\",\n    \"replacement_ingredient\": \"tofu\",\n    \"calories\": 600\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 523, "output_tokens": 136, "total_tokens": 659, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c15cd519-3f82-457a-bb98-c39e3722e010", "event_id": "c15cd519-3f82-457a-bb98-c39e3722e010", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 21932, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_125", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: ingredients\\nExpected: any of [['eggs', 'milk', 'bread']]\\nActual@2: meta=<Fn_parallel_multiple_function_125_Output0_TypeName.Value: 'Value'> ingredients=['chicken', 'tomatoes', 'lettuce'] calories=500 meal='lunch'\\nActual all: [Fn_parallel_multiple_function_125_Output0(meta=<Fn_parallel_multiple_function_125_Output0_TypeName.Value: 'Value'>, ingredients=['eggs', 'milk', 'bread'], calories=300, meal='breakfast'), Fn_parallel_multiple_function_125_Output0(meta=<Fn_parallel_multiple_function_125_Output0_TypeName.Value: 'Value'>, ingredients=['chicken', 'tomatoes', 'lettuce'], calories=500, meal='lunch'), Fn_parallel_multiple_function_125_Output1(meta=<Fn_parallel_multiple_function_125_Output1_TypeName.Value: 'Value'>, original_ingredient='beef', replacement_ingredient='tofu', calories=600)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "12f0b6fe-e51b-4cbc-984b-5373819e8425", "event_id": "6514b381-c457-4151-a2e7-b6682a7045f0", "parent_event_id": "12f0b6fe-e51b-4cbc-984b-5373819e8425", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1717, "start_time": "2024-06-20T01:20:59.757Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_131", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_131", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_131\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"stock\":\"AAPL\",\"invested_amount\":5000,\"expected_annual_return\":0.07,\"years\":10,\"meta\":\"Value\"},{\"company_name\":\"Microsoft\",\"detail_level\":\"detailed\",\"meta\":\"Value\",\"market\":\"NASDAQ\"},{\"a\":5,\"b\":-20,\"c\":15,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_131_Output1 | class Fn_parallel_multiple_function_131_Output0 | class Fn_parallel_multiple_function_131_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with the following tasks? First, I want to know the future value of my investment in the stock with the ticker symbol 'AAPL'. I have invested $5000 in it and I am expecting an annual return of 7% (0.07). I plan to hold this investment for 10 years. Second, I am interested in getting detailed information about the company 'Microsoft'. I want this information from the 'NASDAQ' stock market. Lastly, I have a quadratic equation with coefficients a=5, b=-20, and c=15. Could you solve this equation for me and provide the roots?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Function solves the quadratic equation and returns its roots.\n    function_name: 'solve_quadratic_equation' or null,\n    // Coefficient of x squared\n    a: int,\n    // Coefficient of x\n    b: int,\n    // Constant term in the quadratic equation\n    c: int,\n  } or {\n    // Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.\n    function_name: 'portfolio_future_value' or null,\n    // The ticker symbol of the stock.\n    stock: string,\n    // The invested amount in USD.\n    invested_amount: int,\n    // The expected annual return on investment as a decimal. E.g. 5% = 0.05\n    expected_annual_return: float,\n    // The number of years for which the investment is made.\n    years: int,\n  } or {\n    // Retrieves information about a specific stock based on company's name.\n    function_name: 'get_stock_info' or null,\n    // The name of the company.\n    company_name: string,\n    // Level of detail for stock information. Can be 'summary' or 'detailed'.\n    detail_level: string,\n    // The stock market of interest. Default is 'NASDAQ'\n    market: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"portfolio_future_value\",\n    \"stock\": \"AAPL\",\n    \"invested_amount\": 5000,\n    \"expected_annual_return\": 0.07,\n    \"years\": 10\n  },\n  {\n    \"function_name\": \"get_stock_info\",\n    \"company_name\": \"Microsoft\",\n    \"detail_level\": \"detailed\",\n    \"market\": \"NASDAQ\"\n  },\n  {\n    \"function_name\": \"solve_quadratic_equation\",\n    \"a\": 5,\n    \"b\": -20,\n    \"c\": 15\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 519, "output_tokens": 132, "total_tokens": 651, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "461eb2ad-f5f5-43f9-967b-6cc531e52c7b", "event_id": "6f3d64f3-63f8-437a-bb04-37cfdb1d38c3", "parent_event_id": "461eb2ad-f5f5-43f9-967b-6cc531e52c7b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1222, "start_time": "2024-06-20T01:21:00.253Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_134", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_134", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_134\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"key\":\"D\",\"tempo\":120,\"duration\":2,\"meta\":\"Value\",\"scale_type\":\"minor\"},{\"number1\":456,\"number2\":123,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_134_Output0 | class Fn_parallel_multiple_function_134_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a music producer and you are working on a new song. You want to generate a music scale progression in the key of 'D' with a tempo of 120 BPM, where each note lasts for 2 beats. You are considering using a 'minor' scale type for this progression. After creating this, you decide to take a break and solve a math problem. You want to find the highest common factor of the numbers 456 and 123. Can you generate the music scale progression and solve the math problem?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Generate a music scale progression in a specific key with a given tempo and duration.\n    function_name: 'music_generator.generate_scale_progression' or null,\n    // The key in which to generate the scale progression.\n    key: string,\n    // The tempo of the scale progression in BPM.\n    tempo: int,\n    // The duration of each note in beats.\n    duration: int,\n    // The type of scale to generate. Defaults to 'major'. (default: major)\n    scale_type: string or null,\n  } or {\n    // Calculate the highest common factor of two numbers.\n    function_name: 'math.hcf' or null,\n    // First number.\n    number1: int,\n    // Second number.\n    number2: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"music_generator.generate_scale_progression\",\n    \"key\": \"D\",\n    \"tempo\": 120,\n    \"duration\": 2,\n    \"scale_type\": \"minor\"\n  },\n  {\n    \"function_name\": \"math.hcf\",\n    \"number1\": 456,\n    \"number2\": 123\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 380, "output_tokens": 79, "total_tokens": 459, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "12f0b6fe-e51b-4cbc-984b-5373819e8425", "event_id": "12f0b6fe-e51b-4cbc-984b-5373819e8425", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 22544, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_131", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "461eb2ad-f5f5-43f9-967b-6cc531e52c7b", "event_id": "461eb2ad-f5f5-43f9-967b-6cc531e52c7b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 22545, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_134", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9a00744e-9a03-44c9-b362-878ecdc766cb", "event_id": "0320fe11-26c1-4d59-aca3-87042ac72183", "parent_event_id": "9a00744e-9a03-44c9-b362-878ecdc766cb", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2166, "start_time": "2024-06-20T01:20:59.530Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_129", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_129", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_129\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"hotelName\":\"Hilton New York\",\"roomType\":\"deluxe\",\"nights\":5,\"meta\":\"Value\"},{\"rentalCompany\":\"Enterprise\",\"carType\":\"sedan\",\"days\":10,\"meta\":\"Value\"},{\"airline\":\"Delta Airlines\",\"flightClass\":\"business\",\"passengers\":3,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_129_Output2 | class Fn_parallel_multiple_function_129_Output0 | class Fn_parallel_multiple_function_129_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me plan my vacation? I need to know the total cost. First, I'm considering staying at the Hilton New York for 5 nights in a deluxe room. Could you tell me how much that would cost? Second, I'm thinking of renting a sedan from Enterprise for 10 days. How much would that be? Lastly, I'm planning to fly with Delta Airlines in business class. There will be 3 of us. Can you tell me the total flight cost?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get pricing for a specific type of flight ticket for specified number of passengers.\n    function_name: 'flight_ticket_pricing.get' or null,\n    // The name of the airline.\n    airline: string,\n    // Class of the flight.\n    flightClass: string,\n    // Number of passengers.\n    passengers: int,\n  } or {\n    // Get pricing for a specific type of rental car for a specified number of days.\n    function_name: 'car_rental_pricing.get' or null,\n    // The name of the rental company.\n    rentalCompany: string,\n    // Type of the car to be rented.\n    carType: string,\n    // Number of days to rent the car.\n    days: int,\n  } or {\n    // Get pricing for a specific type of hotel room for specified number of nights.\n    function_name: 'hotel_room_pricing.get' or null,\n    // The name of the hotel e.g. Hilton New York\n    hotelName: string,\n    // Type of the room to be booked.\n    roomType: string,\n    // Number of nights to book the room for.\n    nights: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"hotel_room_pricing.get\",\n    \"hotelName\": \"Hilton New York\",\n    \"roomType\": \"deluxe\",\n    \"nights\": 5\n  },\n  {\n    \"function_name\": \"car_rental_pricing.get\",\n    \"rentalCompany\": \"Enterprise\",\n    \"carType\": \"sedan\",\n    \"days\": 10\n  },\n  {\n    \"function_name\": \"flight_ticket_pricing.get\",\n    \"airline\": \"Delta Airlines\",\n    \"flightClass\": \"business\",\n    \"passengers\": 3\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 453, "output_tokens": 129, "total_tokens": 582, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9a00744e-9a03-44c9-b362-878ecdc766cb", "event_id": "9a00744e-9a03-44c9-b362-878ecdc766cb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 22766, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_129", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "648aa194-92ff-4c6e-bfbf-a4657ffe73dc", "event_id": "7df42ab6-6d09-4cbb-b019-c01cf5e62234", "parent_event_id": "648aa194-92ff-4c6e-bfbf-a4657ffe73dc", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2208, "start_time": "2024-06-20T01:20:59.583Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_130", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_130", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_130\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"amount\":5000,\"from_currency\":\"EUR\",\"to_currency\":\"USD\",\"meta\":\"Value\",\"live_conversion\":true},{\"amount\":3000,\"from_currency\":\"EUR\",\"to_currency\":\"GBP\",\"meta\":\"Value\",\"live_conversion\":false},{\"value\":100,\"from_unit\":\"kilometers\",\"to_unit\":\"miles\",\"meta\":\"Value\"},{\"value\":75,\"from_unit\":\"kilograms\",\"to_unit\":\"pounds\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_130_Output0 | class Fn_parallel_multiple_function_130_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a couple of conversions? First, I have 5000 Euros that I want to convert into US Dollars using the latest exchange rate. Then, I have another 3000 Euros that I want to convert into British Pounds, but this time, I want to use the last known exchange rate. After that, I have a distance of 100 kilometers that I want to convert into miles. Lastly, I have a weight of 75 kilograms that I want to convert into pounds. Can you do these conversions for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Converts a value from one unit to another.\n    function_name: 'unit_conversion.convert' or null,\n    // The value to be converted.\n    value: int,\n    // The unit to convert from.\n    from_unit: string,\n    // The unit to convert to.\n    to_unit: string,\n  } or {\n    // Converts a value from one currency to another using the latest exchange rate.\n    function_name: 'currency_exchange.convert' or null,\n    // The amount of money to be converted.\n    amount: int,\n    // The currency to convert from.\n    from_currency: string,\n    // The currency to convert to.\n    to_currency: string,\n    // If true, use the latest exchange rate for conversion, else use the last known rate. Default is true.\n    live_conversion: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'currency_exchange.convert',\n    amount: 5000,\n    from_currency: 'EUR',\n    to_currency: 'USD',\n    live_conversion: true\n  },\n  {\n    function_name: 'currency_exchange.convert',\n    amount: 3000,\n    from_currency: 'EUR',\n    to_currency: 'GBP',\n    live_conversion: false\n  },\n  {\n    function_name: 'unit_conversion.convert',\n    value: 100,\n    from_unit: 'kilometers',\n    to_unit: 'miles'\n  },\n  {\n    function_name: 'unit_conversion.convert',\n    value: 75,\n    from_unit: 'kilograms',\n    to_unit: 'pounds'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 397, "output_tokens": 152, "total_tokens": 549, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "648aa194-92ff-4c6e-bfbf-a4657ffe73dc", "event_id": "648aa194-92ff-4c6e-bfbf-a4657ffe73dc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 22862, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_130", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4b24e8af-ca1a-47b5-85c9-848a83771a5c", "event_id": "0f8eaaf0-6740-4701-9e71-7522b33c4f66", "parent_event_id": "4b24e8af-ca1a-47b5-85c9-848a83771a5c", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1815, "start_time": "2024-06-20T01:21:00.079Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_132", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_132", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_132\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"radius\":5.6,\"meta\":\"Value\",\"units\":\"feet\"},{\"start_range\":0,\"end_range\":3.14,\"frequency\":2,\"meta\":\"Value\",\"amplitude\":1.5,\"phase_shift\":0.5}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_132_Output0 | class Fn_parallel_multiple_function_132_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with a couple of calculations? First, I have a circle with a radius of 5.6 feet and I need to know its area. Second, I'm working on a project where I need to plot a sine wave. The range I'm interested in is from 0 to 3.14 radians. The frequency of the wave should be 2 Hz. Also, I want the amplitude of the wave to be 1.5 and the phase shift to be 0.5 radians. Could you calculate the area and plot the sine wave for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Plot a sine wave for a given frequency in a given range.\n    function_name: 'plot_sine_wave' or null,\n    // Start of the range in radians.\n    start_range: int,\n    // End of the range in radians.\n    end_range: float,\n    // Frequency of the sine wave in Hz.\n    frequency: int,\n    // Amplitude of the sine wave. Default is 1.\n    amplitude: float or null,\n    // Phase shift of the sine wave in radians. Default is 0.\n    phase_shift: float or null,\n  } or {\n    // Calculate the area of a circle given the radius.\n    function_name: 'geometry.area_circle' or null,\n    // The radius of the circle.\n    radius: float,\n    // The units in which the radius is measured (defaults to meters). (default: meters)\n    units: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"geometry.area_circle\",\n    \"radius\": 5.6,\n    \"units\": \"feet\"\n  },\n  {\n    \"function_name\": \"plot_sine_wave\",\n    \"start_range\": 0,\n    \"end_range\": 3.14,\n    \"frequency\": 2,\n    \"amplitude\": 1.5,\n    \"phase_shift\": 0.5\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 421, "output_tokens": 97, "total_tokens": 518, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4b24e8af-ca1a-47b5-85c9-848a83771a5c", "event_id": "4b24e8af-ca1a-47b5-85c9-848a83771a5c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 22964, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_132", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "54bdb413-dfa0-44fc-8606-ad230dfc25d5", "event_id": "fe40cc08-8351-4845-bd02-04c170a8d01e", "parent_event_id": "54bdb413-dfa0-44fc-8606-ad230dfc25d5", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1788, "start_time": "2024-06-20T01:21:00.202Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_133", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_133", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_133\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"function\":\"3*x^2 + 2*x - 1\",\"value\":2,\"meta\":\"Value\",\"function_variable\":\"x\"},{\"function\":\"5*y^3 - 4*y + 2\",\"value\":3,\"meta\":\"Value\",\"function_variable\":\"y\"},{\"type\":\"INTJ\",\"traits\":[],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_133_Output0 | class Fn_parallel_multiple_function_133_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you first calculate the derivative of the function '3x^2 + 2x - 1' at the value of 2 where 'x' is the function variable, then calculate the derivative of the function '5y^3 - 4y + 2' at the value of 3 where 'y' is the function variable, and finally retrieve the strengths and weaknesses of the personality type 'INTJ'?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Compute the derivative of a function at a specific value.\n    function_name: 'calculus.derivative' or null,\n    // The function to calculate the derivative of.\n    function: string,\n    // The value where the derivative needs to be calculated at.\n    value: int,\n    // The variable present in the function, for instance x or y, etc. Default is 'x'.\n    function_variable: string or null,\n  } or {\n    // Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.\n    function_name: 'get_personality_traits' or null,\n    // The personality type.\n    type: string,\n    // List of traits to be retrieved, default is ['strengths', 'weaknesses'].\n    traits: [\n      'strengths' or 'weaknesses'\n    ],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"calculus.derivative\",\n    \"function\": \"3*x^2 + 2*x - 1\",\n    \"value\": 2,\n    \"function_variable\": \"x\"\n  },\n  {\n    \"function_name\": \"calculus.derivative\",\n    \"function\": \"5*y^3 - 4*y + 2\",\n    \"value\": 3,\n    \"function_variable\": \"y\"\n  },\n  {\n    \"function_name\": \"get_personality_traits\",\n    \"type\": \"INTJ\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 377, "output_tokens": 123, "total_tokens": 500, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "54bdb413-dfa0-44fc-8606-ad230dfc25d5", "event_id": "54bdb413-dfa0-44fc-8606-ad230dfc25d5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 23060, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_133", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: function\\nExpected: any of ['3x^2 + 2x - 1']\\nActual@1: meta=<Fn_parallel_multiple_function_133_Output0_TypeName.Value: 'Value'> function='3*x^2 + 2*x - 1' value=2 function_variable='x'\\nActual all: [Fn_parallel_multiple_function_133_Output0(meta=<Fn_parallel_multiple_function_133_Output0_TypeName.Value: 'Value'>, function='3*x^2 + 2*x - 1', value=2, function_variable='x'), Fn_parallel_multiple_function_133_Output0(meta=<Fn_parallel_multiple_function_133_Output0_TypeName.Value: 'Value'>, function='5*y^3 - 4*y + 2', value=3, function_variable='y'), Fn_parallel_multiple_function_133_Output1(meta=<Fn_parallel_multiple_function_133_Output1_TypeName.Value: 'Value'>, type='INTJ', traits=[])]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2201db26-5266-4820-9723-1a6ac303db69", "event_id": "b019a933-af1a-4163-8db5-4c19f42a5afa", "parent_event_id": "2201db26-5266-4820-9723-1a6ac303db69", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1291, "start_time": "2024-06-20T01:21:00.759Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_135", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_135", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_135\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"field_of_law\":\"constitutional law\",\"top_number\":5,\"meta\":\"Value\",\"country\":\"United Kingdom\"},{\"num1\":36,\"num2\":48,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_135_Output0 | class Fn_parallel_multiple_function_135_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with two tasks? First, I'm interested in the field of constitutional law in the United Kingdom and I would like to know the top 5 landmark cases in this field. Second, I have two numbers, 36 and 48, and I need to find out their greatest common divisor. Can you assist with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve a list of the most influential or landmark cases in a specific field of law.\n    function_name: 'get_top_cases' or null,\n    // The specific field of law e.g., constitutional law, criminal law, etc.\n    field_of_law: string,\n    // The number of top cases to retrieve.\n    top_number: int,\n    // The country where the law cases should be retrieved from. Default is US.\n    country: string or null,\n  } or {\n    // Calculate the greatest common divisor of two integers.\n    function_name: 'math.gcd' or null,\n    // First number.\n    num1: int,\n    // Second number.\n    num2: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"get_top_cases\",\n    \"field_of_law\": \"constitutional law\",\n    \"top_number\": 5,\n    \"country\": \"United Kingdom\"\n  },\n  {\n    \"function_name\": \"math.gcd\",\n    \"num1\": 36,\n    \"num2\": 48\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 332, "output_tokens": 77, "total_tokens": 409, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2201db26-5266-4820-9723-1a6ac303db69", "event_id": "2201db26-5266-4820-9723-1a6ac303db69", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 23119, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_135", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5dc11ec4-d9c1-4004-906c-ed9517fc2a65", "event_id": "4ae101c8-5925-422e-91ea-a004c1202dd6", "parent_event_id": "5dc11ec4-d9c1-4004-906c-ed9517fc2a65", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3089, "start_time": "2024-06-20T01:20:59.042Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_128", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_128", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_128\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Paris\",\"roomType\":\"deluxe\",\"nights\":5,\"additional_services\":[\"breakfast\",\"spa\"],\"meta\":\"Value\"},{\"location\":\"Paris\",\"days\":7,\"car_type\":\"SUV\",\"meta\":\"Value\",\"pick_up\":\"airport\"},{\"location\":\"Rome\",\"roomType\":\"suite\",\"nights\":3,\"additional_services\":[\"airport transfer\"],\"meta\":\"Value\"},{\"location\":\"Rome\",\"days\":5,\"car_type\":\"compact\",\"meta\":\"Value\",\"pick_up\":\"hotel\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_128_Output0 | class Fn_parallel_multiple_function_128_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan my trip? I need to book a hotel room in Paris for 5 nights. I prefer a deluxe room and would like to add breakfast and spa services. After that, I need to rent a car in Paris for 7 days. I prefer a SUV and I will pick it up from the airport. Then, I need to book another hotel room in Rome for 3 nights. I prefer a suite and would like to add airport transfer service. Lastly, I need to rent a car in Rome for 5 days. I prefer a compact car and I will pick it up from the hotel.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Rent a car at the specified location for a specific number of days\n    function_name: 'car.rental' or null,\n    // Location of the car rental.\n    location: string,\n    // Number of days for which to rent the car.\n    days: int,\n    // Type of the car to rent.\n    car_type: string,\n    // Location of where to pick up the car. Default is 'airport' if not specified.\n    pick_up: string or null,\n  } or {\n    // Book a hotel room given the location, room type, and number of nights and additional services\n    function_name: 'hotel.book' or null,\n    // Location of the hotel.\n    location: string,\n    // Type of the room to be booked.\n    roomType: string,\n    // Number of nights to book the room for.\n    nights: int,\n    // Additional services to be added. Default is not use it if not specified.\n    additional_services: string[],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"hotel.book\",\n    \"location\": \"Paris\",\n    \"roomType\": \"deluxe\",\n    \"nights\": 5,\n    \"additional_services\": [\"breakfast\", \"spa\"]\n  },\n  {\n    \"function_name\": \"car.rental\",\n    \"location\": \"Paris\",\n    \"days\": 7,\n    \"car_type\": \"SUV\",\n    \"pick_up\": \"airport\"\n  },\n  {\n    \"function_name\": \"hotel.book\",\n    \"location\": \"Rome\",\n    \"roomType\": \"suite\",\n    \"nights\": 3,\n    \"additional_services\": [\"airport transfer\"]\n  },\n  {\n    \"function_name\": \"car.rental\",\n    \"location\": \"Rome\",\n    \"days\": 5,\n    \"car_type\": \"compact\",\n    \"pick_up\": \"hotel\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 447, "output_tokens": 193, "total_tokens": 640, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5dc11ec4-d9c1-4004-906c-ed9517fc2a65", "event_id": "5dc11ec4-d9c1-4004-906c-ed9517fc2a65", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 23201, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_128", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b3adccd5-3a14-4bf8-8380-44bc134e6fc0", "event_id": "786ccc76-aad1-4d40-83fe-4ff9840a48f9", "parent_event_id": "b3adccd5-3a14-4bf8-8380-44bc134e6fc0", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 764, "start_time": "2024-06-20T01:21:01.475Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_139", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_139", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_139\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"current\":5,\"radius\":0.02,\"meta\":\"Value\",\"permeability\":125700000000.0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_139_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few tasks? Firstly, I am working on a physics experiment and I need to calculate the magnetic field at the center of a circular loop. The loop carries a current of 5 Amperes and has a radius of 0.02 meters. Secondly, I am planning to attend a concert of my favorite artist, Taylor Swift, in New York. I need to book 3 tickets for the concert. Lastly, I am doing a research on Apple Inc. and I need to find the details of lawsuits involving Apple from the year 2010. Specifically, I am interested in lawsuits related to 'Patent' issues. Could you assist me with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find details of lawsuits involving a specific company from a given year.\n    function_name: 'lawsuit_details.find' or null,\n    // Name of the company.\n    company_name: string,\n    // Year of the lawsuit.\n    year: int,\n    // Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is all if not specified.\n    case_type: string or null,\n  } or {\n    // Calculate the magnetic field produced at the center of a circular loop carrying current.\n    function_name: 'calculate_magnetic_field' or null,\n    // The current through the circular loop in Amperes.\n    current: int,\n    // The radius of the circular loop in meters.\n    radius: float,\n    // The magnetic permeability. Default is 12.57e10.\n    permeability: float or null,\n  } or {\n    // Book concert tickets for a specific artist in a specified city.\n    function_name: 'concert_booking.book_ticket' or null,\n    // The artist you want to book tickets for.\n    artist: string,\n    // The city where the concert is.\n    city: string,\n    // Number of tickets required. Default is 1.\n    num_tickets: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  function_name: 'calculate_magnetic_field',\n  current: 5,\n  radius: 0.02,\n  permeability: 12.57e10\n}", "metadata": {"logprobs": null, "prompt_tokens": 519, "output_tokens": 37, "total_tokens": 556, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b3adccd5-3a14-4bf8-8380-44bc134e6fc0", "event_id": "b3adccd5-3a14-4bf8-8380-44bc134e6fc0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 23310, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_139", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: permeability\\nExpected: any of ['', None, []]\\nActual@1: meta=<Fn_parallel_multiple_function_139_Output1_TypeName.Value: 'Value'> current=5 radius=0.02 permeability=125700000000.0\\nActual all: [Fn_parallel_multiple_function_139_Output1(meta=<Fn_parallel_multiple_function_139_Output1_TypeName.Value: 'Value'>, current=5, radius=0.02, permeability=125700000000.0)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c9bc45d0-2827-4151-a78f-65a78564110c", "event_id": "b18ea270-8a88-44ae-b9f6-dd4ab4f7866f", "parent_event_id": "c9bc45d0-2827-4151-a78f-65a78564110c", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2672, "start_time": "2024-06-20T01:21:00.852Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_137", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_137", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_137\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"docket_number\":\"12345\",\"location\":\"Dallas, TX\",\"meta\":\"Value\",\"full_text\":false},{\"player_name\":\"Magnus Carlsen\",\"meta\":\"Value\",\"variant\":\"classical\"},{\"event\":\"Battle of Gettysburg\",\"meta\":\"Value\",\"location\":null},{\"initial_velocity\":0,\"height\":100,\"meta\":\"Value\",\"gravity\":9.8}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_137_Output3 | class Fn_parallel_multiple_function_137_Output1 | class Fn_parallel_multiple_function_137_Output0 | class Fn_parallel_multiple_function_137_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few things? First, I'm interested in a court case with the docket number 12345 that was registered in Dallas, TX. Could you retrieve the details about this case for me? I don't need the full text of the case ruling. Second, I'm curious about the current classical chess rating of a player named Magnus Carlsen. Could you fetch that for me? Third, I'm trying to remember the date of the historical event known as the Battle of Gettysburg. Do you know when that took place? Lastly, I'm working on a physics problem and need to calculate the final speed of an object. The object was dropped from a height of 100 meters with an initial velocity of 0 m/s. The gravitational acceleration is 9.8 m/s^2. Can you help me calculate the final speed?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fetches the current chess rating of a given player\n    function_name: 'chess.rating' or null,\n    // The full name of the chess player.\n    player_name: string,\n    // The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n    variant: string or null,\n  } or {\n    // Retrieves details about a court case using its docket number and location.\n    function_name: 'court_case.search' or null,\n    // The docket number for the case.\n    docket_number: string,\n    // The location where the case is registered, in the format: city, state, e.g., Dallas, TX.\n    location: string,\n    // Option to return the full text of the case ruling.\n    full_text: bool or null,\n  } or {\n    // Retrieve the date of a historical event.\n    function_name: 'get_event_date' or null,\n    // The name of the historical event.\n    event: string,\n    // Location where the event took place. Defaults to global if not specified\n    location: string or null,\n  } or {\n    // Calculate the final speed of an object dropped from a certain height without air resistance.\n    function_name: 'calculate_final_speed' or null,\n    // The initial velocity of the object.\n    initial_velocity: int,\n    // The height from which the object is dropped.\n    height: int,\n    // The gravitational acceleration. Default is 9.8 m/s^2.\n    gravity: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"court_case.search\",\n    \"docket_number\": \"12345\",\n    \"location\": \"Dallas, TX\",\n    \"full_text\": false\n  },\n  {\n    \"function_name\": \"chess.rating\",\n    \"player_name\": \"Magnus Carlsen\",\n    \"variant\": \"classical\"\n  },\n  {\n    \"function_name\": \"get_event_date\",\n    \"event\": \"Battle of Gettysburg\"\n  },\n  {\n    \"function_name\": \"calculate_final_speed\",\n    \"initial_velocity\": 0,\n    \"height\": 100,\n    \"gravity\": 9.8\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 625, "output_tokens": 139, "total_tokens": 764, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c9bc45d0-2827-4151-a78f-65a78564110c", "event_id": "c9bc45d0-2827-4151-a78f-65a78564110c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 24594, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_137", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "182f5b64-4b35-4ea2-a4a7-9eecd8f856c1", "event_id": "a90b63f8-965d-47a6-9d91-d0d19b7aafc3", "parent_event_id": "182f5b64-4b35-4ea2-a4a7-9eecd8f856c1", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2102, "start_time": "2024-06-20T01:21:01.476Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_140", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_140", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_140\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"total\":30,\"extroverts\":15,\"introverts\":15,\"meta\":\"Value\"},{\"color1\":\"blue\",\"color2\":\"yellow\",\"meta\":\"Value\",\"lightness\":70},{\"quantity\":2,\"from_unit\":\"cup\",\"to_unit\":\"milliliter\",\"item\":\"flour\",\"meta\":\"Value\"},{\"charge\":1e-6,\"distance\":0.02,\"meta\":\"Value\",\"medium\":\"vacuum\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_140_Output0 | class Fn_parallel_multiple_function_140_Output2 | class Fn_parallel_multiple_function_140_Output1 | class Fn_parallel_multiple_function_140_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\n  Based on the question, you will need to make one or more function/tool calls to achieve the purpose.\n  If none of the function can be used, point it out. If the given question lacks the parameters required by the function,\n  also point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a teacher preparing for a science and art themed day at school. You have planned a series of activities for your students. First, you want to divide your class of 30 students into smaller groups for a group dynamics activity. You know that 15 of your students are extroverts and 15 are introverts. Can you analyze the social dynamics and interactions within these groups based on these personality traits and group size? \n\nNext, you plan an art activity where students will mix two primary paint colors. You have chosen blue and yellow for this activity. Can you predict the resulting color if the lightness level is adjusted to 70%? \n\nThen, you plan a cooking activity where students will convert cooking measurements. You have a recipe that calls for 2 cups of flour, but your measuring cup is in milliliters. Can you convert this measurement from cups to milliliters for flour? \n\nFinally, you plan a physics experiment where students will calculate the electric field strength at a certain distance from a point charge. You have a charge of 0.000001 Coulombs and want to calculate the electric field strength 0.02 meters away from the charge in a vacuum. Can you calculate this for me?\"\n\n  Here is the function to invoke:\n\n\n  [\n  {\n    // Calculate the electric field strength at a certain distance from a point charge.\n    function_name: 'calculate_electric_field_strength' or null,\n    // The charge in Coulombs.\n    charge: float,\n    // The distance from the charge in meters.\n    distance: float,\n    // The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\n    medium: string or null,\n  } or {\n    // Combine two primary paint colors and adjust the resulting color's lightness level.\n    function_name: 'mix_paint_color' or null,\n    // The first primary color to be mixed.\n    color1: string,\n    // The second primary color to be mixed.\n    color2: string,\n    // The desired lightness level of the resulting color in percentage. The default level is set to 50%.\n    lightness: int or null,\n  } or {\n    // Convert cooking measurements from one unit to another.\n    function_name: 'cooking_conversion.convert' or null,\n    // The quantity to be converted.\n    quantity: int,\n    // The unit to convert from.\n    from_unit: string,\n    // The unit to convert to.\n    to_unit: string,\n    // The item to be converted.\n    item: string,\n  } or {\n    // Examine the social dynamics and interactions within a group based on the personality traits and group size.\n    function_name: 'group_dynamics.pattern' or null,\n    // The total group size.\n    total: int,\n    // The number of extroverted members in the group.\n    extroverts: int,\n    // The number of introverted members in the group.\n    introverts: int,\n  }\n]\n\n\n  Function args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"group_dynamics.pattern\",\n    \"total\": 30,\n    \"extroverts\": 15,\n    \"introverts\": 15\n  },\n  {\n    \"function_name\": \"mix_paint_color\",\n    \"color1\": \"blue\",\n    \"color2\": \"yellow\",\n    \"lightness\": 70\n  },\n  {\n    \"function_name\": \"cooking_conversion.convert\",\n    \"quantity\": 2,\n    \"from_unit\": \"cup\",\n    \"to_unit\": \"milliliter\",\n    \"item\": \"flour\"\n  },\n  {\n    \"function_name\": \"calculate_electric_field_strength\",\n    \"charge\": 0.000001,\n    \"distance\": 0.02,\n    \"medium\": \"vacuum\"\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 725, "output_tokens": 175, "total_tokens": 900, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "182f5b64-4b35-4ea2-a4a7-9eecd8f856c1", "event_id": "182f5b64-4b35-4ea2-a4a7-9eecd8f856c1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 24648, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_140", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: from_unit\\nExpected: any of ['cups', 'c']\\nActual@1: meta=<Fn_parallel_multiple_function_140_Output2_TypeName.Value: 'Value'> quantity=2 from_unit='cup' to_unit='milliliter' item='flour'\\nActual all: [Fn_parallel_multiple_function_140_Output3(meta=<Fn_parallel_multiple_function_140_Output3_TypeName.Value: 'Value'>, total=30, extroverts=15, introverts=15), Fn_parallel_multiple_function_140_Output1(meta=<Fn_parallel_multiple_function_140_Output1_TypeName.Value: 'Value'>, color1='blue', color2='yellow', lightness=70), Fn_parallel_multiple_function_140_Output2(meta=<Fn_parallel_multiple_function_140_Output2_TypeName.Value: 'Value'>, quantity=2, from_unit='cup', to_unit='milliliter', item='flour'), Fn_parallel_multiple_function_140_Output0(meta=<Fn_parallel_multiple_function_140_Output0_TypeName.Value: 'Value'>, charge=1e-06, distance=0.02, medium='vacuum')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "866033b3-6d5f-4479-a7fd-5c0c498533a8", "event_id": "e6e41e23-e92c-4c61-8562-1add7eceda49", "parent_event_id": "866033b3-6d5f-4479-a7fd-5c0c498533a8", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2833, "start_time": "2024-06-20T01:21:00.863Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_138", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_138", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_138\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"molecule\":\"ATP\",\"organelle\":\"mitochondria\",\"specific_function\":true,\"meta\":\"Value\"},{\"origin\":\"New York\",\"destination\":\"Los Angeles\",\"meta\":\"Value\",\"unit\":\"miles\"},{\"discovery\":\"theory of relativity\",\"meta\":\"Value\"},{\"brand\":\"Fender\",\"model\":\"Stratocaster\",\"finish\":\"sunburst\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_138_Output3 | class Fn_parallel_multiple_function_138_Output0 | class Fn_parallel_multiple_function_138_Output2 | class Fn_parallel_multiple_function_138_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me the function of the molecule ATP in the organelle mitochondria with a specific function, then calculate the shortest driving distance from New York to Los Angeles in miles, after that, can you tell me who is credited for the discovery of the theory of relativity, and finally, can you tell me the current retail price of a Fender Stratocaster in sunburst finish?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the shortest driving distance between two locations.\n    function_name: 'get_shortest_driving_distance' or null,\n    // Starting point of the journey.\n    origin: string,\n    // End point of the journey.\n    destination: string,\n    // Preferred unit of distance (optional, default is kilometers).\n    unit: string or null,\n  } or {\n    // Look up the function of a given molecule in a specified organelle.\n    function_name: 'cell_biology.function_lookup' or null,\n    // The molecule of interest.\n    molecule: string,\n    // The organelle of interest.\n    organelle: string,\n    // If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.\n    specific_function: bool,\n  } or {\n    // Retrieve the current retail price of a specific musical instrument.\n    function_name: 'instrument_price.get' or null,\n    // The brand of the instrument.\n    brand: string,\n    // The specific model of the instrument.\n    model: string,\n    // The color or type of finish on the instrument.\n    finish: string,\n  } or {\n    // Retrieve the scientist's name who is credited for a specific scientific discovery or theory.\n    function_name: 'get_scientist_for_discovery' or null,\n    // The scientific discovery or theory.\n    discovery: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"cell_biology.function_lookup\",\n    \"molecule\": \"ATP\",\n    \"organelle\": \"mitochondria\",\n    \"specific_function\": true\n  },\n  {\n    \"function_name\": \"get_shortest_driving_distance\",\n    \"origin\": \"New York\",\n    \"destination\": \"Los Angeles\",\n    \"unit\": \"miles\"\n  },\n  {\n    \"function_name\": \"get_scientist_for_discovery\",\n    \"discovery\": \"theory of relativity\"\n  },\n  {\n    \"function_name\": \"instrument_price.get\",\n    \"brand\": \"Fender\",\n    \"model\": \"Stratocaster\",\n    \"finish\": \"sunburst\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 488, "output_tokens": 159, "total_tokens": 647, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "866033b3-6d5f-4479-a7fd-5c0c498533a8", "event_id": "866033b3-6d5f-4479-a7fd-5c0c498533a8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 24766, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_138", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3f19dee9-01d3-420c-9042-87749068cc66", "event_id": "effd6281-b8fc-4059-8988-a3fe33906784", "parent_event_id": "3f19dee9-01d3-420c-9042-87749068cc66", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1854, "start_time": "2024-06-20T01:21:01.895Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_143", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_143", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_143\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"game_name\":\"Animal Crossing\",\"season\":\"Summer\",\"meta\":\"Value\",\"item_type\":\"bug\"},{\"game_name\":\"Animal Crossing\",\"season\":\"Winter\",\"meta\":\"Value\",\"item_type\":\"fish\"},{\"snp_id\":\"rs53576\",\"meta\":\"Value\",\"species\":\"Homo sapiens\"},{\"snp_id\":\"rs1800497\",\"meta\":\"Value\",\"species\":\"Mus musculus\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_143_Output1 | class Fn_parallel_multiple_function_143_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"In the game 'Animal Crossing', I am interested in collecting bugs during the 'Summer' season. Could you help me find out what bugs are available during this time? Also, in the same game, I would like to know what fish can be collected in the 'Winter' season. On a completely different note, I am studying genetics and I came across a SNP mutation with the ID 'rs53576'. Can you tell me what type of mutation this is in the species 'Homo sapiens'? Lastly, I also found another SNP mutation with the ID 'rs1800497'. Could you help me find out what type of mutation this is in the species 'Mus musculus'?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\n    function_name: 'mutation_type.find' or null,\n    // The ID of the Single Nucleotide Polymorphism (SNP) mutation.\n    snp_id: string,\n    // Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\n    species: string or null,\n  } or {\n    // Retrieve a list of collectable items in a specific game during a specified season.\n    function_name: 'get_collectables_in_season' or null,\n    // Name of the game.\n    game_name: string,\n    // The season for which to retrieve the collectable items.\n    season: string,\n    // The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\n    item_type: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"get_collectables_in_season\",\n    \"game_name\": \"Animal Crossing\",\n    \"season\": \"Summer\",\n    \"item_type\": \"bug\"\n  },\n  {\n    \"function_name\": \"get_collectables_in_season\",\n    \"game_name\": \"Animal Crossing\",\n    \"season\": \"Winter\",\n    \"item_type\": \"fish\"\n  },\n  {\n    \"function_name\": \"mutation_type.find\",\n    \"snp_id\": \"rs53576\",\n    \"species\": \"Homo sapiens\"\n  },\n  {\n    \"function_name\": \"mutation_type.find\",\n    \"snp_id\": \"rs1800497\",\n    \"species\": \"Mus musculus\"\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 453, "output_tokens": 157, "total_tokens": 610, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3f19dee9-01d3-420c-9042-87749068cc66", "event_id": "3f19dee9-01d3-420c-9042-87749068cc66", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 24819, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_143", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d82c1611-71ed-46e5-ae40-e08926f460da", "event_id": "7e58a6f8-8f85-4d71-a3ed-152fbaded75d", "parent_event_id": "d82c1611-71ed-46e5-ae40-e08926f460da", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1758, "start_time": "2024-06-20T01:21:02.242Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_147", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_147", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_147\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"size\":\"30x40\",\"medium\":\"oil\",\"meta\":\"Value\",\"dominant_color\":\"red\"},{\"species\":\"African elephant\",\"years\":100,\"meta\":\"Value\",\"model\":\"Darwin\"},{\"total_outcomes\":52,\"favorable_outcomes\":4,\"meta\":\"Value\",\"round_to\":3}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_147_Output2 | class Fn_parallel_multiple_function_147_Output0 | class Fn_parallel_multiple_function_147_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\n  Based on the question, you will need to make one or more function/tool calls to achieve the purpose.\n  If none of the function can be used, point it out. If the given question lacks the parameters required by the function,\n  also point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: You are an art curator and a part-time biologist. You have a painting in your collection that is currently 24x36 inches, painted with acrylic and has a dominant color of blue. You want to modify the painting's size to 30x40 inches, change the medium to oil, and the dominant color to red. After this, you want to predict the evolutionary rate of the African elephant species for the next 100 years using the Darwin model. \n\nLater in the day, you are planning a game of poker with friends and you want to calculate the probability of getting a royal flush. In a deck of 52 cards, there are 4 possible outcomes that result in a royal flush. You want the result to be rounded to 3 decimal places. \n\nWhat would be the new attributes of the painting, the predicted evolutionary rate of the African elephant, and the probability of getting a royal flush in your poker game?\n\n  Here is the function to invoke:\n\n\n  [\n  {\n    // Predict the evolutionary rate for a specific species for a given timeframe.\n    function_name: 'prediction.evolution' or null,\n    // The species that the evolution rate will be predicted for.\n    species: string,\n    // Number of years for the prediction.\n    years: int,\n    // The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\n    model: string or null,\n  } or {\n    // Calculate the probability of an event.\n    function_name: 'calculate_probability' or null,\n    // Total number of possible outcomes.\n    total_outcomes: int,\n    // Number of outcomes considered as 'successful'.\n    favorable_outcomes: int,\n    // Number of decimal places to round the result to. (default: 2)\n    round_to: int or null,\n  } or {\n    // Modify an existing painting's attributes such as size, medium, and color.\n    function_name: 'modify_painting' or null,\n    // The size of the painting in inches, width by height.\n    size: string,\n    // The medium of the painting, such as oil, acrylic, etc.\n    medium: string,\n    // The dominant color of the painting. Default is 'Blue'.\n    dominant_color: string or null,\n  }\n]\n\n\n  Function args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"modify_painting\",\n    \"size\": \"30x40\",\n    \"medium\": \"oil\",\n    \"dominant_color\": \"red\"\n  },\n  {\n    \"function_name\": \"prediction.evolution\",\n    \"species\": \"African elephant\",\n    \"years\": 100,\n    \"model\": \"Darwin\"\n  },\n  {\n    \"function_name\": \"calculate_probability\",\n    \"total_outcomes\": 52,\n    \"favorable_outcomes\": 4,\n    \"round_to\": 3\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 578, "output_tokens": 123, "total_tokens": 701, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d82c1611-71ed-46e5-ae40-e08926f460da", "event_id": "d82c1611-71ed-46e5-ae40-e08926f460da", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 25069, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_147", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7860d53a-5e30-46a5-b8a5-f80b0d7b478d", "event_id": "524e0231-63b2-4422-9347-7d9b07dc7326", "parent_event_id": "7860d53a-5e30-46a5-b8a5-f80b0d7b478d", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2375, "start_time": "2024-06-20T01:21:01.793Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_142", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_142", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_142\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"snp_id\":\"rs123456\",\"meta\":\"Value\",\"species\":\"Homo sapiens\"},{\"location\":\"New York, NY\",\"art_form\":\"sculpture\",\"meta\":\"Value\",\"month\":null,\"user_ratings\":\"Value2\"},{\"cell_compartment\":\"nucleus\",\"meta\":\"Value\",\"include_description\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_142_Output0 | class Fn_parallel_multiple_function_142_Output2 | class Fn_parallel_multiple_function_142_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few things? First, I'm studying genetics and I came across a SNP mutation with the ID 'rs123456'. I'm not sure what type of mutation it is. Could you find out for me? The species is 'Homo sapiens'. Second, I'm planning to visit New York, NY next month (Feb) and I'm interested in attending an art exhibition, particularly one that displays sculptures. Could you find the most popular ones for me? I would prefer exhibitions with high user ratings. Lastly, I'm also studying cell biology and I need to know the list of proteins in the 'nucleus' cell compartment. Could you get that for me? And please include a brief description of each protein.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get the list of proteins in a specific cell compartment.\n    function_name: 'cellbio.get_proteins' or null,\n    // The specific cell compartment.\n    cell_compartment: string,\n    // Set true if you want a brief description of each protein.\n    include_description: bool or null,\n  } or {\n    // Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\n    function_name: 'mutation_type.find' or null,\n    // The ID of the Single Nucleotide Polymorphism (SNP) mutation.\n    snp_id: string,\n    // Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\n    species: string or null,\n  } or {\n    // Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.\n    function_name: 'find_exhibition' or null,\n    // The city where the exhibition is held, e.g., New York, NY.\n    location: string,\n    // The form of art the exhibition is displaying e.g., sculpture.\n    art_form: string,\n    // The month of exhibition. Default value will return upcoming events.\n    month: string or null,\n    // Select exhibitions with user rating threshold. Default is all if not specified.\n    user_ratings: 'low' or 'average' or 'high' or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"mutation_type.find\",\n    \"snp_id\": \"rs123456\",\n    \"species\": \"Homo sapiens\"\n  },\n  {\n    \"function_name\": \"find_exhibition\",\n    \"location\": \"New York, NY\",\n    \"art_form\": \"sculpture\",\n    \"user_ratings\": \"high\"\n  },\n  {\n    \"function_name\": \"cellbio.get_proteins\",\n    \"cell_compartment\": \"nucleus\",\n    \"include_description\": true\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 562, "output_tokens": 118, "total_tokens": 680, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7860d53a-5e30-46a5-b8a5-f80b0d7b478d", "event_id": "7860d53a-5e30-46a5-b8a5-f80b0d7b478d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 25238, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_142", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: month\\nExpected: any of ['Feb', 'Febuary']\\nActual@1: meta=<Fn_parallel_multiple_function_142_Output2_TypeName.Value: 'Value'> location='New York, NY' art_form='sculpture' month=None user_ratings=<Enum_Fn_parallel_multiple_function_142_Enum0.Value2: 'Value2'>\\nActual all: [Fn_parallel_multiple_function_142_Output1(meta=<Fn_parallel_multiple_function_142_Output1_TypeName.Value: 'Value'>, snp_id='rs123456', species='Homo sapiens'), Fn_parallel_multiple_function_142_Output2(meta=<Fn_parallel_multiple_function_142_Output2_TypeName.Value: 'Value'>, location='New York, NY', art_form='sculpture', month=None, user_ratings=<Enum_Fn_parallel_multiple_function_142_Enum0.Value2: 'Value2'>), Fn_parallel_multiple_function_142_Output0(meta=<Fn_parallel_multiple_function_142_Output0_TypeName.Value: 'Value'>, cell_compartment='nucleus', include_description=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0ce057c4-b62a-4095-ab76-975970947d7f", "event_id": "2be7d880-170d-4855-8648-27bc0bde8eda", "parent_event_id": "0ce057c4-b62a-4095-ab76-975970947d7f", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2272, "start_time": "2024-06-20T01:21:02.051Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_145", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_145", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_145\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"discovery\":\"theory of relativity\",\"meta\":\"Value\"},{\"location\":\"Amazon rainforest\",\"years\":10,\"meta\":\"Value\",\"include_human_impact\":true},{\"location\":\"Amazon rainforest\",\"years\":10,\"meta\":\"Value\",\"include_human_impact\":false},{\"discovery\":\"DNA double helix structure\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_145_Output1 | class Fn_parallel_multiple_function_145_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me the name of the scientist who is credited for the discovery of the theory of relativity? Also, I would like to know the predicted forest growth in Amazon rainforest over the next 10 years, considering the impact of human activities. After that, could you also provide the forecast for the same location but this time without considering human impact? Lastly, I'm curious about the scientist who discovered the DNA double helix structure.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the scientist's name who is credited for a specific scientific discovery or theory.\n    function_name: 'get_scientist_for_discovery' or null,\n    // The scientific discovery or theory.\n    discovery: string,\n  } or {\n    // Predicts the forest growth over the next N years based on current trends.\n    function_name: 'forest_growth_forecast' or null,\n    // The location where you want to predict forest growth.\n    location: string,\n    // The number of years for the forecast.\n    years: int,\n    // Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\n    include_human_impact: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"get_scientist_for_discovery\",\n    \"discovery\": \"theory of relativity\"\n  },\n  {\n    \"function_name\": \"forest_growth_forecast\",\n    \"location\": \"Amazon rainforest\",\n    \"years\": 10,\n    \"include_human_impact\": true\n  },\n  {\n    \"function_name\": \"forest_growth_forecast\",\n    \"location\": \"Amazon rainforest\",\n    \"years\": 10,\n    \"include_human_impact\": false\n  },\n  {\n    \"function_name\": \"get_scientist_for_discovery\",\n    \"discovery\": \"DNA double helix structure\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 352, "output_tokens": 141, "total_tokens": 493, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0ce057c4-b62a-4095-ab76-975970947d7f", "event_id": "0ce057c4-b62a-4095-ab76-975970947d7f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 25393, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_145", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "731818ab-1528-4c98-b42d-697dfa90ae89", "event_id": "959d91df-c040-4f5d-af14-fcf64b5db148", "parent_event_id": "731818ab-1528-4c98-b42d-697dfa90ae89", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2997, "start_time": "2024-06-20T01:21:01.992Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_144", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_144", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_144\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[]", "override": null, "type": {"name": "single", "fields": {"value": "list<?>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few tasks? First, I need to calculate the factorial of 7. Then, I'm looking to buy a flute. I prefer the brand 'Yamaha' and I want it to have an 'open hole' and a 'silver headjoint'. Lastly, I'm doing a genetics study and I need to calculate the frequency of the 'AA' genotype in a population where the frequency of the dominant allele is 0.6. Can you assist me with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Locate a flute for sale based on specific requirements.\n    function_name: 'find_flute' or null,\n    // The brand of the flute. Example, 'Yamaha'\n    brand: string,\n    // The specifications of the flute desired.\n    specs: [\n      'open hole' or 'C foot' or 'silver headjoint'\n    ],\n  } or {\n    // Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\n    function_name: 'calculate_genotype_frequency' or null,\n    // The frequency of the dominant allele in the population.\n    allele_frequency: float,\n    // The genotype which frequency is needed, default is homozygous dominant. \n    genotype: 'AA' or 'Aa' or 'aa',\n  } or {\n    // Calculate the factorial of a given number.\n    function_name: 'math.factorial' or null,\n    // The number for which factorial needs to be calculated.\n    number: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```\n{\n  \"question\": \"Can you help me with a few tasks? First, I need to calculate the factorial of 7. Then, I'm looking to buy a flute. I prefer the brand 'Yamaha' and I want it to have an 'open hole' and a 'silver headjoint'. Lastly, I'm doing a genetics study and I need to calculate the frequency of the 'AA' genotype in a population where the frequency of the dominant allele is 0.6. Can you assist me with these?\",\n  \"functions\": [\n    {\n      \"function_name\": \"math.factorial\",\n      \"number\": 7\n    },\n    {\n      \"function_name\": \"find_flute\",\n      \"brand\": \"Yamaha\",\n      \"specs\": [\"open hole\", \"silver headjoint\"]\n    },\n    {\n      \"function_name\": \"calculate_genotype_frequency\",\n      \"allele_frequency\": 0.6,\n      \"genotype\": \"AA\"\n    }\n  ]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 425, "output_tokens": 207, "total_tokens": 632, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "731818ab-1528-4c98-b42d-697dfa90ae89", "event_id": "731818ab-1528-4c98-b42d-697dfa90ae89", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 26059, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_144", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a9db7f93-50e9-48a9-a272-715faf31d517", "event_id": "8e7d3ffe-9d31-4032-9ac7-65677b27f0df", "parent_event_id": "a9db7f93-50e9-48a9-a272-715faf31d517", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2933, "start_time": "2024-06-20T01:21:02.132Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_146", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_146", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_146\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"trait_values\":[0.7,0.8,0.9],\"trait_contributions\":[0.3,0.4,0.3],\"meta\":\"Value\"},{\"city\":\"New York, NY\",\"specialty\":[\"Value0\",\"Value1\"],\"fee\":300,\"meta\":\"Value\"},{\"player_name\":\"Magnus Carlsen\",\"meta\":\"Value\",\"variant\":\"classical\"},{\"loc\":\"Los Angeles, CA\",\"product_list\":[\"Milk\",\"Bread\",\"Eggs\"],\"pack_size\":[1,2,12],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_146_Output1 | class Fn_parallel_multiple_function_146_Output2 | class Fn_parallel_multiple_function_146_Output0 | class Fn_parallel_multiple_function_146_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\n  Based on the question, you will need to make one or more function/tool calls to achieve the purpose.\n  If none of the function can be used, point it out. If the given question lacks the parameters required by the function,\n  also point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few tasks? First, I am playing a game where I need to calculate the evolutionary fitness of a creature. The creature has three traits with values 0.7, 0.8, and 0.9, and the contributions of these traits to the overall fitness are 0.3, 0.4, and 0.3 respectively. Could you calculate the fitness for me using the 'calculate_fitness' function? \n\nSecond, I am looking for a lawyer in New York, NY who specializes in Civil and Divorce cases and charges less than $300 per hour. Could you use the 'lawyer.find_nearby' function to find one for me? \n\nThird, I am curious about the current classical chess rating of a player named Magnus Carlsen. Could you fetch that for me using the 'chess.rating' function? \n\nLastly, I am planning to go shopping at Walmart. I want to purchase 'Milk', 'Bread', and 'Eggs' from the nearest Walmart in Los Angeles, CA. The pack sizes I am looking for are 1, 2, and 12 respectively. Could you check the availability for me using the 'walmart.purchase' function?\"\n\n  Here is the function to invoke:\n\n\n  [\n  {\n    // Fetches the current chess rating of a given player\n    function_name: 'chess.rating' or null,\n    // The full name of the chess player.\n    player_name: string,\n    // The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n    variant: string or null,\n  } or {\n    // Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.\n    function_name: 'calculate_fitness' or null,\n    // List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness.\n    trait_values: float[],\n    // List of the percentage contributions of each trait to the overall fitness, which must sum to 1.\n    trait_contributions: float[],\n  } or {\n    // Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.\n    function_name: 'lawyer.find_nearby' or null,\n    // The city and state, e.g. Chicago, IL.\n    city: string,\n    // Specialization of the lawyer.\n    specialty: [\n      'Civil' or 'Divorce' or 'Immigration' or 'Business' or 'Criminal'\n    ],\n    // Hourly fee charged by lawyer\n    fee: int,\n  } or {\n    // Retrieve information of items from Walmart including stock availability.\n    function_name: 'walmart.purchase' or null,\n    // Location of the nearest Walmart.\n    loc: string,\n    // Items to be purchased listed in an array.\n    product_list: string[],\n    // Size of the product pack if applicable. The size of the array should be equal to product_list. Default is 1.\n    pack_size: int[],\n  }\n]\n\n\n  Function args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"calculate_fitness\",\n    \"trait_values\": [0.7, 0.8, 0.9],\n    \"trait_contributions\": [0.3, 0.4, 0.3]\n  },\n  {\n    \"function_name\": \"lawyer.find_nearby\",\n    \"city\": \"New York, NY\",\n    \"specialty\": [\"Civil\", \"Divorce\"],\n    \"fee\": 300\n  },\n  {\n    \"function_name\": \"chess.rating\",\n    \"player_name\": \"Magnus Carlsen\",\n    \"variant\": \"classical\"\n  },\n  {\n    \"function_name\": \"walmart.purchase\",\n    \"loc\": \"Los Angeles, CA\",\n    \"product_list\": [\"Milk\", \"Bread\", \"Eggs\"],\n    \"pack_size\": [1, 2, 12]\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 753, "output_tokens": 190, "total_tokens": 943, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a9db7f93-50e9-48a9-a272-715faf31d517", "event_id": "a9db7f93-50e9-48a9-a272-715faf31d517", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 26135, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_146", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "56eb5f24-8a15-4468-a6a9-e62f6ff8d609", "event_id": "92229027-0996-40fc-9d54-6e68b9f9026e", "parent_event_id": "56eb5f24-8a15-4468-a6a9-e62f6ff8d609", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3601, "start_time": "2024-06-20T01:21:01.697Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_141", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_141", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_141\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"mass\":10,\"volume\":2,\"meta\":\"Value\",\"unit\":\"kg/m\u00b3\"},{\"mass\":5,\"volume\":1,\"meta\":\"Value\",\"unit\":\"g/cm\u00b3\"},{\"color1\":\"red\",\"color2\":\"blue\",\"meta\":\"Value\",\"lightness\":70},{\"color1\":\"yellow\",\"color2\":\"blue\",\"meta\":\"Value\",\"lightness\":30}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_141_Output1 | class Fn_parallel_multiple_function_141_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a scientist working in a lab. You have a substance with a mass of 10 kilograms and a volume of 2 cubic meters. You want to calculate the density of this substance in kg/m\u00b3. After your experiment, you want to relax by doing some painting. You decide to mix two primary colors, red and blue. However, you want the resulting color to have a lightness level of 70%. Later, you have another substance with a mass of 5 kilograms and a volume of 1 cubic meter. You want to calculate the density of this substance as well, but this time in g/cm\u00b3. Finally, you decide to mix another set of primary colors, yellow and blue, but you want the resulting color to have a lightness level of 30%. Can you calculate the densities and mix the paint colors accordingly?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the density of a substance based on its mass and volume.\n    function_name: 'calculate_density' or null,\n    // The mass of the substance in kilograms.\n    mass: int,\n    // The volume of the substance in cubic meters.\n    volume: int,\n    // The unit of density. Default is kg/m\u00b3\n    unit: string or null,\n  } or {\n    // Combine two primary paint colors and adjust the resulting color's lightness level.\n    function_name: 'mix_paint_color' or null,\n    // The first primary color to be mixed.\n    color1: string,\n    // The second primary color to be mixed.\n    color2: string,\n    // The desired lightness level of the resulting color in percentage. The default level is set to 50%.\n    lightness: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"calculate_density\",\n    \"mass\": 10,\n    \"volume\": 2,\n    \"unit\": \"kg/m\u00b3\"\n  },\n  {\n    \"function_name\": \"calculate_density\",\n    \"mass\": 5,\n    \"volume\": 1,\n    \"unit\": \"g/cm\u00b3\"\n  },\n  {\n    \"function_name\": \"mix_paint_color\",\n    \"color1\": \"red\",\n    \"color2\": \"blue\",\n    \"lightness\": 70\n  },\n  {\n    \"function_name\": \"mix_paint_color\",\n    \"color1\": \"yellow\",\n    \"color2\": \"blue\",\n    \"lightness\": 30\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 462, "output_tokens": 154, "total_tokens": 616, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "56eb5f24-8a15-4468-a6a9-e62f6ff8d609", "event_id": "56eb5f24-8a15-4468-a6a9-e62f6ff8d609", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 26368, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_141", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "956fc5c8-a6cc-414c-8076-0133ae9efd1e", "event_id": "5c70e2dc-d5c3-468d-849e-c4c6967cb117", "parent_event_id": "956fc5c8-a6cc-414c-8076-0133ae9efd1e", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2079, "start_time": "2024-06-20T01:21:03.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_150", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_150", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_150\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Paris\",\"room_type\":\"deluxe\",\"duration\":5,\"start_date\":\"20th June\",\"preferences\":[\"Value1\",\"Value3\"],\"meta\":\"Value\"},{\"team_name\":\"Manchester United\",\"meta\":\"Value\",\"include_stats\":true},{\"weight_kg\":75,\"height_m\":1.8,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_150_Output1 | class Fn_parallel_multiple_function_150_Output2 | class Fn_parallel_multiple_function_150_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few tasks? First, I need to book a hotel room in Paris for 5 nights starting from 20th June. I prefer a deluxe room and would like the hotel to have a gym and offer free breakfast. Secondly, I am curious about the last match played by the soccer club 'Manchester United'. Could you fetch the details for me? Also, include the match statistics. Lastly, I recently measured my weight and height. I weigh 75 kilograms and my height is 1.8 meters. Could you calculate my Body Mass Index (BMI)?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Books a hotel room given the location, room type, stay duration and any additional preferences.\n    function_name: 'hotel_booking' or null,\n    // The city where you want to book the hotel.\n    location: string,\n    // Type of the room required. Options: 'single', 'double', 'deluxe', etc.\n    room_type: string,\n    // The number of nights you want to book the hotel for.\n    duration: int,\n    // The date when your stay begins.\n    start_date: string,\n    // Optional preferences of stay at the hotel. Default is all if not specified.\n    preferences: [\n      'pet_friendly' or 'gym' or 'swimming_pool' or 'free_breakfast' or 'parking'\n    ],\n  } or {\n    // Retrieve the details of the last match played by a specified soccer club.\n    function_name: 'soccer.get_last_match' or null,\n    // The name of the soccer club.\n    team_name: string,\n    // If true, include match statistics like possession, shots on target etc. Default is false.\n    include_stats: bool or null,\n  } or {\n    // Calculate the Body Mass Index (BMI) given a person's weight and height.\n    function_name: 'calculate_BMI' or null,\n    // The weight of the person in kilograms.\n    weight_kg: int,\n    // The height of the person in meters.\n    height_m: float,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"hotel_booking\",\n    \"location\": \"Paris\",\n    \"room_type\": \"deluxe\",\n    \"duration\": 5,\n    \"start_date\": \"20th June\",\n    \"preferences\": [\"gym\", \"free_breakfast\"]\n  },\n  {\n    \"function_name\": \"soccer.get_last_match\",\n    \"team_name\": \"Manchester United\",\n    \"include_stats\": true\n  },\n  {\n    \"function_name\": \"calculate_BMI\",\n    \"weight_kg\": 75,\n    \"height_m\": 1.8\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 540, "output_tokens": 130, "total_tokens": 670, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "956fc5c8-a6cc-414c-8076-0133ae9efd1e", "event_id": "956fc5c8-a6cc-414c-8076-0133ae9efd1e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 26846, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_150", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e41f15af-6ebd-44d5-9bf2-b88095fd8356", "event_id": "ae7f8596-6bb4-430c-bcea-e0255b928f2b", "parent_event_id": "e41f15af-6ebd-44d5-9bf2-b88095fd8356", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2455, "start_time": "2024-06-20T01:21:03.525Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_148", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_148", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_148\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"San Francisco\",\"food_type\":\"Italian\",\"number\":5,\"dietary_requirements\":[\"vegan\"],\"meta\":\"Value\"},{\"team_name\":\"Golden State Warriors\",\"num_matches\":3,\"meta\":\"Value\",\"league\":\"NBA\"},{\"company_name\":\"Apple Inc.\",\"detail_level\":\"detailed\",\"meta\":\"Value\",\"market\":\"NASDAQ\"},{\"budget\":500,\"type\":\"guitar\",\"meta\":\"Value\",\"make\":\"Fender\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_148_Output3 | class Fn_parallel_multiple_function_148_Output0 | class Fn_parallel_multiple_function_148_Output2 | class Fn_parallel_multiple_function_148_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan a day out? I want to start by having lunch at a restaurant in San Francisco that serves Italian food. I would like to see 5 options and I am a vegan. After lunch, I want to catch a match of the Golden State Warriors. Can you tell me their next 3 match schedules in the NBA? Later in the evening, I am thinking of buying some stocks. Can you provide me a detailed information about the Apple Inc. stocks in the NASDAQ market? And finally, I am thinking of buying a guitar. I have a budget of $500. Can you find me a Fender guitar within my budget?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Locate nearby restaurants based on location and food preferences.\n    function_name: 'find_restaurants' or null,\n    // The specific location or area.\n    location: string,\n    // The type of food preferred.\n    food_type: string,\n    // Number of results to return.\n    number: int,\n    // Special dietary requirements, e.g. vegan, gluten-free. Default is all if not specified.\n    dietary_requirements: string[],\n  } or {\n    // Retrieve the match schedule for a specific sports team.\n    function_name: 'sports.match_schedule' or null,\n    // The name of the sports team.\n    team_name: string,\n    // The number of upcoming matches you want to get.\n    num_matches: int,\n    // The sports league of the team. This is an optional parameter. Default is 'NBA'\n    league: string or null,\n  } or {\n    // Search for a musical instrument within specified budget and of specific type.\n    function_name: 'find_instrument' or null,\n    // Your budget for the instrument.\n    budget: int,\n    // Type of the instrument\n    type: string,\n    // Maker of the instrument, Optional parameter. Default is all if not specified.\n    make: string or null,\n  } or {\n    // Retrieves information about a specific stock based on company's name.\n    function_name: 'get_stock_info' or null,\n    // The name of the company.\n    company_name: string,\n    // Level of detail for stock information. Can be 'summary' or 'detailed'.\n    detail_level: string,\n    // The stock market of interest. Default is 'NASDAQ'\n    market: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"find_restaurants\",\n    \"location\": \"San Francisco\",\n    \"food_type\": \"Italian\",\n    \"number\": 5,\n    \"dietary_requirements\": [\"vegan\"]\n  },\n  {\n    \"function_name\": \"sports.match_schedule\",\n    \"team_name\": \"Golden State Warriors\",\n    \"num_matches\": 3,\n    \"league\": \"NBA\"\n  },\n  {\n    \"function_name\": \"get_stock_info\",\n    \"company_name\": \"Apple Inc.\",\n    \"detail_level\": \"detailed\",\n    \"market\": \"NASDAQ\"\n  },\n  {\n    \"function_name\": \"find_instrument\",\n    \"budget\": 500,\n    \"type\": \"guitar\",\n    \"make\": \"Fender\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 598, "output_tokens": 169, "total_tokens": 767, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5398e34b-72b4-4b52-a8eb-29177441a4fc", "event_id": "772a9fb4-ea37-4e74-a3c7-a72a80f3f9ac", "parent_event_id": "5398e34b-72b4-4b52-a8eb-29177441a4fc", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2401, "start_time": "2024-06-20T01:21:03.580Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_149", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_149", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_149\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"name\":\"Lionel Messi\",\"currency\":\"EUR\",\"meta\":\"Value\"},{\"name\":\"LeBron James\",\"currency\":\"GBP\",\"meta\":\"Value\"},{\"weight\":85,\"height\":180,\"meta\":\"Value\",\"unit\":\"metric\"},{\"weight\":200,\"height\":74,\"meta\":\"Value\",\"unit\":\"imperial\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_149_Output1 | class Fn_parallel_multiple_function_149_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me the net worth of the famous footballer Lionel Messi in Euros? After that, I would like to know the net worth of the basketball player LeBron James in British Pounds. Also, I'm curious about the Body Mass Index (BMI) of a person who weighs 85 kilograms and is 180 centimeters tall using the metric system. Lastly, could you calculate the BMI of another person who weighs 200 pounds and is 6 feet 2 inches tall using the imperial system?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the Body Mass Index (BMI) of a person.\n    function_name: 'calculate_bmi' or null,\n    // Weight of the person in kilograms.\n    weight: int,\n    // Height of the person in centimeters.\n    height: int,\n    // Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\n    unit: string or null,\n  } or {\n    // Get the total net worth of a sports celebrity based on most recent data.\n    function_name: 'celebrity_net_worth.get' or null,\n    // The full name of the sports celebrity.\n    name: string,\n    // The currency in which the net worth will be returned. Default is 'USD'.\n    currency: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'celebrity_net_worth.get',\n    name: 'Lionel Messi',\n    currency: 'EUR',\n  },\n  {\n    function_name: 'celebrity_net_worth.get',\n    name: 'LeBron James',\n    currency: 'GBP',\n  },\n  {\n    function_name: 'calculate_bmi',\n    weight: 85,\n    height: 180,\n    unit: 'metric',\n  },\n  {\n    function_name: 'calculate_bmi',\n    weight: 200,\n    height: 74, // 6 feet 2 inches = 74 inches\n    unit: 'imperial',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 376, "output_tokens": 140, "total_tokens": 516, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e41f15af-6ebd-44d5-9bf2-b88095fd8356", "event_id": "e41f15af-6ebd-44d5-9bf2-b88095fd8356", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 27051, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_148", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5398e34b-72b4-4b52-a8eb-29177441a4fc", "event_id": "5398e34b-72b4-4b52-a8eb-29177441a4fc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 27051, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_149", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2c03b842-166f-4269-a010-560d9e12d7c0", "event_id": "ddda8653-48c1-4c1d-999d-4a67b71fdd50", "parent_event_id": "2c03b842-166f-4269-a010-560d9e12d7c0", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2219, "start_time": "2024-06-20T01:21:04.170Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_153", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_153", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_153\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base\":12,\"height\":15,\"meta\":\"Value\",\"unit\":\"square meters\"},{\"invention_name\":\"Telephone\",\"want_year\":true,\"meta\":\"Value\"},{\"start\":\"New York City\",\"end\":\"Los Angeles\",\"avoid\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_153_Output0 | class Fn_parallel_multiple_function_153_Output1 | class Fn_parallel_multiple_function_153_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few things? First, I'm trying to calculate the area of a triangle that has a base of 12 meters and a height of 15 meters. I would like the result in square meters. Second, I'm curious about the inventor and year of invention of the 'Telephone'. Could you find that for me? Lastly, I'm planning a road trip and need directions from 'New York City' to 'Los Angeles'. I would like to avoid 'tolls' and 'highways'. Can you provide the best route for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve directions from a starting location to an ending location, including options for route preferences.\n    function_name: 'map_service.get_directions' or null,\n    // Starting location for the route.\n    start: string,\n    // Ending location for the route.\n    end: string,\n    // Route features to avoid. Default is none if not specified.\n    avoid: [\n      'tolls' or 'highways' or 'ferries'\n    ],\n  } or {\n    // Calculate the area of a triangle.\n    function_name: 'geometry.area_triangle' or null,\n    // The length of the base of the triangle.\n    base: int,\n    // The height of the triangle from the base.\n    height: int,\n    // The measurement unit for the area. Defaults to square meters.\n    unit: string or null,\n  } or {\n    // Retrieve the inventor and year of invention based on the invention's name.\n    function_name: 'science_history.get_invention' or null,\n    // The name of the invention.\n    invention_name: string,\n    // Return the year of invention if set to true.\n    want_year: bool,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"geometry.area_triangle\",\n    \"base\": 12,\n    \"height\": 15,\n    \"unit\": \"square meters\"\n  },\n  {\n    \"function_name\": \"science_history.get_invention\",\n    \"invention_name\": \"Telephone\",\n    \"want_year\": true\n  },\n  {\n    \"function_name\": \"map_service.get_directions\",\n    \"start\": \"New York City\",\n    \"end\": \"Los Angeles\",\n    \"avoid\": [\"tolls\", \"highways\"]\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 469, "output_tokens": 119, "total_tokens": 588, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2c03b842-166f-4269-a010-560d9e12d7c0", "event_id": "2c03b842-166f-4269-a010-560d9e12d7c0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 27459, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_153", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b6c5f77e-09a3-4bf4-84f5-b20e6ff01f6b", "event_id": "d4b603f3-3cb2-4d62-9c22-5d364f204f91", "parent_event_id": "b6c5f77e-09a3-4bf4-84f5-b20e6ff01f6b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2721, "start_time": "2024-06-20T01:21:03.751Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_151", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_151", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_151\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"actor_name\":\"Leonardo DiCaprio\",\"year\":2010,\"meta\":\"Value\",\"category\":\"Drama\"},{\"company_name\":\"Apple Inc.\",\"location\":\"California\",\"year\":2015,\"meta\":\"Value\",\"case_type\":\"civil\"},{\"departure_location\":\"New York\",\"destination_location\":\"London\",\"date\":\"2022-12-25\",\"meta\":\"Value\",\"time\":\"10:00AM\",\"direct_flight\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_151_Output1 | class Fn_parallel_multiple_function_151_Output2 | class Fn_parallel_multiple_function_151_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few things? First, I'm interested in finding out all the movies that actor Leonardo DiCaprio starred in the year 2010, specifically in the Drama category. Second, I'd like to know about any lawsuits filed against the company 'Apple Inc.' in the location 'California' in the year 2015, and I'm particularly interested in civil cases. Lastly, I need to book a direct flight from 'New York' to 'London' on the date '2022-12-25', and I prefer the time to be around '10:00AM'. Can you assist me with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Search for lawsuits against a specific company within a specific time and location.\n    function_name: 'lawsuits_search' or null,\n    // The name of the company.\n    company_name: string,\n    // The location where the lawsuit was filed.\n    location: string,\n    // The year when the lawsuit was filed.\n    year: int,\n    // The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types.\n    case_type: string or null,\n  } or {\n    // Book a direct flight for a specific date and time from departure location to destination location.\n    function_name: 'flight.book' or null,\n    // The location you are departing from.\n    departure_location: string,\n    // The location you are flying to.\n    destination_location: string,\n    // The date of the flight. Accepts standard date format e.g., 2022-04-28.\n    date: string,\n    // Preferred time of flight. Format XX:XXAM or XX:XXPM. Default ''\n    time: string or null,\n    // If set to true, only direct flights will be searched. Default is false\n    direct_flight: bool or null,\n  } or {\n    // Searches the database to find all movies by a specific actor within a certain year.\n    function_name: 'imdb.find_movies_by_actor' or null,\n    // The name of the actor.\n    actor_name: string,\n    // The specific year to search in.\n    year: int,\n    // The category of the film (e.g. Drama, Comedy, etc). This parameter is optional. Default is all if not specified.\n    category: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"imdb.find_movies_by_actor\",\n    \"actor_name\": \"Leonardo DiCaprio\",\n    \"year\": 2010,\n    \"category\": \"Drama\"\n  },\n  {\n    \"function_name\": \"lawsuits_search\",\n    \"company_name\": \"Apple Inc.\",\n    \"location\": \"California\",\n    \"year\": 2015,\n    \"case_type\": \"civil\"\n  },\n  {\n    \"function_name\": \"flight.book\",\n    \"departure_location\": \"New York\",\n    \"destination_location\": \"London\",\n    \"date\": \"2022-12-25\",\n    \"time\": \"10:00AM\",\n    \"direct_flight\": true\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 608, "output_tokens": 156, "total_tokens": 764, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b6c5f77e-09a3-4bf4-84f5-b20e6ff01f6b", "event_id": "b6c5f77e-09a3-4bf4-84f5-b20e6ff01f6b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 27542, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_151", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a55d39cc-a1ed-489d-94e8-641a76ed50c9", "event_id": "5ca43e96-83f8-4c33-b017-1f025617b2b7", "parent_event_id": "a55d39cc-a1ed-489d-94e8-641a76ed50c9", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2480, "start_time": "2024-06-20T01:21:04.324Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_154", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_154", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_154\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"destination\":\"Paris\",\"days\":7,\"daily_budget\":200,\"meta\":\"Value\",\"exploration_type\":\"Value1\"},{\"recipeName\":\"Chicken Alfredo\",\"meta\":\"Value\",\"maxCalories\":800},{\"quantity\":2,\"from_unit\":\"cup\",\"to_unit\":\"gram\",\"item\":\"flour\",\"meta\":\"Value\"},{\"predictors\":[\"age\",\"income\",\"education level\"],\"target\":\"job satisfaction\",\"meta\":\"Value\",\"standardize\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_154_Output3 | class Fn_parallel_multiple_function_154_Output1 | class Fn_parallel_multiple_function_154_Output2 | class Fn_parallel_multiple_function_154_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me plan a trip? I want to go to Paris for 7 days with a daily budget of $200, and I prefer exploring urban areas. Also, I'm trying to cook a dish called 'Chicken Alfredo', but I'm not sure if it fits my diet. Could you find a recipe for 'Chicken Alfredo' that has less than 800 calories? Additionally, I have a cooking measurement problem. I have a recipe that calls for 2 cups of flour, but I only have a scale. Can you convert 2 cups of flour into grams for me? Lastly, I'm doing a research project and need to run a linear regression model. The predictor variables are 'age', 'income', and 'education level', and the target variable is 'job satisfaction'. Could you also standardize the predictors for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Build a linear regression model using given predictor variables and a target variable.\n    function_name: 'run_linear_regression' or null,\n    // Array containing the names of predictor variables.\n    predictors: string[],\n    // The name of target variable.\n    target: string,\n    // Option to apply standardization on the predictors. Defaults to False.\n    standardize: bool or null,\n  } or {\n    // Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.\n    function_name: 'travel_itinerary_generator' or null,\n    // Destination city of the trip.\n    destination: string,\n    // Number of days for the trip.\n    days: int,\n    // The maximum daily budget for the trip.\n    daily_budget: int,\n    // The preferred exploration type. (default: urban)\n    exploration_type: 'nature' or 'urban' or 'history' or 'culture' or null,\n  } or {\n    // Convert cooking measurements from one unit to another.\n    function_name: 'cooking_conversion.convert' or null,\n    // The quantity to be converted.\n    quantity: int,\n    // The unit to convert from.\n    from_unit: string,\n    // The unit to convert to.\n    to_unit: string,\n    // The item to be converted.\n    item: string,\n  } or {\n    // Locate a recipe based on name and its calorie content\n    function_name: 'find_recipe' or null,\n    // The recipe's name.\n    recipeName: string,\n    // The maximum calorie content of the recipe. (default: 1000)\n    maxCalories: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"travel_itinerary_generator\",\n    \"destination\": \"Paris\",\n    \"days\": 7,\n    \"daily_budget\": 200,\n    \"exploration_type\": \"urban\"\n  },\n  {\n    \"function_name\": \"find_recipe\",\n    \"recipeName\": \"Chicken Alfredo\",\n    \"maxCalories\": 800\n  },\n  {\n    \"function_name\": \"cooking_conversion.convert\",\n    \"quantity\": 2,\n    \"from_unit\": \"cup\",\n    \"to_unit\": \"gram\",\n    \"item\": \"flour\"\n  },\n  {\n    \"function_name\": \"run_linear_regression\",\n    \"predictors\": [\"age\", \"income\", \"education level\"],\n    \"target\": \"job satisfaction\",\n    \"standardize\": true\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 630, "output_tokens": 174, "total_tokens": 804, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a55d39cc-a1ed-489d-94e8-641a76ed50c9", "event_id": "a55d39cc-a1ed-489d-94e8-641a76ed50c9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 27874, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_154", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6a77dcc9-6213-4866-b66a-746b028ba37a", "event_id": "340b8520-12e8-48e5-ba56-aa7d4e80cf36", "parent_event_id": "6a77dcc9-6213-4866-b66a-746b028ba37a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2819, "start_time": "2024-06-20T01:21:04.001Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_152", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_152", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_152\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"hotel_name\":\"Hotel Le Bristol Paris\",\"location\":\"Paris, France\",\"room_type\":\"suite\",\"start_date\":\"12-01-2022\",\"stay_duration\":10,\"meta\":\"Value\",\"view\":\"city\"},{\"source_currency\":\"USD\",\"target_currency\":\"EUR\",\"meta\":\"Value\",\"amount\":1000},{\"location\":\"Palo Alto, CA\",\"items\":[\"bottles of water\",\"apples\",\"loaf of bread\"],\"quantity\":[2,3,1],\"meta\":\"Value\"},{\"distance_in_light_years\":4.24,\"meta\":\"Value\",\"speed_of_light\":299792458}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_152_Output1 | class Fn_parallel_multiple_function_152_Output2 | class Fn_parallel_multiple_function_152_Output0 | class Fn_parallel_multiple_function_152_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are planning a vacation to Paris, France. You want to stay at the 'Hotel Le Bristol Paris' in a suite room for 10 days starting from 12-01-2022. You also have a preference for a city view from your room. How would you book this hotel? After booking, you want to know how much 1000 US dollars would be in Euros. Can you find out the latest exchange rate? On your way to the hotel, you want to stop by a Safeway store in Palo Alto, CA to pick up some items. You need to order 2 bottles of water, 3 apples, and 1 loaf of bread. How would you place this order? Lastly, you are curious about the universe and want to know how long it would take for light to travel from Earth to Proxima Centauri, which is approximately 4.24 light years away, considering the speed of light in vacuum is 299792458 m/s. Can you calculate this?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Book a room in a specific hotel with particular preferences\n    function_name: 'book_hotel' or null,\n    // The name of the hotel.\n    hotel_name: string,\n    // The location of the hotel.\n    location: string,\n    // The type of room preferred.\n    room_type: string,\n    // The starting date of the stay in format MM-DD-YYYY.\n    start_date: string,\n    // The duration of the stay in days.\n    stay_duration: int,\n    // The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference. (default: No preference)\n    view: string or null,\n  } or {\n    // Order specified items from a Safeway location.\n    function_name: 'safeway.order' or null,\n    // The location of the Safeway store, e.g. Palo Alto, CA.\n    location: string,\n    // List of items to order.\n    items: string[],\n    // Quantity of each item in the order list.\n    quantity: int[],\n  } or {\n    // Retrieve the latest exchange rate between two specified currencies.\n    function_name: 'latest_exchange_rate' or null,\n    // The currency you are converting from.\n    source_currency: string,\n    // The currency you are converting to.\n    target_currency: string,\n    // The amount to be converted. If omitted, default to xchange rate of 1 unit source currency.\n    amount: int or null,\n  } or {\n    // Calculate the time taken for light to travel from a celestial body to another.\n    function_name: 'light_travel_time' or null,\n    // The distance between the two celestial bodies in light years.\n    distance_in_light_years: float,\n    // The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\n    speed_of_light: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"book_hotel\",\n    \"hotel_name\": \"Hotel Le Bristol Paris\",\n    \"location\": \"Paris, France\",\n    \"room_type\": \"suite\",\n    \"start_date\": \"12-01-2022\",\n    \"stay_duration\": 10,\n    \"view\": \"city\"\n  },\n  {\n    \"function_name\": \"latest_exchange_rate\",\n    \"source_currency\": \"USD\",\n    \"target_currency\": \"EUR\",\n    \"amount\": 1000\n  },\n  {\n    \"function_name\": \"safeway.order\",\n    \"location\": \"Palo Alto, CA\",\n    \"items\": [\"bottles of water\", \"apples\", \"loaf of bread\"],\n    \"quantity\": [2, 3, 1]\n  },\n  {\n    \"function_name\": \"light_travel_time\",\n    \"distance_in_light_years\": 4.24,\n    \"speed_of_light\": 299792458\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 715, "output_tokens": 211, "total_tokens": 926, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6a77dcc9-6213-4866-b66a-746b028ba37a", "event_id": "6a77dcc9-6213-4866-b66a-746b028ba37a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 27890, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_152", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: items\\nExpected: any of [['water', 'apples', 'bread']]\\nActual@1: meta=<Fn_parallel_multiple_function_152_Output1_TypeName.Value: 'Value'> location='Palo Alto, CA' items=['bottles of water', 'apples', 'loaf of bread'] quantity=[2, 3, 1]\\nActual all: [Fn_parallel_multiple_function_152_Output0(meta=<Fn_parallel_multiple_function_152_Output0_TypeName.Value: 'Value'>, hotel_name='Hotel Le Bristol Paris', location='Paris, France', room_type='suite', start_date='12-01-2022', stay_duration=10, view='city'), Fn_parallel_multiple_function_152_Output2(meta=<Fn_parallel_multiple_function_152_Output2_TypeName.Value: 'Value'>, source_currency='USD', target_currency='EUR', amount=1000), Fn_parallel_multiple_function_152_Output1(meta=<Fn_parallel_multiple_function_152_Output1_TypeName.Value: 'Value'>, location='Palo Alto, CA', items=['bottles of water', 'apples', 'loaf of bread'], quantity=[2, 3, 1]), Fn_parallel_multiple_function_152_Output3(meta=<Fn_parallel_multiple_function_152_Output3_TypeName.Value: 'Value'>, distance_in_light_years=4.24, speed_of_light=299792458)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c6bd9b83-0f80-48cb-9940-d9d5dd9fdb70", "event_id": "2b9544c0-b3c3-4c7a-aaa7-1dde4c2eadec", "parent_event_id": "c6bd9b83-0f80-48cb-9940-d9d5dd9fdb70", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1561, "start_time": "2024-06-20T01:21:05.299Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_157", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_157", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_157\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"group1\":[12,15,18,22,25],\"group2\":[20,23,26,29,32],\"meta\":\"Value\",\"equal_variance\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_157_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with the following tasks? First, I have two groups of data points: group1 consists of [12, 15, 18, 22, 25] and group2 consists of [20, 23, 26, 29, 32]. I want to run a two-sample t-test on these groups with the assumption that they have equal variance. Second, I'm currently in Boston, MA and I'm craving for some Sushi. Could you find the closest sushi restaurant that has a Patio and Wi-Fi? Lastly, I've recently taken up painting as a hobby and I'm curious about the common personality traits associated with it. Could you retrieve the top 5 personality traits of people who enjoy painting?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Runs a two sample t-test for two given data groups.\n    function_name: 'run_two_sample_ttest' or null,\n    // First group of data points.\n    group1: int[],\n    // Second group of data points.\n    group2: int[],\n    // Assumption about whether the two samples have equal variance. (default: True)\n    equal_variance: bool or null,\n  } or {\n    // Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.\n    function_name: 'restaurant_search.find_closest' or null,\n    // The city, for instance Boston, MA\n    location: string,\n    // Type of food like Sushi.\n    cuisine: string,\n    // Preferred amenities in the restaurant. Default is none if not specified.\n    amenities: [\n      'Patio' or 'Wi-Fi' or 'Happy Hour' or 'Wheelchair Accessible'\n    ],\n  } or {\n    // Retrieve the common personality traits of people based on their hobbies or activities.\n    function_name: 'get_personality_traits' or null,\n    // The hobby or activity of interest.\n    hobby: string,\n    // The number of top traits to return, default is 5\n    trait_count: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"function_name\": \"run_two_sample_ttest\",\n  \"group1\": [12, 15, 18, 22, 25],\n  \"group2\": [20, 23, 26, 29, 32],\n  \"equal_variance\": true\n}\n\nFunction call: run_two_sample_ttest([12, 15, 18, 22, 25], [20, 23, 26, 29, 32], true)", "metadata": {"logprobs": null, "prompt_tokens": 531, "output_tokens": 101, "total_tokens": 632, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c6bd9b83-0f80-48cb-9940-d9d5dd9fdb70", "event_id": "c6bd9b83-0f80-48cb-9940-d9d5dd9fdb70", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 27930, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_157", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "457fb840-700b-4af7-95e3-43f5f3d1d6b5", "event_id": "29bb41aa-dd16-48b8-99c7-59c363afb978", "parent_event_id": "457fb840-700b-4af7-95e3-43f5f3d1d6b5", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2083, "start_time": "2024-06-20T01:21:04.990Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_155", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_155", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_155\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"area\":2000,\"rooms\":4,\"year\":1985,\"location\":\"San Francisco\",\"meta\":\"Value\"},{\"entity\":\"Mr. John Doe\",\"county\":\"San Francisco\",\"meta\":\"Value\",\"state\":\"California\"},{\"total_outcomes\":1000,\"favorable_outcomes\":5,\"meta\":\"Value\",\"round_to\":3}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_155_Output2 | class Fn_parallel_multiple_function_155_Output0 | class Fn_parallel_multiple_function_155_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are considering to buy a house in San Francisco, California. The house was built in 1985, has an area of 2000 square feet and contains 4 rooms. You want to predict the price of this house. After buying the house, you also want to know about any lawsuits involving the previous owner, Mr. John Doe, in the county of San Francisco. Additionally, you are curious about the probability of winning a lottery where the total number of possible outcomes is 1000 and the number of favorable outcomes is 5. You want the result to be rounded to 3 decimal places. Can you provide the predicted house price, the lawsuits involving Mr. John Doe in San Francisco county, and the probability of winning the lottery?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve all lawsuits involving a particular entity from specified jurisdiction.\n    function_name: 'lawsuit_search' or null,\n    // The entity involved in lawsuits.\n    entity: string,\n    // The jurisdiction for the lawsuit search.\n    county: string,\n    // The state for the lawsuit search. Default is California.\n    state: string or null,\n  } or {\n    // Calculate the probability of an event.\n    function_name: 'calculate_probability' or null,\n    // Total number of possible outcomes.\n    total_outcomes: int,\n    // Number of outcomes considered as 'successful'.\n    favorable_outcomes: int,\n    // Number of decimal places to round the result to. (default: 2)\n    round_to: int or null,\n  } or {\n    // Predict house price based on area, number of rooms and year of construction.\n    function_name: 'predict_house_price' or null,\n    // Area of the house in square feet.\n    area: int,\n    // Number of rooms in the house.\n    rooms: int,\n    // Year when the house was constructed.\n    year: int,\n    // The location or city of the house.\n    location: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"predict_house_price\",\n    \"area\": 2000,\n    \"rooms\": 4,\n    \"year\": 1985,\n    \"location\": \"San Francisco\"\n  },\n  {\n    \"function_name\": \"lawsuit_search\",\n    \"entity\": \"Mr. John Doe\",\n    \"county\": \"San Francisco\",\n    \"state\": \"California\"\n  },\n  {\n    \"function_name\": \"calculate_probability\",\n    \"total_outcomes\": 1000,\n    \"favorable_outcomes\": 5,\n    \"round_to\": 3\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 513, "output_tokens": 132, "total_tokens": 645, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "457fb840-700b-4af7-95e3-43f5f3d1d6b5", "event_id": "457fb840-700b-4af7-95e3-43f5f3d1d6b5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 28144, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_155", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6152f6c5-a55a-4039-b6ab-3fbd91063f3e", "event_id": "106b797c-8423-44b4-b84d-bd2cabbd8c55", "parent_event_id": "6152f6c5-a55a-4039-b6ab-3fbd91063f3e", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2464, "start_time": "2024-06-20T01:21:05.067Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_156", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_156", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_156\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base\":7,\"exponent\":3,\"meta\":\"Value\",\"mod\":null},{\"total_outcomes\":52,\"event_outcomes\":26,\"meta\":\"Value\",\"round\":3},{\"DNA_id\":\"XYZ123\",\"meta\":\"Value\",\"format\":\"genbank\",\"upstream\":5},{\"base\":2,\"exponent\":5,\"meta\":\"Value\",\"mod\":3}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_156_Output2 | class Fn_parallel_multiple_function_156_Output1 | class Fn_parallel_multiple_function_156_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few calculations? First, I need to calculate the power of 7 raised to 3. Then, I want to know the probability of drawing a red card from a standard deck of 52 playing cards, round the answer to 3 decimal places. After that, I have a DNA molecule with the ID 'XYZ123' in a public database, can you retrieve its sequence in 'genbank' format? Also, include 5 base pairs upstream the DNA sequence. Lastly, calculate the power of 2 raised to 5, but this time with a modulus of 3.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the sequence of a DNA molecule with the given id from a public database.\n    function_name: 'fetch_DNA_sequence' or null,\n    // Unique ID of the DNA molecule in the database.\n    DNA_id: string,\n    // Optional parameter to get sequence in specific format (default to 'fasta').\n    format: string or null,\n    // Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\n    upstream: int or null,\n  } or {\n    // Calculate the probability of an event.\n    function_name: 'probabilities.calculate_single' or null,\n    // The total number of outcomes.\n    total_outcomes: int,\n    // The number of outcomes where the event occurs.\n    event_outcomes: int,\n    // Round the answer to a specified number of decimal places. Defaults to 2.\n    round: int or null,\n  } or {\n    // Calculate the power of one number raised to another.\n    function_name: 'math.power' or null,\n    // The base number.\n    base: int,\n    // The exponent.\n    exponent: int,\n    // The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided.\n    mod: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"math.power\",\n    \"base\": 7,\n    \"exponent\": 3\n  },\n  {\n    \"function_name\": \"probabilities.calculate_single\",\n    \"total_outcomes\": 52,\n    \"event_outcomes\": 26,\n    \"round\": 3\n  },\n  {\n    \"function_name\": \"fetch_DNA_sequence\",\n    \"DNA_id\": \"XYZ123\",\n    \"format\": \"genbank\",\n    \"upstream\": 5\n  },\n  {\n    \"function_name\": \"math.power\",\n    \"base\": 2,\n    \"exponent\": 5,\n    \"mod\": 3\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 500, "output_tokens": 150, "total_tokens": 650, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6152f6c5-a55a-4039-b6ab-3fbd91063f3e", "event_id": "6152f6c5-a55a-4039-b6ab-3fbd91063f3e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 28600, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_156", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "85ce8836-7ac8-45dc-aee2-c490741b4137", "event_id": "9d7fbce5-585f-4861-9744-30eb1f228d11", "parent_event_id": "85ce8836-7ac8-45dc-aee2-c490741b4137", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1578, "start_time": "2024-06-20T01:21:06.391Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_161", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_161", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_161\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"principal\":5000,\"annual_rate\":5.0,\"compounding_freq\":\"Value1\",\"time_in_years\":7,\"meta\":\"Value\"},{\"company_name\":\"Tech Corp\",\"location\":\"San Francisco\",\"year\":2018,\"meta\":\"Value\",\"case_type\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_161_Output0 | class Fn_parallel_multiple_function_161_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with two tasks? First, I want to calculate the compound interest on an investment I made. I invested $5000 with an annual interest rate of 5%. The interest is compounded quarterly and I plan to keep the money invested for 7 years. Secondly, I heard some rumors about a company named 'Tech Corp' and I want to check if there were any lawsuits filed against them in 'San Francisco' in the year 2018. Can you find this information for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Search for lawsuits against a specific company within a specific time and location.\n    function_name: 'lawsuits_search' or null,\n    // The name of the company.\n    company_name: string,\n    // The location where the lawsuit was filed.\n    location: string,\n    // The year when the lawsuit was filed.\n    year: int,\n    // The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types.\n    case_type: string or null,\n  } or {\n    // Calculate compound interest for a certain time period.\n    function_name: 'compound_interest' or null,\n    // The initial amount of money that was invested or loaned out.\n    principal: int,\n    // The interest rate for a year as a percentage.\n    annual_rate: float,\n    // The number of times that interest is compounded per unit period.\n    compounding_freq: 'monthly' or 'quarterly' or 'annually',\n    // The time the money is invested for in years.\n    time_in_years: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"compound_interest\",\n    \"principal\": 5000,\n    \"annual_rate\": 5,\n    \"compounding_freq\": \"quarterly\",\n    \"time_in_years\": 7\n  },\n  {\n    \"function_name\": \"lawsuits_search\",\n    \"company_name\": \"Tech Corp\",\n    \"location\": \"San Francisco\",\n    \"year\": 2018\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 448, "output_tokens": 89, "total_tokens": 537, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "85ce8836-7ac8-45dc-aee2-c490741b4137", "event_id": "85ce8836-7ac8-45dc-aee2-c490741b4137", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 29039, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_161", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d186badb-28a4-4efa-a45a-0e2f6d6128d0", "event_id": "36152e97-46ea-4c48-b926-3a28fac3103c", "parent_event_id": "d186badb-28a4-4efa-a45a-0e2f6d6128d0", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2433, "start_time": "2024-06-20T01:21:05.982Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_159", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_159", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_159\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"total_payout\":1000000,\"outstanding_shares\":500000,\"meta\":\"Value\"},{\"song_title\":\"Hey Jude\",\"artist_name\":\"The Beatles\",\"meta\":\"Value\",\"lang\":\"Value0\"},{\"title\":\"The Godfather\",\"meta\":\"Value\",\"extra_info\":true},{\"color1\":\"red\",\"color2\":\"blue\",\"meta\":\"Value\",\"lightness\":70}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_159_Output0 | class Fn_parallel_multiple_function_159_Output2 | class Fn_parallel_multiple_function_159_Output3 | class Fn_parallel_multiple_function_159_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few tasks? First, I'm interested in a company's financials. I'd like to know the quarterly dividend per share for a company that has a total dividend payout of $1,000,000 and 500,000 outstanding shares. Second, I'm a big fan of the Beatles and I'd like to know the lyrics of their song 'Hey Jude'. Third, I'm planning to watch a movie tonight and I'm considering 'The Godfather'. Could you provide a brief about this movie and also include additional information like Director, Cast, Awards etc.? Lastly, I'm doing a painting and I'd like to mix the colors red and blue, and I want the resulting color to have a lightness level of 70%.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the lyrics of a song based on the artist's name and song title.\n    function_name: 'get_song_lyrics' or null,\n    // The title of the song.\n    song_title: string,\n    // The name of the artist who performed the song.\n    artist_name: string,\n    // The language of the lyrics. Default is English.\n    lang: 'English' or 'French' or 'Spanish' or 'German' or 'Italian' or null,\n  } or {\n    // Combine two primary paint colors and adjust the resulting color's lightness level.\n    function_name: 'mix_paint_color' or null,\n    // The first primary color to be mixed.\n    color1: string,\n    // The second primary color to be mixed.\n    color2: string,\n    // The desired lightness level of the resulting color in percentage. The default level is set to 50.\n    lightness: int or null,\n  } or {\n    // Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares\n    function_name: 'finance.calculate_quarterly_dividend_per_share' or null,\n    // The total amount of dividends paid out in USD\n    total_payout: int,\n    // Total number of outstanding shares\n    outstanding_shares: int,\n  } or {\n    // This function retrieves a brief about a specified movie.\n    function_name: 'movie_details.brief' or null,\n    // Title of the movie\n    title: string,\n    // Option to get additional information like Director, Cast, Awards etc.\n    extra_info: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"finance.calculate_quarterly_dividend_per_share\",\n    \"total_payout\": 1000000,\n    \"outstanding_shares\": 500000\n  },\n  {\n    \"function_name\": \"get_song_lyrics\",\n    \"song_title\": \"Hey Jude\",\n    \"artist_name\": \"The Beatles\",\n    \"lang\": \"English\"\n  },\n  {\n    \"function_name\": \"movie_details.brief\",\n    \"title\": \"The Godfather\",\n    \"extra_info\": true\n  },\n  {\n    \"function_name\": \"mix_paint_color\",\n    \"color1\": \"red\",\n    \"color2\": \"blue\",\n    \"lightness\": 70\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 606, "output_tokens": 157, "total_tokens": 763, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "258465cd-17bb-4117-92af-9be4743e14c5", "event_id": "0e56f649-fd38-4f2a-8582-6fb720a2eb00", "parent_event_id": "258465cd-17bb-4117-92af-9be4743e14c5", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1594, "start_time": "2024-06-20T01:21:06.822Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_164", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_164", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_164\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"investment_amount\":5000,\"annual_yield\":0.07,\"years\":10,\"meta\":\"Value\"},{\"radius\":5,\"meta\":\"Value\",\"unit\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_164_Output1 | class Fn_parallel_multiple_function_164_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"John is planning to invest in a mutual fund. He has $5000 to start with and the fund he is interested in has an annual yield rate of 7%. He plans to keep his money in the fund for 10 years. After 10 years, he wants to use part of his investment returns to build a circular garden in his backyard. The radius of the garden will be 5 meters. Can you help him calculate how much money he will have in his mutual fund after 10 years and what will be the area of his circular garden?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the area of a circle given its radius.\n    function_name: 'geometry.calculate_area_circle' or null,\n    // The radius of the circle.\n    radius: int,\n    // The measurement unit of the radius (optional parameter, default is 'units').\n    unit: string or null,\n  } or {\n    // Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.\n    function_name: 'calculate_mutual_fund_balance' or null,\n    // The initial total amount invested in the fund.\n    investment_amount: int,\n    // The annual yield rate of the fund.\n    annual_yield: float,\n    // The period of time for the fund to mature.\n    years: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"calculate_mutual_fund_balance\",\n    \"investment_amount\": 5000,\n    \"annual_yield\": 0.07,\n    \"years\": 10\n  },\n  {\n    \"function_name\": \"geometry.calculate_area_circle\",\n    \"radius\": 5\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 385, "output_tokens": 71, "total_tokens": 456, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "055b6aa5-f19a-427f-8ff4-8e28a48ae33e", "event_id": "e1850f62-9135-449c-bdd9-af8db0677e4e", "parent_event_id": "055b6aa5-f19a-427f-8ff4-8e28a48ae33e", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2638, "start_time": "2024-06-20T01:21:05.778Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_158", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_158", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_158\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base\":15,\"height\":20,\"meta\":\"Value\",\"unit\":\"square meters\"},{\"dataset_A\":[12,15,18,20,22,25],\"dataset_B\":[14,16,19,21,23,26],\"meta\":\"Value\",\"alpha\":0.05},{\"location\":\"Los Angeles, CA\",\"genre\":\"rock\",\"meta\":\"Value\",\"days_ahead\":14},{\"base\":10,\"height\":30,\"meta\":\"Value\",\"unit\":\"square meters\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_158_Output0 | class Fn_parallel_multiple_function_158_Output2 | class Fn_parallel_multiple_function_158_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few calculations and searches? First, I'd like to calculate the area of a triangle with a base of 15 meters and a height of 20 meters, and I'd like the result in square meters. Then, I have two datasets that I'd like to compare statistically. The first dataset consists of the numbers 12, 15, 18, 20, 22, and 25, and the second dataset consists of the numbers 14, 16, 19, 21, 23, and 26. I'd like to perform a t-test with a significance level of 0.05. After that, I'm interested in finding upcoming rock concerts in Los Angeles, CA for the next 14 days. Lastly, I'd like to calculate the area of another triangle, this time with a base of 10 meters and a height of 30 meters, and again, I'd like the result in square meters.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Perform a statistical t-test to check if the means of two independent datasets are statistically different.\n    function_name: 't_test' or null,\n    // Dataset A for comparison.\n    dataset_A: int[],\n    // Dataset B for comparison.\n    dataset_B: int[],\n    // Significance level for the test. Default is 0.05.\n    alpha: float or null,\n  } or {\n    // Calculate the area of a triangle.\n    function_name: 'geometry.area_triangle' or null,\n    // The length of the base of the triangle.\n    base: int,\n    // The height of the triangle from the base.\n    height: int,\n    // The measurement unit for the area. Defaults to square meters.\n    unit: string or null,\n  } or {\n    // Find upcoming events of a specific genre in a given location.\n    function_name: 'event_finder.find_upcoming' or null,\n    // The city and state where the search will take place, e.g. New York, NY.\n    location: string,\n    // The genre of events.\n    genre: string,\n    // The number of days from now to include in the search. (default: 7)\n    days_ahead: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"geometry.area_triangle\",\n    \"base\": 15,\n    \"height\": 20,\n    \"unit\": \"square meters\"\n  },\n  {\n    \"function_name\": \"t_test\",\n    \"dataset_A\": [12, 15, 18, 20, 22, 25],\n    \"dataset_B\": [14, 16, 19, 21, 23, 26],\n    \"alpha\": 0.05\n  },\n  {\n    \"function_name\": \"event_finder.find_upcoming\",\n    \"location\": \"Los Angeles, CA\",\n    \"genre\": \"rock\",\n    \"days_ahead\": 14\n  },\n  {\n    \"function_name\": \"geometry.area_triangle\",\n    \"base\": 10,\n    \"height\": 30,\n    \"unit\": \"square meters\"\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 571, "output_tokens": 189, "total_tokens": 760, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d186badb-28a4-4efa-a45a-0e2f6d6128d0", "event_id": "d186badb-28a4-4efa-a45a-0e2f6d6128d0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 29486, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_159", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "258465cd-17bb-4117-92af-9be4743e14c5", "event_id": "258465cd-17bb-4117-92af-9be4743e14c5", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 29486, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_164", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "055b6aa5-f19a-427f-8ff4-8e28a48ae33e", "event_id": "055b6aa5-f19a-427f-8ff4-8e28a48ae33e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 29487, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_158", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "91729e66-4c1b-4249-8a9f-b0a14c6ab597", "event_id": "1c960ec4-ab19-45f2-8892-3f81435a0749", "parent_event_id": "91729e66-4c1b-4249-8a9f-b0a14c6ab597", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1967, "start_time": "2024-06-20T01:21:06.473Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_162", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_162", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_162\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"player_name\":\"Magnus Carlsen\",\"meta\":\"Value\",\"variant\":\"classical\"},{\"a\":2,\"b\":-3,\"c\":1,\"meta\":\"Value\"},{\"initial_value\":5000,\"final_value\":8000,\"period_in_years\":5,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_162_Output0 | class Fn_parallel_multiple_function_162_Output2 | class Fn_parallel_multiple_function_162_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few calculations? First, I'm curious about the current classical chess rating of a player named Magnus Carlsen. Second, I have a quadratic equation that I'm struggling with, it's 2x\u00b2 - 3x + 1 = 0, could you find the roots for me? Lastly, I made an investment 5 years ago. The initial value was $5000 and now it's worth $8000. Could you calculate the Compound Annual Growth Rate (CAGR) for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\n    function_name: 'calculate_cagr' or null,\n    // The initial investment value.\n    initial_value: int,\n    // The final investment value.\n    final_value: int,\n    // The period of the investment in years.\n    period_in_years: int,\n  } or {\n    // Fetches the current chess rating of a given player\n    function_name: 'chess.rating' or null,\n    // The full name of the chess player.\n    player_name: string,\n    // The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'.\n    variant: string or null,\n  } or {\n    // Find the roots of a quadratic equation. Returns both roots.\n    function_name: 'solve_quadratic' or null,\n    // Coefficient of x\u00b2.\n    a: int,\n    // Coefficient of x.\n    b: int,\n    // Constant term.\n    c: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"chess.rating\",\n    \"player_name\": \"Magnus Carlsen\",\n    \"variant\": \"classical\"\n  },\n  {\n    \"function_name\": \"solve_quadratic\",\n    \"a\": 2,\n    \"b\": -3,\n    \"c\": 1\n  },\n  {\n    \"function_name\": \"calculate_cagr\",\n    \"initial_value\": 5000,\n    \"final_value\": 8000,\n    \"period_in_years\": 5\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 457, "output_tokens": 115, "total_tokens": 572, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "91729e66-4c1b-4249-8a9f-b0a14c6ab597", "event_id": "91729e66-4c1b-4249-8a9f-b0a14c6ab597", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 29510, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_162", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "40245bc4-1629-4282-a995-c21d667d6975", "event_id": "6878a5ce-a532-4752-bfee-892deb793979", "parent_event_id": "40245bc4-1629-4282-a995-c21d667d6975", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1627, "start_time": "2024-06-20T01:21:06.862Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_165", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_165", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_165\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"docket\":\"12345\",\"court\":\"Supreme Court\",\"info_type\":\"accused\",\"meta\":\"Value\"},{\"base\":10,\"height\":5,\"meta\":\"Value\",\"unit\":\"square meters\"},{\"docket\":\"67890\",\"court\":\"High Court\",\"info_type\":\"verdict\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_165_Output1 | class Fn_parallel_multiple_function_165_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"John is a lawyer who is working on a case with docket number '12345' in the 'Supreme Court'. He needs to retrieve the details of the 'accused' from this case. After his work, he plans to help his son with his homework. His son is learning about triangles and he needs to calculate the area of a triangle with a base of 10 units and a height of 5 units. The unit of measure is 'square meters'. Later, John has to go back to his work and retrieve the 'verdict' details of another case with docket number '67890' in the 'High Court'. Can you assist John with these tasks?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the area of a triangle given its base and height.\n    function_name: 'calculate_triangle_area' or null,\n    // The base of the triangle.\n    base: int,\n    // The height of the triangle.\n    height: int,\n    // The unit of measure (defaults to 'units' if not specified)\n    unit: string or null,\n  } or {\n    // Retrieve case details using a specific case docket number and court location.\n    function_name: 'get_case_info' or null,\n    // Docket number for the specific court case.\n    docket: string,\n    // Court in which the case was heard.\n    court: string,\n    // Specify the information type needed for the case. i.e., victim, accused, verdict etc.\n    info_type: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"get_case_info\",\n    \"docket\": \"12345\",\n    \"court\": \"Supreme Court\",\n    \"info_type\": \"accused\"\n  },\n  {\n    \"function_name\": \"calculate_triangle_area\",\n    \"base\": 10,\n    \"height\": 5,\n    \"unit\": \"square meters\"\n  },\n  {\n    \"function_name\": \"get_case_info\",\n    \"docket\": \"67890\",\n    \"court\": \"High Court\",\n    \"info_type\": \"verdict\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 420, "output_tokens": 119, "total_tokens": 539, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "40245bc4-1629-4282-a995-c21d667d6975", "event_id": "40245bc4-1629-4282-a995-c21d667d6975", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 29558, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_165", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "29bbb143-a28e-41c0-9801-b57b763fb4e9", "event_id": "50f861c9-f727-49fa-8b7f-a330899b778a", "parent_event_id": "29bbb143-a28e-41c0-9801-b57b763fb4e9", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2657, "start_time": "2024-06-20T01:21:05.983Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_160", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_160", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_160\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"net_income\":2000000,\"shareholder_equity\":10000000,\"meta\":\"Value\",\"dividends_paid\":500000},{\"song_title\":\"Bohemian Rhapsody\",\"artist_name\":\"Queen\",\"meta\":\"Value\",\"lang\":\"Value0\"},{\"subject\":\"fraud\",\"from_year\":1990,\"to_year\":2000,\"meta\":\"Value\"},{\"location\":\"Boston, MA\",\"facilities\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_160_Output2 | class Fn_parallel_multiple_function_160_Output0 | class Fn_parallel_multiple_function_160_Output1 | class Fn_parallel_multiple_function_160_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few things? First, I'd like to calculate the return on equity for a company that had a net income of $2 million, total shareholder's equity of $10 million, and paid dividends amounting to $500,000. Then, I'm trying to find the lyrics to the song 'Bohemian Rhapsody' by the artist 'Queen', and I need them in English. After that, I'm interested in finding a historical law case related to 'fraud' that took place between the years 1990 and 2000. Lastly, I'm looking for a public library in 'Boston, MA' that has both a 'Reading Room' and 'Wi-Fi' facilities. Can you assist with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the lyrics of a song based on the artist's name and song title.\n    function_name: 'get_song_lyrics' or null,\n    // The title of the song.\n    song_title: string,\n    // The name of the artist who performed the song.\n    artist_name: string,\n    // The language of the lyrics. Default is English.\n    lang: 'English' or 'French' or 'Spanish' or 'German' or 'Italian' or null,\n  } or {\n    // Search for a historical law case based on specific criteria like the subject and year.\n    function_name: 'law_case_search.find_historical' or null,\n    // The subject matter of the case, e.g., 'fraud'\n    subject: string,\n    // The start year for the range of the case. The case should happen after this year.\n    from_year: int,\n    // The end year for the range of the case. The case should happen before this year.\n    to_year: int,\n  } or {\n    // Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.\n    function_name: 'calculate_return_on_equity' or null,\n    // The company's net income.\n    net_income: int,\n    // The company's total shareholder's equity.\n    shareholder_equity: int,\n    // The total dividends paid by the company. Optional. If not given, default to 0.\n    dividends_paid: int or null,\n  } or {\n    // Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\n    function_name: 'public_library.find_nearby' or null,\n    // The city and state, e.g. Boston, MA\n    location: string,\n    // Facilities and sections in public library.\n    facilities: [\n      'Wi-Fi' or 'Reading Room' or 'Fiction' or 'Children Section' or 'Cafe'\n    ],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```JSON\n[\n  {\n    \"function_name\": \"calculate_return_on_equity\",\n    \"net_income\": 2000000,\n    \"shareholder_equity\": 10000000,\n    \"dividends_paid\": 500000\n  },\n  {\n    \"function_name\": \"get_song_lyrics\",\n    \"song_title\": \"Bohemian Rhapsody\",\n    \"artist_name\": \"Queen\",\n    \"lang\": \"English\"\n  },\n  {\n    \"function_name\": \"law_case_search.find_historical\",\n    \"subject\": \"fraud\",\n    \"from_year\": 1990,\n    \"to_year\": 2000\n  },\n  {\n    \"function_name\": \"public_library.find_nearby\",\n    \"location\": \"Boston, MA\",\n    \"facilities\": [\"Wi-Fi\", \"Reading Room\"]\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 676, "output_tokens": 179, "total_tokens": 855, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "29bbb143-a28e-41c0-9801-b57b763fb4e9", "event_id": "29bbb143-a28e-41c0-9801-b57b763fb4e9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 29710, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_160", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2384b464-91be-42a2-83e4-1f62693485ee", "event_id": "2ad4952a-a3de-4abf-a322-b2324d071ed3", "parent_event_id": "2384b464-91be-42a2-83e4-1f62693485ee", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2094, "start_time": "2024-06-20T01:21:06.806Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_163", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_163", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_163\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_investment\":5000,\"rate_of_return\":0.07,\"years\":10,\"meta\":\"Value\",\"contribution\":200},{\"data\":[7,8,9,6,7,8,10,9,8,7],\"bins\":5,\"meta\":\"Value\"},{\"color1\":\"blue\",\"color2\":\"yellow\",\"meta\":\"Value\",\"lightness\":70}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_163_Output2 | class Fn_parallel_multiple_function_163_Output1 | class Fn_parallel_multiple_function_163_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are planning your finances and you want to calculate the future value of your investments. You have an initial investment of $5000, an annual rate of return of 7%, and you plan to invest for 10 years. Additionally, you will be making regular contributions of $200. After calculating the future value, you want to visualize your annual returns over the past 10 years. The returns are as follows: [7, 8, 9, 6, 7, 8, 10, 9, 8, 7] and you want to create a histogram with 5 bins to better understand the distribution of returns. Later, you decide to take a break and engage in some art. You want to mix two primary paint colors, blue and yellow, and adjust the resulting color's lightness level to 70%. Can you calculate the future value of your investment, create the histogram, and mix the paint colors accordingly?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Create a histogram based on provided data.\n    function_name: 'create_histogram' or null,\n    // The data for which histogram needs to be plotted.\n    data: int[],\n    // The number of equal-width bins in the range. Default is 10.\n    bins: int,\n  } or {\n    // Combine two primary paint colors and adjust the resulting color's lightness level.\n    function_name: 'mix_paint_color' or null,\n    // The first primary color to be mixed.\n    color1: string,\n    // The second primary color to be mixed.\n    color2: string,\n    // The desired lightness level of the resulting color in percentage. The default level is set to 50.\n    lightness: int or null,\n  } or {\n    // Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.\n    function_name: 'finance.calculate_future_value' or null,\n    // The initial investment amount.\n    initial_investment: int,\n    // The annual rate of return.\n    rate_of_return: float,\n    // The time frame of the investment in years.\n    years: int,\n    // Optional: Additional regular contributions. Default is 0.\n    contribution: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"finance.calculate_future_value\",\n    \"initial_investment\": 5000,\n    \"rate_of_return\": 0.07,\n    \"years\": 10,\n    \"contribution\": 200\n  },\n  {\n    \"function_name\": \"create_histogram\",\n    \"data\": [7, 8, 9, 6, 7, 8, 10, 9, 8, 7],\n    \"bins\": 5\n  },\n  {\n    \"function_name\": \"mix_paint_color\",\n    \"color1\": \"blue\",\n    \"color2\": \"yellow\",\n    \"lightness\": 70\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 573, "output_tokens": 149, "total_tokens": 722, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2384b464-91be-42a2-83e4-1f62693485ee", "event_id": "2384b464-91be-42a2-83e4-1f62693485ee", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 29970, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_163", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d76879bd-4054-4d79-94b9-668cc9863319", "event_id": "11b55f5a-3741-40fe-b266-176b201b5738", "parent_event_id": "d76879bd-4054-4d79-94b9-668cc9863319", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2189, "start_time": "2024-06-20T01:21:07.075Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_166", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_166", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_166\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"San Francisco, CA\",\"genre\":\"jazz\",\"meta\":\"Value\",\"days_ahead\":5},{\"company\":\"Apple Inc.\",\"start_date\":\"2020-01-01\",\"location\":\"California\",\"meta\":\"Value\",\"status\":null},{\"items\":[\"olive oil\",\"rice\",\"beans\"],\"quantities\":[2,3,4],\"meta\":\"Value\",\"store_location\":\"San Jose, CA\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_166_Output2 | class Fn_parallel_multiple_function_166_Output0 | class Fn_parallel_multiple_function_166_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan my week? I'm interested in attending a jazz event in San Francisco, CA within the next 5 days. Also, I heard about a lawsuit involving Apple Inc. that was filed in California after January 1, 2020, can you find the status of that for me? Lastly, I need to do some shopping at Walmart, can you tell me the total price for 2 bottles of olive oil, 3 bags of rice, and 4 cans of beans at the Walmart in San Jose, CA?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find upcoming events of a specific genre in a given location.\n    function_name: 'event_finder.find_upcoming' or null,\n    // The city and state where the search will take place, e.g. New York, NY.\n    location: string,\n    // The genre of events.\n    genre: string,\n    // The number of days from now to include in the search. (default: 7)\n    days_ahead: int or null,\n  } or {\n    // Search for lawsuits related to a specific company within a specific date range and location.\n    function_name: 'lawsuit_search' or null,\n    // The company related to the lawsuit.\n    company: string,\n    // Start of the date range for when the lawsuit was filed.\n    start_date: string,\n    // Location where the lawsuit was filed.\n    location: string,\n    // The status of the lawsuit. Default is 'ongoing'.\n    status: 'ongoing' or 'settled' or 'dismissed' or null,\n  } or {\n    // Calculate total price for given items and their quantities at Walmart.\n    function_name: 'walmart.check_price' or null,\n    // List of items to be priced.\n    items: string[],\n    // Quantity of each item corresponding to the items list.\n    quantities: int[],\n    // The store location for specific pricing (optional). Default is 'San Francisco, CA'.\n    store_location: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"event_finder.find_upcoming\",\n    \"location\": \"San Francisco, CA\",\n    \"genre\": \"jazz\",\n    \"days_ahead\": 5\n  },\n  {\n    \"function_name\": \"lawsuit_search\",\n    \"company\": \"Apple Inc.\",\n    \"start_date\": \"2020-01-01\",\n    \"location\": \"California\"\n  },\n  {\n    \"function_name\": \"walmart.check_price\",\n    \"items\": [\"olive oil\", \"rice\", \"beans\"],\n    \"quantities\": [2, 3, 4],\n    \"store_location\": \"San Jose, CA\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 526, "output_tokens": 146, "total_tokens": 672, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d76879bd-4054-4d79-94b9-668cc9863319", "event_id": "d76879bd-4054-4d79-94b9-668cc9863319", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 30334, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_166", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "66931569-8cf1-4bbe-859e-d9b554830ace", "event_id": "9e1ce15c-135f-427f-879e-71ce741307be", "parent_event_id": "66931569-8cf1-4bbe-859e-d9b554830ace", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1155, "start_time": "2024-06-20T01:21:08.490Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_173", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_173", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_173\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"my_location\":\"123 Main Street, New York\",\"products\":[\"milk\",\"bread\",\"eggs\"],\"meta\":\"Value\",\"rating\":4.5}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_173_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with the following tasks? First, I want to find the closest high-rated grocery stores from my location at '123 Main Street, New York' that have 'milk', 'bread', and 'eggs' in stock. The store should have a minimum rating of 4.5. Second, I am interested in knowing more about the sculpture titled 'The Thinker' made by the artist 'Auguste Rodin'. I specifically want to know about its 'material'. Lastly, I drove my car, which uses 'diesel' as fuel and has a fuel efficiency of 25 miles per gallon, for a total distance of 12000 miles last year. Can you calculate the annual carbon dioxide emissions produced by my vehicle? Also, consider a 2% decrease in fuel efficiency per year.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find the closest high-rated grocery stores based on certain product availability.\n    function_name: 'grocery_store.find_best' or null,\n    // The current location of the user.\n    my_location: string,\n    // The minimum required store rating. Default is 5.0.\n    rating: float or null,\n    // Required products in a list.\n    products: string[],\n  } or {\n    // Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.\n    function_name: 'calculate_emissions' or null,\n    // The distance travelled in miles.\n    distance: int,\n    // Type of fuel used by the vehicle.\n    fuel_type: string,\n    // The vehicle's fuel efficiency in miles per gallon.\n    fuel_efficiency: int,\n    // The percentage decrease in fuel efficiency per year (optional). Default is 0\n    efficiency_reduction: int or null,\n  } or {\n    // Retrieve details of a sculpture based on the artist and the title of the sculpture.\n    function_name: 'sculpture.get_details' or null,\n    // The artist who made the sculpture.\n    artist: string,\n    // The title of the sculpture.\n    title: string,\n    // The specific detail wanted about the sculpture. Default is 'general information'.\n    detail: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n    \"function_name\": \"grocery_store.find_best\",\n    \"my_location\": \"123 Main Street, New York\",\n    \"rating\": 4.5,\n    \"products\": [\"milk\", \"bread\", \"eggs\"]\n}\n```", "metadata": {"logprobs": null, "prompt_tokens": 566, "output_tokens": 55, "total_tokens": 621, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "66931569-8cf1-4bbe-859e-d9b554830ace", "event_id": "66931569-8cf1-4bbe-859e-d9b554830ace", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 30715, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_173", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "512dac06-b8d0-4043-8900-02c8f2cf3314", "event_id": "0926ea71-8ed7-4682-89c7-24946f8e26c4", "parent_event_id": "512dac06-b8d0-4043-8900-02c8f2cf3314", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2275, "start_time": "2024-06-20T01:21:07.532Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_167", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_167", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_167\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"park_name\":\"Yellowstone National Park\",\"information\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"investment_amount\":5000,\"annual_growth_rate\":0.07,\"holding_period\":10,\"meta\":\"Value\",\"dividends\":null},{\"case_id\":\"LC12345\",\"details\":true,\"meta\":\"Value\"},{\"park_name\":\"Yosemite National Park\",\"information\":[\"Value2\",\"Value3\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_167_Output1 | class Fn_parallel_multiple_function_167_Output0 | class Fn_parallel_multiple_function_167_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with the following tasks? First, I would like to know the elevation and area of the Yellowstone National Park. Second, I am considering investing $5000 in a stock that has an expected annual growth rate of 7%. I plan to hold the stock for 10 years and I would like to know the projected return of this investment, taking into account potential dividends. Third, I need to fetch detailed information about a legal case with the ID 'LC12345'. Lastly, I would also like to know the location and the year when the Yosemite National Park was established.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.\n    function_name: 'calculate_stock_return' or null,\n    // The amount of money to invest.\n    investment_amount: int,\n    // The expected annual growth rate of the stock.\n    annual_growth_rate: float,\n    // The number of years you intend to hold the stock.\n    holding_period: int,\n    // Optional. True if the calculation should take into account potential dividends. Default is false.\n    dividends: bool or null,\n  } or {\n    // Retrieve the basic information such as elevation and area of a national park.\n    function_name: 'park_information' or null,\n    // The name of the national park.\n    park_name: string,\n    // The type of information you want about the park.\n    information: [\n      'Elevation' or 'Area' or 'Location' or 'Established Year'\n    ],\n  } or {\n    // Fetch detailed legal case information from database.\n    function_name: 'legal_case.fetch' or null,\n    // The ID of the legal case.\n    case_id: string,\n    // True if need the detail info. Default is false.\n    details: bool,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n    {\n        \"function_name\": \"park_information\",\n        \"park_name\": \"Yellowstone National Park\",\n        \"information\": [\"Elevation\", \"Area\"]\n    },\n    {\n        \"function_name\": \"calculate_stock_return\",\n        \"investment_amount\": 5000,\n        \"annual_growth_rate\": 0.07,\n        \"holding_period\": 10\n    },\n    {\n        \"function_name\": \"legal_case.fetch\",\n        \"case_id\": \"LC12345\",\n        \"details\": true\n    },\n    {\n        \"function_name\": \"park_information\",\n        \"park_name\": \"Yosemite National Park\",\n        \"information\": [\"Location\", \"Established Year\"]\n    }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 493, "output_tokens": 149, "total_tokens": 642, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "512dac06-b8d0-4043-8900-02c8f2cf3314", "event_id": "512dac06-b8d0-4043-8900-02c8f2cf3314", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 30877, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_167", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: dividends\\nExpected: any of [True]\\nActual@1: meta=<Fn_parallel_multiple_function_167_Output0_TypeName.Value: 'Value'> investment_amount=5000 annual_growth_rate=0.07 holding_period=10 dividends=None\\nActual all: [Fn_parallel_multiple_function_167_Output1(meta=<Fn_parallel_multiple_function_167_Output1_TypeName.Value: 'Value'>, park_name='Yellowstone National Park', information=[<Enum_Fn_parallel_multiple_function_167_Enum0.Value0: 'Value0'>, <Enum_Fn_parallel_multiple_function_167_Enum0.Value1: 'Value1'>]), Fn_parallel_multiple_function_167_Output0(meta=<Fn_parallel_multiple_function_167_Output0_TypeName.Value: 'Value'>, investment_amount=5000, annual_growth_rate=0.07, holding_period=10, dividends=None), Fn_parallel_multiple_function_167_Output2(meta=<Fn_parallel_multiple_function_167_Output2_TypeName.Value: 'Value'>, case_id='LC12345', details=True), Fn_parallel_multiple_function_167_Output1(meta=<Fn_parallel_multiple_function_167_Output1_TypeName.Value: 'Value'>, park_name='Yosemite National Park', information=[<Enum_Fn_parallel_multiple_function_167_Enum0.Value2: 'Value2'>, <Enum_Fn_parallel_multiple_function_167_Enum0.Value3: 'Value3'>])]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "aca16d44-c598-452a-b0dc-36c7ebde7a1a", "event_id": "10b0ef67-6847-4ab7-935d-de2eac20f170", "parent_event_id": "aca16d44-c598-452a-b0dc-36c7ebde7a1a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1743, "start_time": "2024-06-20T01:21:08.417Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_169", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_169", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_169\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company_name\":\"TechCorp\",\"location\":\"San Francisco\",\"year\":2018,\"meta\":\"Value\",\"case_type\":\"civil\"},{\"location\":\"New York City\",\"check_in_date\":\"2022-10-15\",\"check_out_date\":\"2022-10-20\",\"no_of_adults\":2,\"meta\":\"Value\",\"hotel_chain\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_169_Output0 | class Fn_parallel_multiple_function_169_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a two-part request? First, I'd like to know if there were any lawsuits filed against the company 'TechCorp' in the location 'San Francisco' in the year 2018, specifically civil cases. Secondly, I'm planning a trip and need to check the availability of Hilton hotels in 'New York City' for the check-in date '2022-10-15' and check-out date '2022-10-20' for 2 adults. Could you assist me with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Check hotel availability for a specific location and time frame.\n    function_name: 'hilton_hotel.check_availability' or null,\n    // The city where you want to check hotel availability.\n    location: string,\n    // The check-in date in the format YYYY-MM-DD.\n    check_in_date: string,\n    // The check-out date in the format YYYY-MM-DD.\n    check_out_date: string,\n    // The number of adults for the hotel booking.\n    no_of_adults: int,\n    // The hotel chain where you want to book the hotel. (default: Hilton)\n    hotel_chain: string or null,\n  } or {\n    // Search for lawsuits against a specific company within a specific time and location.\n    function_name: 'lawsuits_search' or null,\n    // The name of the company.\n    company_name: string,\n    // The location where the lawsuit was filed.\n    location: string,\n    // The year when the lawsuit was filed.\n    year: int,\n    // The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types.\n    case_type: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```\n[\n  {\n    \"function_name\": \"lawsuits_search\",\n    \"company_name\": \"TechCorp\",\n    \"location\": \"San Francisco\",\n    \"year\": 2018,\n    \"case_type\": \"civil\"\n  },\n  {\n    \"function_name\": \"hilton_hotel.check_availability\",\n    \"location\": \"New York City\",\n    \"check_in_date\": \"2022-10-15\",\n    \"check_out_date\": \"2022-10-20\",\n    \"no_of_adults\": 2\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 474, "output_tokens": 118, "total_tokens": 592, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "aca16d44-c598-452a-b0dc-36c7ebde7a1a", "event_id": "aca16d44-c598-452a-b0dc-36c7ebde7a1a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 31230, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_169", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ff986cd3-1d36-491c-be77-1cb8a1fa5aed", "event_id": "78b9a4db-f0f9-48cd-ac82-ea51653ff4a5", "parent_event_id": "ff986cd3-1d36-491c-be77-1cb8a1fa5aed", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1955, "start_time": "2024-06-20T01:21:08.442Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_172", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_172", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_172\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"team\":\"New York Yankees\",\"league\":\"Major League Baseball\",\"meta\":\"Value\",\"season\":2019},{\"team\":\"Los Angeles Lakers\",\"league\":\"National Basketball Association\",\"meta\":\"Value\",\"season\":2020},{\"location\":\"Los Angeles\",\"date\":\"2020-12-25\",\"meta\":\"Value\"},{\"location\":\"New York\",\"date\":\"2021-01-01\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_172_Output1 | class Fn_parallel_multiple_function_172_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please tell me the ranking of the New York Yankees in the Major League Baseball for the 2019 season, then check the ranking of the Los Angeles Lakers in the National Basketball Association for the 2020 season, and finally, could you provide the air quality index for Los Angeles on December 25, 2020 and for New York on January 1, 2021?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the air quality index for a specific location.\n    function_name: 'air_quality' or null,\n    // The city that you want to get the air quality index for.\n    location: string,\n    // The date you want to get the air quality index for. Default is today.\n    date: string,\n  } or {\n    // Fetch the ranking of a specific sports team in a specific league\n    function_name: 'sports_ranking' or null,\n    // The name of the team.\n    team: string,\n    // The name of the league.\n    league: string,\n    // Optional parameter to specify the season, default is the current season.\n    season: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"sports_ranking\",\n    \"team\": \"New York Yankees\",\n    \"league\": \"Major League Baseball\",\n    \"season\": 2019\n  },\n  {\n    \"function_name\": \"sports_ranking\",\n    \"team\": \"Los Angeles Lakers\",\n    \"league\": \"National Basketball Association\",\n    \"season\": 2020\n  },\n  {\n    \"function_name\": \"air_quality\",\n    \"location\": \"Los Angeles\",\n    \"date\": \"2020-12-25\"\n  },\n  {\n    \"function_name\": \"air_quality\",\n    \"location\": \"New York\",\n    \"date\": \"2021-01-01\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 340, "output_tokens": 148, "total_tokens": 488, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ff986cd3-1d36-491c-be77-1cb8a1fa5aed", "event_id": "ff986cd3-1d36-491c-be77-1cb8a1fa5aed", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 31466, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_172", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6951dd83-ce09-4e5c-af01-f8d5cd76780d", "event_id": "1b5889a4-df56-45b7-b31d-f44d4625d7b9", "parent_event_id": "6951dd83-ce09-4e5c-af01-f8d5cd76780d", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1983, "start_time": "2024-06-20T01:21:08.418Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_170", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_170", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_170\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"team_name\":\"Los Angeles Lakers\",\"league\":\"NBA\",\"meta\":\"Value\",\"include_player_stats\":true},{\"team_name\":\"Manchester United\",\"league\":\"Premier League\",\"meta\":\"Value\",\"include_player_stats\":true},{\"location\":\"New York\",\"days\":5,\"meta\":\"Value\",\"min_humidity\":60},{\"location\":\"London\",\"days\":7,\"meta\":\"Value\",\"min_humidity\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_170_Output1 | class Fn_parallel_multiple_function_170_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please tell me the latest game score, individual player stats, and team stats for the basketball team 'Los Angeles Lakers' in the 'NBA' league? Also, I would like to know the same information but this time for the football team 'Manchester United' in the 'Premier League'. Additionally, could you provide me with a 5-day humidity forecast for New York, ensuring that the minimum humidity level is 60%? Lastly, I would also like to know the humidity forecast for the next 7 days in London, but without any minimum humidity level filter.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve a humidity forecast for a specific location and time frame.\n    function_name: 'weather.humidity_forecast' or null,\n    // The city that you want to get the humidity for.\n    location: string,\n    // Number of days for the forecast.\n    days: int,\n    // Minimum level of humidity (in percentage) to filter the result. Default is 0.\n    min_humidity: int or null,\n  } or {\n    // Retrieves the latest game score, individual player stats, and team stats for a specified sports team.\n    function_name: 'get_team_score' or null,\n    // The name of the sports team.\n    team_name: string,\n    // The league that the team is part of.\n    league: string,\n    // Indicates if individual player statistics should be included in the result. Default is false.\n    include_player_stats: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"get_team_score\",\n    \"team_name\": \"Los Angeles Lakers\",\n    \"league\": \"NBA\",\n    \"include_player_stats\": true\n  },\n  {\n    \"function_name\": \"get_team_score\",\n    \"team_name\": \"Manchester United\",\n    \"league\": \"Premier League\",\n    \"include_player_stats\": true\n  },\n  {\n    \"function_name\": \"weather.humidity_forecast\",\n    \"location\": \"New York\",\n    \"days\": 5,\n    \"min_humidity\": 60\n  },\n  {\n    \"function_name\": \"weather.humidity_forecast\",\n    \"location\": \"London\",\n    \"days\": 7\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 418, "output_tokens": 152, "total_tokens": 570, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6951dd83-ce09-4e5c-af01-f8d5cd76780d", "event_id": "6951dd83-ce09-4e5c-af01-f8d5cd76780d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 31470, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_170", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "982a557c-040d-409b-ab95-866ba18027c4", "event_id": "48379c9e-0550-4121-947b-8fc0b2cf5127", "parent_event_id": "982a557c-040d-409b-ab95-866ba18027c4", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2424, "start_time": "2024-06-20T01:21:08.418Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_171", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_171", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_171\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"player_name\":\"DragonSlayer\",\"class_type\":\"Warrior\",\"meta\":\"Value\",\"starting_level\":5}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_171_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are playing a role-playing game and you want to create a new player profile. You decided to name your character 'DragonSlayer' and choose 'Warrior' as your class. You also want to start at level 5. After setting up your profile, you want to take a break and find a nearby concert to attend. You are currently in 'New York, NY' and you want to find a concert that plays 'Rock' music. Later in the evening, you decide to play a game of poker with a standard deck of 52 cards and a hand size of 5. What is the probability of getting a full house? The next day, you decide to go on a hike and you want to calculate the slope gradient between two geographical coordinates. The first point is [40.7128, -74.0060] (New York, NY) and the second point is [34.0522, -118.2437] (Los Angeles, CA). You want the slope gradient in 'degree'. Can you provide the information for all these scenarios?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the probability of getting a full house in a poker game.\n    function_name: 'poker_probability.full_house' or null,\n    // The size of the deck. Default is 52.\n    deck_size: int,\n    // The size of the hand. Default is 5.\n    hand_size: int,\n  } or {\n    // Calculate the slope gradient between two geographical coordinates.\n    function_name: 'calculate_slope_gradient' or null,\n    // The geographic coordinates for the first point [Latitude, Longitude].\n    point1: float[],\n    // The geographic coordinates for the second point [Latitude, Longitude].\n    point2: float[],\n    // The unit for the slope gradient. Default is 'degree'.\n    unit: 'degree' or 'percent' or 'ratio' or null,\n  } or {\n    // Locate nearby concerts based on specific criteria like genre.\n    function_name: 'concert.find_nearby' or null,\n    // The city and state, e.g. Seattle, WA\n    location: string,\n    // Genre of music to be played at the concert.\n    genre: string,\n  } or {\n    // Create a new player profile with character name, class and starting level.\n    function_name: 'create_player_profile' or null,\n    // The desired name of the player.\n    player_name: string,\n    // The character class for the player. Default ''\n    class_type: string,\n    // The starting level for the player (default: 1)\n    starting_level: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n{\n  \"function_name\": \"create_player_profile\",\n  \"player_name\": \"DragonSlayer\",\n  \"class_type\": \"Warrior\",\n  \"starting_level\": 5\n}\n{\n  \"function_name\": \"concert.find_nearby\",\n  \"location\": \"New York, NY\",\n  \"genre\": \"Rock\"\n}\n{\n  \"function_name\": \"poker_probability.full_house\",\n  \"deck_size\": 52,\n  \"hand_size\": 5\n}\n{\n  \"function_name\": \"calculate_slope_gradient\",\n  \"point1\": [40.7128, -74.0060],\n  \"point2\": [34.0522, -118.2437],\n  \"unit\": \"degree\"\n}\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 652, "output_tokens": 157, "total_tokens": 809, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "092101d5-c4df-4acd-aac4-5d5ba5e1ab47", "event_id": "3c3ec182-b2a3-4dc6-a969-579654a4dc97", "parent_event_id": "092101d5-c4df-4acd-aac4-5d5ba5e1ab47", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2872, "start_time": "2024-06-20T01:21:07.970Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_168", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_168", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_168\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"game_name\":\"Animal Crossing\",\"season\":\"Summer\",\"meta\":\"Value\",\"item_type\":\"fish\"},{\"game\":\"Fortnite\",\"platform\":\"Playstation\",\"meta\":\"Value\",\"region\":\"Asia\"},{\"company_name\":\"Apple Inc.\",\"year\":2018,\"meta\":\"Value\",\"case_type\":null},{\"number_of_trials\":10,\"number_of_successes\":3,\"meta\":\"Value\",\"probability_of_success\":0.7}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_168_Output3 | class Fn_parallel_multiple_function_168_Output1 | class Fn_parallel_multiple_function_168_Output0 | class Fn_parallel_multiple_function_168_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"In the game 'Animal Crossing' during the 'Summer' season, can you find out what types of 'fish' are collectable? After that, can you tell me the highest score achieved by any player in the game 'Fortnite' on 'Playstation' platform in the 'Asia' region? Then, I would like to know the details of lawsuits involving the company 'Apple Inc.' in the year 2018. Lastly, could you calculate the binomial probability for 10 trials, with 3 successes and a probability of success of 0.7 on an individual trial?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find details of lawsuits involving a specific company from a given year.\n    function_name: 'lawsuit_details.find' or null,\n    // Name of the company.\n    company_name: string,\n    // Year of the lawsuit.\n    year: int,\n    // Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is all if not specified.\n    case_type: string or null,\n  } or {\n    // Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.\n    function_name: 'calculate_binomial_probability' or null,\n    // The total number of trials.\n    number_of_trials: int,\n    // The desired number of successful outcomes.\n    number_of_successes: int,\n    // The probability of a successful outcome on any given trial. (default: 0.5)\n    probability_of_success: float or null,\n  } or {\n    // Retrieve the highest score achieved by any player in a specific game.\n    function_name: 'game_score.highest' or null,\n    // The name of the online game.\n    game: string,\n    // The platform where the game is played, e.g. PC, Xbox, Playstation\n    platform: string,\n    // The geographic region of the player. Defaults to 'Global'\n    region: string or null,\n  } or {\n    // Retrieve a list of collectable items in a specific game during a specified season.\n    function_name: 'get_collectables_in_season' or null,\n    // Name of the game.\n    game_name: string,\n    // The season for which to retrieve the collectable items.\n    season: string,\n    // The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc.\n    item_type: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"get_collectables_in_season\",\n    \"game_name\": \"Animal Crossing\",\n    \"season\": \"Summer\",\n    \"item_type\": \"fish\"\n  },\n  {\n    \"function_name\": \"game_score.highest\",\n    \"game\": \"Fortnite\",\n    \"platform\": \"Playstation\",\n    \"region\": \"Asia\"\n  },\n  {\n    \"function_name\": \"lawsuit_details.find\",\n    \"company_name\": \"Apple Inc.\",\n    \"year\": 2018\n  },\n  {\n    \"function_name\": \"calculate_binomial_probability\",\n    \"number_of_trials\": 10,\n    \"number_of_successes\": 3,\n    \"probability_of_success\": 0.7\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 635, "output_tokens": 161, "total_tokens": 796, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "982a557c-040d-409b-ab95-866ba18027c4", "event_id": "982a557c-040d-409b-ab95-866ba18027c4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 31912, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_171", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "092101d5-c4df-4acd-aac4-5d5ba5e1ab47", "event_id": "092101d5-c4df-4acd-aac4-5d5ba5e1ab47", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 31913, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_168", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f2736587-98ca-4a0b-bd61-80a67674df22", "event_id": "ea4acd5d-e03f-45ae-a20c-f343cf92199a", "parent_event_id": "f2736587-98ca-4a0b-bd61-80a67674df22", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2476, "start_time": "2024-06-20T01:21:08.641Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_174", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_174", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_174\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York, NY\",\"cuisine\":\"Thai\",\"meta\":\"Value\",\"max_distance\":10.0},{\"location\":\"New York, NY\",\"cuisine\":\"Italian\",\"meta\":\"Value\",\"max_distance\":10.0},{\"location\":\"Amazon rainforest\",\"time_frame\":\"Value1\",\"meta\":\"Value\"},{\"location\":\"Amazon rainforest\",\"time_frame\":\"Value2\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_174_Output0 | class Fn_parallel_multiple_function_174_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find a Thai restaurant in New York, NY within a 10-mile radius, and then find an Italian restaurant in the same location within the same distance? After that, could you provide the precipitation statistics for the Amazon rainforest for the past year and then for the past five years?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve precipitation data for a specified location and time period.\n    function_name: 'ecology_data.precipitation_stats' or null,\n    // The name of the location, e.g., 'Amazon rainforest'.\n    location: string,\n    // The time period for which data is required.\n    time_frame: 'six_months' or 'year' or 'five_years',\n  } or {\n    // Locate nearby restaurants based on specific criteria like cuisine type.\n    function_name: 'restaurant.find_nearby' or null,\n    // The city and state, e.g. Seattle, WA\n    location: string,\n    // Preferred type of cuisine in restaurant.\n    cuisine: string,\n    // Maximum distance (in miles) within which to search for restaurants. Default is 5.\n    max_distance: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"restaurant.find_nearby\",\n    \"location\": \"New York, NY\",\n    \"cuisine\": \"Thai\",\n    \"max_distance\": 10\n  },\n  {\n    \"function_name\": \"restaurant.find_nearby\",\n    \"location\": \"New York, NY\",\n    \"cuisine\": \"Italian\",\n    \"max_distance\": 10\n  },\n  {\n    \"function_name\": \"ecology_data.precipitation_stats\",\n    \"location\": \"Amazon rainforest\",\n    \"time_frame\": \"year\"\n  },\n  {\n    \"function_name\": \"ecology_data.precipitation_stats\",\n    \"location\": \"Amazon rainforest\",\n    \"time_frame\": \"five_years\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 347, "output_tokens": 161, "total_tokens": 508, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f2736587-98ca-4a0b-bd61-80a67674df22", "event_id": "f2736587-98ca-4a0b-bd61-80a67674df22", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 32187, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_174", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7a324352-b10a-4970-8f51-c21bcd0dbb2e", "event_id": "243f2378-9b5e-45c5-b3e8-407a9eaa8c20", "parent_event_id": "7a324352-b10a-4970-8f51-c21bcd0dbb2e", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1894, "start_time": "2024-06-20T01:21:09.266Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_176", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_176", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_176\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Tokyo\",\"country\":\"Japan\",\"meta\":\"Value\",\"timezone\":\"Asia/Tokyo\"},{\"location\":\"New York\",\"country\":\"United States\",\"meta\":\"Value\",\"timezone\":\"America/New_York\"},{\"company_name\":\"Microsoft\",\"detail_level\":\"detailed\",\"meta\":\"Value\",\"market\":\"NASDAQ\"},{\"company_name\":\"Apple\",\"detail_level\":\"summary\",\"meta\":\"Value\",\"market\":\"NASDAQ\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_176_Output1 | class Fn_parallel_multiple_function_176_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please first use the 'get_current_time' function to find out the current time in Tokyo, Japan, in the 'Asia/Tokyo' timezone? Then, could you use the same function again to find out the current time in New York, United States, in the 'America/New_York' timezone? After that, could you use the 'get_stock_info' function to retrieve a detailed information about the stock of the company 'Microsoft' in the 'NASDAQ' market? Finally, could you use the same function again to retrieve a summary information about the stock of the company 'Apple' in the 'NASDAQ' market?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieves information about a specific stock based on company's name.\n    function_name: 'get_stock_info' or null,\n    // The name of the company.\n    company_name: string,\n    // Level of detail for stock information. Can be 'summary' or 'detailed'.\n    detail_level: string,\n    // The stock market of interest. Default is 'NASDAQ'\n    market: string or null,\n  } or {\n    // Retrieve the current time in a specific time zone.\n    function_name: 'get_current_time' or null,\n    // The name of the city.\n    location: string,\n    // The name of the country.\n    country: string,\n    // The optional timezone to get current time. Default is 'UTC'.\n    timezone: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_current_time',\n    location: 'Tokyo',\n    country: 'Japan',\n    timezone: 'Asia/Tokyo'\n  },\n  {\n    function_name: 'get_current_time',\n    location: 'New York',\n    country: 'United States',\n    timezone: 'America/New_York'\n  },\n  {\n    function_name: 'get_stock_info',\n    company_name: 'Microsoft',\n    detail_level: 'detailed',\n    market: 'NASDAQ'\n  },\n  {\n    function_name: 'get_stock_info',\n    company_name: 'Apple',\n    detail_level: 'summary',\n    market: 'NASDAQ'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 406, "output_tokens": 140, "total_tokens": 546, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7a324352-b10a-4970-8f51-c21bcd0dbb2e", "event_id": "7a324352-b10a-4970-8f51-c21bcd0dbb2e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 32229, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_176", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "debd3d41-0aa9-4014-8dfb-89f3cfd7648c", "event_id": "b9d99a7e-e3b9-45d7-aa74-71af58d883cd", "parent_event_id": "debd3d41-0aa9-4014-8dfb-89f3cfd7648c", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2579, "start_time": "2024-06-20T01:21:08.901Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_175", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_175", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_175\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base_currency\":\"EUR\",\"target_currency\":\"USD\",\"amount\":5000,\"meta\":\"Value\"},{\"location\":\"Galapagos Islands\",\"meta\":\"Value\",\"year\":2018,\"species\":true},{\"start\":\"New York\",\"end\":\"Los Angeles\",\"avoid\":[\"Value0\",\"Value2\"],\"meta\":\"Value\"},{\"base_currency\":\"GBP\",\"target_currency\":\"JPY\",\"amount\":3000,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_175_Output1 | class Fn_parallel_multiple_function_175_Output0 | class Fn_parallel_multiple_function_175_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few tasks? First, I need to convert 5000 Euros to US dollars. After that, I would like to know the population of turtles in Galapagos Islands in the year 2018, and also include the species information. Then, I need to plan a trip from New York to Los Angeles, but I want to avoid tolls and ferries. Finally, I need to convert 3000 British Pounds to Japanese Yen.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Converts an amount from a particular currency to another currency.\n    function_name: 'convert_currency' or null,\n    // The base currency in which the original amount is present.\n    base_currency: string,\n    // The currency to which you want to convert.\n    target_currency: string,\n    // The amount you want to convert.\n    amount: int,\n  } or {\n    // Retrieve directions from a starting location to an ending location, including options for route preferences.\n    function_name: 'map_service.get_directions' or null,\n    // Starting location for the route.\n    start: string,\n    // Ending location for the route.\n    end: string,\n    // Route features to avoid. Default is none if not specified.\n    avoid: [\n      'tolls' or 'highways' or 'ferries'\n    ],\n  } or {\n    // Get the population and species of turtles in a specific location.\n    function_name: 'ecology.get_turtle_population' or null,\n    // The name of the location.\n    location: string,\n    // The year of the data requested. Default is the current year.\n    year: int or null,\n    // Whether to include species information. Default is false. (optional)\n    species: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"convert_currency\",\n    \"base_currency\": \"EUR\",\n    \"target_currency\": \"USD\",\n    \"amount\": 5000\n  },\n  {\n    \"function_name\": \"ecology.get_turtle_population\",\n    \"location\": \"Galapagos Islands\",\n    \"year\": 2018,\n    \"species\": true\n  },\n  {\n    \"function_name\": \"map_service.get_directions\",\n    \"start\": \"New York\",\n    \"end\": \"Los Angeles\",\n    \"avoid\": [\"tolls\", \"ferries\"]\n  },\n  {\n    \"function_name\": \"convert_currency\",\n    \"base_currency\": \"GBP\",\n    \"target_currency\": \"JPY\",\n    \"amount\": 3000\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 475, "output_tokens": 166, "total_tokens": 641, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "debd3d41-0aa9-4014-8dfb-89f3cfd7648c", "event_id": "debd3d41-0aa9-4014-8dfb-89f3cfd7648c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 32550, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_175", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "de9ce16a-fd0f-412d-a810-f9a9082d8769", "event_id": "cfcec03a-ad3e-4a66-b6de-a1c19f3033bb", "parent_event_id": "de9ce16a-fd0f-412d-a810-f9a9082d8769", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2029, "start_time": "2024-06-20T01:21:10.402Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_181", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_181", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_181\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[]", "override": null, "type": {"name": "single", "fields": {"value": "list<?>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me who discovered the Higgs Boson and provide additional details about them, such as their birth date and nationality? Also, I am a 180 lbs, 5'11\" tall individual who is moderately active, can you predict my likelihood of having type 2 diabetes? Lastly, I am planning to visit the Louvre museum in Paris, can you tell me its working hours on Monday?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get the person or team who made a particular scientific discovery\n    function_name: 'get_discoverer' or null,\n    // The discovery for which the discoverer's information is needed.\n    discovery: string,\n    // Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.\n    detail: bool,\n  } or {\n    // Get the working hours of a museum in a specific location.\n    function_name: 'museum_working_hours.get' or null,\n    // The name of the museum.\n    museum: string,\n    // The location of the museum.\n    location: string,\n    // Specific day of the week. Optional parameter. Default is 'Monday'.\n    day: string or null,\n  } or {\n    // Predict the likelihood of diabetes type 2 based on a person's weight and height.\n    function_name: 'diabetes_prediction' or null,\n    // Weight of the person in lbs.\n    weight: int,\n    // Height of the person in inches.\n    height: int,\n    // Physical activity level of the person.\n    activity_level: 'sedentary' or 'lightly active' or 'moderately active' or 'very active' or 'extra active',\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"question_1\": {\n    \"function_name\": \"get_discoverer\",\n    \"discovery\": \"Higgs Boson\",\n    \"detail\": true\n  },\n  \"question_2\": {\n    \"function_name\": \"diabetes_prediction\",\n    \"weight\": 180,\n    \"height\": 71,\n    \"activity_level\": \"moderately active\"\n  },\n  \"question_3\": {\n    \"function_name\": \"museum_working_hours.get\",\n    \"museum\": \"Louvre\",\n    \"location\": \"Paris\",\n    \"day\": \"Monday\"\n  }\n}", "metadata": {"logprobs": null, "prompt_tokens": 458, "output_tokens": 127, "total_tokens": 585, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0db7850a-2bba-488d-bc43-96f1729abecf", "event_id": "a0ecb74e-4e39-4f3c-8f21-fd8cc58bc7f8", "parent_event_id": "0db7850a-2bba-488d-bc43-96f1729abecf", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2269, "start_time": "2024-06-20T01:21:10.162Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_179", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_179", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_179\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Tokyo\",\"radius\":200,\"amount\":5,\"meta\":\"Value\"},{\"initial_temp\":300,\"final_temp\":350,\"heat_capacity\":1.5,\"meta\":\"Value\",\"isothermal\":true},{\"event\":\"Battle of Waterloo\",\"meta\":\"Value\",\"location\":\"Belgium\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_179_Output2 | class Fn_parallel_multiple_function_179_Output0 | class Fn_parallel_multiple_function_179_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few things? First, I'm planning a trip and I'm interested in mountains. I'm currently in Tokyo and I want to find the 5 tallest mountains within a 200 kilometer radius of my location. Second, I'm working on a physics problem and I need to calculate the entropy change for an isothermal and reversible process. The initial temperature is 300 Kelvin, the final temperature is 350 Kelvin, and the heat capacity is 1.5 J/K. Lastly, I'm curious about a historical event. Can you tell me the date of the 'Battle of Waterloo'? I believe it took place in Belgium.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find the tallest mountains within a specified radius of a location.\n    function_name: 'locate_tallest_mountains' or null,\n    // The city from which to calculate distance.\n    location: string,\n    // The radius within which to find mountains, measured in kilometers.\n    radius: int,\n    // The number of mountains to find, listed from tallest to smallest.\n    amount: int,\n  } or {\n    // Calculate the entropy change for an isothermal and reversible process.\n    function_name: 'calculate_entropy_change' or null,\n    // The initial temperature in Kelvin.\n    initial_temp: int,\n    // The final temperature in Kelvin.\n    final_temp: int,\n    // The heat capacity in J/K.\n    heat_capacity: float,\n    // Whether the process is isothermal. Default is True.\n    isothermal: bool or null,\n  } or {\n    // Retrieve the date of a historical event.\n    function_name: 'get_event_date' or null,\n    // The name of the historical event.\n    event: string,\n    // Location where the event took place. Defaults to global if not specified\n    location: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"locate_tallest_mountains\",\n    \"location\": \"Tokyo\",\n    \"radius\": 200,\n    \"amount\": 5\n  },\n  {\n    \"function_name\": \"calculate_entropy_change\",\n    \"initial_temp\": 300,\n    \"final_temp\": 350,\n    \"heat_capacity\": 1.5,\n    \"isothermal\": true\n  },\n  {\n    \"function_name\": \"get_event_date\",\n    \"event\": \"Battle of Waterloo\",\n    \"location\": \"Belgium\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 488, "output_tokens": 118, "total_tokens": 606, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "876ec4cd-e616-4649-9055-f46390f98df9", "event_id": "bde5d8f1-52cb-49a9-ac48-f0fbec4fcb89", "parent_event_id": "876ec4cd-e616-4649-9055-f46390f98df9", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2785, "start_time": "2024-06-20T01:21:09.646Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_177", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_177", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_177\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"hotel_name\":\"Hilton\",\"location\":\"Los Angeles, CA\",\"start_date\":\"2022-05-01\",\"end_date\":\"2022-05-10\",\"meta\":\"Value\",\"rooms\":2},{\"place1\":\"New York, NY\",\"place2\":\"Los Angeles, CA\",\"meta\":\"Value\"},{\"weight\":75,\"height\":180,\"meta\":\"Value\",\"system\":\"metric\"},{\"text\":\"I had a wonderful day at the beach. The weather was perfect and I enjoyed a delicious ice cream.\",\"language\":\"English\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_177_Output3 | class Fn_parallel_multiple_function_177_Output2 | class Fn_parallel_multiple_function_177_Output1 | class Fn_parallel_multiple_function_177_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few tasks? First, I'd like to book a hotel room at the 'Hilton' in 'Los Angeles, CA' from '2022-05-01' to '2022-05-10' and I need '2' rooms. Second, I'm curious about the time difference between 'New York, NY' and 'Los Angeles, CA'. Third, I've been trying to keep track of my health and I'd like to calculate my Body Mass Index (BMI). I weigh '75' kilograms and I'm '180' centimeters tall, and I'd like to use the 'metric' system. Lastly, I've written a piece of text in 'English' and I'd like to perform a sentiment analysis on it. The text is 'I had a wonderful day at the beach. The weather was perfect and I enjoyed a delicious ice cream.' Can you assist me with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the Body Mass Index (BMI) for a person based on their weight and height.\n    function_name: 'calculate_bmi' or null,\n    // The weight of the person in kilograms.\n    weight: int,\n    // The height of the person in centimeters.\n    height: int,\n    // The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\n    system: string or null,\n  } or {\n    // Books a hotel room for a specific date range.\n    function_name: 'hotel_booking' or null,\n    // The name of the hotel.\n    hotel_name: string,\n    // The city and state, e.g. New York, NY.\n    location: string,\n    // The start date of the reservation. Use format 'YYYY-MM-DD'.\n    start_date: string,\n    // The end date of the reservation. Use format 'YYYY-MM-DD'.\n    end_date: string,\n    // The number of rooms to reserve. (default: 1)\n    rooms: int or null,\n  } or {\n    // Perform sentiment analysis on a given piece of text.\n    function_name: 'sentiment_analysis' or null,\n    // The text on which to perform sentiment analysis.\n    text: string,\n    // The language in which the text is written.\n    language: string,\n  } or {\n    // Get the time difference between two places.\n    function_name: 'get_time_difference' or null,\n    // The first place for time difference.\n    place1: string,\n    // The second place for time difference.\n    place2: string,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"hotel_booking\",\n    \"hotel_name\": \"Hilton\",\n    \"location\": \"Los Angeles, CA\",\n    \"start_date\": \"2022-05-01\",\n    \"end_date\": \"2022-05-10\",\n    \"rooms\": 2\n  },\n  {\n    \"function_name\": \"get_time_difference\",\n    \"place1\": \"New York, NY\",\n    \"place2\": \"Los Angeles, CA\"\n  },\n  {\n    \"function_name\": \"calculate_bmi\",\n    \"weight\": 75,\n    \"height\": 180,\n    \"system\": \"metric\"\n  },\n  {\n    \"function_name\": \"sentiment_analysis\",\n    \"text\": \"I had a wonderful day at the beach. The weather was perfect and I enjoyed a delicious ice cream.\",\n    \"language\": \"English\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 643, "output_tokens": 189, "total_tokens": 832, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "12954a3c-6afc-4413-bc7e-c49fd8c56c5b", "event_id": "9dfe8a8e-956b-4a59-8d98-ef1a28d2e864", "parent_event_id": "12954a3c-6afc-4413-bc7e-c49fd8c56c5b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2623, "start_time": "2024-06-20T01:21:09.808Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_178", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_178", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_178\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"country\":\"France\",\"start_year\":1800,\"end_year\":1900,\"event_type\":[\"Value0\",\"Value3\"],\"meta\":\"Value\"},{\"sculpture\":\"The Thinker\",\"artist\":\"Auguste Rodin\",\"meta\":\"Value\",\"year\":null},{\"sculpture\":\"The Kiss\",\"artist\":\"Auguste Rodin\",\"meta\":\"Value\",\"year\":1882}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_178_Output1 | class Fn_parallel_multiple_function_178_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you first find out the key historical events related to 'War' and 'Economy' that took place in France between the years 1800 and 1900? After that, could you please tell me the current market value of the sculpture 'The Thinker' created by the artist 'Auguste Rodin'? Lastly, I would also like to know the market value of the sculpture 'The Kiss', also created by 'Auguste Rodin', in the year 1882.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the current market value of a particular sculpture by a specific artist.\n    function_name: 'get_sculpture_value' or null,\n    // The name of the sculpture.\n    sculpture: string,\n    // The name of the artist who created the sculpture.\n    artist: string,\n    // The year the sculpture was created. This is optional and is not required for all sculptures. Default is the current year.\n    year: int or null,\n  } or {\n    // Retrieve key historical events within a specific period for a certain country.\n    function_name: 'history.get_key_events' or null,\n    // The name of the country for which history is queried.\n    country: string,\n    // Start year of the period for which history is queried.\n    start_year: int,\n    // End year of the period for which history is queried.\n    end_year: int,\n    // Types of event. If none is provided, default that all types will be considered.\n    event_type: [\n      'War' or 'Revolutions' or 'Diplomacy' or 'Economy'\n    ],\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"history.get_key_events\",\n    \"country\": \"France\",\n    \"start_year\": 1800,\n    \"end_year\": 1900,\n    \"event_type\": [\"War\", \"Economy\"]\n  },\n  {\n    \"function_name\": \"get_sculpture_value\",\n    \"sculpture\": \"The Thinker\",\n    \"artist\": \"Auguste Rodin\"\n  },\n  {\n    \"function_name\": \"get_sculpture_value\",\n    \"sculpture\": \"The Kiss\",\n    \"artist\": \"Auguste Rodin\",\n    \"year\": 1882\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 445, "output_tokens": 142, "total_tokens": 587, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "de9ce16a-fd0f-412d-a810-f9a9082d8769", "event_id": "de9ce16a-fd0f-412d-a810-f9a9082d8769", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 33501, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_181", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "876ec4cd-e616-4649-9055-f46390f98df9", "event_id": "876ec4cd-e616-4649-9055-f46390f98df9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 33502, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_177", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0db7850a-2bba-488d-bc43-96f1729abecf", "event_id": "0db7850a-2bba-488d-bc43-96f1729abecf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 33502, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_179", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "12954a3c-6afc-4413-bc7e-c49fd8c56c5b", "event_id": "12954a3c-6afc-4413-bc7e-c49fd8c56c5b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 33503, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_178", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b506b96c-028c-4413-94fb-0e8e574ecc4f", "event_id": "8283cd6b-cab6-4856-9714-7da01361e766", "parent_event_id": "b506b96c-028c-4413-94fb-0e8e574ecc4f", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2093, "start_time": "2024-06-20T01:21:10.845Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_182", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_182", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_182\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"num1\":48,\"num2\":36,\"meta\":\"Value\"},{\"scientist\":\"Albert Einstein\",\"date\":\"1905-05-14\",\"meta\":\"Value\",\"category\":\"Physics\"},{\"first_note_frequency\":440,\"second_note_frequency\":880,\"meta\":\"Value\",\"tempo\":100}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_182_Output0 | class Fn_parallel_multiple_function_182_Output2 | class Fn_parallel_multiple_function_182_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few tasks? First, I need to find the greatest common divisor of two numbers, let's say 48 and 36. Second, I'm curious about a historical event. I want to know about the contribution made by Albert Einstein on the date of 1905-05-14 in the field of Physics. Lastly, I'm working on a music project and need to calculate the duration between two notes. The first note has a frequency of 440 Hz and the second note has a frequency of 880 Hz. The tempo of the music is 100 beats per minute. Could you provide me with the results of these calculations?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve historical contribution made by a scientist on a specific date.\n    function_name: 'historical_contrib.get_contrib' or null,\n    // The scientist whose contributions need to be searched.\n    scientist: string,\n    // The date when the contribution was made in yyyy-mm-dd format.\n    date: string,\n    // The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields.\n    category: string or null,\n  } or {\n    // Calculate the duration between two notes based on their frequencies and harmonic rhythm.\n    function_name: 'music.calculate_note_duration' or null,\n    // The frequency of the first note in Hz.\n    first_note_frequency: int,\n    // The frequency of the second note in Hz.\n    second_note_frequency: int,\n    // The tempo of the music in beats per minute. Defaults to 120 beats per minute.\n    tempo: int or null,\n  } or {\n    // Calculate the greatest common divisor of two integers.\n    function_name: 'math.gcd' or null,\n    // First number.\n    num1: int,\n    // Second number.\n    num2: int,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"math.gcd\",\n    \"num1\": 48,\n    \"num2\": 36\n  },\n  {\n    \"function_name\": \"historical_contrib.get_contrib\",\n    \"scientist\": \"Albert Einstein\",\n    \"date\": \"1905-05-14\",\n    \"category\": \"Physics\"\n  },\n  {\n    \"function_name\": \"music.calculate_note_duration\",\n    \"first_note_frequency\": 440,\n    \"second_note_frequency\": 880,\n    \"tempo\": 100\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 489, "output_tokens": 117, "total_tokens": 606, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b506b96c-028c-4413-94fb-0e8e574ecc4f", "event_id": "b506b96c-028c-4413-94fb-0e8e574ecc4f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 34007, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_182", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1d5acbcc-3737-4b39-a7fe-c4e45593a87a", "event_id": "a2bd0e55-6118-4d44-a6b7-addb7aa9eb17", "parent_event_id": "1d5acbcc-3737-4b39-a7fe-c4e45593a87a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2712, "start_time": "2024-06-20T01:21:10.845Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_183", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_183", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_183\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"coverage_rate\":350,\"length\":12,\"height\":8,\"meta\":\"Value\"},{\"key\":\"D\",\"meta\":\"Value\",\"scale_type\":\"minor\"},{\"trials\":20,\"successes\":10,\"meta\":\"Value\",\"p\":0.6}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_183_Output1 | class Fn_parallel_multiple_function_183_Output0 | class Fn_parallel_multiple_function_183_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a musician who also loves to paint and is interested in probability. You are planning to paint a wall in your house that is 12 feet in length and 8 feet in height. You have chosen a specific paint brand that can cover 350 square feet with one gallon of paint. How many gallons of paint would you need? After painting, you want to compose a song. You are thinking of composing it in the key of 'D'. What would be the musical scale for this key if you choose a 'minor' scale type? Also, you are curious about the binomial distribution. If you were to conduct 20 independent experiments with a success probability of 0.6, what is the probability of having exactly 10 successes?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get the musical scale of a specific key in music theory.\n    function_name: 'musical_scale' or null,\n    // The musical key for which the scale will be found.\n    key: string,\n    // The type of musical scale. (default: major)\n    scale_type: string or null,\n  } or {\n    // Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.\n    function_name: 'calculate_paint_needed' or null,\n    // The area in square feet that one gallon of paint can cover.\n    coverage_rate: int,\n    // Length of the wall to be painted in feet.\n    length: int,\n    // Height of the wall to be painted in feet.\n    height: int,\n  } or {\n    // Compute the probability of having 'success' outcome from binomial distribution.\n    function_name: 'prob_dist.binomial' or null,\n    // The number of independent experiments.\n    trials: int,\n    // The number of success events.\n    successes: int,\n    // The probability of success on any given trial, defaults to 0.5\n    p: float or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"calculate_paint_needed\",\n    \"coverage_rate\": 350,\n    \"length\": 12,\n    \"height\": 8\n  },\n  {\n    \"function_name\": \"musical_scale\",\n    \"key\": \"D\",\n    \"scale_type\": \"minor\"\n  },\n  {\n    \"function_name\": \"prob_dist.binomial\",\n    \"trials\": 20,\n    \"successes\": 10,\n    \"p\": 0.6\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 512, "output_tokens": 111, "total_tokens": 623, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "52910264-f0ce-44c6-b164-86697c496654", "event_id": "ecb98e0a-afd5-4097-8a70-184d117340b3", "parent_event_id": "52910264-f0ce-44c6-b164-86697c496654", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2439, "start_time": "2024-06-20T01:21:11.119Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_184", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_184", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_184\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"total_cards\":52,\"desired_cards\":13,\"meta\":\"Value\",\"cards_drawn\":1},{\"total_cards\":52,\"desired_cards\":4,\"meta\":\"Value\",\"cards_drawn\":1},{\"artist_name\":\"Pablo Picasso\",\"meta\":\"Value\",\"year\":null,\"detail\":true},{\"location\":\"New York, NY\",\"art_form\":\"sculpture\",\"meta\":\"Value\",\"month\":\"December\",\"user_ratings\":\"Value2\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_184_Output0 | class Fn_parallel_multiple_function_184_Output2 | class Fn_parallel_multiple_function_184_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you first calculate the probability of drawing a heart from a deck of 52 cards where there are 13 hearts, and then calculate the probability of drawing a queen from the same deck where there are 4 queens? After that, could you retrieve the most recent artwork by the artist named 'Pablo Picasso' with a detailed description? Finally, could you locate the most popular sculpture exhibitions in New York, NY that are happening in the month of December and have high user ratings?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieves the most recent artwork by a specified artist with its detailed description.\n    function_name: 'get_sculpture_info' or null,\n    // The name of the artist.\n    artist_name: string,\n    // Year of the sculpture. This is optional. Default is the current year.\n    year: int or null,\n    // If True, it provides detailed description of the sculpture. Defaults to False.\n    detail: bool or null,\n  } or {\n    // Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.\n    function_name: 'find_exhibition' or null,\n    // The city where the exhibition is held, e.g., New York, NY.\n    location: string,\n    // The form of art the exhibition is displaying e.g., sculpture.\n    art_form: string,\n    // The month of exhibition. Default value will return upcoming events.\n    month: string or null,\n    // Select exhibitions with user rating threshold. Default is 'average'.\n    user_ratings: 'low' or 'average' or 'high' or null,\n  } or {\n    // Calculate the probability of drawing a certain card or suit from a deck of cards.\n    function_name: 'card_game_probability.calculate' or null,\n    // Total number of cards in the deck.\n    total_cards: int,\n    // Number of cards in the deck that satisfy the conditions.\n    desired_cards: int,\n    // Number of cards drawn from the deck. (default: 1)\n    cards_drawn: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"card_game_probability.calculate\",\n    \"total_cards\": 52,\n    \"desired_cards\": 13,\n    \"cards_drawn\": 1\n  },\n  {\n    \"function_name\": \"card_game_probability.calculate\",\n    \"total_cards\": 52,\n    \"desired_cards\": 4,\n    \"cards_drawn\": 1\n  },\n  {\n    \"function_name\": \"get_sculpture_info\",\n    \"artist_name\": \"Pablo Picasso\",\n    \"detail\": true\n  },\n  {\n    \"function_name\": \"find_exhibition\",\n    \"location\": \"New York, NY\",\n    \"art_form\": \"sculpture\",\n    \"month\": \"December\",\n    \"user_ratings\": \"high\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 536, "output_tokens": 168, "total_tokens": 704, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "acc619e6-2825-4f0c-b3ec-85c868b804e6", "event_id": "b1327cb7-86c0-4788-9bbc-7c56a13ce95b", "parent_event_id": "acc619e6-2825-4f0c-b3ec-85c868b804e6", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3160, "start_time": "2024-06-20T01:21:10.398Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_180", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_180", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_180\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"user_id\":12345,\"update_info\":{\"name\":\"John Doe\",\"email\":\"johndoe@example.com\"},\"meta\":\"Value\",\"database\":null},{\"team_name\":\"Manchester United\",\"meta\":\"Value\",\"include_stats\":true},{\"year\":1980,\"meta\":\"Value\",\"full_name\":true},{\"rank\":\"Ace\",\"suit\":\"Spades\",\"deck\":[],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_180_Output1 | class Fn_parallel_multiple_function_180_Output2 | class Fn_parallel_multiple_function_180_Output0 | class Fn_parallel_multiple_function_180_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with a few things? First, I need to update my user information in the CustomerInfo database. My user ID is 12345, and I want to change my name to John Doe and my email to johndoe@example.com. Second, I'm curious about the last match played by the soccer club Manchester United, and I'd like to know the match statistics as well. Third, I'm doing a history project and need to know who the U.S. president was in the year 1980, and I'd like the full name with middle initial if applicable. Lastly, I'm playing a card game and need to find the Ace of Spades in a standard 52 card deck. Can you assist with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Locate a particular card in a deck based on rank and suit.\n    function_name: 'find_card_in_deck' or null,\n    // Rank of the card (e.g. Ace, Two, King).\n    rank: string,\n    // Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\n    suit: string,\n    // Deck of cards. If not provided, the deck will be default to an empty array\n    deck: [\n      {\n        // \n        rank: string or null,\n        // \n        suit: string or null,\n      }\n    ],\n  } or {\n    // Retrieve the details of the last match played by a specified soccer club.\n    function_name: 'soccer.get_last_match' or null,\n    // The name of the soccer club.\n    team_name: string,\n    // If true, include match statistics like possession, shots on target etc. Default is false.\n    include_stats: bool or null,\n  } or {\n    // Retrieve the name of the U.S. president in a given year.\n    function_name: 'US_president.in_year' or null,\n    // The year in question.\n    year: int,\n    // Option to return full name with middle initial, if applicable. (default: True)\n    full_name: bool or null,\n  } or {\n    // Update user information in the database.\n    function_name: 'update_user_info' or null,\n    // The user ID of the customer.\n    user_id: int,\n    // The new information to update.\n    update_info: {\n      // The customer's updated name.\n      name: string or null,\n      // The customer's updated email.\n      email: string or null,\n    },\n    // The database where the user's information is stored. (default: CustomerInfo)\n    database: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"update_user_info\",\n    \"user_id\": 12345,\n    \"update_info\": {\n      \"name\": \"John Doe\",\n      \"email\": \"johndoe@example.com\"\n    }\n  },\n  {\n    \"function_name\": \"soccer.get_last_match\",\n    \"team_name\": \"Manchester United\",\n    \"include_stats\": true\n  },\n  {\n    \"function_name\": \"US_president.in_year\",\n    \"year\": 1980,\n    \"full_name\": true\n  },\n  {\n    \"function_name\": \"find_card_in_deck\",\n    \"rank\": \"Ace\",\n    \"suit\": \"Spades\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 651, "output_tokens": 150, "total_tokens": 801, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1d5acbcc-3737-4b39-a7fe-c4e45593a87a", "event_id": "1d5acbcc-3737-4b39-a7fe-c4e45593a87a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 34627, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_183", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "52910264-f0ce-44c6-b164-86697c496654", "event_id": "52910264-f0ce-44c6-b164-86697c496654", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 34628, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_184", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "acc619e6-2825-4f0c-b3ec-85c868b804e6", "event_id": "acc619e6-2825-4f0c-b3ec-85c868b804e6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 34629, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_180", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: update_info\\nExpected: any of [{'name': ['John Doe'], 'email': ['johndoe@example.com']}]\\nActual@1: meta=<Fn_parallel_multiple_function_180_Output3_TypeName.Value: 'Value'> user_id=12345 update_info=Class_Fn_parallel_multiple_function_180_Class1(name='John Doe', email='johndoe@example.com') database=None\\nActual all: [Fn_parallel_multiple_function_180_Output3(meta=<Fn_parallel_multiple_function_180_Output3_TypeName.Value: 'Value'>, user_id=12345, update_info=Class_Fn_parallel_multiple_function_180_Class1(name='John Doe', email='johndoe@example.com'), database=None), Fn_parallel_multiple_function_180_Output1(meta=<Fn_parallel_multiple_function_180_Output1_TypeName.Value: 'Value'>, team_name='Manchester United', include_stats=True), Fn_parallel_multiple_function_180_Output2(meta=<Fn_parallel_multiple_function_180_Output2_TypeName.Value: 'Value'>, year=1980, full_name=True), Fn_parallel_multiple_function_180_Output0(meta=<Fn_parallel_multiple_function_180_Output0_TypeName.Value: 'Value'>, rank='Ace', suit='Spades', deck=[])]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "75f13a8f-ad92-4f3e-835c-4da4657ce628", "event_id": "a63d15d2-994c-4c4e-bc13-4873ef98b43d", "parent_event_id": "75f13a8f-ad92-4f3e-835c-4da4657ce628", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2828, "start_time": "2024-06-20T01:21:11.161Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_185", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_185", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_185\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"building_id\":\"B1234\",\"floors\":[1,2,3,4],\"meta\":\"Value\",\"mode\":\"dynamic\"},{\"player_name\":\"Michael Jordan\",\"year\":1996,\"meta\":\"Value\",\"team_name\":null},{\"building_id\":\"B5678\",\"floors\":[5,6,7,8],\"meta\":\"Value\",\"mode\":\"static\"},{\"player_name\":\"LeBron James\",\"year\":2018,\"meta\":\"Value\",\"team_name\":\"Los Angeles Lakers\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_185_Output0 | class Fn_parallel_multiple_function_185_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you first analyze the structure of a building with the building_id 'B1234' for floors 1, 2, 3, and 4 using the 'dynamic' mode of analysis? Then, could you retrieve the player statistics for 'Michael Jordan' for the year 1996? After that, can you analyze the structure of another building with the building_id 'B5678' for floors 5, 6, 7, and 8 using the 'static' mode of analysis? Finally, could you retrieve the player statistics for 'LeBron James' for the year 2018, specifically for his time with the 'Los Angeles Lakers' team?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Analyze a structure of a building based on its Id and floor numbers.\n    function_name: 'analyze_structure' or null,\n    // The unique identification number of the building.\n    building_id: string,\n    // Floor numbers to be analyzed.\n    floors: int[],\n    // Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'.\n    mode: string or null,\n  } or {\n    // Retrieves detailed player's statistics for a specific year.\n    function_name: 'player_statistic' or null,\n    // The player's name.\n    player_name: string,\n    // Year for which the statistics will be displayed.\n    year: int,\n    // The name of the team(optional). Default is all if not specified.\n    team_name: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"analyze_structure\",\n    \"building_id\": \"B1234\",\n    \"floors\": [1, 2, 3, 4],\n    \"mode\": \"dynamic\"\n  },\n  {\n    \"function_name\": \"player_statistic\",\n    \"player_name\": \"Michael Jordan\",\n    \"year\": 1996\n  },\n  {\n    \"function_name\": \"analyze_structure\",\n    \"building_id\": \"B5678\",\n    \"floors\": [5, 6, 7, 8],\n    \"mode\": \"static\"\n  },\n  {\n    \"function_name\": \"player_statistic\",\n    \"player_name\": \"LeBron James\",\n    \"year\": 2018,\n    \"team_name\": \"Los Angeles Lakers\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 420, "output_tokens": 169, "total_tokens": 589, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c9f52ca9-670d-4f08-8ee3-b3805334c25e", "event_id": "4ca1d7c4-a27c-4643-bda8-e58ed230392a", "parent_event_id": "c9f52ca9-670d-4f08-8ee3-b3805334c25e", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2506, "start_time": "2024-06-20T01:21:11.482Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_186", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_186", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_186\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number\":10,\"meta\":\"Value\",\"sort_by\":\"Value0\"},{\"number\":5,\"meta\":\"Value\",\"sort_by\":\"Value1\"},{\"company\":\"Google\",\"start_date\":\"2020-01-01\",\"location\":\"California\",\"meta\":\"Value\",\"status\":\"Value0\"},{\"company\":\"Microsoft\",\"start_date\":\"2018-01-01\",\"location\":\"New York\",\"meta\":\"Value\",\"status\":\"Value1\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_186_Output0 | class Fn_parallel_multiple_function_186_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you first fetch the top 10 popular artworks at the Metropolitan Museum of Art sorted by popularity and then fetch the top 5 artworks sorted chronologically? After that, could you search for ongoing lawsuits related to Google that were filed in California starting from January 1, 2020? Lastly, could you also find any settled lawsuits related to Microsoft that were filed in New York starting from January 1, 2018?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.\n    function_name: 'metropolitan_museum.get_top_artworks' or null,\n    // The number of artworks to fetch\n    number: int,\n    // The criteria to sort the results on. Default is 'popularity'.\n    sort_by: 'popularity' or 'chronological' or 'alphabetical' or null,\n  } or {\n    // Search for lawsuits related to a specific company within a specific date range and location.\n    function_name: 'lawsuit_search' or null,\n    // The company related to the lawsuit.\n    company: string,\n    // Start of the date range for when the lawsuit was filed.\n    start_date: string,\n    // Location where the lawsuit was filed.\n    location: string,\n    // The status of the lawsuit. Default is 'ongoing'.\n    status: 'ongoing' or 'settled' or 'dismissed' or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'metropolitan_museum.get_top_artworks',\n    number: 10,\n    sort_by: 'popularity',\n  },\n  {\n    function_name: 'metropolitan_museum.get_top_artworks',\n    number: 5,\n    sort_by: 'chronological',\n  },\n  {\n    function_name: 'lawsuit_search',\n    company: 'Google',\n    start_date: '2020-01-01',\n    location: 'California',\n    status: 'ongoing',\n  },\n  {\n    function_name: 'lawsuit_search',\n    company: 'Microsoft',\n    start_date: '2018-01-01',\n    location: 'New York',\n    status: 'settled',\n  },\n]", "metadata": {"logprobs": null, "prompt_tokens": 410, "output_tokens": 155, "total_tokens": 565, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "75f13a8f-ad92-4f3e-835c-4da4657ce628", "event_id": "75f13a8f-ad92-4f3e-835c-4da4657ce628", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 35058, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_185", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c9f52ca9-670d-4f08-8ee3-b3805334c25e", "event_id": "c9f52ca9-670d-4f08-8ee3-b3805334c25e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 35059, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_186", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2470c70a-96a7-4552-bc0a-91f2233c1fbd", "event_id": "6a51ffab-76f6-4a71-86e7-34e8758cea5b", "parent_event_id": "2470c70a-96a7-4552-bc0a-91f2233c1fbd", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1701, "start_time": "2024-06-20T01:21:12.435Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_188", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_188", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_188\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"season\":2018,\"meta\":\"Value\",\"top\":5},{\"list\":[23.0,45.0,12.0,89.0,34.0,67.0,29.0],\"order\":\"Value1\",\"meta\":\"Value\"},{\"initial_value\":5000,\"final_value\":15000,\"period_in_years\":7,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_188_Output0 | class Fn_parallel_multiple_function_188_Output1 | class Fn_parallel_multiple_function_188_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with the following tasks? First, I would like to know the top 5 defence ranking NBA teams from the 2018 season. Second, I have a list of numbers [23, 45, 12, 89, 34, 67, 29] that I need to be sorted in descending order. Lastly, I am curious about the Compound Annual Growth Rate (CAGR) of an investment I made. The initial investment value was $5000, the final investment value turned out to be $15000, and the period of the investment was 7 years. Could you calculate this for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\n    function_name: 'calculate_cagr' or null,\n    // The initial investment value.\n    initial_value: int,\n    // The final investment value.\n    final_value: int,\n    // The period of the investment in years.\n    period_in_years: int,\n  } or {\n    // Retrieve the defence ranking of NBA teams in a specified season.\n    function_name: 'get_defense_ranking' or null,\n    // The NBA season to get defence ranking from.\n    season: int,\n    // Number of top teams in defence ranking to fetch. (default: 1)\n    top: int or null,\n  } or {\n    // Sorts a given list in ascending or descending order.\n    function_name: 'array_sort' or null,\n    // The list of numbers to be sorted.\n    list: float[],\n    // Order of sorting. If not specified, it will default to ascending.\n    order: 'ascending' or 'descending',\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n    {\n        \"function_name\": \"get_defense_ranking\",\n        \"season\": 2018,\n        \"top\": 5\n    },\n    {\n        \"function_name\": \"array_sort\",\n        \"list\": [23, 45, 12, 89, 34, 67, 29],\n        \"order\": \"descending\"\n    },\n    {\n        \"function_name\": \"calculate_cagr\",\n        \"initial_value\": 5000,\n        \"final_value\": 15000,\n        \"period_in_years\": 7\n    }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 473, "output_tokens": 123, "total_tokens": 596, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2470c70a-96a7-4552-bc0a-91f2233c1fbd", "event_id": "2470c70a-96a7-4552-bc0a-91f2233c1fbd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 35205, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_188", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "70b11748-283a-4eeb-9c85-5f91c0088915", "event_id": "ccc585a5-0551-4595-a40c-8df0786a1495", "parent_event_id": "70b11748-283a-4eeb-9c85-5f91c0088915", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2085, "start_time": "2024-06-20T01:21:12.433Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_187", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_187", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_187\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"color_name\":\"Cerulean\",\"meta\":\"Value\",\"standard\":\"pantone\"},{\"model\":\"Fender Stratocaster\",\"condition\":\"Value1\",\"location\":\"Los Angeles\",\"meta\":\"Value\"},{\"location\":\"New York\",\"minimum_rating\":2200,\"meta\":\"Value\",\"number_of_players\":15}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_187_Output2 | class Fn_parallel_multiple_function_187_Output0 | class Fn_parallel_multiple_function_187_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \" I'm trying to figure out the RGB values of the color 'Cerulean' based on the 'pantone' standard. Secondly, I'm interested in buying a used 'Fender Stratocaster' guitar in 'Good' condition, being sold in 'Los Angeles'. Could you find out the price for me? Lastly, I'm organizing a chess tournament in 'New York' and I'm looking for top players to invite. Could you find the top 15 players with a minimum rating of 2200 for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the price of a specific used guitar model based on its condition and location.\n    function_name: 'guitar_price.find' or null,\n    // The model of the guitar.\n    model: string,\n    // The condition of the guitar.\n    condition: 'Poor' or 'Good' or 'Excellent',\n    // The location where the guitar is being sold.\n    location: string,\n  } or {\n    // Find top chess players in a location based on rating.\n    function_name: 'board_game.chess.get_top_players' or null,\n    // The city you want to find the players from.\n    location: string,\n    // Minimum rating to filter the players.\n    minimum_rating: int,\n    // Number of players you want to retrieve, default value is 10 (default: 10)\n    number_of_players: int or null,\n  } or {\n    // This function identifies the RGB values of a named color.\n    function_name: 'identify_color_rgb' or null,\n    // Name of the color.\n    color_name: string,\n    // The color standard (e.g. basic, pantone). Default is 'basic'\n    standard: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"identify_color_rgb\",\n    \"color_name\": \"Cerulean\",\n    \"standard\": \"pantone\"\n  },\n  {\n    \"function_name\": \"guitar_price.find\",\n    \"model\": \"Fender Stratocaster\",\n    \"condition\": \"Good\",\n    \"location\": \"Los Angeles\"\n  },\n  {\n    \"function_name\": \"board_game.chess.get_top_players\",\n    \"location\": \"New York\",\n    \"minimum_rating\": 2200,\n    \"number_of_players\": 15\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 469, "output_tokens": 124, "total_tokens": 593, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "70b11748-283a-4eeb-9c85-5f91c0088915", "event_id": "70b11748-283a-4eeb-9c85-5f91c0088915", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 35589, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_187", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5575ea66-8573-4e36-b3a9-281c342e34d1", "event_id": "90dc64bf-a8db-4a90-884e-2047113b8f90", "parent_event_id": "5575ea66-8573-4e36-b3a9-281c342e34d1", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2048, "start_time": "2024-06-20T01:21:13.560Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_193", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_193", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_193\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"dietary_restrictions\":\"vegan\",\"recipe_type\":\"main course\",\"time\":45,\"meta\":\"Value\"},{\"deck_size\":52,\"hand_size\":5,\"meta\":\"Value\"},{\"location\":\"Denver, CO\",\"radius\":10,\"meta\":\"Value\",\"department\":\"Value1\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_193_Output0 | class Fn_parallel_multiple_function_193_Output1 | class Fn_parallel_multiple_function_193_Output2>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan a dinner? I am looking for a vegan main course recipe that can be prepared within 45 minutes. After dinner, we are planning to play a poker game, could you tell me the probability of getting a full house with a deck of 52 cards and a hand size of 5? Also, I am new to Denver, CO and would like to know the nearby hospitals within a radius of 10 kms, specifically those with an Emergency department.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find a recipe based on the dietary restrictions, recipe type, and time constraints.\n    function_name: 'find_recipe' or null,\n    // Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\n    dietary_restrictions: string,\n    // Type of the recipe. E.g. dessert, main course, breakfast.\n    recipe_type: string,\n    // Time limit in minutes to prep the meal.\n    time: int,\n  } or {\n    // Calculate the probability of getting a full house in a poker game.\n    function_name: 'poker_probability.full_house' or null,\n    // The size of the deck. Default is 52.\n    deck_size: int,\n    // The size of the hand. Default is 5.\n    hand_size: int,\n  } or {\n    // Locate nearby hospitals based on location and radius. Options to include specific departments are available.\n    function_name: 'hospital.locate' or null,\n    // The city and state, e.g. Denver, CO\n    location: string,\n    // The radius within which you want to find the hospital in kms.\n    radius: int,\n    // Specific department within the hospital. Default to none if not provided.\n    department: 'General Medicine' or 'Emergency' or 'Pediatrics' or 'Cardiology' or 'Orthopedics' or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"find_recipe\",\n    \"dietary_restrictions\": \"vegan\",\n    \"recipe_type\": \"main course\",\n    \"time\": 45\n  },\n  {\n    \"function_name\": \"poker_probability.full_house\",\n    \"deck_size\": 52,\n    \"hand_size\": 5\n  },\n  {\n    \"function_name\": \"hospital.locate\",\n    \"location\": \"Denver, CO\",\n    \"radius\": 10,\n    \"department\": \"Emergency\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 494, "output_tokens": 115, "total_tokens": 609, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cb3e03cd-4525-41e8-b45f-79cfff36f55c", "event_id": "62764ca8-edf7-4a78-b3e7-a00b86f2acb4", "parent_event_id": "cb3e03cd-4525-41e8-b45f-79cfff36f55c", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2668, "start_time": "2024-06-20T01:21:12.939Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_191", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_191", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_191\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[]", "override": null, "type": {"name": "single", "fields": {"value": "list<?>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with the following tasks? First, I need to know the travel distance and estimated travel time from my home in New York to my office in Boston, considering the current traffic conditions. Second, I am interested in finding out the top 5 chess players in San Francisco with a minimum rating of 2500. Lastly, I am working on a project and need to retrieve the historical GDP data for Japan from the year 2000 to 2020. Can you assist me with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find top chess players in a location based on rating.\n    function_name: 'board_game.chess.get_top_players' or null,\n    // The city you want to find the players from.\n    location: string,\n    // Minimum rating to filter the players.\n    minimum_rating: int,\n    // Number of players you want to retrieve, default value is 10 (default: 10)\n    number_of_players: int or null,\n  } or {\n    // Retrieve historical GDP data for a specific country and time range.\n    function_name: 'get_historical_GDP' or null,\n    // The country for which the historical GDP data is required.\n    country: string,\n    // Starting year of the period for which GDP data is required.\n    start_year: int,\n    // Ending year of the period for which GDP data is required.\n    end_year: int,\n  } or {\n    // Retrieve the travel distance and estimated travel time from one location to another via car\n    function_name: 'maps.get_distance_duration' or null,\n    // Starting point of the journey\n    start_location: string,\n    // Ending point of the journey\n    end_location: string,\n    // If true, considers current traffic. Default is false.\n    traffic: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "{\n  \"functions\": [\n    {\n      \"function_name\": \"maps.get_distance_duration\",\n      \"start_location\": \"New York\",\n      \"end_location\": \"Boston\",\n      \"traffic\": true\n    },\n    {\n      \"function_name\": \"board_game.chess.get_top_players\",\n      \"location\": \"San Francisco\",\n      \"minimum_rating\": 2500,\n      \"number_of_players\": 5\n    },\n    {\n      \"function_name\": \"get_historical_GDP\",\n      \"country\": \"Japan\",\n      \"start_year\": 2000,\n      \"end_year\": 2020\n    }\n  ]\n}", "metadata": {"logprobs": null, "prompt_tokens": 483, "output_tokens": 132, "total_tokens": 615, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5575ea66-8573-4e36-b3a9-281c342e34d1", "event_id": "5575ea66-8573-4e36-b3a9-281c342e34d1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 36677, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_193", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cb3e03cd-4525-41e8-b45f-79cfff36f55c", "event_id": "cb3e03cd-4525-41e8-b45f-79cfff36f55c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 36678, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_191", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "65861cb3-b83d-4e82-b5de-c720f151c430", "event_id": "98a88111-c758-4bfc-8cfc-31495fab1be6", "parent_event_id": "65861cb3-b83d-4e82-b5de-c720f151c430", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1552, "start_time": "2024-06-20T01:21:14.137Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_198", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_198", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_198\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"dietary_restriction\":\"Vegetarian\",\"ingredients\":[\"potatoes\",\"carrots\",\"onions\"],\"servings\":4,\"meta\":\"Value\"},{\"location\":\"New York\",\"duration\":12,\"meta\":\"Value\",\"include_precipitation\":true},{\"place1\":\"New York\",\"place2\":\"Tokyo\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_198_Output2 | class Fn_parallel_multiple_function_198_Output1 | class Fn_parallel_multiple_function_198_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me plan a dinner party? I need to find a Vegetarian recipe that uses potatoes, carrots, and onions and serves 4 people. Also, I'm hosting this party in New York and I would like to know the detailed weather forecast for the next 12 hours, including precipitation details. Lastly, my friend is joining from Tokyo and I need to know the time difference between New York and Tokyo to schedule the party at a convenient time for both of us.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Search for a recipe given dietary restriction, ingredients, and number of servings.\n    function_name: 'recipe_search' or null,\n    // The dietary restriction, e.g., 'Vegetarian'.\n    dietary_restriction: string,\n    // The list of ingredients.\n    ingredients: string[],\n    // The number of servings the recipe should make\n    servings: int,\n  } or {\n    // Get the time difference between two places.\n    function_name: 'get_time_difference' or null,\n    // The first place for time difference.\n    place1: string,\n    // The second place for time difference.\n    place2: string,\n  } or {\n    // Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.\n    function_name: 'detailed_weather_forecast' or null,\n    // The city that you want to get the weather for.\n    location: string,\n    // Duration in hours for the detailed forecast.\n    duration: int,\n    // Whether to include precipitation data in the forecast. Default is false.\n    include_precipitation: bool or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'recipe_search',\n    dietary_restriction: 'Vegetarian',\n    ingredients: ['potatoes', 'carrots', 'onions'],\n    servings: 4,\n  },\n  {\n    function_name: 'detailed_weather_forecast',\n    location: 'New York',\n    duration: 12,\n    include_precipitation: true,\n  },\n  {\n    function_name: 'get_time_difference',\n    place1: 'New York',\n    place2: 'Tokyo',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 439, "output_tokens": 110, "total_tokens": 549, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "65861cb3-b83d-4e82-b5de-c720f151c430", "event_id": "65861cb3-b83d-4e82-b5de-c720f151c430", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 36759, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_198", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a35a3b22-8e93-4ee0-bd12-b8a6cdee0213", "event_id": "76781d47-1900-4bfe-9579-b1821d787c6d", "parent_event_id": "a35a3b22-8e93-4ee0-bd12-b8a6cdee0213", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 1762, "start_time": "2024-06-20T01:21:13.991Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_197", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_197", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_197\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"website\":\"AllRecipes\",\"recipe\":\"Chicken Alfredo\",\"meta\":\"Value\",\"optional_meal_time\":\"Dinner\"},{\"company_names\":[\"Apple\",\"Microsoft\",\"Tesla\"],\"meta\":\"Value\"},{\"team_name\":\"Brazil\",\"year\":2018,\"meta\":\"Value\",\"gender\":\"men\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_197_Output1 | class Fn_parallel_multiple_function_197_Output2 | class Fn_parallel_multiple_function_197_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you please help me with some information? First, I would like to know the amount of calories in the 'Chicken Alfredo' recipe from the 'AllRecipes' website for dinner. Second, I am interested in the current stock prices of 'Apple', 'Microsoft', and 'Tesla'. Lastly, I want to know the FIFA ranking of the 'Brazil' men's soccer team in 2018.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieves the current stock price of the specified companies\n    function_name: 'get_stock_price' or null,\n    // The list of companies for which to retrieve the stock price.\n    company_names: string[],\n  } or {\n    // Retrieve the FIFA ranking of a specific soccer team for a certain year.\n    function_name: 'get_team_ranking' or null,\n    // The name of the soccer team.\n    team_name: string,\n    // The year for which the ranking is to be retrieved.\n    year: int,\n    // The gender of the team. It can be either 'men' or 'women'. Default is 'men'.\n    gender: string or null,\n  } or {\n    // Retrieve the amount of calories from a specific recipe in a food website.\n    function_name: 'recipe_info.get_calories' or null,\n    // The food website that has the recipe.\n    website: string,\n    // Name of the recipe.\n    recipe: string,\n    // Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is 'Dinner'\n    optional_meal_time: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"recipe_info.get_calories\",\n    \"website\": \"AllRecipes\",\n    \"recipe\": \"Chicken Alfredo\",\n    \"optional_meal_time\": \"Dinner\"\n  },\n  {\n    \"function_name\": \"get_stock_price\",\n    \"company_names\": [\"Apple\", \"Microsoft\", \"Tesla\"]\n  },\n  {\n    \"function_name\": \"get_team_ranking\",\n    \"team_name\": \"Brazil\",\n    \"year\": 2018,\n    \"gender\": \"men\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 444, "output_tokens": 116, "total_tokens": 560, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a35a3b22-8e93-4ee0-bd12-b8a6cdee0213", "event_id": "a35a3b22-8e93-4ee0-bd12-b8a6cdee0213", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 36824, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_197", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "73758441-4f67-4c32-b237-f3bc1a18bafd", "event_id": "042dc196-0d43-4a5d-a2d1-8a9a75983ab0", "parent_event_id": "73758441-4f67-4c32-b237-f3bc1a18bafd", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 3400, "start_time": "2024-06-20T01:21:12.435Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_189", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_189", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_189\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number_of_trials\":20,\"number_of_successes\":5,\"meta\":\"Value\",\"probability_of_success\":0.25},{\"sport\":\"basketball\",\"meta\":\"Value\",\"gender\":\"female\"},{\"budget\":500,\"type\":\"guitar\",\"meta\":\"Value\",\"make\":\"Fender\"},{\"charge1\":2,\"charge2\":3,\"distance\":0.5,\"meta\":\"Value\",\"medium_permittivity\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_189_Output2 | class Fn_parallel_multiple_function_189_Output0 | class Fn_parallel_multiple_function_189_Output3 | class Fn_parallel_multiple_function_189_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Could you help me with a few calculations and searches? First, I'm studying probability and I'd like to calculate the binomial probability for a scenario where I have 20 trials, and I'm interested in 5 successful outcomes. Let's assume the probability of success on any given trial is 0.25. Secondly, I'm a big fan of basketball and I'm curious to know who the top female player is currently. Thirdly, I'm planning to buy a guitar and my budget is $500. I prefer a Fender make. Lastly, I'm working on a physics problem where I need to calculate the electromagnetic force between two charges. The first charge is 2 coulombs, the second charge is 3 coulombs and they are placed 0.5 meters apart. Could you help me with these?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Get the top player in a specific sport.\n    function_name: 'sports_ranking.get_top_player' or null,\n    // The type of sport.\n    sport: string,\n    // The gender of the sport category. Optional. (default: men)\n    gender: string or null,\n  } or {\n    // Calculate the electromagnetic force between two charges placed at a certain distance.\n    function_name: 'electromagnetic_force' or null,\n    // The magnitude of the first charge in coulombs.\n    charge1: int,\n    // The magnitude of the second charge in coulombs.\n    charge2: int,\n    // The distance between the two charges in meters.\n    distance: float,\n    // The relative permittivity of the medium in which the charges are present, in F/m. Default is 8.854e-12 (vacuum permittivity).\n    medium_permittivity: float or null,\n  } or {\n    // Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.\n    function_name: 'calculate_binomial_probability' or null,\n    // The total number of trials.\n    number_of_trials: int,\n    // The desired number of successful outcomes.\n    number_of_successes: int,\n    // The probability of a successful outcome on any given trial. (default: 0.5)\n    probability_of_success: float or null,\n  } or {\n    // Search for a musical instrument within specified budget and of specific type.\n    function_name: 'find_instrument' or null,\n    // Your budget for the instrument.\n    budget: int,\n    // Type of the instrument\n    type: string,\n    // Maker of the instrument, Optional parameter. Default to not use it if not provided.\n    make: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"calculate_binomial_probability\",\n    \"number_of_trials\": 20,\n    \"number_of_successes\": 5,\n    \"probability_of_success\": 0.25\n  },\n  {\n    \"function_name\": \"sports_ranking.get_top_player\",\n    \"sport\": \"basketball\",\n    \"gender\": \"female\"\n  },\n  {\n    \"function_name\": \"find_instrument\",\n    \"budget\": 500,\n    \"type\": \"guitar\",\n    \"make\": \"Fender\"\n  },\n  {\n    \"function_name\": \"electromagnetic_force\",\n    \"charge1\": 2,\n    \"charge2\": 3,\n    \"distance\": 0.5\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 664, "output_tokens": 160, "total_tokens": 824, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "73758441-4f67-4c32-b237-f3bc1a18bafd", "event_id": "73758441-4f67-4c32-b237-f3bc1a18bafd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 36904, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_multiple_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_189", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "738f9be1-fef8-4211-9f2e-4eeba2fe4f93", "event_id": "6b251ad6-cbac-4b9d-8c28-b7c4b8201e64", "parent_event_id": "738f9be1-fef8-4211-9f2e-4eeba2fe4f93", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2528, "start_time": "2024-06-20T01:21:13.560Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_192", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_192", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_192\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"rank\":\"King\",\"suit\":\"Hearts\",\"deck\":[],\"meta\":\"Value\"},{\"value\":2,\"from_unit\":\"cup\",\"to_unit\":\"tablespoon\",\"meta\":\"Value\",\"precision\":null},{\"base_currency\":\"Euros\",\"target_currency\":\"US Dollars\",\"amount\":100,\"meta\":\"Value\"},{\"location\":\"San Francisco\",\"plant_types\":[\"Value0\",\"Value3\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_192_Output0 | class Fn_parallel_multiple_function_192_Output2 | class Fn_parallel_multiple_function_192_Output1 | class Fn_parallel_multiple_function_192_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are planning a cozy evening at home. You want to play a card game with a deck of cards, but you are not sure if the 'King of Hearts' is in the deck. Can you check if it's there? Later, you plan to cook a recipe that requires 2 cups of sugar, but you only have a tablespoon to measure. How many tablespoons are equivalent to 2 cups? Also, you have 100 Euros in your wallet, and you want to know how much it would be in US dollars. Can you convert it? Finally, you are thinking about adding some new plants to your garden. You live in San Francisco and are interested in nurseries that provide 'Annual' and 'Tree' type plants. Can you find some local nurseries?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Locate a particular card in a deck based on rank and suit.\n    function_name: 'find_card_in_deck' or null,\n    // Rank of the card (e.g. Ace, Two, King).\n    rank: string,\n    // Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\n    suit: string,\n    // Deck of cards. If not provided, the deck will be a default standard 52 card deck\n    deck: [\n      {\n        // \n        rank: string or null,\n        // \n        suit: string or null,\n      }\n    ],\n  } or {\n    // Convert an amount from a base currency to a target currency based on the current exchange rate.\n    function_name: 'currency_exchange.convert' or null,\n    // The currency to convert from.\n    base_currency: string,\n    // The currency to convert to.\n    target_currency: string,\n    // The amount in base currency to convert\n    amount: int,\n  } or {\n    // Locate local nurseries based on location and plant types availability.\n    function_name: 'local_nursery.find' or null,\n    // The city or locality where the nursery needs to be located.\n    location: string,\n    // Type of plants the nursery should provide.\n    plant_types: [\n      'Annual' or 'Perennial' or 'Shrub' or 'Tree' or 'Herbs' or 'Fruits'\n    ],\n  } or {\n    // Convert a value from one kitchen unit to another for cooking purposes.\n    function_name: 'recipe.unit_conversion' or null,\n    // The value to be converted.\n    value: int,\n    // The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc.\n    from_unit: string,\n    // The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc.\n    to_unit: string,\n    // The precision to round the output to, in case of a non-integer result. Optional, default is 0.\n    precision: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"find_card_in_deck\",\n    \"rank\": \"King\",\n    \"suit\": \"Hearts\"\n  },\n  {\n    \"function_name\": \"recipe.unit_conversion\",\n    \"value\": 2,\n    \"from_unit\": \"cup\",\n    \"to_unit\": \"tablespoon\"\n  },\n  {\n    \"function_name\": \"currency_exchange.convert\",\n    \"base_currency\": \"Euros\",\n    \"target_currency\": \"US Dollars\",\n    \"amount\": 100\n  },\n  {\n    \"function_name\": \"local_nursery.find\",\n    \"location\": \"San Francisco\",\n    \"plant_types\": [\"Annual\", \"Tree\"]\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 711, "output_tokens": 149, "total_tokens": 860, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "738f9be1-fef8-4211-9f2e-4eeba2fe4f93", "event_id": "738f9be1-fef8-4211-9f2e-4eeba2fe4f93", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 37158, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_192", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: target_currency\\nExpected: any of ['US dollars', 'USD']\\nActual@1: meta=<Fn_parallel_multiple_function_192_Output1_TypeName.Value: 'Value'> base_currency='Euros' target_currency='US Dollars' amount=100\\nActual all: [Fn_parallel_multiple_function_192_Output0(meta=<Fn_parallel_multiple_function_192_Output0_TypeName.Value: 'Value'>, rank='King', suit='Hearts', deck=[]), Fn_parallel_multiple_function_192_Output3(meta=<Fn_parallel_multiple_function_192_Output3_TypeName.Value: 'Value'>, value=2, from_unit='cup', to_unit='tablespoon', precision=None), Fn_parallel_multiple_function_192_Output1(meta=<Fn_parallel_multiple_function_192_Output1_TypeName.Value: 'Value'>, base_currency='Euros', target_currency='US Dollars', amount=100), Fn_parallel_multiple_function_192_Output2(meta=<Fn_parallel_multiple_function_192_Output2_TypeName.Value: 'Value'>, location='San Francisco', plant_types=[<Enum_Fn_parallel_multiple_function_192_Enum0.Value0: 'Value0'>, <Enum_Fn_parallel_multiple_function_192_Enum0.Value3: 'Value3'>])]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fece2e8f-c7ec-47b4-8fe8-211c42d0cb7a", "event_id": "5288ac12-fbde-4416-a90f-2d3678ff02a6", "parent_event_id": "fece2e8f-c7ec-47b4-8fe8-211c42d0cb7a", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2622, "start_time": "2024-06-20T01:21:13.990Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_196", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_196", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_196\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"platform\":\"Windows 10\",\"rating\":4,\"meta\":\"Value\",\"genre\":\"Value0\"},{\"function\":\"x^2\",\"interval\":[0.0,5.0],\"meta\":\"Value\",\"method\":\"trapezoidal\"},{\"start_location\":\"Los Angeles\",\"end_location\":\"New York\",\"meta\":\"Value\",\"units\":\"kilometers\"},{\"to\":\"john.doe@example.com\",\"subject\":\"Meeting Reminder\",\"body\":\"Do not forget about our meeting tomorrow at 10 AM\",\"meta\":\"Value\",\"cc\":\"jane.doe@example.com\",\"bcc\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_196_Output1 | class Fn_parallel_multiple_function_196_Output0 | class Fn_parallel_multiple_function_196_Output2 | class Fn_parallel_multiple_function_196_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find a multiplayer game that is compatible with my Windows 10 system, has a minimum rating of 4.0, and falls under the 'Action' genre? After that, I need to calculate the area under the curve for the mathematical function 'x^2' within the interval [0, 5] using the 'trapezoidal' method. Then, I want to know the geographic distance in kilometers from 'Los Angeles' to 'New York'. Lastly, I need to send an email to 'john.doe@example.com' with the subject 'Meeting Reminder', the body saying 'Do not forget about our meeting tomorrow at 10 AM', and carbon copy it to 'jane.doe@example.com'.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Calculate the geographic distance between two given locations.\n    function_name: 'geo_distance.calculate' or null,\n    // The starting location for the distance calculation.\n    start_location: string,\n    // The destination location for the distance calculation.\n    end_location: string,\n    // Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\n    units: string or null,\n  } or {\n    // Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.\n    function_name: 'multiplayer_game_finder' or null,\n    // The platform you want the game to be compatible with, e.g. Windows 10, PS5.\n    platform: string,\n    // Desired minimum game rating on a 5.0 scale.\n    rating: int,\n    // Desired game genre, e.g. Action, Adventure, Racing. Default is none if not provided.\n    genre: 'Action' or 'Adventure' or 'Racing' or 'Strategy' or 'Simulation' or null,\n  } or {\n    // Send an email to the specified email address.\n    function_name: 'send_email' or null,\n    // The email address to send to.\n    to: string,\n    // The subject of the email.\n    subject: string,\n    // The body content of the email.\n    body: string,\n    // The email address to carbon copy. Default is none if not provided.\n    cc: string or null,\n    // The email address to blind carbon copy. Default is none if not provided.\n    bcc: string or null,\n  } or {\n    // Calculate the area under a mathematical function within a given interval.\n    function_name: 'calculate_area_under_curve' or null,\n    // The mathematical function as a string.\n    function: string,\n    // An array that defines the interval to calculate the area under the curve from the start to the end point.\n    interval: float[],\n    // The numerical method to approximate the area under the curve. The default value is 'trapezoidal'.\n    method: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"multiplayer_game_finder\",\n    \"platform\": \"Windows 10\",\n    \"rating\": 4.0,\n    \"genre\": \"Action\"\n  },\n  {\n    \"function_name\": \"calculate_area_under_curve\",\n    \"function\": \"x^2\",\n    \"interval\": [0, 5],\n    \"method\": \"trapezoidal\"\n  },\n  {\n    \"function_name\": \"geo_distance.calculate\",\n    \"start_location\": \"Los Angeles\",\n    \"end_location\": \"New York\",\n    \"units\": \"kilometers\"\n  },\n  {\n    \"function_name\": \"send_email\",\n    \"to\": \"john.doe@example.com\",\n    \"subject\": \"Meeting Reminder\",\n    \"body\": \"Do not forget about our meeting tomorrow at 10 AM\",\n    \"cc\": \"jane.doe@example.com\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 705, "output_tokens": 191, "total_tokens": 896, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "24b1fd8f-8abd-41b3-a679-9fac9c05df53", "event_id": "1fda1b45-4476-45ca-9a84-1a65ef374546", "parent_event_id": "24b1fd8f-8abd-41b3-a679-9fac9c05df53", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4177, "start_time": "2024-06-20T01:21:12.435Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_190", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_190", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_190\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"San Francisco, CA\",\"meta\":\"Value\",\"operating_hours\":22},{\"location\":\"San Francisco, CA\",\"room_type\":\"deluxe\",\"duration\":3,\"start_date\":\"July 1st\",\"preferences\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"team_name\":\"Golden State Warriors\",\"num_of_games\":5,\"league\":\"NBA\",\"meta\":\"Value\",\"location\":null},{\"rank\":\"Queen\",\"suit\":\"Hearts\",\"deck\":[],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_190_Output2 | class Fn_parallel_multiple_function_190_Output0 | class Fn_parallel_multiple_function_190_Output1 | class Fn_parallel_multiple_function_190_Output3>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me plan a trip? I want to start by finding a vegan restaurant in San Francisco, CA that operates until at least 22:00. Then, I want to book a hotel in the same city. I prefer a deluxe room for 3 nights starting from July 1st, and I would like the hotel to be pet-friendly and have a gym. After that, I want to find the schedule of the Golden State Warriors for the next 5 games in the NBA. Lastly, I have a deck of cards and I want to find the Queen of Hearts in it.\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Books a hotel room given the location, room type, stay duration and any additional preferences.\n    function_name: 'hotel_booking' or null,\n    // The city where you want to book the hotel.\n    location: string,\n    // Type of the room required. Options: 'single', 'double', 'deluxe', etc.\n    room_type: string,\n    // The number of nights you want to book the hotel for.\n    duration: int,\n    // The date when your stay begins.\n    start_date: string,\n    // Optional preferences of stay at the hotel. Default is none if not provided.\n    preferences: [\n      'pet_friendly' or 'gym' or 'swimming_pool' or 'free_breakfast' or 'parking'\n    ],\n  } or {\n    // Fetches the schedule of the specified sports team for the specified number of games in the given league.\n    function_name: 'sports_team.get_schedule' or null,\n    // The name of the sports team.\n    team_name: string,\n    // Number of games for which to fetch the schedule.\n    num_of_games: int,\n    // The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league.\n    league: string,\n    // Optional. The city or venue where games are to be held. If not provided, all venues will be considered by default.\n    location: string or null,\n  } or {\n    // Locate a particular card in a deck based on rank and suit.\n    function_name: 'find_card_in_deck' or null,\n    // Rank of the card (e.g. Ace, Two, King).\n    rank: string,\n    // Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).\n    suit: string,\n    // Deck of cards. If not provided, the deck will be a default standard 52 card deck\n    deck: [\n      {\n        // \n        rank: string or null,\n        // \n        suit: string or null,\n      }\n    ],\n  } or {\n    // Locate nearby vegan restaurants based on specific criteria like operating hours.\n    function_name: 'vegan_restaurant.find_nearby' or null,\n    // The city and state, e.g. New York, NY\n    location: string,\n    // Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24\n    operating_hours: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"vegan_restaurant.find_nearby\",\n    \"location\": \"San Francisco, CA\",\n    \"operating_hours\": 22\n  },\n  {\n    \"function_name\": \"hotel_booking\",\n    \"location\": \"San Francisco, CA\",\n    \"room_type\": \"deluxe\",\n    \"duration\": 3,\n    \"start_date\": \"July 1st\",\n    \"preferences\": [\"pet_friendly\", \"gym\"]\n  },\n  {\n    \"function_name\": \"sports_team.get_schedule\",\n    \"team_name\": \"Golden State Warriors\",\n    \"num_of_games\": 5,\n    \"league\": \"NBA\"\n  },\n  {\n    \"function_name\": \"find_card_in_deck\",\n    \"rank\": \"Queen\",\n    \"suit\": \"Hearts\"\n  }\n]\n```", "metadata": {"logprobs": null, "prompt_tokens": 774, "output_tokens": 178, "total_tokens": 952, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fece2e8f-c7ec-47b4-8fe8-211c42d0cb7a", "event_id": "fece2e8f-c7ec-47b4-8fe8-211c42d0cb7a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 37682, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_196", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "24b1fd8f-8abd-41b3-a679-9fac9c05df53", "event_id": "24b1fd8f-8abd-41b3-a679-9fac9c05df53", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 37683, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_190", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ee53c88a-d9e9-4070-bc22-6174ba6fbcec", "event_id": "708732b2-3660-4de3-be01-0064e7513020", "parent_event_id": "ee53c88a-d9e9-4070-bc22-6174ba6fbcec", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2123, "start_time": "2024-06-20T01:21:14.521Z", "tags": {"test_category": "parallel_multiple_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_199", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_199", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_199\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"dietary_restrictions\":\"vegan\",\"recipe_type\":\"main course\",\"time\":30,\"meta\":\"Value\"},{\"discovery\":\"Gravity\",\"meta\":\"Value\",\"method_used\":null},{\"discovery\":\"Higgs Boson\",\"meta\":\"Value\",\"method_used\":null},{\"dietary_restrictions\":\"gluten free\",\"recipe_type\":\"dessert\",\"time\":45,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_199_Output0 | class Fn_parallel_multiple_function_199_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you first find me a vegan, main course recipe that can be prepared within 30 minutes? After that, could you please retrieve the details of the scientific discovery of Gravity using the most accepted method? Once done, I would also like to know about the discovery of the Higgs Boson particle using the same method. Lastly, could you find me a gluten-free dessert recipe that can be prepared within 45 minutes?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Find a recipe based on the dietary restrictions, recipe type, and time constraints.\n    function_name: 'find_recipe' or null,\n    // Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.\n    dietary_restrictions: string,\n    // Type of the recipe. E.g. dessert, main course, breakfast.\n    recipe_type: string,\n    // Time limit in minutes to prep the meal.\n    time: int,\n  } or {\n    // Retrieve the details of a scientific discovery based on the discovery name.\n    function_name: 'science_history.get_discovery_details' or null,\n    // The name of the discovery, e.g. Gravity\n    discovery: string,\n    // The method used for the discovery, default value is 'default' which gives the most accepted method.\n    method_used: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'find_recipe',\n    dietary_restrictions: 'vegan',\n    recipe_type: 'main course',\n    time: 30\n  },\n  {\n    function_name: 'science_history.get_discovery_details',\n    discovery: 'Gravity'\n  },\n  {\n    function_name: 'science_history.get_discovery_details',\n    discovery: 'Higgs Boson'\n  },\n  {\n    function_name: 'find_recipe',\n    dietary_restrictions: 'gluten free',\n    recipe_type: 'dessert',\n    time: 45\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 375, "output_tokens": 120, "total_tokens": 495, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ee53c88a-d9e9-4070-bc22-6174ba6fbcec", "event_id": "ee53c88a-d9e9-4070-bc22-6174ba6fbcec", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 37715, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_199", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c1240228-1f95-43f3-bbe3-62097abf5f6b", "event_id": "4579bf7c-4fff-46e6-b790-16d15b574ec6", "parent_event_id": "c1240228-1f95-43f3-bbe3-62097abf5f6b", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 2048, "start_time": "2024-06-20T01:21:15.609Z", "tags": {"baml.language": "python", "test_category": "parallel_multiple_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_200", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_200", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_200\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"time\":\"2pm\",\"from_timezone\":\"America/New_York\",\"to_timezone\":\"Europe/London\",\"meta\":\"Value\"},{\"time\":\"2pm\",\"from_timezone\":\"America/New_York\",\"to_timezone\":\"Asia/Tokyo\",\"meta\":\"Value\"},{\"energy_type\":\"solar\",\"usage_duration\":12,\"meta\":\"Value\",\"region\":\"California\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_200_Output0 | class Fn_parallel_multiple_function_200_Output1>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me with two things? First, I am currently in New York and it's 2pm here. I have a meeting scheduled with a client in London and another one in Tokyo. I need to know what time it will be in both these cities when it's 2pm in New York. Second, I am considering switching to solar energy for my home in California and I want to understand the potential greenhouse gas emissions I could save. I plan to use it for 12 months. Can you calculate the emission savings for me?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Convert time from one time zone to another.\n    function_name: 'timezone.convert' or null,\n    // The local time you want to convert, e.g. 3pm\n    time: string,\n    // The time zone you want to convert from.\n    from_timezone: string,\n    // The time zone you want to convert to.\n    to_timezone: string,\n  } or {\n    // Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.\n    function_name: 'calculate_emission_savings' or null,\n    // Type of the renewable energy source.\n    energy_type: string,\n    // Usage duration in months.\n    usage_duration: int,\n    // The region where you use energy. Default is 'global'.\n    region: string or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "```json\n[\n  {\n    \"function_name\": \"timezone.convert\",\n    \"time\": \"2pm\",\n    \"from_timezone\": \"America/New_York\",\n    \"to_timezone\": \"Europe/London\"\n  },\n  {\n    \"function_name\": \"timezone.convert\",\n    \"time\": \"2pm\",\n    \"from_timezone\": \"America/New_York\",\n    \"to_timezone\": \"Asia/Tokyo\"\n  },\n  {\n    \"function_name\": \"calculate_emission_savings\",\n    \"energy_type\": \"solar\",\n    \"usage_duration\": 12,\n    \"region\": \"California\"\n  }\n]\n```  ", "metadata": {"logprobs": null, "prompt_tokens": 386, "output_tokens": 132, "total_tokens": 518, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c1240228-1f95-43f3-bbe3-62097abf5f6b", "event_id": "c1240228-1f95-43f3-bbe3-62097abf5f6b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 38727, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_200", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7e3f2d95-d9f3-4cd9-a0cb-2fc4d28a0758", "event_id": "a77263d8-ec88-4bfe-b929-7463f7bbdb07", "parent_event_id": "7e3f2d95-d9f3-4cd9-a0cb-2fc4d28a0758", "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 4249, "start_time": "2024-06-20T01:21:13.561Z", "tags": {"test_category": "parallel_multiple_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_194", "variant_name": null}, {"function_name": "Fn_parallel_multiple_function_194", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_multiple_function_194\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"discovery\":\"Relativity Theory\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_multiple_function_194_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "You are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one or more function/tool calls to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function,\nalso point it out. You should only return the function call in tools call sections."}]}, {"role": "user", "content": [{"text": "Question: \"Can you tell me the name of the scientist who is credited for the discovery of 'Relativity Theory'? After that, I want to book a direct flight from 'Los Angeles' to 'New York' on the date '2022-12-25' at '10:00 AM'. Also, I am interested in knowing the player statistics for the video game 'Call of Duty' for the username 'gamer123' on the 'PlayStation' platform. Lastly, can you find me upcoming 'rock' genre events in 'San Francisco, CA' for the next 14 days?\"\n\nHere is the function to invoke:\n\n\n[\n  {\n    // Retrieve the scientist's name who is credited for a specific scientific discovery or theory.\n    function_name: 'get_scientist_for_discovery' or null,\n    // The scientific discovery or theory.\n    discovery: string,\n  } or {\n    // Fetch player statistics for a specific video game for a given user.\n    function_name: 'game_stats.fetch_player_statistics' or null,\n    // The name of the video game.\n    game: string,\n    // The username of the player.\n    username: string,\n    // The platform user is playing on. (default: PC)\n    platform: string or null,\n  } or {\n    // Book a direct flight for a specific date and time from departure location to destination location.\n    function_name: 'flight.book' or null,\n    // The location you are departing from.\n    departure_location: string,\n    // The location you are flying to.\n    destination_location: string,\n    // The date of the flight. Accepts standard date format e.g., 2022-04-28.\n    date: string,\n    // Preferred time of flight. Default to none if not provided. Accepts standard time format e.g., 10:00 AM\n    time: string or null,\n    // If set to true, only direct flights will be searched. Default is false.\n    direct_flight: bool or null,\n  } or {\n    // Find upcoming events of a specific genre in a given location.\n    function_name: 'event_finder.find_upcoming' or null,\n    // The city and state where the search will take place, e.g. New York, NY.\n    location: string,\n    // The genre of events.\n    genre: string,\n    // The number of days from now to include in the search. (default: 7)\n    days_ahead: int or null,\n  }\n]\n\n\nFunction args in JSON format:"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "1. To find the name of the scientist credited for the discovery of 'Relativity Theory':\n\n```json\n{\n  \"function_name\": \"get_scientist_for_discovery\",\n  \"discovery\": \"Relativity Theory\"\n}\n```\n\n2. To book a direct flight from 'Los Angeles' to 'New York' on the date '2022-12-25' at '10:00 AM':\n\n```json\n{\n  \"function_name\": \"flight.book\",\n  \"departure_location\": \"Los Angeles\",\n  \"destination_location\": \"New York\",\n  \"date\": \"2022-12-25\",\n  \"time\": \"10:00 AM\",\n  \"direct_flight\": true\n}\n```\n\n3. To fetch player statistics for the video game 'Call of Duty' for the username 'gamer123' on the 'PlayStation' platform:\n\n```json\n{\n  \"function_name\": \"game_stats.fetch_player_statistics\",\n  \"game\": \"Call of Duty\",\n  \"username\": \"gamer123\",\n  \"platform\": \"PlayStation\"\n}\n```\n\n4. Unfortunately, there is no function available to find upcoming 'rock' genre events in 'San Francisco, CA' for the next 14 days.", "metadata": {"logprobs": null, "prompt_tokens": 617, "output_tokens": 255, "total_tokens": 872, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7e3f2d95-d9f3-4cd9-a0cb-2fc4d28a0758", "event_id": "7e3f2d95-d9f3-4cd9-a0cb-2fc4d28a0758", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "7e41bd06-dcb9-4cba-98ce-ea4a2c5f5171", "stage": "development", "latency_ms": 38880, "start_time": "2024-06-20T01:20:38.931Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_multiple_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_multiple_function_194", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
