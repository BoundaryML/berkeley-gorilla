{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "05c52b98-480e-4c5d-9415-18feb06868fa", "event_id": "4f787af6-a6bd-4d0a-a27a-464cdbcdb9eb", "parent_event_id": "05c52b98-480e-4c5d-9415-18feb06868fa", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1127, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_3", "variant_name": null}, {"function_name": "Fn_parallel_function_3", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_3\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"length\":5,\"area\":0.01,\"meta\":\"Value\",\"resistivity\":\"copper\"},{\"length\":5,\"area\":0.01,\"meta\":\"Value\",\"resistivity\":\"aluminum\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_3_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the resistance of a wire using resistivity, length, and cross-sectional area.\n    function_name: 'calculate_resistance' or null,\n    // The length of the wire in meters.\n    length: int,\n    // The cross-sectional area of the wire in square meters.\n    area: float,\n    // Resistivity of the material (Default: 'copper'). Allowed values: 'copper', 'aluminum'\n    resistivity: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Calculate the resistance of a wire with a length of 5m and cross sectional area 0.01m\u00b2 with resistivity of copper and aluminum"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_resistance',\n    length: 5,\n    area: 0.01,\n    resistivity: 'copper'\n  },\n  {\n    function_name: 'calculate_resistance',\n    length: 5,\n    area: 0.01,\n    resistivity: 'aluminum'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 151, "output_tokens": 72, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0cc15622-c89c-4237-ad5c-9c2c02a39eab", "event_id": "ff13a980-a4a3-4924-a6bb-94e1c7de4029", "parent_event_id": "0cc15622-c89c-4237-ad5c-9c2c02a39eab", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1128, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_5", "variant_name": null}, {"function_name": "Fn_parallel_function_5", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_5\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"height\":6.0,\"weight\":80,\"meta\":\"Value\"},{\"height\":5.6,\"weight\":60,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_5_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate body mass index for a person based on their weight and height.\n    function_name: 'calculate_bmi' or null,\n    // The height of the person in feet.\n    height: float,\n    // The weight of the person in kilograms.\n    weight: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Calculate the body mass index for a person who is 6 feet tall and weighs 80 kg, also for a person who is 5.6 feet and weighs 60 kg."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_bmi',\n    height: 6,\n    weight: 80\n  },\n  {\n    function_name: 'calculate_bmi',\n    height: 5.6,\n    weight: 60\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 119, "output_tokens": 54, "total_tokens": 173, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "05c52b98-480e-4c5d-9415-18feb06868fa", "event_id": "05c52b98-480e-4c5d-9415-18feb06868fa", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1129, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_3", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0cc15622-c89c-4237-ad5c-9c2c02a39eab", "event_id": "0cc15622-c89c-4237-ad5c-9c2c02a39eab", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1129, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_5", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b217905e-b3fb-4db1-a39b-da7328279fc7", "event_id": "49afd4f0-22e9-465d-be57-ac61fdecce3c", "parent_event_id": "b217905e-b3fb-4db1-a39b-da7328279fc7", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1159, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_1", "variant_name": null}, {"function_name": "Fn_parallel_function_1", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_1\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"artist\":\"Taylor Swift\",\"duration\":20,\"meta\":\"Value\"},{\"artist\":\"Maroon 5\",\"duration\":15,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_1_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Play specific tracks from a given artist for a specific time duration.\n    function_name: 'spotify.play' or null,\n    // The artist whose songs you want to play.\n    artist: string,\n    // The duration for which the songs should be played, in minutes.\n    duration: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Play songs from the artists Taylor Swift and Maroon 5, with a play time of 20 minutes and 15 minutes respectively, on Spotify."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'spotify.play',\n    artist: 'Taylor Swift',\n    duration: 20,\n  },\n  {\n    function_name: 'spotify.play',\n    artist: 'Maroon 5',\n    duration: 15,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 116, "output_tokens": 54, "total_tokens": 170, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b217905e-b3fb-4db1-a39b-da7328279fc7", "event_id": "b217905e-b3fb-4db1-a39b-da7328279fc7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1159, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_1", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f6e377f1-a34e-4b33-9a19-0ce9e05ab948", "event_id": "8a6c9e81-62ff-42ff-bbdf-fcad94ab811b", "parent_event_id": "f6e377f1-a34e-4b33-9a19-0ce9e05ab948", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1190, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_2", "variant_name": null}, {"function_name": "Fn_parallel_function_2", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_2\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"b_field\":5,\"area\":2,\"d_time\":4,\"meta\":\"Value\"},{\"b_field\":5,\"area\":2,\"d_time\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_2_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the induced electromagnetic force based on Faraday's Law of Electromagnetic Induction, given the magnetic field (in Tesla), change in magnetic field area (in square meters), and the change in time (in seconds).\n    function_name: 'calculate_em_force' or null,\n    // The magnetic field in Tesla.\n    b_field: int,\n    // The change in area of magnetic field in square meters.\n    area: int,\n    // The change in time in seconds.\n    d_time: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Calculate the induced electromagnetic force for a magnetic field of 5 Tesla, area of 2 square meters and change in time of 4 seconds, then repeat with a change in time of 10 seconds."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_em_force',\n    b_field: 5,\n    area: 2,\n    d_time: 4,\n  },\n  {\n    function_name: 'calculate_em_force',\n    b_field: 5,\n    area: 2,\n    d_time: 10,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 171, "output_tokens": 68, "total_tokens": 239, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f6e377f1-a34e-4b33-9a19-0ce9e05ab948", "event_id": "f6e377f1-a34e-4b33-9a19-0ce9e05ab948", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1190, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_2", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4e34548d-255b-49b0-9747-691ed0a1b492", "event_id": "76283dbf-009d-4259-a33c-2746da3842f7", "parent_event_id": "4e34548d-255b-49b0-9747-691ed0a1b492", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1212, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_10", "variant_name": null}, {"function_name": "Fn_parallel_function_10", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_10\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"San Diego, CA\",\"movie\":[\"Value0\",\"Value1\"],\"time\":[\"5:00 PM\",\"7:30 PM\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_10_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Find local movie theatres and their schedule for a specific movie\n    function_name: 'find_movie_showing' or null,\n    // The city and state, e.g. San Diego, CA\n    location: string,\n    // Preferred movie to watch.\n    movie: [\n      'Tenet' or 'No Time To Die'\n    ],\n    // \n    time: string[],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find two movie theatres near San Diego with availability for Tenet at 5 pm and No Time To Die at 7:30 pm."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'find_movie_showing',\n    location: 'San Diego, CA',\n    movie: ['Tenet', 'No Time To Die'],\n    time: ['5:00 PM', '7:30 PM']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 134, "output_tokens": 53, "total_tokens": 187, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4e34548d-255b-49b0-9747-691ed0a1b492", "event_id": "4e34548d-255b-49b0-9747-691ed0a1b492", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1217, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_10", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: movie\\nExpected: any of [['Tenet']]\\nActual@1: meta=<Fn_parallel_function_10_Output0_TypeName.Value: 'Value'> location='San Diego, CA' movie=[<Enum_Fn_parallel_function_10_Enum0.Value0: 'Value0'>, <Enum_Fn_parallel_function_10_Enum0.Value1: 'Value1'>] time=['5:00 PM', '7:30 PM']\\nActual all: [Fn_parallel_function_10_Output0(meta=<Fn_parallel_function_10_Output0_TypeName.Value: 'Value'>, location='San Diego, CA', movie=[<Enum_Fn_parallel_function_10_Enum0.Value0: 'Value0'>, <Enum_Fn_parallel_function_10_Enum0.Value1: 'Value1'>], time=['5:00 PM', '7:30 PM'])]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "85e5b619-1abd-4f24-abc3-83eb092de5eb", "event_id": "a1d85371-ee4b-4f64-935d-e2bb1dd24f09", "parent_event_id": "85e5b619-1abd-4f24-abc3-83eb092de5eb", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1252, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_8", "variant_name": null}, {"function_name": "Fn_parallel_function_8", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_8\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number\":5,\"meta\":\"Value\"},{\"number\":10,\"meta\":\"Value\"},{\"number\":15,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_8_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the factorial of a given positive integer.\n    function_name: 'math.factorial' or null,\n    // The number for which factorial needs to be calculated.\n    number: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find the factorial of 5,10 and 15."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.factorial',\n    number: 5\n  },\n  {\n    function_name: 'math.factorial',\n    number: 10\n  },\n  {\n    function_name: 'math.factorial',\n    number: 15\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 76, "output_tokens": 59, "total_tokens": 135, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "85e5b619-1abd-4f24-abc3-83eb092de5eb", "event_id": "85e5b619-1abd-4f24-abc3-83eb092de5eb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1252, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_8", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2dce9955-edd4-4e1e-a6f8-fefde60dd82f", "event_id": "6fe3a7af-df2f-4846-a5ec-af074a7731b1", "parent_event_id": "2dce9955-edd4-4e1e-a6f8-fefde60dd82f", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1355, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_6", "variant_name": null}, {"function_name": "Fn_parallel_function_6", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_6\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"streaming_service\":\"Netflix\",\"show_list\":[\"Friends\"],\"meta\":\"Value\",\"sort_by_rating\":true},{\"streaming_service\":\"Hulu\",\"show_list\":[\"The Office\",\"Stranger Things\"],\"meta\":\"Value\",\"sort_by_rating\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_6_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Get a list of shows and their ratings on specific streaming services.\n    function_name: 'streaming_services.shows_list_and_ratings' or null,\n    // Name of the streaming service. E.g., Netflix, Hulu, etc.\n    streaming_service: string,\n    // List of show names to search for on the platform.\n    show_list: string[],\n    // If set to true, returns the list sorted by ratings. Defaults to false.\n    sort_by_rating: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find the list of TV shows and their ratings on Netflix for 'Friends', and Hulu for 'The Office' and 'Stranger Things' and sort by its rating"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'streaming_services.shows_list_and_ratings',\n    streaming_service: 'Netflix',\n    show_list: ['Friends'],\n    sort_by_rating: true,\n  },\n  {\n    function_name: 'streaming_services.shows_list_and_ratings',\n    streaming_service: 'Hulu',\n    show_list: ['The Office', 'Stranger Things'],\n    sort_by_rating: true,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 157, "output_tokens": 85, "total_tokens": 242, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2dce9955-edd4-4e1e-a6f8-fefde60dd82f", "event_id": "2dce9955-edd4-4e1e-a6f8-fefde60dd82f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1356, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_6", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "11856e23-e32f-48e9-9d51-dc845ec2a22d", "event_id": "640514b1-dcc0-4acc-b8ef-91089118f39d", "parent_event_id": "11856e23-e32f-48e9-9d51-dc845ec2a22d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1639, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_7", "variant_name": null}, {"function_name": "Fn_parallel_function_7", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_7\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"purchase_amount\":30.45,\"city\":\"Chicago\",\"state\":\"Illinois\",\"meta\":\"Value\"},{\"purchase_amount\":52.33,\"city\":\"Sacramento\",\"state\":\"California\",\"meta\":\"Value\"},{\"purchase_amount\":11.23,\"city\":\"Portland\",\"state\":\"Oregon\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_7_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the sales tax for a given purchase amount in a specific city and state.\n    function_name: 'calculate_sales_tax' or null,\n    // The purchase amount.\n    purchase_amount: float,\n    // The city where the purchase is made.\n    city: string,\n    // The state where the purchase is made.\n    state: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Calculate the amount of sales tax to be added on a purchase amount of $30.45 in Chicago, Illinois, $52.33 in Sacramento, California and $11.23 in Portland, Oregon."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_sales_tax',\n    purchase_amount: 30.45,\n    city: 'Chicago',\n    state: 'Illinois',\n  },\n  {\n    function_name: 'calculate_sales_tax',\n    purchase_amount: 52.33,\n    city: 'Sacramento',\n    state: 'California',\n  },\n  {\n    function_name: 'calculate_sales_tax',\n    purchase_amount: 11.23,\n    city: 'Portland',\n    state: 'Oregon',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 137, "output_tokens": 106, "total_tokens": 243, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "11856e23-e32f-48e9-9d51-dc845ec2a22d", "event_id": "11856e23-e32f-48e9-9d51-dc845ec2a22d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1640, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_7", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4745e6f9-35a1-4972-9535-d63a4b6cc972", "event_id": "86535999-af67-4483-a22b-e51e3b277f93", "parent_event_id": "4745e6f9-35a1-4972-9535-d63a4b6cc972", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2047, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_4", "variant_name": null}, {"function_name": "Fn_parallel_function_4", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_4\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"protein_name\":\"HbA1c\",\"meta\":\"Value\",\"model_3d\":true},{\"protein_name\":\"normal hemoglobin\",\"meta\":\"Value\",\"model_3d\":true},{\"protein_name\":\"rat hemoglobin\",\"meta\":\"Value\",\"model_3d\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_4_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrive the sequence and 3D models of proteins.\n    function_name: 'protein_info.get_sequence_and_3D' or null,\n    // The name of the protein.\n    protein_name: string,\n    // Set true to get 3D model of the protein. (default: True)\n    model_3d: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Get the protein sequence of human HbA1c, normal hemoglobin, and rat hemoglobin and their 3D models"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'protein_info.get_sequence_and_3D',\n    protein_name: 'HbA1c',\n    model_3d: true\n  },\n  {\n    function_name: 'protein_info.get_sequence_and_3D',\n    protein_name: 'normal hemoglobin',\n    model_3d: true\n  },\n  {\n    function_name: 'protein_info.get_sequence_and_3D',\n    protein_name: 'rat hemoglobin',\n    model_3d: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 124, "output_tokens": 109, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4745e6f9-35a1-4972-9535-d63a4b6cc972", "event_id": "4745e6f9-35a1-4972-9535-d63a4b6cc972", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2048, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_4", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dcde9537-b11e-4785-a613-fc71461c3121", "event_id": "909368f0-9b5b-4ac3-8645-d168808af4d8", "parent_event_id": "dcde9537-b11e-4785-a613-fc71461c3121", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 941, "start_time": "2024-06-20T05:24:39.826Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_11", "variant_name": null}, {"function_name": "Fn_parallel_function_11", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_11\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"a\":3,\"b\":4,\"meta\":\"Value\"},{\"a\":5,\"b\":12,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_11_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the hypotenuse of a right triangle based on the lengths of the other two sides.\n    function_name: 'math.pythagoras' or null,\n    // Length of one of the sides of a right triangle.\n    a: int,\n    // Length of the other side of a right triangle.\n    b: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Compute the Pythagorean Theorem of two side lengths: 3 and 4, 5 and 12."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.pythagoras',\n    a: 3,\n    b: 4\n  },\n  {\n    function_name: 'math.pythagoras',\n    a: 5,\n    b: 12\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 117, "output_tokens": 54, "total_tokens": 171, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dcde9537-b11e-4785-a613-fc71461c3121", "event_id": "dcde9537-b11e-4785-a613-fc71461c3121", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2070, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_11", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4e658db6-7290-4234-998b-9584c332f884", "event_id": "4bdb4d08-918f-43a4-bee1-754d2a6eb468", "parent_event_id": "4e658db6-7290-4234-998b-9584c332f884", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2084, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_9", "variant_name": null}, {"function_name": "Fn_parallel_function_9", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_9\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"area\":\"New York City, NY\",\"type\":\"city\",\"meta\":\"Value\",\"year\":2000},{\"area\":\"Los Angeles, CA\",\"type\":\"city\",\"meta\":\"Value\",\"year\":2000},{\"area\":\"Alaska\",\"type\":\"state\",\"meta\":\"Value\",\"year\":2000},{\"area\":\"USA\",\"type\":\"country\",\"meta\":\"Value\",\"year\":2000}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_9_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Fetch population data from US Census database.\n    function_name: 'database_us_census.get_population' or null,\n    // Name of the city, state, or country.\n    area: string,\n    // Specify whether the area is city/state/country.\n    type: string,\n    // Year of the data (default: 2000)\n    year: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Fetch the population of New York City, NY,  and Los Angeles, CA from US Census Database, and also get the population data for Alaska state and USA"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'database_us_census.get_population',\n    area: 'New York City, NY',\n    type: 'city',\n    year: 2000\n  },\n  {\n    function_name: 'database_us_census.get_population',\n    area: 'Los Angeles, CA',\n    type: 'city',\n    year: 2000\n  },\n  {\n    function_name: 'database_us_census.get_population',\n    area: 'Alaska',\n    type: 'state',\n    year: 2000\n  },\n  {\n    function_name: 'database_us_census.get_population',\n    area: 'USA',\n    type: 'country',\n    year: 2000\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 135, "output_tokens": 150, "total_tokens": 285, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4e658db6-7290-4234-998b-9584c332f884", "event_id": "4e658db6-7290-4234-998b-9584c332f884", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2084, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_9", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "36d922f5-d917-4e92-9653-c1309fbf6219", "event_id": "62c33ad4-0a10-4c98-b95c-3225b3a7f72f", "parent_event_id": "36d922f5-d917-4e92-9653-c1309fbf6219", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1296, "start_time": "2024-06-20T05:24:39.857Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_13", "variant_name": null}, {"function_name": "Fn_parallel_function_13", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_13\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"criterion\":\"gini\",\"max_depth\":5,\"random_state\":1,\"meta\":\"Value\"},{\"criterion\":\"entropy\",\"max_depth\":10,\"random_state\":1,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_13_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Build a Decision Tree Classifier model with provided criteria\n    function_name: 'model.DecisionTreeClassifier' or null,\n    // The function to measure the quality of a split, either 'gini' for the Gini impurity or 'entropy' for the information gain.\n    criterion: string,\n    // The maximum depth of the tree, specifying how deep the tree can be.\n    max_depth: int,\n    // Controls the randomness of the estimator\n    random_state: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Build a decision tree classifier model with gini criterion, maximum depth of 5 and random state of 1, another with entropy criterion, maximum depth of 10 and random state of 1."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        \"function_name\": \"model.DecisionTreeClassifier\",\n        \"criterion\": \"gini\",\n        \"max_depth\": 5,\n        \"random_state\": 1\n    },\n    {\n        \"function_name\": \"model.DecisionTreeClassifier\",\n        \"criterion\": \"entropy\",\n        \"max_depth\": 10,\n        \"random_state\": 1\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 165, "output_tokens": 83, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "36d922f5-d917-4e92-9653-c1309fbf6219", "event_id": "36d922f5-d917-4e92-9653-c1309fbf6219", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2456, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_13", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "54118619-f2c6-4aa5-a46d-c459e21d0d02", "event_id": "f426d369-d614-4d18-9240-94657436a9a0", "parent_event_id": "54118619-f2c6-4aa5-a46d-c459e21d0d02", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1362, "start_time": "2024-06-20T05:24:39.888Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_14", "variant_name": null}, {"function_name": "Fn_parallel_function_14", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_14\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"sample_std_dev\":10,\"sample_size\":50,\"sample_mean\":25,\"meta\":\"Value\",\"confidence_level\":0.95},{\"sample_std_dev\":10,\"sample_size\":150,\"sample_mean\":25,\"meta\":\"Value\",\"confidence_level\":0.95}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_14_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the confidence interval for a mean.\n    function_name: 'confidence_interval.calculate' or null,\n    // The standard deviation of the sample.\n    sample_std_dev: int,\n    // The size of the sample.\n    sample_size: int,\n    // The mean of the sample.\n    sample_mean: int,\n    // The level of confidence. Default is 0.9.\n    confidence_level: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you give me 95% confidence interval for a sample mean with standard deviation of 10, sample size of 50 and sample mean of 25? And can you do the same but for a sample size of 150 instead?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'confidence_interval.calculate',\n    sample_std_dev: 10,\n    sample_size: 50,\n    sample_mean: 25,\n    confidence_level: 0.95\n  },\n  {\n    function_name: 'confidence_interval.calculate',\n    sample_std_dev: 10,\n    sample_size: 150,\n    sample_mean: 25,\n    confidence_level: 0.95\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 160, "output_tokens": 90, "total_tokens": 250, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "54118619-f2c6-4aa5-a46d-c459e21d0d02", "event_id": "54118619-f2c6-4aa5-a46d-c459e21d0d02", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2554, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_14", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c9ba5eb3-c3b4-4fa0-ada1-81c99e7db6ce", "event_id": "ff730ff0-af73-458b-ab58-cc2385e7cf2a", "parent_event_id": "c9ba5eb3-c3b4-4fa0-ada1-81c99e7db6ce", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1468, "start_time": "2024-06-20T05:24:39.826Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_12", "variant_name": null}, {"function_name": "Fn_parallel_function_12", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_12\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York\",\"size\":3000,\"meta\":\"Value\"},{\"location\":\"Los Angeles\",\"size\":4000,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_12_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Predict house price using Machine Learning model given the house size and location\n    function_name: 'ml.predict_house_price' or null,\n    // Location of the house\n    location: string,\n    // Size of the house in square feet\n    size: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Predict house price for a house of size 3000 sq ft. in location New York and 4000 sq ft. in Los Angeles using Machine Learning Model."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'ml.predict_house_price',\n    location: 'New York',\n    size: 3000\n  },\n  {\n    function_name: 'ml.predict_house_price',\n    location: 'Los Angeles',\n    size: 4000\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 113, "output_tokens": 58, "total_tokens": 171, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c9ba5eb3-c3b4-4fa0-ada1-81c99e7db6ce", "event_id": "c9ba5eb3-c3b4-4fa0-ada1-81c99e7db6ce", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2598, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_12", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "14c08910-b929-4874-a6ab-1871078652aa", "event_id": "af6a26aa-bc8e-4065-aeb3-813eab66364c", "parent_event_id": "14c08910-b929-4874-a6ab-1871078652aa", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1283, "start_time": "2024-06-20T05:24:40.053Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_17", "variant_name": null}, {"function_name": "Fn_parallel_function_17", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_17\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_investment\":2000,\"gain_loss\":500,\"meta\":\"Value\"},{\"initial_investment\":5000,\"gain_loss\":-1000,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_17_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the return on investment given an initial investment and a gain or loss.\n    function_name: 'calculate_return_on_investment' or null,\n    // The initial amount of money invested.\n    initial_investment: int,\n    // The amount gained or lost. If lose, provide as negative value.\n    gain_loss: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Calculate return on investment for an initial investment of $2000 with a gain of $500. Do the same calculation for an initial investment of $5000 with a loss of $1000."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_return_on_investment',\n    initial_investment: 2000,\n    gain_loss: 500\n  },\n  {\n    function_name: 'calculate_return_on_investment',\n    initial_investment: 5000,\n    gain_loss: -1000\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 132, "output_tokens": 65, "total_tokens": 197, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "14c08910-b929-4874-a6ab-1871078652aa", "event_id": "14c08910-b929-4874-a6ab-1871078652aa", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2640, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_17", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6db1c71a-ae44-42ec-8968-54c06110a757", "event_id": "0d6b8eb4-1454-4cfa-be27-fabd7123cbf0", "parent_event_id": "6db1c71a-ae44-42ec-8968-54c06110a757", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1450, "start_time": "2024-06-20T05:24:39.950Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_16", "variant_name": null}, {"function_name": "Fn_parallel_function_16", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_16\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"short_term_gain\":15000,\"long_term_gain\":25000,\"meta\":\"Value\",\"state\":\"California\"},{\"short_term_gain\":20000,\"long_term_gain\":50000,\"meta\":\"Value\",\"state\":\"Florida\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_16_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the capital gains tax for a given gains type and amount\n    function_name: 'calculate_capital_gains_tax' or null,\n    // The short term capital gain amount.\n    short_term_gain: int,\n    // The long term capital gain amount.\n    long_term_gain: int,\n    // The state where the income is generated. (default: federal)\n    state: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What will be the capital gains tax for a short term capital gains of $15000, long term gains of $25000 in the state of California and $20000 short term, $50000 long term in Florida?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_capital_gains_tax',\n    short_term_gain: 15000,\n    long_term_gain: 25000,\n    state: 'California'\n  },\n  {\n    function_name: 'calculate_capital_gains_tax',\n    short_term_gain: 20000,\n    long_term_gain: 50000,\n    state: 'Florida'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 153, "output_tokens": 82, "total_tokens": 235, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6db1c71a-ae44-42ec-8968-54c06110a757", "event_id": "6db1c71a-ae44-42ec-8968-54c06110a757", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2704, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_16", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5dda459c-dd56-46a3-917f-7436e1728b07", "event_id": "b225642b-22fe-4436-9d6f-459bab9ee5b3", "parent_event_id": "5dda459c-dd56-46a3-917f-7436e1728b07", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1516, "start_time": "2024-06-20T05:24:39.914Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_15", "variant_name": null}, {"function_name": "Fn_parallel_function_15", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_15\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"payment_per_year\":1000,\"interest_rate\":0.05,\"years\":10,\"meta\":\"Value\"},{\"payment_per_year\":1000,\"interest_rate\":0.05,\"years\":20,\"meta\":\"Value\"},{\"payment_per_year\":1000,\"interest_rate\":0.05,\"years\":30,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_15_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the present value of a future cash flows stream.\n    function_name: 'calculate_present_value' or null,\n    // The payment received per year.\n    payment_per_year: int,\n    // The interest rate applied per period.\n    interest_rate: float,\n    // The total number of years.\n    years: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Calculate the Present Value of an investment paying $1000 per year, with an interest rate of 5%, for 10, 20 and 30 years."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_present_value',\n    payment_per_year: 1000,\n    interest_rate: 0.05,\n    years: 10\n  },\n  {\n    function_name: 'calculate_present_value',\n    payment_per_year: 1000,\n    interest_rate: 0.05,\n    years: 20\n  },\n  {\n    function_name: 'calculate_present_value',\n    payment_per_year: 1000,\n    interest_rate: 0.05,\n    years: 30\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 125, "output_tokens": 113, "total_tokens": 238, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5dda459c-dd56-46a3-917f-7436e1728b07", "event_id": "5dda459c-dd56-46a3-917f-7436e1728b07", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2734, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_15", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: years\\nExpected: any of [20]\\nActual@1: meta=<Fn_parallel_function_15_Output0_TypeName.Value: 'Value'> payment_per_year=1000 interest_rate=0.05 years=10\\nActual all: [Fn_parallel_function_15_Output0(meta=<Fn_parallel_function_15_Output0_TypeName.Value: 'Value'>, payment_per_year=1000, interest_rate=0.05, years=10), Fn_parallel_function_15_Output0(meta=<Fn_parallel_function_15_Output0_TypeName.Value: 'Value'>, payment_per_year=1000, interest_rate=0.05, years=20), Fn_parallel_function_15_Output0(meta=<Fn_parallel_function_15_Output0_TypeName.Value: 'Value'>, payment_per_year=1000, interest_rate=0.05, years=30)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "170a7960-cfe1-43af-a14e-be2a77cb6d23", "event_id": "e823310f-bfc2-4b9f-80f4-c69596e11b05", "parent_event_id": "170a7960-cfe1-43af-a14e-be2a77cb6d23", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1308, "start_time": "2024-06-20T05:24:40.337Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_18", "variant_name": null}, {"function_name": "Fn_parallel_function_18", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_18\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"symbol\":\"AAPL\",\"data_points\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"symbol\":\"GOOGL\",\"data_points\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"symbol\":\"MSFT\",\"data_points\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_18_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the most recent trading day's closing price and volume for a specified stock.\n    function_name: 'get_stock_data' or null,\n    // The stock symbol of the company.\n    symbol: string,\n    // The type of data you want to retrieve for the stock. This can include closing price, opening price, volume, etc.\n    data_points: [\n      'price' or 'volume'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Get the latest closing prices and volumes for Apple Inc., Google LLC., and Microsoft Corporation in the New York Stock Exchange"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_stock_data',\n    symbol: 'AAPL',\n    data_points: ['price', 'volume']\n  },\n  {\n    function_name: 'get_stock_data',\n    symbol: 'GOOGL',\n    data_points: ['price', 'volume']\n  },\n  {\n    function_name: 'get_stock_data',\n    symbol: 'MSFT',\n    data_points: ['price', 'volume']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 133, "output_tokens": 93, "total_tokens": 226, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "170a7960-cfe1-43af-a14e-be2a77cb6d23", "event_id": "170a7960-cfe1-43af-a14e-be2a77cb6d23", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2949, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_18", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6c3081bc-6c38-48fb-b89f-cd5948bc3eca", "event_id": "e9c77fa9-ff18-4fd2-83d4-d2462fecb518", "parent_event_id": "6c3081bc-6c38-48fb-b89f-cd5948bc3eca", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1434, "start_time": "2024-06-20T05:24:40.782Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_21", "variant_name": null}, {"function_name": "Fn_parallel_function_21", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_21\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"financial_institution\":\"HSBC\",\"loan_amount\":500000,\"annual_income\":100000,\"meta\":\"Value\"},{\"financial_institution\":\"Wells Fargo\",\"loan_amount\":700000,\"annual_income\":120000,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_21_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Check for eligibility for a loan given income and loan amount\n    function_name: 'loan_eligibility_check' or null,\n    // The name of the financial institution e.g. HSBC\n    financial_institution: string,\n    // The loan amount that is requested\n    loan_amount: int,\n    // Annual income of the applicant\n    annual_income: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you check my loan eligibility for a home loan of amount $500,000 from HSBC with annual income $100,000 and for Wells Fargo for a amount of $700,000 with annual income of $120,000?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'loan_eligibility_check',\n    financial_institution: 'HSBC',\n    loan_amount: 500000,\n    annual_income: 100000\n  },\n  {\n    function_name: 'loan_eligibility_check',\n    financial_institution: 'Wells Fargo',\n    loan_amount: 700000,\n    annual_income: 120000\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 149, "output_tokens": 83, "total_tokens": 232, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2a414a59-d4d3-46de-be93-4f5cd3a61e1e", "event_id": "8f3f0d61-8c3d-4113-ab88-71e0817743af", "parent_event_id": "2a414a59-d4d3-46de-be93-4f5cd3a61e1e", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1062, "start_time": "2024-06-20T05:24:41.154Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_22", "variant_name": null}, {"function_name": "Fn_parallel_function_22", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_22\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"crime\":\"money laundering\",\"location\":\"San Francisco\",\"year\":2019,\"meta\":\"Value\"},{\"crime\":\"money laundering\",\"location\":\"Texas\",\"year\":2018,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_22_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate individuals based on their crime conviction and location.\n    function_name: 'law_crimes.search' or null,\n    // Type of crime to search.\n    crime: string,\n    // City or state where the crime was committed.\n    location: string,\n    // The year when the crime was committed.\n    year: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Show me all individuals who were convicted for money laundering from San Francisco in 2019 and ones convicted for the same in Texas in 2018"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'law_crimes.search',\n    crime: 'money laundering',\n    location: 'San Francisco',\n    year: 2019\n  },\n  {\n    function_name: 'law_crimes.search',\n    crime: 'money laundering',\n    location: 'Texas',\n    year: 2018\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 122, "output_tokens": 71, "total_tokens": 193, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6c3081bc-6c38-48fb-b89f-cd5948bc3eca", "event_id": "6c3081bc-6c38-48fb-b89f-cd5948bc3eca", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3519, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_21", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2a414a59-d4d3-46de-be93-4f5cd3a61e1e", "event_id": "2a414a59-d4d3-46de-be93-4f5cd3a61e1e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3520, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_22", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "754e2f0d-4691-4aa2-a131-1214e334fde1", "event_id": "992708df-4e6d-46c5-a54b-1a9debc2e988", "parent_event_id": "754e2f0d-4691-4aa2-a131-1214e334fde1", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1090, "start_time": "2024-06-20T05:24:41.295Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_24", "variant_name": null}, {"function_name": "Fn_parallel_function_24", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_24\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"payor_income\":10000,\"recipient_income\":3000,\"duration\":10,\"meta\":\"Value\"},{\"payor_income\":10000,\"recipient_income\":3000,\"duration\":20,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_24_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the amount of alimony one spouse would have to pay to the other spouse in the state of California.\n    function_name: 'alimony_calculator.ca.calculate' or null,\n    // The monthly gross income of the payor spouse.\n    payor_income: int,\n    // The monthly gross income of the recipient spouse.\n    recipient_income: int,\n    // The duration of the alimony in years.\n    duration: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Please calculate the amount of alimony the payor spouse would have to pay to the recipient spouse in California for the next 10 years and 20 years if the payor spouse's monthly gross income is $10,000 and the recipient spouse's monthly gross income is $3,000."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'alimony_calculator.ca.calculate',\n    payor_income: 10000,\n    recipient_income: 3000,\n    duration: 10\n  },\n  {\n    function_name: 'alimony_calculator.ca.calculate',\n    payor_income: 10000,\n    recipient_income: 3000,\n    duration: 20\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 174, "output_tokens": 80, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "754e2f0d-4691-4aa2-a131-1214e334fde1", "event_id": "754e2f0d-4691-4aa2-a131-1214e334fde1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3689, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_24", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9d1a70df-ad76-4408-a464-601efb4c707a", "event_id": "271fd46b-f67a-44be-8e58-77ea4298a4f0", "parent_event_id": "9d1a70df-ad76-4408-a464-601efb4c707a", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1695, "start_time": "2024-06-20T05:24:40.768Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_20", "variant_name": null}, {"function_name": "Fn_parallel_function_20", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_20\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"loan_amount\":400000,\"interest_rate\":0.04,\"loan_term\":15,\"meta\":\"Value\"},{\"loan_amount\":400000,\"interest_rate\":0.04,\"loan_term\":20,\"meta\":\"Value\"},{\"loan_amount\":400000,\"interest_rate\":0.04,\"loan_term\":30,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_20_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the monthly mortgage payment for a given loan amount, interest rate, and loan term.\n    function_name: 'calculate_mortgage_payment' or null,\n    // The loan amount.\n    loan_amount: int,\n    // The annual interest rate.\n    interest_rate: float,\n    // The loan term in years.\n    loan_term: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Calculate the monthly mortgage payment for a loan amount of $400,000, with an annual interest rate of 4% and a loan term of 15, 20 and 30 years."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_mortgage_payment',\n    loan_amount: 400000,\n    interest_rate: 0.04,\n    loan_term: 15\n  },\n  {\n    function_name: 'calculate_mortgage_payment',\n    loan_amount: 400000,\n    interest_rate: 0.04,\n    loan_term: 20\n  },\n  {\n    function_name: 'calculate_mortgage_payment',\n    loan_amount: 400000,\n    interest_rate: 0.04,\n    loan_term: 30\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 136, "output_tokens": 119, "total_tokens": 255, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9d1a70df-ad76-4408-a464-601efb4c707a", "event_id": "9d1a70df-ad76-4408-a464-601efb4c707a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3766, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_20", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "bbec2c12-9476-45c9-b143-2b8590e05c83", "event_id": "015668e3-02cc-487c-81fd-fca6b5f65a03", "parent_event_id": "bbec2c12-9476-45c9-b143-2b8590e05c83", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1240, "start_time": "2024-06-20T05:24:41.402Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_26", "variant_name": null}, {"function_name": "Fn_parallel_function_26", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_26\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company_name\":\"Dara Inc\",\"year\":2019,\"meta\":\"Value\"},{\"company_name\":\"Dara Inc\",\"year\":2018,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_26_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Look up lawsuit cases against a company by year.\n    function_name: 'lawsuit.lookup' or null,\n    // The name of the company.\n    company_name: string,\n    // The year in which the lawsuit was filed.\n    year: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: List all cases against a company named 'Dara Inc' filed in 2019, Also list cases filed in the year 2018 against the same company."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'lawsuit.lookup',\n    company_name: 'Dara Inc',\n    year: 2019\n  },\n  {\n    function_name: 'lawsuit.lookup',\n    company_name: 'Dara Inc',\n    year: 2018\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 111, "output_tokens": 60, "total_tokens": 171, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "bbec2c12-9476-45c9-b143-2b8590e05c83", "event_id": "bbec2c12-9476-45c9-b143-2b8590e05c83", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3946, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_26", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "abfe634d-8ddd-4c25-b5b3-55a68f1f7326", "event_id": "73189232-64e1-4ded-9365-043c785aa5b3", "parent_event_id": "abfe634d-8ddd-4c25-b5b3-55a68f1f7326", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1996, "start_time": "2024-06-20T05:24:40.745Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_19", "variant_name": null}, {"function_name": "Fn_parallel_function_19", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_19\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"present_value\":1000,\"annual_interest_rate\":0.05,\"number_of_years\":1,\"meta\":\"Value\"},{\"present_value\":1000,\"annual_interest_rate\":0.05,\"number_of_years\":5,\"meta\":\"Value\"},{\"present_value\":1000,\"annual_interest_rate\":0.05,\"number_of_years\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_19_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the future value of an investment based on a constant interest rate.\n    function_name: 'financials.calculate_future_value' or null,\n    // The present value or initial amount of the investment.\n    present_value: int,\n    // The annual interest rate as a decimal.\n    annual_interest_rate: float,\n    // The number of years the money is invested for.\n    number_of_years: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Calculate the Future Value of an investment of $1000 with an annual interest rate of 5% for 1,5 and 10 years."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'financials.calculate_future_value',\n    present_value: 1000,\n    annual_interest_rate: 0.05,\n    number_of_years: 1\n  },\n  {\n    function_name: 'financials.calculate_future_value',\n    present_value: 1000,\n    annual_interest_rate: 0.05,\n    number_of_years: 5\n  },\n  {\n    function_name: 'financials.calculate_future_value',\n    present_value: 1000,\n    annual_interest_rate: 0.05,\n    number_of_years: 10\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 138, "output_tokens": 125, "total_tokens": 263, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "abfe634d-8ddd-4c25-b5b3-55a68f1f7326", "event_id": "abfe634d-8ddd-4c25-b5b3-55a68f1f7326", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4045, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_19", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1c355baa-b360-4f7f-9383-5a6627e2988e", "event_id": "cbb5bcae-f7e3-4702-bf72-ffeb4d3deb99", "parent_event_id": "1c355baa-b360-4f7f-9383-5a6627e2988e", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1451, "start_time": "2024-06-20T05:24:41.338Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_25", "variant_name": null}, {"function_name": "Fn_parallel_function_25", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_25\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"case_number\":\"28473\",\"meta\":\"Value\",\"include_history\":true,\"include_litigants\":true},{\"case_number\":\"64725\",\"meta\":\"Value\",\"include_history\":true,\"include_litigants\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_25_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Fetches detailed information on a specific case including its history and the litigants involved.\n    function_name: 'law_case.get_details' or null,\n    // The unique number identifying the case.\n    case_number: string,\n    // Flag indicating if case history should be included. Default is false.\n    include_history: bool or null,\n    // Flag indicating if litigant details should be included. Default is false.\n    include_litigants: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you find me case law details of Case No 28473 and 64725, their history and details of litigants?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'law_case.get_details',\n    case_number: '28473',\n    include_history: true,\n    include_litigants: true,\n  },\n  {\n    function_name: 'law_case.get_details',\n    case_number: '64725',\n    include_history: true,\n    include_litigants: true,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 149, "output_tokens": 74, "total_tokens": 223, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1c355baa-b360-4f7f-9383-5a6627e2988e", "event_id": "1c355baa-b360-4f7f-9383-5a6627e2988e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4092, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_25", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4af3b232-950f-42dd-8fbb-449ef11f3e6b", "event_id": "e17202a3-66d4-426d-91a3-32f569a5cd94", "parent_event_id": "4af3b232-950f-42dd-8fbb-449ef11f3e6b", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1309, "start_time": "2024-06-20T05:24:41.646Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_28", "variant_name": null}, {"function_name": "Fn_parallel_function_28", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_28\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Berkeley\",\"amenities\":[\"Value0\",\"Value1\"],\"proximity\":10,\"meta\":\"Value\"},{\"location\":\"Tokyo\",\"amenities\":[\"Value2\",\"Value3\"],\"proximity\":5,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_28_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate nearby nature reserves based on specific criteria such as amenities and proximity.\n    function_name: 'nature_reserve.find_nearby' or null,\n    // The city where you want to locate a nature reserve.\n    location: string,\n    // Preferred amenities in the nature reserve.\n    amenities: [\n      'Picnic Tables' or 'Public Restrooms' or 'Playgrounds' or 'Biking Trails' or 'Hiking Trails' or 'Camping Grounds'\n    ],\n    // The radius within which to look for nature reserves in kilometers.\n    proximity: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find a nature reserve around Berkeley within 10 kilometers that has picnic tables and public restrooms, as well as one around Tokyo within 5 kilometers that has playgrounds and biking trails."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'nature_reserve.find_nearby',\n    location: 'Berkeley',\n    amenities: ['Picnic Tables', 'Public Restrooms'],\n    proximity: 10\n  },\n  {\n    function_name: 'nature_reserve.find_nearby',\n    location: 'Tokyo',\n    amenities: ['Playgrounds', 'Biking Trails'],\n    proximity: 5\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 179, "output_tokens": 83, "total_tokens": 262, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4af3b232-950f-42dd-8fbb-449ef11f3e6b", "event_id": "4af3b232-950f-42dd-8fbb-449ef11f3e6b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4259, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_28", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a971bc2a-acb3-4f66-8843-f6878c8c0961", "event_id": "65b71728-7340-40dc-81cf-6959970016ce", "parent_event_id": "a971bc2a-acb3-4f66-8843-f6878c8c0961", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1539, "start_time": "2024-06-20T05:24:41.432Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_27", "variant_name": null}, {"function_name": "Fn_parallel_function_27", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_27\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York District Court\",\"case_number\":[\"67813\",\"71249\"],\"meta\":\"Value\",\"case_type\":\"Value0\"},{\"location\":\"New York District Court\",\"case_number\":[\"67813\",\"71249\"],\"meta\":\"Value\",\"case_type\":\"Value1\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_27_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate details of court cases based on specific parameters like case number and case type.\n    function_name: 'court_case.find' or null,\n    // The city and court where the lawsuit is filed.\n    location: string,\n    // The unique case numbers of the lawsuits.\n    case_number: string[],\n    // Type of the court case. (default: Civil)\n    case_type: 'Civil' or 'Criminal' or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find details of lawsuits with case numbers '67813', '71249' filed in the New York District court for type 'Civil' and 'Criminal' cases."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'court_case.find',\n    location: 'New York District Court',\n    case_number: ['67813', '71249'],\n    case_type: 'Civil'\n  },\n  {\n    function_name: 'court_case.find',\n    location: 'New York District Court',\n    case_number: ['67813', '71249'],\n    case_type: 'Criminal'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 149, "output_tokens": 85, "total_tokens": 234, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a971bc2a-acb3-4f66-8843-f6878c8c0961", "event_id": "a971bc2a-acb3-4f66-8843-f6878c8c0961", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4275, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_27", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: location\\nExpected: any of ['New York District', 'NY District', 'New York', 'New York, NY', 'NY']\\nActual@1: meta=<Fn_parallel_function_27_Output0_TypeName.Value: 'Value'> location='New York District Court' case_number=['67813', '71249'] case_type=<Enum_Fn_parallel_function_27_Enum0.Value0: 'Value0'>\\nActual all: [Fn_parallel_function_27_Output0(meta=<Fn_parallel_function_27_Output0_TypeName.Value: 'Value'>, location='New York District Court', case_number=['67813', '71249'], case_type=<Enum_Fn_parallel_function_27_Enum0.Value0: 'Value0'>), Fn_parallel_function_27_Output0(meta=<Fn_parallel_function_27_Output0_TypeName.Value: 'Value'>, location='New York District Court', case_number=['67813', '71249'], case_type=<Enum_Fn_parallel_function_27_Enum0.Value1: 'Value1'>)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7f2c11f7-69d4-44f0-bbd2-cf7c4cf62fd3", "event_id": "c34a3c39-5f0d-449d-85f2-12b03cdb18b4", "parent_event_id": "7f2c11f7-69d4-44f0-bbd2-cf7c4cf62fd3", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1190, "start_time": "2024-06-20T05:24:42.217Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_29", "variant_name": null}, {"function_name": "Fn_parallel_function_29", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_29\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Seattle\",\"hours\":3,\"meta\":\"Value\"},{\"location\":\"Los Angeles\",\"hours\":3,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_29_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Provides the current temperature and forecasts the temperature for the next few hours at a particular location.\n    function_name: 'get_current_and_future_temperature' or null,\n    // The city that you want to get the temperature for.\n    location: string,\n    // Number of hours for the temperature forecast.\n    hours: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the temperature right now and for the next three hours in Seattle and Los Angeles?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_current_and_future_temperature',\n    location: 'Seattle',\n    hours: 3,\n  },\n  {\n    function_name: 'get_current_and_future_temperature',\n    location: 'Los Angeles',\n    hours: 3,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 109, "output_tokens": 57, "total_tokens": 166, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7f2c11f7-69d4-44f0-bbd2-cf7c4cf62fd3", "event_id": "7f2c11f7-69d4-44f0-bbd2-cf7c4cf62fd3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4710, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_29", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f62f2c49-6660-44d8-af86-11ba9aaf9fb3", "event_id": "87c2a08f-4472-4b92-b56d-ea8c5f2106ed", "parent_event_id": "f62f2c49-6660-44d8-af86-11ba9aaf9fb3", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2250, "start_time": "2024-06-20T05:24:41.251Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_23", "variant_name": null}, {"function_name": "Fn_parallel_function_23", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_23\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"case_number\":\"XY1234\",\"court\":\"Los Angeles County Court\",\"meta\":\"Value\",\"details\":\"Value0\"},{\"case_number\":\"GH5678\",\"court\":\"Orange County Court\",\"meta\":\"Value\",\"details\":\"Value0\"},{\"case_number\":\"XY1234\",\"court\":\"Los Angeles County Court\",\"meta\":\"Value\",\"details\":\"Value1\"},{\"case_number\":\"GH5678\",\"court\":\"Orange County Court\",\"meta\":\"Value\",\"details\":\"Value1\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_23_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieves the status and trial dates for court cases from specified county courts.\n    function_name: 'court_info.get_case_status' or null,\n    // The specific court case number.\n    case_number: string,\n    // The county court where the case is filed.\n    court: string,\n    // Specific details required about the court case. Defaults to 'status'.\n    details: 'status' or 'trial_date' or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the status and scheduled trial date for case number XY1234 in Los Angeles County Court, and case number GH5678 in Orange County Court?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'court_info.get_case_status',\n    case_number: 'XY1234',\n    court: 'Los Angeles County Court',\n    details: 'status'\n  },\n  {\n    function_name: 'court_info.get_case_status',\n    case_number: 'GH5678',\n    court: 'Orange County Court',\n    details: 'status'\n  },\n  {\n    function_name: 'court_info.get_case_status',\n    case_number: 'XY1234',\n    court: 'Los Angeles County Court',\n    details: 'trial_date'\n  },\n  {\n    function_name: 'court_info.get_case_status',\n    case_number: 'GH5678',\n    court: 'Orange County Court',\n    details: 'trial_date'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 144, "output_tokens": 158, "total_tokens": 302, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f62f2c49-6660-44d8-af86-11ba9aaf9fb3", "event_id": "f62f2c49-6660-44d8-af86-11ba9aaf9fb3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4804, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_23", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9816c543-c22a-41a5-aa01-a65f7f731878", "event_id": "6ba691c7-2d2d-4a2f-aaf6-5a5e8562aae0", "parent_event_id": "9816c543-c22a-41a5-aa01-a65f7f731878", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1395, "start_time": "2024-06-20T05:24:42.218Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_31", "variant_name": null}, {"function_name": "Fn_parallel_function_31", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_31\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"departure_city\":\"San Francisco\",\"destination_city\":\"Tokyo\",\"date\":\"May 3rd 2022\",\"meta\":\"Value\"},{\"departure_city\":\"Tokyo\",\"destination_city\":\"Sydney\",\"date\":\"May 18th 2022\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_31_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Book a flight from a departure city to a destination city on a specific date.\n    function_name: 'book_flight' or null,\n    // The city from which the flight will depart.\n    departure_city: string,\n    // The city to which the flight is going.\n    destination_city: string,\n    // The date of the flight.\n    date: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Book a flight from San Francisco to Tokyo on May 3rd 2022 and another flight from Tokyo to Sydney on May 18th 2022."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'book_flight',\n    departure_city: 'San Francisco',\n    destination_city: 'Tokyo',\n    date: 'May 3rd 2022',\n  },\n  {\n    function_name: 'book_flight',\n    departure_city: 'Tokyo',\n    destination_city: 'Sydney',\n    date: 'May 18th 2022',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 132, "output_tokens": 82, "total_tokens": 214, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9816c543-c22a-41a5-aa01-a65f7f731878", "event_id": "9816c543-c22a-41a5-aa01-a65f7f731878", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4916, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_31", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6cc0515d-bd74-4ed7-8a19-7e8d77464d33", "event_id": "593891dd-b528-4d08-9de7-c3a5292b612b", "parent_event_id": "6cc0515d-bd74-4ed7-8a19-7e8d77464d33", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1243, "start_time": "2024-06-20T05:24:42.387Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_32", "variant_name": null}, {"function_name": "Fn_parallel_function_32", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_32\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"event\":\"Treaty of Paris\",\"meta\":\"Value\",\"depth\":\"detailed\",\"year\":1783},{\"event\":\"Magna Carta\",\"meta\":\"Value\",\"depth\":\"detailed\",\"year\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_32_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve facts about historical events or documents\n    function_name: 'history_fact.fetch' or null,\n    // The historical event or document you want to know about.\n    event: string,\n    // The depth of information required. Choices are 'brief' or 'detailed'. (default: detailed)\n    depth: string or null,\n    // The year of the event/document. default is 0\n    year: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What was the Treaty of Paris about? Also, what was the importance of Magna Carta in history?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'history_fact.fetch',\n        event: 'Treaty of Paris',\n        depth: 'detailed',\n        year: 1783\n    },\n    {\n        function_name: 'history_fact.fetch',\n        event: 'Magna Carta',\n        depth: 'detailed'\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 137, "output_tokens": 68, "total_tokens": 205, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6cc0515d-bd74-4ed7-8a19-7e8d77464d33", "event_id": "6cc0515d-bd74-4ed7-8a19-7e8d77464d33", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4933, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_32", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: year\\nExpected: any of ['', 0, None, []]\\nActual@1: meta=<Fn_parallel_function_32_Output0_TypeName.Value: 'Value'> event='Treaty of Paris' depth='detailed' year=1783\\nActual all: [Fn_parallel_function_32_Output0(meta=<Fn_parallel_function_32_Output0_TypeName.Value: 'Value'>, event='Treaty of Paris', depth='detailed', year=1783), Fn_parallel_function_32_Output0(meta=<Fn_parallel_function_32_Output0_TypeName.Value: 'Value'>, event='Magna Carta', depth='detailed', year=None)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "80a9dc02-5cf9-4faf-8465-653f54e2888e", "event_id": "40640383-cb7d-48cc-b7ac-9d66e61b3146", "parent_event_id": "80a9dc02-5cf9-4faf-8465-653f54e2888e", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1404, "start_time": "2024-06-20T05:24:42.464Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_33", "variant_name": null}, {"function_name": "Fn_parallel_function_33", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_33\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"president_name\":\"Abraham Lincoln\",\"meta\":\"Value\",\"start_year\":null,\"end_year\":null},{\"president_name\":\"George Washington\",\"meta\":\"Value\",\"start_year\":null,\"end_year\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_33_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the major events during the presidency of a specified US president.\n    function_name: 'us_history.events_by_presidency' or null,\n    // The name of the US president.\n    president_name: string,\n    // The start year of their presidency (optional).\n    start_year: int or null,\n    // The end year of their presidency (optional). (default: 2000)\n    end_year: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Provide me the major events during the presidency of Abraham Lincoln and George Washington."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"us_history.events_by_presidency\",\n    \"president_name\": \"Abraham Lincoln\"\n  },\n  {\n    \"function_name\": \"us_history.events_by_presidency\",\n    \"president_name\": \"George Washington\"\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 129, "output_tokens": 57, "total_tokens": 186, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "80a9dc02-5cf9-4faf-8465-653f54e2888e", "event_id": "80a9dc02-5cf9-4faf-8465-653f54e2888e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 5172, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_33", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b068ba0c-82c2-440e-b287-725239c35556", "event_id": "02deacf1-1e3a-48fc-b70f-6caa3f93d0e7", "parent_event_id": "b068ba0c-82c2-440e-b287-725239c35556", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1142, "start_time": "2024-06-20T05:24:42.790Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_36", "variant_name": null}, {"function_name": "Fn_parallel_function_36", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_36\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"empire_name\":\"Persian Empire\",\"meta\":\"Value\",\"include_influences\":true},{\"empire_name\":\"Mauryan Empire\",\"meta\":\"Value\",\"include_influences\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_36_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve information about religious history and influences of an ancient empire.\n    function_name: 'ancient_empires.get_religion_info' or null,\n    // The name of the ancient empire.\n    empire_name: string,\n    // Specify whether to include details about the religious influences of the empire.\n    include_influences: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Fetch the details of the ancient empires Persian Empire and Mauryan Empire with their religious history and influences."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'ancient_empires.get_religion_info',\n    empire_name: 'Persian Empire',\n    include_influences: true\n  },\n  {\n    function_name: 'ancient_empires.get_religion_info',\n    empire_name: 'Mauryan Empire',\n    include_influences: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 118, "output_tokens": 75, "total_tokens": 193, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b068ba0c-82c2-440e-b287-725239c35556", "event_id": "b068ba0c-82c2-440e-b287-725239c35556", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 5235, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_36", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: empire_name\\nExpected: any of ['Mauryan Empire']\\nActual@1: meta=<Fn_parallel_function_36_Output0_TypeName.Value: 'Value'> empire_name='Persian Empire' include_influences=True\\nActual all: [Fn_parallel_function_36_Output0(meta=<Fn_parallel_function_36_Output0_TypeName.Value: 'Value'>, empire_name='Persian Empire', include_influences=True), Fn_parallel_function_36_Output0(meta=<Fn_parallel_function_36_Output0_TypeName.Value: 'Value'>, empire_name='Mauryan Empire', include_influences=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d4bd22b4-1c9e-4ae9-b87c-e7faac518979", "event_id": "b57f72a1-e73a-4f8a-8f94-dea6c1bb58bb", "parent_event_id": "d4bd22b4-1c9e-4ae9-b87c-e7faac518979", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1053, "start_time": "2024-06-20T05:24:42.956Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_37", "variant_name": null}, {"function_name": "Fn_parallel_function_37", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_37\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"paint_type\":\"Watercolor\",\"color\":\"Magenta\",\"meta\":\"Value\"},{\"paint_type\":\"Acrylic\",\"color\":\"Navy\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_37_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Gives a combination of primary colors to mix for creating a certain color. This function requires type of paint and color.\n    function_name: 'paint_color_mixture' or null,\n    // The type of paint (Watercolor, Oil, Acrylic).\n    paint_type: string,\n    // The color to be produced from the mixture.\n    color: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Using watercolor, what combination of colors should I mix to get the color magenta and what quantity for each color? Also, I want to know how to get color navy by using acrylic paint and their respective quantities."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'paint_color_mixture',\n    paint_type: 'Watercolor',\n    color: 'Magenta',\n  },\n  {\n    function_name: 'paint_color_mixture',\n    paint_type: 'Acrylic',\n    color: 'Navy',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 143, "output_tokens": 60, "total_tokens": 203, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d4bd22b4-1c9e-4ae9-b87c-e7faac518979", "event_id": "d4bd22b4-1c9e-4ae9-b87c-e7faac518979", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 5313, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_37", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cd829b86-4239-4af0-a826-7bb96989794e", "event_id": "66b3bea5-9de7-46fb-93c8-4df7b3d0d4e4", "parent_event_id": "cd829b86-4239-4af0-a826-7bb96989794e", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1685, "start_time": "2024-06-20T05:24:42.644Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_34", "variant_name": null}, {"function_name": "Fn_parallel_function_34", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_34\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"year\":1980,\"position\":\"president\",\"meta\":\"Value\"},{\"year\":2016,\"position\":\"president\",\"meta\":\"Value\"},{\"year\":1975,\"position\":\"vice president\",\"meta\":\"Value\"},{\"year\":2011,\"position\":\"vice president\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_34_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Get the President and Vice President of United States for a specified year.\n    function_name: 'get_president_and_vp' or null,\n    // The year for which president or vice president information is needed.\n    year: int,\n    // The position: either 'president' or 'vice president'.\n    position: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find out who was the president of United States in 1980 and 2016, and the vice president in 1975 and 2011."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_president_and_vp',\n    year: 1980,\n    position: 'president'\n  },\n  {\n    function_name: 'get_president_and_vp',\n    year: 2016,\n    position: 'president'\n  },\n  {\n    function_name: 'get_president_and_vp',\n    year: 1975,\n    position: 'vice president'\n  },\n  {\n    function_name: 'get_president_and_vp',\n    year: 2011,\n    position: 'vice president'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 124, "output_tokens": 118, "total_tokens": 242, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0e88e4db-7b66-4b05-9c8a-6f1ca81bdcff", "event_id": "b3896314-cd0a-4659-abc9-b9175462dbad", "parent_event_id": "0e88e4db-7b66-4b05-9c8a-6f1ca81bdcff", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1586, "start_time": "2024-06-20T05:24:42.743Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_35", "variant_name": null}, {"function_name": "Fn_parallel_function_35", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_35\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"region\":\"Egypt\",\"religion\":\"Christianity\",\"start_year\":100,\"end_year\":1500,\"meta\":\"Value\"},{\"region\":\"Turkey\",\"religion\":\"Christianity\",\"start_year\":100,\"end_year\":1500,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_35_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Track the historical development of a specific religion in a specific area within a specific time frame.\n    function_name: 'religion_history.track' or null,\n    // The geographical area where the religion's history is to be tracked.\n    region: string,\n    // The name of the religion.\n    religion: string,\n    // The beginning year of the time frame.\n    start_year: int,\n    // The ending year of the time frame.\n    end_year: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: I want to know the rise and fall of Christianity in Egypt and Turkey from 100 A.D to 1500 A.D."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'religion_history.track',\n    region: 'Egypt',\n    religion: 'Christianity',\n    start_year: 100,\n    end_year: 1500,\n  },\n  {\n    function_name: 'religion_history.track',\n    region: 'Turkey',\n    religion: 'Christianity',\n    start_year: 100,\n    end_year: 1500,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 148, "output_tokens": 86, "total_tokens": 234, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cd829b86-4239-4af0-a826-7bb96989794e", "event_id": "cd829b86-4239-4af0-a826-7bb96989794e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 5632, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_34", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0e88e4db-7b66-4b05-9c8a-6f1ca81bdcff", "event_id": "0e88e4db-7b66-4b05-9c8a-6f1ca81bdcff", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 5632, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_35", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "07fd3599-b55d-4332-93d6-b6a60c1d35a2", "event_id": "81946080-6d7f-4f1e-824a-ce0eba3dee43", "parent_event_id": "07fd3599-b55d-4332-93d6-b6a60c1d35a2", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1561, "start_time": "2024-06-20T05:24:42.973Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_38", "variant_name": null}, {"function_name": "Fn_parallel_function_38", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_38\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"color_name\":\"navy\",\"conversion_type\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"color_name\":\"purple\",\"conversion_type\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"color_name\":\"maroon\",\"conversion_type\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_38_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve RGB values and hexadecimal codes of a specific color.\n    function_name: 'color_converter.get_color_info' or null,\n    // The name of the color.\n    color_name: string,\n    // The conversion type for the color.\n    conversion_type: 'RGB' or 'HEX'[],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the RGB and HEX color values for navy, purple and maroon?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'color_converter.get_color_info',\n    color_name: 'navy',\n    conversion_type: ['RGB', 'HEX'],\n  },\n  {\n    function_name: 'color_converter.get_color_info',\n    color_name: 'purple',\n    conversion_type: ['RGB', 'HEX'],\n  },\n  {\n    function_name: 'color_converter.get_color_info',\n    color_name: 'maroon',\n    conversion_type: ['RGB', 'HEX'],\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 103, "output_tokens": 103, "total_tokens": 206, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "07fd3599-b55d-4332-93d6-b6a60c1d35a2", "event_id": "07fd3599-b55d-4332-93d6-b6a60c1d35a2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 5836, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_38", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "208c37bf-90fb-45bc-a156-b6a2c283de42", "event_id": "236ae68b-7608-4c20-9e63-96d0e1c3e72c", "parent_event_id": "208c37bf-90fb-45bc-a156-b6a2c283de42", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1138, "start_time": "2024-06-20T05:24:43.408Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_39", "variant_name": null}, {"function_name": "Fn_parallel_function_39", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_39\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_loc\":\"New York\",\"end_loc\":\"Washington DC\",\"meta\":\"Value\",\"shortest_route\":false},{\"start_loc\":\"Los Angeles\",\"end_loc\":\"San Francisco\",\"meta\":\"Value\",\"shortest_route\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_39_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the driving distance between two locations.\n    function_name: 'calc_distance' or null,\n    // Starting location.\n    start_loc: string,\n    // Ending location.\n    end_loc: string,\n    // If true, returns the shortest driving route. (default: false)\n    shortest_route: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What's the driving distance between New York and Washington DC, and between Los Angeles and San Francisco with optional parameter shortest route enabled?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calc_distance',\n    start_loc: 'New York',\n    end_loc: 'Washington DC',\n    shortest_route: false\n  },\n  {\n    function_name: 'calc_distance',\n    start_loc: 'Los Angeles',\n    end_loc: 'San Francisco',\n    shortest_route: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 117, "output_tokens": 70, "total_tokens": 187, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "208c37bf-90fb-45bc-a156-b6a2c283de42", "event_id": "208c37bf-90fb-45bc-a156-b6a2c283de42", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 5850, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_39", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: shortest_route\\nExpected: any of [True]\\nActual@1: meta=<Fn_parallel_function_39_Output0_TypeName.Value: 'Value'> start_loc='New York' end_loc='Washington DC' shortest_route=False\\nActual all: [Fn_parallel_function_39_Output0(meta=<Fn_parallel_function_39_Output0_TypeName.Value: 'Value'>, start_loc='New York', end_loc='Washington DC', shortest_route=False), Fn_parallel_function_39_Output0(meta=<Fn_parallel_function_39_Output0_TypeName.Value: 'Value'>, start_loc='Los Angeles', end_loc='San Francisco', shortest_route=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "096cb78f-c883-485a-a94d-539d12acb697", "event_id": "a70ff842-371f-44f1-a96a-3debc178a1ad", "parent_event_id": "096cb78f-c883-485a-a94d-539d12acb697", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1202, "start_time": "2024-06-20T05:24:43.502Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_40", "variant_name": null}, {"function_name": "Fn_parallel_function_40", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_40\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Washington D.C.\",\"details\":[\"Value0\",\"Value1\",\"Value2\"],\"meta\":\"Value\"},{\"location\":\"Paris\",\"details\":[\"Value0\",\"Value1\",\"Value2\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_40_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve specific details about museums, such as opening hours and ticket prices.\n    function_name: 'museum_info.get_info' or null,\n    // City where the museum is located.\n    location: string,\n    // List of details to retrieve about the museum.\n    details: [\n      'Opening hours' or 'Adult tickets' or 'Child tickets'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find opening hours and ticket prices for adults and children for the National Museum in Washington D.C. and the Louvre Museum in Paris."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'museum_info.get_info',\n    location: 'Washington D.C.',\n    details: [\n      'Opening hours',\n      'Adult tickets',\n      'Child tickets'\n    ]\n  },\n  {\n    function_name: 'museum_info.get_info',\n    location: 'Paris',\n    details: [\n      'Opening hours',\n      'Adult tickets',\n      'Child tickets'\n    ]\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 127, "output_tokens": 88, "total_tokens": 215, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "096cb78f-c883-485a-a94d-539d12acb697", "event_id": "096cb78f-c883-485a-a94d-539d12acb697", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 6007, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_40", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c0bbbcf5-3a0d-4a66-aae1-2cc9624b9055", "event_id": "3cc222e2-e593-438d-a84f-8f04e19805e9", "parent_event_id": "c0bbbcf5-3a0d-4a66-aae1-2cc9624b9055", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1363, "start_time": "2024-06-20T05:24:43.631Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_42", "variant_name": null}, {"function_name": "Fn_parallel_function_42", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_42\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"San Francisco, CA\",\"instruments\":[\"Yamaha acoustic guitar\",\"Kawai piano\"],\"meta\":\"Value\"},{\"location\":\"Chicago, IL\",\"instruments\":[\"Yamaha acoustic guitar\",\"Kawai piano\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_42_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate nearby music instrument stores that sell specific brands or instruments\n    function_name: 'find_music_instrument_store' or null,\n    // The city and state e.g. San Francisco, CA.\n    location: string,\n    // A list of specific instruments or brands you are looking for.\n    instruments: string[],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Show me the closest music shop where I can purchase a Yamaha acoustic guitar and a Kawai piano in San Francisco, California, and Chicago, Illinois."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'find_music_instrument_store',\n    location: 'San Francisco, CA',\n    instruments: ['Yamaha acoustic guitar', 'Kawai piano']\n  },\n  {\n    function_name: 'find_music_instrument_store',\n    location: 'Chicago, IL',\n    instruments: ['Yamaha acoustic guitar', 'Kawai piano']\n  }\n]  ", "metadata": {"logprobs": null, "prompt_tokens": 120, "output_tokens": 78, "total_tokens": 198, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c0bbbcf5-3a0d-4a66-aae1-2cc9624b9055", "event_id": "c0bbbcf5-3a0d-4a66-aae1-2cc9624b9055", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 6297, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_42", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "de1ec1dc-72ee-45d2-8deb-272e6540041f", "event_id": "4ef94eba-0f22-4800-9bfc-f088173aa0bf", "parent_event_id": "de1ec1dc-72ee-45d2-8deb-272e6540041f", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1127, "start_time": "2024-06-20T05:24:43.869Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_43", "variant_name": null}, {"function_name": "Fn_parallel_function_43", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_43\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"instrument\":\"Yamaha P125 piano\",\"city\":\"Berlin\",\"meta\":\"Value\"},{\"instrument\":\"Yamaha P125 piano\",\"city\":\"Madrid\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_43_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Get the price and availability of a specified instrument in a music store located in a specified city\n    function_name: 'check_instrument_availability' or null,\n    // The name of the musical instrument.\n    instrument: string,\n    // City where the store is located.\n    city: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Get me the price and stock availability for a Yamaha P125 piano in Berlin and Madrid's music stores."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'check_instrument_availability',\n    instrument: 'Yamaha P125 piano',\n    city: 'Berlin'\n  },\n  {\n    function_name: 'check_instrument_availability',\n    instrument: 'Yamaha P125 piano',\n    city: 'Madrid'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 108, "output_tokens": 65, "total_tokens": 173, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "de1ec1dc-72ee-45d2-8deb-272e6540041f", "event_id": "de1ec1dc-72ee-45d2-8deb-272e6540041f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 6300, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_43", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d85fb66c-e292-48a5-83fb-2112b0f09618", "event_id": "317ebd37-b04a-4356-af57-7312c962c2c2", "parent_event_id": "d85fb66c-e292-48a5-83fb-2112b0f09618", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1134, "start_time": "2024-06-20T05:24:44.011Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_45", "variant_name": null}, {"function_name": "Fn_parallel_function_45", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_45\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Berlin\",\"date\":\"next Friday\",\"genre\":\"Classical\",\"amenities\":[\"Value0\"],\"meta\":\"Value\"},{\"location\":\"Paris\",\"date\":\"next Friday\",\"genre\":\"Classical\",\"amenities\":[\"Value0\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_45_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate nearby concerts based on specific criteria like genre and availability of parking.\n    function_name: 'concert.find_nearby' or null,\n    // The city where the user wants to find a concert.\n    location: string,\n    // The date on which the user wants to attend a concert.\n    date: string,\n    // The genre of music of the concert.\n    genre: string,\n    // Amenities preferred at the concert. (default: ['Parking'])\n    amenities: [\n      'Parking' or 'Food and Beverages' or 'VIP Seating' or 'Disability Access'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find me all the classical concerts near Berlin and Paris happening next Friday, and I am interested only in those with available parking."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'concert.find_nearby',\n    location: 'Berlin',\n    date: 'next Friday',\n    genre: 'Classical',\n    amenities: ['Parking']\n  },\n  {\n    function_name: 'concert.find_nearby',\n    location: 'Paris',\n    date: 'next Friday',\n    genre: 'Classical',\n    amenities: ['Parking']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 174, "output_tokens": 82, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d85fb66c-e292-48a5-83fb-2112b0f09618", "event_id": "d85fb66c-e292-48a5-83fb-2112b0f09618", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 6449, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_45", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "526dafdd-3488-4292-beb4-e0f6a616095e", "event_id": "2306db45-6193-4412-a4e7-6a1ce0075d08", "parent_event_id": "526dafdd-3488-4292-beb4-e0f6a616095e", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1711, "start_time": "2024-06-20T05:24:43.614Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_41", "variant_name": null}, {"function_name": "Fn_parallel_function_41", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_41\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"exhibition_name\":\"Wonder of Nature\",\"museum_name\":\"Louvre Museum\",\"visitor_type\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"exhibition_name\":\"Age of Reptiles\",\"museum_name\":\"British Museum\",\"visitor_type\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_41_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Provides details of a particular exhibition in a museum, including the cost per visit for different age groups.\n    function_name: 'museum.exhibition_detail' or null,\n    // The name of the exhibition.\n    exhibition_name: string,\n    // The name of the museum.\n    museum_name: string,\n    // Age group of the visitor. Default is: ['adult']\n    visitor_type: [\n      'child' or 'adult'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Give me the detail of the exhibition named 'Wonder of Nature' in the Louvre museum, and 'Age of Reptiles' in the British Museum. Plus their cost per visit for children and adult."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'museum.exhibition_detail',\n    exhibition_name: 'Wonder of Nature',\n    museum_name: 'Louvre Museum',\n    visitor_type: [\n      'child',\n      'adult'\n    ]\n  },\n  {\n    function_name: 'museum.exhibition_detail',\n    exhibition_name: 'Age of Reptiles',\n    museum_name: 'British Museum',\n    visitor_type: [\n      'child',\n      'adult'\n    ]\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 159, "output_tokens": 99, "total_tokens": 258, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "526dafdd-3488-4292-beb4-e0f6a616095e", "event_id": "526dafdd-3488-4292-beb4-e0f6a616095e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 6628, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_41", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: exhibition_name\\nExpected: any of ['Age of Reptiles']\\nActual@1: meta=<Fn_parallel_function_41_Output0_TypeName.Value: 'Value'> exhibition_name='Wonder of Nature' museum_name='Louvre Museum' visitor_type=[<Enum_Fn_parallel_function_41_Enum0.Value0: 'Value0'>, <Enum_Fn_parallel_function_41_Enum0.Value1: 'Value1'>]\\nActual all: [Fn_parallel_function_41_Output0(meta=<Fn_parallel_function_41_Output0_TypeName.Value: 'Value'>, exhibition_name='Wonder of Nature', museum_name='Louvre Museum', visitor_type=[<Enum_Fn_parallel_function_41_Enum0.Value0: 'Value0'>, <Enum_Fn_parallel_function_41_Enum0.Value1: 'Value1'>]), Fn_parallel_function_41_Output0(meta=<Fn_parallel_function_41_Output0_TypeName.Value: 'Value'>, exhibition_name='Age of Reptiles', museum_name='British Museum', visitor_type=[<Enum_Fn_parallel_function_41_Enum0.Value0: 'Value0'>, <Enum_Fn_parallel_function_41_Enum0.Value1: 'Value1'>])]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4ebe60a3-aed7-4cf8-9c8f-faf9d7ed1014", "event_id": "850c2837-f93b-4e12-93e4-3c150fea8a4d", "parent_event_id": "4ebe60a3-aed7-4cf8-9c8f-faf9d7ed1014", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1227, "start_time": "2024-06-20T05:24:44.330Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_46", "variant_name": null}, {"function_name": "Fn_parallel_function_46", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_46\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"genre\":\"Pop\",\"region\":\"Australia\",\"meta\":\"Value\",\"duration\":null},{\"genre\":\"Rock\",\"region\":\"Australia\",\"meta\":\"Value\",\"duration\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_46_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // This function retrieves the most played song in a particular genre from a specified region\n    function_name: 'musicCharts.getMostPlayed' or null,\n    // Music genre e.g., Rock, Pop, HipHop etc.\n    genre: string,\n    // Region where the song popularity is to be checked\n    region: string,\n    // Time duration in hours for which the music played count will be considered. default is 0\n    duration: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What's the current most played Pop song and also find me the current most played Rock song in Australia."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"musicCharts.getMostPlayed\",\n    \"genre\": \"Pop\",\n    \"region\": \"Australia\",\n    \"duration\": null\n  },\n  {\n    \"function_name\": \"musicCharts.getMostPlayed\",\n    \"genre\": \"Rock\",\n    \"region\": \"Australia\",\n    \"duration\": null\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 142, "output_tokens": 74, "total_tokens": 216, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c091ac69-4386-47f8-85cc-1dc5c3d72601", "event_id": "88a82d2c-5f1f-470c-bd73-8d3791931602", "parent_event_id": "c091ac69-4386-47f8-85cc-1dc5c3d72601", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1023, "start_time": "2024-06-20T05:24:44.534Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_48", "variant_name": null}, {"function_name": "Fn_parallel_function_48", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_48\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"team\":\"Barcelona\",\"league\":\"UEFA Champions League\",\"meta\":\"Value\"},{\"team\":\"Manchester United\",\"league\":\"La Liga\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_48_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the current ranking of a football team in a specific league.\n    function_name: 'get_team_ranking' or null,\n    // The name of the football team.\n    team: string,\n    // The league the team is competing in. E.g. UEFA Champions League, La Liga.\n    league: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the current ranking of Barcelona and Manchester United in the UEFA Champions League and La Liga respectively?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_team_ranking',\n    team: 'Barcelona',\n    league: 'UEFA Champions League'\n  },\n  {\n    function_name: 'get_team_ranking',\n    team: 'Manchester United',\n    league: 'La Liga'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 111, "output_tokens": 60, "total_tokens": 171, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4ebe60a3-aed7-4cf8-9c8f-faf9d7ed1014", "event_id": "4ebe60a3-aed7-4cf8-9c8f-faf9d7ed1014", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 6860, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_46", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c091ac69-4386-47f8-85cc-1dc5c3d72601", "event_id": "c091ac69-4386-47f8-85cc-1dc5c3d72601", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 6861, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_48", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a8b21adb-73cc-4a1f-981e-bd2168297509", "event_id": "50380a6d-c653-49c8-9975-18d1b6d984fe", "parent_event_id": "a8b21adb-73cc-4a1f-981e-bd2168297509", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1054, "start_time": "2024-06-20T05:24:44.548Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_49", "variant_name": null}, {"function_name": "Fn_parallel_function_49", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_49\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"pokemon\":\"Pikachu\",\"meta\":\"Value\",\"move\":null},{\"pokemon\":\"Bulbasaur\",\"meta\":\"Value\",\"move\":\"Solar Beam\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_49_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the set of moves a Pokemon can learn. The optional parameter checks if the Pokemon can learn a specified move.\n    function_name: 'PokemonGO.get_moves' or null,\n    // The name of the Pokemon.\n    pokemon: string,\n    // An optional parameter that checks if the Pokemon can learn this specific move. default is 'Run'\n    move: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: In a game of Pokemon GO, what moves can a Pikachu learn? Also, check if Bulbasaur can learn a specific move named 'Solar Beam'."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'PokemonGO.get_moves',\n    pokemon: 'Pikachu',\n    move: null,\n  },\n  {\n    function_name: 'PokemonGO.get_moves',\n    pokemon: 'Bulbasaur',\n    move: 'Solar Beam',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 134, "output_tokens": 59, "total_tokens": 193, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a8b21adb-73cc-4a1f-981e-bd2168297509", "event_id": "a8b21adb-73cc-4a1f-981e-bd2168297509", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 6905, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_49", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a6e303a1-b471-4ecc-bc35-ca37b333f422", "event_id": "9c4f7612-45e3-4ace-9af8-d860277298be", "parent_event_id": "a6e303a1-b471-4ecc-bc35-ca37b333f422", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 970, "start_time": "2024-06-20T05:24:44.998Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_52", "variant_name": null}, {"function_name": "Fn_parallel_function_52", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_52\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"dish\":\"Chicken Noodle Soup\",\"meta\":\"Value\",\"diet\":\"Value3\"},{\"dish\":\"Vegan Salad\",\"meta\":\"Value\",\"diet\":\"Value0\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_52_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate recipes based on the type of dish.\n    function_name: 'recipe_search.find' or null,\n    // The name of the dish to search for.\n    dish: string,\n    // Dietary preference. (default: Keto)\n    diet: 'Vegan' or 'Vegetarian' or 'Paleo' or 'Keto' or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Search for a Chicken Noodle Soup recipe and a Vegan Salad recipe."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'recipe_search.find',\n    dish: 'Chicken Noodle Soup',\n    diet: 'Keto'\n  },\n  {\n    function_name: 'recipe_search.find',\n    dish: 'Vegan Salad',\n    diet: 'Vegan'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 113, "output_tokens": 59, "total_tokens": 172, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a6e303a1-b471-4ecc-bc35-ca37b333f422", "event_id": "a6e303a1-b471-4ecc-bc35-ca37b333f422", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 7271, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_52", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3aa1d7a4-00df-42a4-bf78-4a80b91949b8", "event_id": "65d2d5eb-c288-4b9f-a73d-ef1cac308fbb", "parent_event_id": "3aa1d7a4-00df-42a4-bf78-4a80b91949b8", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2081, "start_time": "2024-06-20T05:24:43.933Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_44", "variant_name": null}, {"function_name": "Fn_parallel_function_44", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_44\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"San Francisco, California\",\"music_genre\":\"rock\",\"meta\":\"Value\",\"time_period\":30},{\"location\":\"San Francisco, California\",\"music_genre\":\"jazz\",\"meta\":\"Value\",\"time_period\":30},{\"location\":\"New York, New York\",\"music_genre\":\"rock\",\"meta\":\"Value\",\"time_period\":30},{\"location\":\"New York, New York\",\"music_genre\":\"jazz\",\"meta\":\"Value\",\"time_period\":30}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_44_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate upcoming concerts based on music genre in specified city and state.\n    function_name: 'concert_finder' or null,\n    // The city and state to find concerts.\n    location: string,\n    // Music genre of the concerts.\n    music_genre: string,\n    // Number of days to search upcoming concerts. (default: 30)\n    time_period: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you find me any upcoming rock and jazz concerts for the next month in San Francisco, California and New York, New York?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'concert_finder',\n    location: 'San Francisco, California',\n    music_genre: 'rock',\n    time_period: 30\n  },\n  {\n    function_name: 'concert_finder',\n    location: 'San Francisco, California',\n    music_genre: 'jazz',\n    time_period: 30\n  },\n  {\n    function_name: 'concert_finder',\n    location: 'New York, New York',\n    music_genre: 'rock',\n    time_period: 30\n  },\n  {\n    function_name: 'concert_finder',\n    location: 'New York, New York',\n    music_genre: 'jazz',\n    time_period: 30\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 129, "output_tokens": 146, "total_tokens": 275, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3aa1d7a4-00df-42a4-bf78-4a80b91949b8", "event_id": "3aa1d7a4-00df-42a4-bf78-4a80b91949b8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 7317, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_44", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "138ec9bd-5423-4626-8dfd-efe64f998247", "event_id": "1c63836d-27d5-4054-b5e7-6d43c67da36f", "parent_event_id": "138ec9bd-5423-4626-8dfd-efe64f998247", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1068, "start_time": "2024-06-20T05:24:44.995Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_51", "variant_name": null}, {"function_name": "Fn_parallel_function_51", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_51\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"stage\":7,\"mode\":\"Value0\",\"meta\":\"Value\",\"level\":\"user\"},{\"stage\":3,\"mode\":\"Value1\",\"meta\":\"Value\",\"level\":\"user\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_51_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Save the current state of a player's game, given the stage, level and game mode.\n    function_name: 'game.save_progress' or null,\n    // The current stage in the game the player has reached.\n    stage: int,\n    // The game mode. Available modes are easy or hard.\n    mode: 'easy' or 'hard',\n    // The player's level. (default: user)\n    level: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: How to save game progress at stage 7 in easy mode and stage 3 in hard mode?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'game.save_progress',\n    stage: 7,\n    mode: 'easy',\n    level: 'user'\n  },\n  {\n    function_name: 'game.save_progress',\n    stage: 3,\n    mode: 'hard',\n    level: 'user'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 137, "output_tokens": 64, "total_tokens": 201, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "138ec9bd-5423-4626-8dfd-efe64f998247", "event_id": "138ec9bd-5423-4626-8dfd-efe64f998247", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 7366, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_51", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "390de274-e498-4bcf-8d5a-e98601c9739b", "event_id": "3f6d236b-5e1d-4106-9de9-e9b27eea46aa", "parent_event_id": "390de274-e498-4bcf-8d5a-e98601c9739b", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1143, "start_time": "2024-06-20T05:24:45.147Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_53", "variant_name": null}, {"function_name": "Fn_parallel_function_53", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_53\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York, NY\",\"cuisine\":\"Italian\",\"preferences\":[\"Value0\"],\"meta\":\"Value\"},{\"location\":\"Los Angeles, CA\",\"cuisine\":\"Japanese\",\"preferences\":[\"Value1\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_53_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Search for restaurants based on location, cuisine type and other preferences.\n    function_name: 'restaurant_finder' or null,\n    // City and state, e.g. New York, NY.\n    location: string,\n    // Type of cuisine the user is interested in, e.g. Italian, Japanese etc.\n    cuisine: string,\n    // Extra features in the restaurant. default is ['Delivery'].\n    preferences: [\n      'Vegetarian' or 'Delivery' or 'Vegan' or 'Takeout'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find an Italian restaurant near me in New York that provides vegetarian food options and a Japanese sushi restaurant in Los Angeles that offers delivery service."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'restaurant_finder',\n    location: 'New York, NY',\n    cuisine: 'Italian',\n    preferences: ['Vegetarian']\n  },\n  {\n    function_name: 'restaurant_finder',\n    location: 'Los Angeles, CA',\n    cuisine: 'Japanese',\n    preferences: ['Delivery']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 160, "output_tokens": 70, "total_tokens": 230, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "390de274-e498-4bcf-8d5a-e98601c9739b", "event_id": "390de274-e498-4bcf-8d5a-e98601c9739b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 7593, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_53", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d330fee3-6279-4506-ab7c-00dc44f5fc50", "event_id": "87a78452-9048-4d84-a1fa-759b33b568a8", "parent_event_id": "d330fee3-6279-4506-ab7c-00dc44f5fc50", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1023, "start_time": "2024-06-20T05:24:45.326Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_54", "variant_name": null}, {"function_name": "Fn_parallel_function_54", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_54\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"dish_name\":\"Lasagne Bolognese\",\"serving_size\":4,\"meta\":\"Value\"},{\"dish_name\":\"Caesar Salad\",\"serving_size\":2,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_54_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the cooking recipe for a specified food item.\n    function_name: 'get_cooking_recipe' or null,\n    // Name of the food dish for which recipe is required.\n    dish_name: string,\n    // Number of people for which the dish will be prepared.\n    serving_size: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Tell me a cooking recipe for 'Lasagne Bolognese' for serving 4 people and another one for 'Caesar Salad' for serving 2 people"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_cooking_recipe',\n    dish_name: 'Lasagne Bolognese',\n    serving_size: 4\n  },\n  {\n    function_name: 'get_cooking_recipe',\n    dish_name: 'Caesar Salad',\n    serving_size: 2\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 121, "output_tokens": 67, "total_tokens": 188, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d330fee3-6279-4506-ab7c-00dc44f5fc50", "event_id": "d330fee3-6279-4506-ab7c-00dc44f5fc50", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 7651, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_54", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "47bd5265-e203-4d99-a016-e77e015d5c31", "event_id": "aae9817b-c1ff-412c-96ee-478cfc112a66", "parent_event_id": "47bd5265-e203-4d99-a016-e77e015d5c31", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1652, "start_time": "2024-06-20T05:24:44.705Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_50", "variant_name": null}, {"function_name": "Fn_parallel_function_50", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_50\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"team\":\"RocketLeague\",\"player_id\":3142,\"meta\":\"Value\",\"season\":2017},{\"team\":\"RocketLeague\",\"player_id\":3142,\"meta\":\"Value\",\"season\":2018},{\"team\":\"RocketLeague\",\"player_id\":3142,\"meta\":\"Value\",\"season\":2019}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_50_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Check a player's status in a team for a particular season.\n    function_name: 'player_status.check' or null,\n    // The team where the player plays.\n    team: string,\n    // The id of the player.\n    player_id: int,\n    // The season for which player's status need to be checked. Optional. Default is current season.\n    season: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Check if the player with id 3142 in team RocketLeague has achieved top scorer status in seasons 2017, 2018 and 2019."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'player_status.check',\n    team: 'RocketLeague',\n    player_id: 3142,\n    season: 2017\n  },\n  {\n    function_name: 'player_status.check',\n    team: 'RocketLeague',\n    player_id: 3142,\n    season: 2018\n  },\n  {\n    function_name: 'player_status.check',\n    team: 'RocketLeague',\n    player_id: 3142,\n    season: 2019\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 139, "output_tokens": 107, "total_tokens": 246, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "47bd5265-e203-4d99-a016-e77e015d5c31", "event_id": "47bd5265-e203-4d99-a016-e77e015d5c31", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 7660, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_50", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a148124f-8651-4e59-a886-cabc575cd4b7", "event_id": "1b7ed8af-4598-4014-8111-860eba8bf936", "parent_event_id": "a148124f-8651-4e59-a886-cabc575cd4b7", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2041, "start_time": "2024-06-20T05:24:44.330Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_47", "variant_name": null}, {"function_name": "Fn_parallel_function_47", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_47\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"team\":\"Lakers\",\"season\":2018,\"meta\":\"Value\"},{\"team\":\"Lakers\",\"season\":2020,\"meta\":\"Value\"},{\"team\":\"Bulls\",\"season\":2018,\"meta\":\"Value\"},{\"team\":\"Bulls\",\"season\":2020,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_47_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the winning percentage for a particular basketball team in a given season.\n    function_name: 'calculate_winning_percentage' or null,\n    // The name of the basketball team.\n    team: string,\n    // The season (year) you want to find winning percentage for.\n    season: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find the winning percentage of Lakers and Bulls in NBA seasons 2018 and 2020."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_winning_percentage',\n    team: 'Lakers',\n    season: 2018\n  },\n  {\n    function_name: 'calculate_winning_percentage',\n    team: 'Lakers',\n    season: 2020\n  },\n  {\n    function_name: 'calculate_winning_percentage',\n    team: 'Bulls',\n    season: 2018\n  },\n  {\n    function_name: 'calculate_winning_percentage',\n    team: 'Bulls',\n    season: 2020\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 106, "output_tokens": 114, "total_tokens": 220, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a148124f-8651-4e59-a886-cabc575cd4b7", "event_id": "a148124f-8651-4e59-a886-cabc575cd4b7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 7675, "start_time": "2024-06-20T05:24:38.697Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_47", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: team\\nExpected: any of ['Bulls']\\nActual@2: meta=<Fn_parallel_function_47_Output0_TypeName.Value: 'Value'> team='Lakers' season=2020\\nActual all: [Fn_parallel_function_47_Output0(meta=<Fn_parallel_function_47_Output0_TypeName.Value: 'Value'>, team='Lakers', season=2018), Fn_parallel_function_47_Output0(meta=<Fn_parallel_function_47_Output0_TypeName.Value: 'Value'>, team='Lakers', season=2020), Fn_parallel_function_47_Output0(meta=<Fn_parallel_function_47_Output0_TypeName.Value: 'Value'>, team='Bulls', season=2018), Fn_parallel_function_47_Output0(meta=<Fn_parallel_function_47_Output0_TypeName.Value: 'Value'>, team='Bulls', season=2020)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "277d6205-5d93-4672-8c48-f23b5cb1f47c", "event_id": "63584091-f660-4404-b530-641257a23440", "parent_event_id": "277d6205-5d93-4672-8c48-f23b5cb1f47c", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1209, "start_time": "2024-06-20T05:24:45.558Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_55", "variant_name": null}, {"function_name": "Fn_parallel_function_55", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_55\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"downtown\",\"items\":[\"large pepperoni pizza\",\"chicken Caesar salad\"],\"size\":\"Value2\",\"meta\":\"Value\"},{\"location\":\"uptown\",\"items\":[\"large pepperoni pizza\",\"chicken Caesar salad\"],\"size\":\"Value2\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_55_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Order food from Whole Foods\n    function_name: 'whole_foods.order' or null,\n    // Location of Whole Foods.\n    location: string,\n    // List of items to order.\n    items: string[],\n    // Size of the order.\n    size: 'small' or 'medium' or 'large',\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: I want to order a large pepperoni pizza and a chicken Caesar salad from Whole Foods at the downtown location and then another order of the same items from the uptown location."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'whole_foods.order',\n    location: 'downtown',\n    items: ['large pepperoni pizza', 'chicken Caesar salad'],\n    size: 'large',\n  },\n  {\n    function_name: 'whole_foods.order',\n    location: 'uptown',\n    items: ['large pepperoni pizza', 'chicken Caesar salad'],\n    size: 'large',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 126, "output_tokens": 86, "total_tokens": 212, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "277d6205-5d93-4672-8c48-f23b5cb1f47c", "event_id": "277d6205-5d93-4672-8c48-f23b5cb1f47c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 8070, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_55", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: items\\nExpected: any of [['pepperoni pizza', 'chicken Caesar salad'], ['chicken Caesar salad', 'pepperoni pizza']]\\nActual@1: meta=<Fn_parallel_function_55_Output0_TypeName.Value: 'Value'> location='downtown' items=['large pepperoni pizza', 'chicken Caesar salad'] size=<Enum_Fn_parallel_function_55_Enum0.Value2: 'Value2'>\\nActual all: [Fn_parallel_function_55_Output0(meta=<Fn_parallel_function_55_Output0_TypeName.Value: 'Value'>, location='downtown', items=['large pepperoni pizza', 'chicken Caesar salad'], size=<Enum_Fn_parallel_function_55_Enum0.Value2: 'Value2'>), Fn_parallel_function_55_Output0(meta=<Fn_parallel_function_55_Output0_TypeName.Value: 'Value'>, location='uptown', items=['large pepperoni pizza', 'chicken Caesar salad'], size=<Enum_Fn_parallel_function_55_Enum0.Value2: 'Value2'>)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "666b45bb-a0aa-4882-be62-eb20d4d2fe72", "event_id": "b8c0dd59-354e-4223-95aa-596a43bcb22f", "parent_event_id": "666b45bb-a0aa-4882-be62-eb20d4d2fe72", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1621, "start_time": "2024-06-20T05:24:45.603Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_57", "variant_name": null}, {"function_name": "Fn_parallel_function_57", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_57\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"hotel_name\":\"Queens Hotel\",\"location\":\"Berlin, Germany\",\"check_in_date\":\"2022-03-10\",\"check_out_date\":\"2022-03-20\",\"meta\":\"Value\"},{\"hotel_name\":\"Royal Hotel\",\"location\":\"Paris, France\",\"check_in_date\":\"2022-04-05\",\"check_out_date\":\"2022-04-15\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_57_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Check room availability for a particular hotel for given dates.\n    function_name: 'hotel_booking.check_availability' or null,\n    // The name of the hotel.\n    hotel_name: string,\n    // The location of the hotel.\n    location: string,\n    // The check-in date in YYYY-MM-DD format.\n    check_in_date: string,\n    // The check-out date in YYYY-MM-DD format.\n    check_out_date: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Check the hotel room availability for 'Queens Hotel' in Berlin, Germany from March 10, 2022 to March 20, 2022 and for 'Royal Hotel' in Paris, France from April 5, 2022 to April 15, 2022."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'hotel_booking.check_availability',\n    hotel_name: 'Queens Hotel',\n    location: 'Berlin, Germany',\n    check_in_date: '2022-03-10',\n    check_out_date: '2022-03-20',\n  },\n  {\n    function_name: 'hotel_booking.check_availability',\n    hotel_name: 'Royal Hotel',\n    location: 'Paris, France',\n    check_in_date: '2022-04-05',\n    check_out_date: '2022-04-15',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 174, "output_tokens": 117, "total_tokens": 291, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "666b45bb-a0aa-4882-be62-eb20d4d2fe72", "event_id": "666b45bb-a0aa-4882-be62-eb20d4d2fe72", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 8527, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_57", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b5786fa7-e419-4aa1-8e76-867f5cf94a84", "event_id": "213ca1d8-dfe5-47c4-af6b-6bbaf9d959e3", "parent_event_id": "b5786fa7-e419-4aa1-8e76-867f5cf94a84", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1215, "start_time": "2024-06-20T05:24:46.015Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_59", "variant_name": null}, {"function_name": "Fn_parallel_function_59", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_59\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base_currency\":\"USD\",\"target_currency\":\"AUD\",\"meta\":\"Value\"},{\"base_currency\":\"USD\",\"target_currency\":\"CAD\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_59_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Fetch the current exchange rate for the provided currency pairs.\n    function_name: 'get_exchange_rate' or null,\n    // The base currency in the pair.\n    base_currency: string,\n    // The currency to which the base currency needs to be converted.\n    target_currency: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Get me the currency exchange rates of the following pairs: USD to AUD and USD to CAD?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_exchange_rate',\n    base_currency: 'USD',\n    target_currency: 'AUD',\n  },\n  {\n    function_name: 'get_exchange_rate',\n    base_currency: 'USD',\n    target_currency: 'CAD',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 103, "output_tokens": 56, "total_tokens": 159, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b5786fa7-e419-4aa1-8e76-867f5cf94a84", "event_id": "b5786fa7-e419-4aa1-8e76-867f5cf94a84", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 8533, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_59", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "150b7b6c-dd4a-492d-ae6f-b907e4d5e78d", "event_id": "8bef0483-5931-4c98-a22b-a5fcac6c2edb", "parent_event_id": "150b7b6c-dd4a-492d-ae6f-b907e4d5e78d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1112, "start_time": "2024-06-20T05:24:46.358Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_63", "variant_name": null}, {"function_name": "Fn_parallel_function_63", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_63\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"a\":3,\"b\":4,\"c\":2,\"meta\":\"Value\"},{\"a\":5,\"b\":-7,\"c\":3,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_63_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Find the roots of a quadratic equation ax^2 + bx + c = 0.\n    function_name: 'algebra.quadratic_roots' or null,\n    // Coefficient of x^2.\n    a: int,\n    // Coefficient of x.\n    b: int,\n    // Constant term.\n    c: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find the roots of two quadratic equations? The first equation is 3x^2 + 4x + 2 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term. The second equation is 5x^2 - 7x + 3 = 0, where 'a' is the coefficient of x^2, 'b' is the coefficient of x, and 'c' is the constant term.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'algebra.quadratic_roots',\n    a: 3,\n    b: 4,\n    c: 2\n  },\n  {\n    function_name: 'algebra.quadratic_roots',\n    a: 5,\n    b: -7,\n    c: 3\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 208, "output_tokens": 70, "total_tokens": 278, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "150b7b6c-dd4a-492d-ae6f-b907e4d5e78d", "event_id": "150b7b6c-dd4a-492d-ae6f-b907e4d5e78d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 8773, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_63", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "35ad61dc-5e90-4844-b0cf-202f8db313ec", "event_id": "10c629a6-9191-4d9e-9877-2546f64d96e9", "parent_event_id": "35ad61dc-5e90-4844-b0cf-202f8db313ec", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1449, "start_time": "2024-06-20T05:24:46.064Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_60", "variant_name": null}, {"function_name": "Fn_parallel_function_60", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_60\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"amount\":15000,\"from_currency\":\"Euro\",\"to_currency\":\"USD\",\"meta\":\"Value\"},{\"amount\":200,\"from_currency\":\"Pound\",\"to_currency\":\"USD\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_60_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Convert a value from one currency to another including conversion charges.\n    function_name: 'get_conversion_cost' or null,\n    // The amount of money to be converted.\n    amount: int,\n    // The current currency of the amount.\n    from_currency: string,\n    // The target currency.\n    to_currency: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: How much will it cost in dollars if I transfer 15000 Euro to dollars? and how much if I convert 200 pounds to dollars?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'get_conversion_cost',\n        amount: 15000,\n        from_currency: 'Euro',\n        to_currency: 'USD'\n    },\n    {\n        function_name: 'get_conversion_cost',\n        amount: 200,\n        from_currency: 'Pound',\n        to_currency: 'USD'\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 121, "output_tokens": 70, "total_tokens": 191, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "35ad61dc-5e90-4844-b0cf-202f8db313ec", "event_id": "35ad61dc-5e90-4844-b0cf-202f8db313ec", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 8817, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_60", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: from_currency\\nExpected: any of ['pounds', 'GBP']\\nActual@2: meta=<Fn_parallel_function_60_Output0_TypeName.Value: 'Value'> amount=200 from_currency='Pound' to_currency='USD'\\nActual all: [Fn_parallel_function_60_Output0(meta=<Fn_parallel_function_60_Output0_TypeName.Value: 'Value'>, amount=15000, from_currency='Euro', to_currency='USD'), Fn_parallel_function_60_Output0(meta=<Fn_parallel_function_60_Output0_TypeName.Value: 'Value'>, amount=200, from_currency='Pound', to_currency='USD')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a5d5fea1-1d64-4db7-9af2-51b054df9e1c", "event_id": "e50d242c-3621-48f3-8481-a633b4b633f9", "parent_event_id": "a5d5fea1-1d64-4db7-9af2-51b054df9e1c", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1309, "start_time": "2024-06-20T05:24:46.291Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_61", "variant_name": null}, {"function_name": "Fn_parallel_function_61", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_61\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number\":5,\"meta\":\"Value\"},{\"number\":7,\"meta\":\"Value\"},{\"number\":9,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_61_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the factorial of a given number.\n    function_name: 'math.factorial' or null,\n    // The number for which factorial needs to be calculated.\n    number: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the results of the factorial of 5, the factorial of 7, and the factorial of 9?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.factorial',\n    number: 5\n  },\n  {\n    function_name: 'math.factorial',\n    number: 7\n  },\n  {\n    function_name: 'math.factorial',\n    number: 9\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 87, "output_tokens": 59, "total_tokens": 146, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a5d5fea1-1d64-4db7-9af2-51b054df9e1c", "event_id": "a5d5fea1-1d64-4db7-9af2-51b054df9e1c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 8903, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_61", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "19c7cc92-82a2-4cfa-8621-a9b5786c5a1c", "event_id": "b4177419-8320-4d4a-a707-82d3a811e038", "parent_event_id": "19c7cc92-82a2-4cfa-8621-a9b5786c5a1c", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1787, "start_time": "2024-06-20T05:24:45.969Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_58", "variant_name": null}, {"function_name": "Fn_parallel_function_58", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_58\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"hotel_name\":\"Sheraton Hotel\",\"location\":\"New York\",\"check_in\":\"2022-05-01\",\"check_out\":\"2022-05-05\",\"adults\":2,\"children\":1,\"meta\":\"Value\"},{\"hotel_name\":\"Marriott\",\"location\":\"Los Angeles\",\"check_in\":\"2022-06-01\",\"check_out\":\"2022-06-10\",\"adults\":1,\"children\":2,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_58_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Book a hotel room at the specified location for the specified number of adults and children.\n    function_name: 'hotel_booking.book' or null,\n    // The name of the hotel.\n    hotel_name: string,\n    // The city where the hotel is located.\n    location: string,\n    // The check-in date in the format yyyy-mm-dd.\n    check_in: string,\n    // The check-out date in the format yyyy-mm-dd.\n    check_out: string,\n    // The number of adults for the booking.\n    adults: int,\n    // The number of children for the booking.\n    children: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Book a room for 2 adults and a child at the Sheraton Hotel in New York with check-in on May 1, 2022 and check-out on May 5, 2022. Also, Book a room for 1 adult and 2 children at the Marriott in Los Angeles with check-in on June 1, 2022 and check-out on June 10, 2022."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'hotel_booking.book',\n    hotel_name: 'Sheraton Hotel',\n    location: 'New York',\n    check_in: '2022-05-01',\n    check_out: '2022-05-05',\n    adults: 2,\n    children: 1\n  },\n  {\n    function_name: 'hotel_booking.book',\n    hotel_name: 'Marriott',\n    location: 'Los Angeles',\n    check_in: '2022-06-01',\n    check_out: '2022-06-10',\n    adults: 1,\n    children: 2\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 235, "output_tokens": 131, "total_tokens": 366, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "19c7cc92-82a2-4cfa-8621-a9b5786c5a1c", "event_id": "19c7cc92-82a2-4cfa-8621-a9b5786c5a1c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 9059, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_58", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "57fbd467-49cd-4b9e-8655-23871102d369", "event_id": "a973e807-e626-4b03-95de-29a93e34a5a7", "parent_event_id": "57fbd467-49cd-4b9e-8655-23871102d369", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1471, "start_time": "2024-06-20T05:24:46.373Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_64", "variant_name": null}, {"function_name": "Fn_parallel_function_64", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_64\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"a\":5,\"b\":6,\"c\":1,\"meta\":\"Value\"},{\"a\":3,\"b\":2,\"c\":1,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_64_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Function solves the quadratic equation and returns its roots.\n    function_name: 'solve_quadratic_equation' or null,\n    // Coefficient of x squared\n    a: int,\n    // Coefficient of x\n    b: int,\n    // Constant term in the quadratic equation\n    c: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find the roots of two quadratic equations? The first equation has coefficients of x squared, x, and the constant term as 5, 6, and 1 respectively. The second equation has coefficients of x squared, x, and the constant term as 3, 2, and 1 respectively. Can you solve these equations using the 'solve_quadratic_equation' function?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'solve_quadratic_equation',\n    a: 5,\n    b: 6,\n    c: 1\n  },\n  {\n    function_name: 'solve_quadratic_equation',\n    a: 3,\n    b: 2,\n    c: 1\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 172, "output_tokens": 68, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "57fbd467-49cd-4b9e-8655-23871102d369", "event_id": "57fbd467-49cd-4b9e-8655-23871102d369", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 9147, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_64", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "62ed0218-a28d-4c37-b81b-18e415003b95", "event_id": "db0444e8-1d03-4042-8d03-e11a674ae75d", "parent_event_id": "62ed0218-a28d-4c37-b81b-18e415003b95", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1603, "start_time": "2024-06-20T05:24:46.350Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_62", "variant_name": null}, {"function_name": "Fn_parallel_function_62", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_62\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"x\":3,\"y\":4,\"meta\":\"Value\",\"z\":null},{\"x\":6,\"y\":8,\"meta\":\"Value\",\"z\":null},{\"x\":9,\"y\":12,\"meta\":\"Value\",\"z\":15}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_62_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\n    function_name: 'math.hypot' or null,\n    // The x-coordinate value.\n    x: int,\n    // The y-coordinate value.\n    y: int,\n    // Optional. The z-coordinate value. Default is 0.\n    z: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the Euclidean norm, or the length of the vector from the origin to the point (3, 4) using the math.hypot function, and then calculate the Euclidean norm from the origin to the point (6, 8) using the same function? Also, can you calculate the Euclidean norm from the origin to the point (9, 12, 15) using the math.hypot function?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.hypot',\n    x: 3,\n    y: 4,\n    z: null\n  },\n  {\n    function_name: 'math.hypot',\n    x: 6,\n    y: 8,\n    z: null\n  },\n  {\n    function_name: 'math.hypot',\n    x: 9,\n    y: 12,\n    z: 15\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 212, "output_tokens": 96, "total_tokens": 308, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "62ed0218-a28d-4c37-b81b-18e415003b95", "event_id": "62ed0218-a28d-4c37-b81b-18e415003b95", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 9256, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_62", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "65303fc6-e0c6-476d-a32a-11a12eb5f27d", "event_id": "c4646343-adb3-4a03-8acd-5606578d1fe2", "parent_event_id": "65303fc6-e0c6-476d-a32a-11a12eb5f27d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2611, "start_time": "2024-06-20T05:24:45.559Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_56", "variant_name": null}, {"function_name": "Fn_parallel_function_56", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_56\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York City\",\"criteria\":[\"Value0\"],\"meta\":\"Value\"},{\"location\":\"San Diego\",\"criteria\":[\"Value1\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_56_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Find grocery stores based on specific criteria such as location, hours of operation, or availability of services.\n    function_name: 'grocery_store.find_by_criteria' or null,\n    // The city where you want to find a grocery store.\n    location: string,\n    // Specific features or services you're looking for in a grocery store.\n    criteria: [\n      '24 hours' or 'Home Delivery' or 'In-store Pickup'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Find a supermarket in New York City that opens 24 hours and another one in San Diego that offers home delivery."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'grocery_store.find_by_criteria',\n    location: 'New York City',\n    criteria: ['24 hours']\n  },\n  {\n    function_name: 'grocery_store.find_by_criteria',\n    location: 'San Diego',\n    criteria: ['Home Delivery']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 139, "output_tokens": 63, "total_tokens": 202, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "65303fc6-e0c6-476d-a32a-11a12eb5f27d", "event_id": "65303fc6-e0c6-476d-a32a-11a12eb5f27d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 9473, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_56", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: location\\nExpected: any of ['SD', 'San Diego']\\nActual@1: meta=<Fn_parallel_function_56_Output0_TypeName.Value: 'Value'> location='New York City' criteria=[<Enum_Fn_parallel_function_56_Enum0.Value0: 'Value0'>]\\nActual all: [Fn_parallel_function_56_Output0(meta=<Fn_parallel_function_56_Output0_TypeName.Value: 'Value'>, location='New York City', criteria=[<Enum_Fn_parallel_function_56_Enum0.Value0: 'Value0'>]), Fn_parallel_function_56_Output0(meta=<Fn_parallel_function_56_Output0_TypeName.Value: 'Value'>, location='San Diego', criteria=[<Enum_Fn_parallel_function_56_Enum0.Value1: 'Value1'>])]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2af18583-e5be-4b21-9d3b-15811f36c7ec", "event_id": "aa745007-aa06-4dc2-b17e-f8877430f980", "parent_event_id": "2af18583-e5be-4b21-9d3b-15811f36c7ec", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 932, "start_time": "2024-06-20T05:24:47.601Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_70", "variant_name": null}, {"function_name": "Fn_parallel_function_70", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_70\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base\":10,\"height\":5,\"meta\":\"Value\"},{\"base\":8,\"height\":6,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_70_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the area of a triangle using its base and height.\n    function_name: 'calculate_triangle_area' or null,\n    // The length of the base of the triangle.\n    base: int,\n    // The height of the triangle from the base.\n    height: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"John is a geometry teacher who is preparing a quiz for his students. He has drawn two triangles on the board. The first triangle has a base of 10 units and a height of 5 units. The second triangle has a base of 8 units and a height of 6 units. John wants to know the total area of the two triangles combined. Can you help him calculate this?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_triangle_area',\n    base: 10,\n    height: 5\n  },\n  {\n    function_name: 'calculate_triangle_area',\n    base: 8,\n    height: 6\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 162, "output_tokens": 52, "total_tokens": 214, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2af18583-e5be-4b21-9d3b-15811f36c7ec", "event_id": "2af18583-e5be-4b21-9d3b-15811f36c7ec", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 9836, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_70", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5ab34bd9-eb26-4080-adf0-116e3f203859", "event_id": "6c990116-6ac5-4534-b8eb-4ff29feaccff", "parent_event_id": "5ab34bd9-eb26-4080-adf0-116e3f203859", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1304, "start_time": "2024-06-20T05:24:47.231Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_67", "variant_name": null}, {"function_name": "Fn_parallel_function_67", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_67\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"radius\":5,\"meta\":\"Value\",\"units\":\"meters\"},{\"radius\":10,\"meta\":\"Value\",\"units\":\"meters\"},{\"radius\":15,\"meta\":\"Value\",\"units\":\"meters\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_67_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the area of a circle given the radius.\n    function_name: 'geometry.area_circle' or null,\n    // The radius of the circle.\n    radius: int,\n    // The units in which the radius is measured (defaults to meters). (default: meters)\n    units: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the total area of three circles, where the first circle has a radius of 5 meters, the second circle has a radius of 10 meters, and the third circle has a radius of 15 meters, all measured in meters?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'geometry.area_circle',\n    radius: 5,\n    units: 'meters'\n  },\n  {\n    function_name: 'geometry.area_circle',\n    radius: 10,\n    units: 'meters'\n  },\n  {\n    function_name: 'geometry.area_circle',\n    radius: 15,\n    units: 'meters'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 137, "output_tokens": 80, "total_tokens": 217, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5ab34bd9-eb26-4080-adf0-116e3f203859", "event_id": "5ab34bd9-eb26-4080-adf0-116e3f203859", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 9840, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_67", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "91a43a5e-2466-4ce9-a784-46e330efa8ef", "event_id": "b5fbfb68-6d16-43b7-a80c-d05b2480d8f2", "parent_event_id": "91a43a5e-2466-4ce9-a784-46e330efa8ef", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1139, "start_time": "2024-06-20T05:24:47.515Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_69", "variant_name": null}, {"function_name": "Fn_parallel_function_69", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_69\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base\":12,\"height\":15,\"meta\":\"Value\",\"unit\":\"m\"},{\"base\":18,\"height\":24,\"meta\":\"Value\",\"unit\":\"m\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_69_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the area of a right-angled triangle given the lengths of its base and height.\n    function_name: 'calculate_area' or null,\n    // The length of the base of the right-angled triangle.\n    base: int,\n    // The height of the right-angled triangle.\n    height: int,\n    // The unit of measure used. Defaults to cm. (default: cm)\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"John is working on a project where he needs to calculate the area of two right-angled triangles. The first triangle has a base of 12 meters and a height of 15 meters. The second triangle has a base of 18 meters and a height of 24 meters. He wants to know the total area of these two triangles in square meters. Can you help him calculate this?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_area',\n    base: 12,\n    height: 15,\n    unit: 'm'\n  },\n  {\n    function_name: 'calculate_area',\n    base: 18,\n    height: 24,\n    unit: 'm'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 193, "output_tokens": 62, "total_tokens": 255, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "91a43a5e-2466-4ce9-a784-46e330efa8ef", "event_id": "91a43a5e-2466-4ce9-a784-46e330efa8ef", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 9956, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_69", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9838138a-d5c3-4e0d-accf-cc2a9bd64feb", "event_id": "246d052f-e0ac-4dac-92ee-3ebfe3e3613f", "parent_event_id": "9838138a-d5c3-4e0d-accf-cc2a9bd64feb", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1523, "start_time": "2024-06-20T05:24:47.225Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_66", "variant_name": null}, {"function_name": "Fn_parallel_function_66", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_66\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"radius\":5,\"meta\":\"Value\",\"unit\":\"cm\"},{\"radius\":10,\"meta\":\"Value\",\"unit\":\"cm\"},{\"radius\":15,\"meta\":\"Value\",\"unit\":\"cm\"},{\"radius\":20,\"meta\":\"Value\",\"unit\":\"cm\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_66_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the circumference of a circle with a given radius.\n    function_name: 'calculate_circumference' or null,\n    // The radius of the circle in the unit given.\n    radius: int,\n    // The unit of measurement for the radius. Default is m.\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the total circumference of four circles, where the first circle has a radius of 5cm, the second circle has a radius of 10cm, the third circle has a radius of 15cm, and the fourth circle has a radius of 20cm?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_circumference',\n    radius: 5,\n    unit: 'cm'\n  },\n  {\n    function_name: 'calculate_circumference',\n    radius: 10,\n    unit: 'cm'\n  },\n  {\n    function_name: 'calculate_circumference',\n    radius: 15,\n    unit: 'cm'\n  },\n  {\n    function_name: 'calculate_circumference',\n    radius: 20,\n    unit: 'cm'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 144, "output_tokens": 110, "total_tokens": 254, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9838138a-d5c3-4e0d-accf-cc2a9bd64feb", "event_id": "9838138a-d5c3-4e0d-accf-cc2a9bd64feb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 10051, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_66", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b77f42a1-3ae1-47c6-bc14-9d4b5e50eefd", "event_id": "35468fed-9be1-4442-a1b6-af21e4d89a31", "parent_event_id": "b77f42a1-3ae1-47c6-bc14-9d4b5e50eefd", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1493, "start_time": "2024-06-20T05:24:47.757Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_71", "variant_name": null}, {"function_name": "Fn_parallel_function_71", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_71\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"radius\":5,\"meta\":\"Value\",\"units\":\"m\"},{\"radius\":10,\"meta\":\"Value\",\"units\":\"m\"},{\"radius\":15,\"meta\":\"Value\",\"units\":\"m\"},{\"radius\":20,\"meta\":\"Value\",\"units\":\"m\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_71_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the circumference of a circle given the radius.\n    function_name: 'geometry.circumference' or null,\n    // The radius of the circle.\n    radius: int,\n    // Units for the output circumference measurement. Default is 'cm'.\n    units: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the combined circumference of four circles, where the first circle has a radius of 5m, the second circle has a radius of 10m, the third circle has a radius of 15m, and the fourth circle has a radius of 20m, and I want the output in meters?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'geometry.circumference',\n    radius: 5,\n    units: 'm',\n  },\n  {\n    function_name: 'geometry.circumference',\n    radius: 10,\n    units: 'm',\n  },\n  {\n    function_name: 'geometry.circumference',\n    radius: 15,\n    units: 'm',\n  },\n  {\n    function_name: 'geometry.circumference',\n    radius: 20,\n    units: 'm',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 147, "output_tokens": 110, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b77f42a1-3ae1-47c6-bc14-9d4b5e50eefd", "event_id": "b77f42a1-3ae1-47c6-bc14-9d4b5e50eefd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 10553, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_71", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "899d659d-64c0-4fd9-a5f2-9b2ba2feb71e", "event_id": "65956d54-c01b-4435-84ca-1c48edf45e0a", "parent_event_id": "899d659d-64c0-4fd9-a5f2-9b2ba2feb71e", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2665, "start_time": "2024-06-20T05:24:46.768Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_65", "variant_name": null}, {"function_name": "Fn_parallel_function_65", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_65\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"a\":2,\"b\":5,\"c\":3,\"meta\":\"Value\",\"root_type\":\"all\"},{\"a\":1,\"b\":-3,\"c\":2,\"meta\":\"Value\",\"root_type\":\"real\"},{\"a\":4,\"b\":-7,\"c\":3,\"meta\":\"Value\",\"root_type\":\"all\"},{\"a\":1,\"b\":2,\"c\":1,\"meta\":\"Value\",\"root_type\":\"real\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_65_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.\n    function_name: 'solve_quadratic' or null,\n    // The coefficient of the squared term in the quadratic equation.\n    a: int,\n    // The coefficient of the linear term in the quadratic equation.\n    b: int,\n    // The constant term in the quadratic equation.\n    c: int,\n    // The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. This parameter is optional. default is 'all'\n    root_type: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me solve the following quadratic equations? The first one has coefficients a = 2, b = 5, and c = 3 and I want to find all roots, real or complex. The second equation has coefficients a = 1, b = -3, and c = 2 and I only want to find the real roots. The third equation has coefficients a = 4, b = -7, and c = 3 and I want to find all roots, real or complex. And the last equation has coefficients a = 1, b = 2, and c = 1 and I only want to find the real roots.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'solve_quadratic',\n    a: 2,\n    b: 5,\n    c: 3,\n    root_type: 'all'\n  },\n  {\n    function_name: 'solve_quadratic',\n    a: 1,\n    b: -3,\n    c: 2,\n    root_type: 'real'\n  },\n  {\n    function_name: 'solve_quadratic',\n    a: 4,\n    b: -7,\n    c: 3,\n    root_type: 'all'\n  },\n  {\n    function_name: 'solve_quadratic',\n    a: 1,\n    b: 2,\n    c: 1,\n    root_type: 'real'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 310, "output_tokens": 154, "total_tokens": 464, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "899d659d-64c0-4fd9-a5f2-9b2ba2feb71e", "event_id": "899d659d-64c0-4fd9-a5f2-9b2ba2feb71e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 10737, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_65", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "23f1998a-085e-40da-a0bb-c65d4691ef72", "event_id": "dcc65177-d11d-40c9-a5e3-d3cf3177cc4a", "parent_event_id": "23f1998a-085e-40da-a0bb-c65d4691ef72", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1120, "start_time": "2024-06-20T05:24:48.534Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_75", "variant_name": null}, {"function_name": "Fn_parallel_function_75", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_75\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number\":4567,\"formatted\":true,\"meta\":\"Value\"},{\"number\":7890,\"formatted\":true,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_75_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Function to retrieve prime factors of a number.\n    function_name: 'get_prime_factors' or null,\n    // Number for which prime factors need to be calculated\n    number: int,\n    // Return formatted string if true, array if false\n    formatted: bool,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the prime factors of the number 4567 and 7890, and can you provide these in a formatted string as well as an array?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_prime_factors',\n    number: 4567,\n    formatted: true,\n  },\n  {\n    function_name: 'get_prime_factors',\n    number: 7890,\n    formatted: true,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 112, "output_tokens": 52, "total_tokens": 164, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "73239635-0b1c-4b7c-a330-f7f4e5bc5941", "event_id": "6a4867df-6d5d-4c64-a685-0c7e0be609cb", "parent_event_id": "73239635-0b1c-4b7c-a330-f7f4e5bc5941", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2183, "start_time": "2024-06-20T05:24:47.472Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_68", "variant_name": null}, {"function_name": "Fn_parallel_function_68", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_68\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"radius\":5,\"meta\":\"Value\",\"unit\":\"m\"},{\"radius\":10,\"meta\":\"Value\",\"unit\":\"m\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_68_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the area of a circle given its radius.\n    function_name: 'geometry.calculate_area_circle' or null,\n    // The radius of the circle.\n    radius: int,\n    // The measurement unit of the radius (optional parameter, default is 'cm').\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the area of two circles, one with a radius of 5 meters and the other with a radius of 10 meters, and then compare the two areas to determine which circle is larger and by how much?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'geometry.calculate_area_circle',\n    radius: 5,\n    unit: 'm'\n  },\n  {\n    function_name: 'geometry.calculate_area_circle',\n    radius: 10,\n    unit: 'm'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 132, "output_tokens": 54, "total_tokens": 186, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e44c800b-1ca1-475c-a69c-239947628148", "event_id": "152fa7eb-8a35-4cf2-bbb4-d1efd49f3210", "parent_event_id": "e44c800b-1ca1-475c-a69c-239947628148", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1483, "start_time": "2024-06-20T05:24:48.171Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_74", "variant_name": null}, {"function_name": "Fn_parallel_function_74", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_74\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"function\":\"3x^2 + 2x - 1\",\"value\":5,\"meta\":\"Value\",\"function_variable\":\"x\"},{\"function\":\"4y^3 - 3y^2 + 2y - 1\",\"value\":3,\"meta\":\"Value\",\"function_variable\":\"y\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_74_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Compute the derivative of a function at a specific value.\n    function_name: 'calculus.derivative' or null,\n    // The function to calculate the derivative of.\n    function: string,\n    // The value where the derivative needs to be calculated at.\n    value: int,\n    // The variable present in the function, for instance x or y, etc. (default: x)\n    function_variable: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you compute the derivative of the function 3x^2 + 2x - 1 at the value 5, where the variable present in the function is 'x', and then compute the derivative of the function 4y^3 - 3y^2 + 2y - 1 at the value 3, where the variable present in the function is 'y'?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        \"function_name\": \"calculus.derivative\",\n        \"function\": \"3x^2 + 2x - 1\",\n        \"value\": 5,\n        \"function_variable\": \"x\"\n    },\n    {\n        \"function_name\": \"calculus.derivative\",\n        \"function\": \"4y^3 - 3y^2 + 2y - 1\",\n        \"value\": 3,\n        \"function_variable\": \"y\"\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 195, "output_tokens": 102, "total_tokens": 297, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ebde2f36-dadd-4431-bcd9-89ba1d832374", "event_id": "b472f42e-9d94-4870-8bf1-c4370facbf52", "parent_event_id": "ebde2f36-dadd-4431-bcd9-89ba1d832374", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1810, "start_time": "2024-06-20T05:24:47.845Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_72", "variant_name": null}, {"function_name": "Fn_parallel_function_72", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_72\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"function\":\"3x^3 - 2x^2 + 5x - 7\",\"meta\":\"Value\",\"x_value\":4},{\"function\":\"12x^2 - 4x + 5\",\"meta\":\"Value\",\"x_value\":2}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_72_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the derivative of a polynomial function.\n    function_name: 'calculate_derivative' or null,\n    // The polynomial function.\n    function: string,\n    // The x-value at which the derivative is calculated. Optional, if not given, the function will return a function of the derivative instead of a specific value. default is 0.\n    x_value: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you calculate the derivative of the polynomial function '3x^3 - 2x^2 + 5x - 7' and then evaluate this derivative at x=4? After that, could you also calculate the derivative of the resulting function and evaluate it at x=2?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_derivative',\n    function: '3x^3 - 2x^2 + 5x - 7',\n    x_value: 4\n  },\n  {\n    function_name: 'calculate_derivative',\n    function: '12x^2 - 4x + 5',\n    x_value: 2\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 162, "output_tokens": 78, "total_tokens": 240, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "23f1998a-085e-40da-a0bb-c65d4691ef72", "event_id": "23f1998a-085e-40da-a0bb-c65d4691ef72", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 10958, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_75", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: number\\nExpected: any of [4567]\\nActual@2: meta=<Fn_parallel_function_75_Output0_TypeName.Value: 'Value'> number=7890 formatted=True\\nActual all: [Fn_parallel_function_75_Output0(meta=<Fn_parallel_function_75_Output0_TypeName.Value: 'Value'>, number=4567, formatted=True), Fn_parallel_function_75_Output0(meta=<Fn_parallel_function_75_Output0_TypeName.Value: 'Value'>, number=7890, formatted=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e44c800b-1ca1-475c-a69c-239947628148", "event_id": "e44c800b-1ca1-475c-a69c-239947628148", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 10959, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_74", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "73239635-0b1c-4b7c-a330-f7f4e5bc5941", "event_id": "73239635-0b1c-4b7c-a330-f7f4e5bc5941", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 10959, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_68", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ebde2f36-dadd-4431-bcd9-89ba1d832374", "event_id": "ebde2f36-dadd-4431-bcd9-89ba1d832374", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 10960, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_72", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: function\\nExpected: any of ['9x^2 - 4x + 5']\\nActual@2: meta=<Fn_parallel_function_72_Output0_TypeName.Value: 'Value'> function='12x^2 - 4x + 5' x_value=2\\nActual all: [Fn_parallel_function_72_Output0(meta=<Fn_parallel_function_72_Output0_TypeName.Value: 'Value'>, function='3x^3 - 2x^2 + 5x - 7', x_value=4), Fn_parallel_function_72_Output0(meta=<Fn_parallel_function_72_Output0_TypeName.Value: 'Value'>, function='12x^2 - 4x + 5', x_value=2)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "03ad1447-f98e-4543-9438-0d1c6e045e4f", "event_id": "c3728f0d-7b81-4568-a252-684096a6f4f9", "parent_event_id": "03ad1447-f98e-4543-9438-0d1c6e045e4f", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1196, "start_time": "2024-06-20T05:24:48.539Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_76", "variant_name": null}, {"function_name": "Fn_parallel_function_76", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_76\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number\":45,\"meta\":\"Value\"},{\"number\":100,\"meta\":\"Value\"},{\"number\":150,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_76_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Compute the prime factors of a number.\n    function_name: 'number_analysis.prime_factors' or null,\n    // The number to be factored.\n    number: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the prime factors of the numbers 45, 100, and 150?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'number_analysis.prime_factors',\n    number: 45,\n  },\n  {\n    function_name: 'number_analysis.prime_factors',\n    number: 100,\n  },\n  {\n    function_name: 'number_analysis.prime_factors',\n    number: 150,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 80, "output_tokens": 65, "total_tokens": 145, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "03ad1447-f98e-4543-9438-0d1c6e045e4f", "event_id": "03ad1447-f98e-4543-9438-0d1c6e045e4f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 11037, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_76", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "06a94ae5-1970-4d03-a8b0-678576176e38", "event_id": "2bbf9e3b-8528-4233-b1d7-0a9cd4ebfe44", "parent_event_id": "06a94ae5-1970-4d03-a8b0-678576176e38", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1090, "start_time": "2024-06-20T05:24:48.655Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_77", "variant_name": null}, {"function_name": "Fn_parallel_function_77", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_77\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"num1\":45,\"num2\":60,\"meta\":\"Value\"},{\"num1\":81,\"num2\":27,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_77_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Compute the greatest common divisor of two numbers\n    function_name: 'math.gcd' or null,\n    // The first number.\n    num1: int,\n    // The second number.\n    num2: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the greatest common divisor (GCD) of the two pairs of numbers (45, 60) and (81, 27)?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.gcd',\n    num1: 45,\n    num2: 60\n  },\n  {\n    function_name: 'math.gcd',\n    num1: 81,\n    num2: 27\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 100, "output_tokens": 56, "total_tokens": 156, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "06a94ae5-1970-4d03-a8b0-678576176e38", "event_id": "06a94ae5-1970-4d03-a8b0-678576176e38", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 11047, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_77", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7f32de14-d8b7-439c-9da4-927e3fc935d4", "event_id": "658ad0b0-7751-4ccd-b16d-c7fcb75d820b", "parent_event_id": "7f32de14-d8b7-439c-9da4-927e3fc935d4", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 990, "start_time": "2024-06-20T05:24:49.436Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_80", "variant_name": null}, {"function_name": "Fn_parallel_function_80", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_80\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number\":4567,\"meta\":\"Value\",\"return_type\":\"dictionary\"},{\"number\":7890,\"meta\":\"Value\",\"return_type\":\"dictionary\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_80_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the prime factorization of a given integer.\n    function_name: 'prime_factorize' or null,\n    // The number for which to calculate the prime factorization.\n    number: int,\n    // Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'.\n    return_type: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the prime factorization of the number 4567 and the number 7890, if we want the results to be returned in a 'dictionary' format?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'prime_factorize',\n    number: 4567,\n    return_type: 'dictionary',\n  },\n  {\n    function_name: 'prime_factorize',\n    number: 7890,\n    return_type: 'dictionary',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 149, "output_tokens": 56, "total_tokens": 205, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7f32de14-d8b7-439c-9da4-927e3fc935d4", "event_id": "7f32de14-d8b7-439c-9da4-927e3fc935d4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 11729, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_80", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "22368124-2614-453b-ae38-aa59ddde468b", "event_id": "3faeb9f8-19c9-4b10-831e-a4ff245d58e6", "parent_event_id": "22368124-2614-453b-ae38-aa59ddde468b", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1222, "start_time": "2024-06-20T05:24:49.251Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_79", "variant_name": null}, {"function_name": "Fn_parallel_function_79", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_79\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number1\":45,\"number2\":60,\"meta\":\"Value\"},{\"number1\":81,\"number2\":63,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_79_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Compute the greatest common divisor of two given integers.\n    function_name: 'number_theory.gcd' or null,\n    // The first integer.\n    number1: int,\n    // The second integer.\n    number2: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find the greatest common divisor of the following pairs of integers: (45, 60) and (81, 63)? Please use the number_theory.gcd function to compute this.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'number_theory.gcd',\n    number1: 45,\n    number2: 60,\n  },\n  {\n    function_name: 'number_theory.gcd',\n    number1: 81,\n    number2: 63,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 117, "output_tokens": 60, "total_tokens": 177, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "22368124-2614-453b-ae38-aa59ddde468b", "event_id": "22368124-2614-453b-ae38-aa59ddde468b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 11777, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_79", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "18720510-c3c5-4aac-8b86-a5cb079ba789", "event_id": "b2fde703-3976-4eac-b244-d4f2360a1eb8", "parent_event_id": "18720510-c3c5-4aac-8b86-a5cb079ba789", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 925, "start_time": "2024-06-20T05:24:49.658Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_83", "variant_name": null}, {"function_name": "Fn_parallel_function_83", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_83\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"distance\":120,\"duration\":5,\"meta\":\"Value\",\"unit\":null},{\"distance\":150,\"duration\":6,\"meta\":\"Value\",\"unit\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_83_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the velocity for a certain distance travelled within a specific duration.\n    function_name: 'calculate_velocity' or null,\n    // The distance travelled by the object, typically in kilometers.\n    distance: int,\n    // The duration of the journey, typically in hours.\n    duration: int,\n    // Optional parameter. The unit to return the velocity in. If not provided, the default is km/h.\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: A group of cyclists are planning a two-day cycling trip. On the first day, they plan to cover a distance of 120 kilometers in 5 hours. On the second day, they plan to cover a distance of 150 kilometers in 6 hours. They want to know their average velocity for each day in km/h. Could you calculate their velocity for each day using the 'calculate_velocity' function?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_velocity',\n    distance: 120,\n    duration: 5\n  },\n  {\n    function_name: 'calculate_velocity',\n    distance: 150,\n    duration: 6\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 50, "total_tokens": 247, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "18720510-c3c5-4aac-8b86-a5cb079ba789", "event_id": "18720510-c3c5-4aac-8b86-a5cb079ba789", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 11886, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_83", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9e4f9e38-de83-411e-888f-baa0619a7331", "event_id": "9bfc1d01-79f9-446f-9a2d-e1da80877b7e", "parent_event_id": "9e4f9e38-de83-411e-888f-baa0619a7331", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2730, "start_time": "2024-06-20T05:24:47.954Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_73", "variant_name": null}, {"function_name": "Fn_parallel_function_73", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_73\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"function\":\"x^3\",\"start_x\":2,\"end_x\":5,\"meta\":\"Value\",\"method\":\"trapezoid\"},{\"function\":\"x^3\",\"start_x\":2,\"end_x\":5,\"meta\":\"Value\",\"method\":\"simpson\"},{\"function\":\"2*x^2+3*x-1\",\"start_x\":-1,\"end_x\":3,\"meta\":\"Value\",\"method\":\"trapezoid\"},{\"function\":\"2*x^2+3*x-1\",\"start_x\":-1,\"end_x\":3,\"meta\":\"Value\",\"method\":\"simpson\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_73_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the area under a curve for a specified function between two x values.\n    function_name: 'integrate' or null,\n    // The function to integrate, represented as a string. For example, 'x^3'\n    function: string,\n    // The starting x-value to integrate over.\n    start_x: int,\n    // The ending x-value to integrate over.\n    end_x: int,\n    // The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'.\n    method: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you calculate the area under the curve for the function 'x^3' between x values of 2 and 5 using the 'trapezoid' method of numerical integration, and then do the same calculation but using the 'simpson' method? After that, could you repeat these calculations but for the function '2x^2+3x-1' between x values of -1 and 3?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'integrate',\n    function: 'x^3',\n    start_x: 2,\n    end_x: 5,\n    method: 'trapezoid'\n  },\n  {\n    function_name: 'integrate',\n    function: 'x^3',\n    start_x: 2,\n    end_x: 5,\n    method: 'simpson'\n  },\n  {\n    function_name: 'integrate',\n    function: '2*x^2+3*x-1',\n    start_x: -1,\n    end_x: 3,\n    method: 'trapezoid'\n  },\n  {\n    function_name: 'integrate',\n    function: '2*x^2+3*x-1',\n    start_x: -1,\n    end_x: 3,\n    method: 'simpson'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 234, "output_tokens": 182, "total_tokens": 416, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9e4f9e38-de83-411e-888f-baa0619a7331", "event_id": "9e4f9e38-de83-411e-888f-baa0619a7331", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 11989, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_73", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: function\\nExpected: any of ['2x^2+3x-1']\\nActual@3: meta=<Fn_parallel_function_73_Output0_TypeName.Value: 'Value'> function='2*x^2+3*x-1' start_x=-1 end_x=3 method='trapezoid'\\nActual all: [Fn_parallel_function_73_Output0(meta=<Fn_parallel_function_73_Output0_TypeName.Value: 'Value'>, function='x^3', start_x=2, end_x=5, method='trapezoid'), Fn_parallel_function_73_Output0(meta=<Fn_parallel_function_73_Output0_TypeName.Value: 'Value'>, function='x^3', start_x=2, end_x=5, method='simpson'), Fn_parallel_function_73_Output0(meta=<Fn_parallel_function_73_Output0_TypeName.Value: 'Value'>, function='2*x^2+3*x-1', start_x=-1, end_x=3, method='trapezoid'), Fn_parallel_function_73_Output0(meta=<Fn_parallel_function_73_Output0_TypeName.Value: 'Value'>, function='2*x^2+3*x-1', start_x=-1, end_x=3, method='simpson')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c7009312-05b0-4e65-8887-dd775ec0e5a0", "event_id": "f491e1fc-e595-43bb-a26c-4c8973c7c4be", "parent_event_id": "c7009312-05b0-4e65-8887-dd775ec0e5a0", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1097, "start_time": "2024-06-20T05:24:49.656Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_81", "variant_name": null}, {"function_name": "Fn_parallel_function_81", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_81\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"num1\":36,\"num2\":48,\"meta\":\"Value\"},{\"num1\":60,\"num2\":96,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_81_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the greatest common divisor of two integers.\n    function_name: 'math.gcd' or null,\n    // First number.\n    num1: int,\n    // Second number.\n    num2: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"John and Mary are playing a game where they each choose two numbers and then calculate the greatest common divisor (GCD) of their chosen numbers. John chose the numbers 36 and 48, while Mary chose the numbers 60 and 96. Can you help them find the GCD of their chosen numbers?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.gcd',\n    num1: 36,\n    num2: 48\n  },\n  {\n    function_name: 'math.gcd',\n    num1: 60,\n    num2: 96\n  }\n]  ", "metadata": {"logprobs": null, "prompt_tokens": 133, "output_tokens": 57, "total_tokens": 190, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c7009312-05b0-4e65-8887-dd775ec0e5a0", "event_id": "c7009312-05b0-4e65-8887-dd775ec0e5a0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 12056, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_81", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3348d773-e454-4676-b0a5-9d4b98316c9f", "event_id": "380fcefd-7398-44b0-a3b5-b1c93fbcd33d", "parent_event_id": "3348d773-e454-4676-b0a5-9d4b98316c9f", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1114, "start_time": "2024-06-20T05:24:49.746Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_86", "variant_name": null}, {"function_name": "Fn_parallel_function_86", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_86\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"time\":10,\"meta\":\"Value\",\"initial_speed\":0,\"gravity\":-9.81},{\"time\":7,\"meta\":\"Value\",\"initial_speed\":5,\"gravity\":-9.81}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_86_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2\n    function_name: 'calculate_final_speed' or null,\n    // The initial speed of the object in m/s. Default is 0 for an object at rest.\n    initial_speed: int or null,\n    // The time in seconds for which the object is in free fall.\n    time: int,\n    // The acceleration due to gravity. Default is -9.81 m/s^2.\n    gravity: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: A physics experiment is being conducted where two objects are dropped from a height, neglecting air resistance. The first object is dropped with an initial speed of 0 m/s and the second object is dropped with an initial speed of 5 m/s. If the first object is in free fall for 10 seconds and the second object is in free fall for 7 seconds, can you calculate the final speed of both objects considering the acceleration due to gravity as -9.81 m/s^2?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_final_speed',\n    initial_speed: 0,\n    time: 10,\n    gravity: -9.81\n  },\n  {\n    function_name: 'calculate_final_speed',\n    initial_speed: 5,\n    time: 7,\n    gravity: -9.81\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 251, "output_tokens": 70, "total_tokens": 321, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3348d773-e454-4676-b0a5-9d4b98316c9f", "event_id": "3348d773-e454-4676-b0a5-9d4b98316c9f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 12163, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_86", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0c9a1b5c-4bb1-48e2-8042-1bacda26ef29", "event_id": "5bbae936-3125-4933-989e-904310a415d4", "parent_event_id": "0c9a1b5c-4bb1-48e2-8042-1bacda26ef29", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1438, "start_time": "2024-06-20T05:24:49.658Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_84", "variant_name": null}, {"function_name": "Fn_parallel_function_84", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_84\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_velocity\":0,\"acceleration\":5,\"time\":10,\"meta\":\"Value\"},{\"initial_velocity\":10,\"acceleration\":7,\"time\":8,\"meta\":\"Value\"},{\"initial_velocity\":20,\"acceleration\":4,\"time\":12,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_84_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the final velocity of an object given its initial velocity, acceleration, and time.\n    function_name: 'final_velocity' or null,\n    // The initial velocity of the object in meters/second.\n    initial_velocity: int,\n    // The acceleration of the object in meters/second^2.\n    acceleration: int,\n    // The time over which the acceleration is applied in seconds.\n    time: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: A car is participating in a drag race. In the first round, the car starts from rest and accelerates at a rate of 5 meters/second^2 for 10 seconds. In the second round, the car starts with an initial velocity of 10 meters/second and accelerates at a rate of 7 meters/second^2 for 8 seconds. In the third round, the car starts with an initial velocity of 20 meters/second and accelerates at a rate of 4 meters/second^2 for 12 seconds. What are the final velocities of the car in each round?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'final_velocity',\n    initial_velocity: 0,\n    acceleration: 5,\n    time: 10\n  },\n  {\n    function_name: 'final_velocity',\n    initial_velocity: 10,\n    acceleration: 7,\n    time: 8\n  },\n  {\n    function_name: 'final_velocity',\n    initial_velocity: 20,\n    acceleration: 4,\n    time: 12\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 234, "output_tokens": 95, "total_tokens": 329, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0c9a1b5c-4bb1-48e2-8042-1bacda26ef29", "event_id": "0c9a1b5c-4bb1-48e2-8042-1bacda26ef29", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 12398, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_84", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f60e7574-7452-4022-a9dc-c28f95441dc8", "event_id": "0907caf6-c81c-47e8-85ae-6220f8fd1200", "parent_event_id": "f60e7574-7452-4022-a9dc-c28f95441dc8", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1796, "start_time": "2024-06-20T05:24:49.658Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_82", "variant_name": null}, {"function_name": "Fn_parallel_function_82", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_82\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"height\":10,\"meta\":\"Value\",\"initial_velocity\":0,\"gravity\":9.81},{\"height\":20,\"meta\":\"Value\",\"initial_velocity\":0,\"gravity\":9.81},{\"height\":15,\"meta\":\"Value\",\"initial_velocity\":0,\"gravity\":9.81},{\"height\":25,\"meta\":\"Value\",\"initial_velocity\":0,\"gravity\":9.81}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_82_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.\n    function_name: 'calculate_final_velocity' or null,\n    // The height the object is dropped from, in meters.\n    height: int,\n    // The initial velocity of the object in m/s. Default is zero.\n    initial_velocity: int or null,\n    // Acceleration due to gravity. Default value is approximately 9.81 m/s^2, earth's gravity.\n    gravity: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are conducting a physics experiment where you are dropping objects from different heights and observing their final velocities. You drop a tennis ball from a height of 10 meters with an initial velocity of 0 m/s and then from a height of 20 meters with the same initial velocity. You also drop a baseball from a height of 15 meters with an initial velocity of 0 m/s and then from a height of 25 meters with the same initial velocity. Assuming the acceleration due to gravity is approximately 9.81 m/s^2, can you calculate the final velocities of the tennis ball and the baseball for each drop?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_final_velocity',\n    height: 10,\n    initial_velocity: 0,\n    gravity: 9.81\n  },\n  {\n    function_name: 'calculate_final_velocity',\n    height: 20,\n    initial_velocity: 0,\n    gravity: 9.81\n  },\n  {\n    function_name: 'calculate_final_velocity',\n    height: 15,\n    initial_velocity: 0,\n    gravity: 9.81\n  },\n  {\n    function_name: 'calculate_final_velocity',\n    height: 25,\n    initial_velocity: 0,\n    gravity: 9.81\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 270, "output_tokens": 138, "total_tokens": 408, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f60e7574-7452-4022-a9dc-c28f95441dc8", "event_id": "f60e7574-7452-4022-a9dc-c28f95441dc8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 12756, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_82", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "636c97ec-ae37-49a7-a86e-13a72f5159c0", "event_id": "ebbc182a-99cd-473e-a271-b84d05265185", "parent_event_id": "636c97ec-ae37-49a7-a86e-13a72f5159c0", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1856, "start_time": "2024-06-20T05:24:49.736Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_85", "variant_name": null}, {"function_name": "Fn_parallel_function_85", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_85\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_velocity\":0,\"time\":5,\"meta\":\"Value\",\"acceleration\":5.769230769230769},{\"initial_velocity\":15,\"time\":7,\"meta\":\"Value\",\"acceleration\":3.5},{\"initial_velocity\":20,\"time\":10,\"meta\":\"Value\",\"acceleration\":2.0},{\"initial_velocity\":25,\"time\":8,\"meta\":\"Value\",\"acceleration\":0.0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_85_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the displacement of an object in motion given initial velocity, time, and acceleration.\n    function_name: 'calculate_displacement' or null,\n    // The initial velocity of the object in m/s.\n    initial_velocity: int,\n    // The time in seconds that the object has been in motion.\n    time: int,\n    // The acceleration of the object in m/s^2.\n    acceleration: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"A car starts from rest and accelerates uniformly over a time of 5.2 seconds for a distance of 110 m. Determine the acceleration of the car. Then, another car with an initial velocity of 15 m/s accelerates at a rate of 3.5 m/s^2 for a time of 7 seconds. What is the displacement of the second car? Now, consider a third car that starts with an initial velocity of 20 m/s and accelerates at a rate of 2 m/s^2 for a time of 10 seconds. What is the displacement of the third car? Finally, a fourth car with an initial velocity of 25 m/s travels for a time of 8 seconds without any acceleration. What is the displacement of the fourth car?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_displacement',\n    initial_velocity: 0,\n    time: 5.2,\n    acceleration: 5.769230769230769,\n  },\n  {\n    function_name: 'calculate_displacement',\n    initial_velocity: 15,\n    time: 7,\n    acceleration: 3.5,\n  },\n  {\n    function_name: 'calculate_displacement',\n    initial_velocity: 20,\n    time: 10,\n    acceleration: 2,\n  },\n  {\n    function_name: 'calculate_displacement',\n    initial_velocity: 25,\n    time: 8,\n    acceleration: 0,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 272, "output_tokens": 140, "total_tokens": 412, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "636c97ec-ae37-49a7-a86e-13a72f5159c0", "event_id": "636c97ec-ae37-49a7-a86e-13a72f5159c0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 12895, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_85", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: initial_velocity\\nExpected: any of [15]\\nActual@1: meta=<Fn_parallel_function_85_Output0_TypeName.Value: 'Value'> initial_velocity=0 time=5 acceleration=5.769230769230769\\nActual all: [Fn_parallel_function_85_Output0(meta=<Fn_parallel_function_85_Output0_TypeName.Value: 'Value'>, initial_velocity=0, time=5, acceleration=5.769230769230769), Fn_parallel_function_85_Output0(meta=<Fn_parallel_function_85_Output0_TypeName.Value: 'Value'>, initial_velocity=15, time=7, acceleration=3.5), Fn_parallel_function_85_Output0(meta=<Fn_parallel_function_85_Output0_TypeName.Value: 'Value'>, initial_velocity=20, time=10, acceleration=2.0), Fn_parallel_function_85_Output0(meta=<Fn_parallel_function_85_Output0_TypeName.Value: 'Value'>, initial_velocity=25, time=8, acceleration=0.0)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7e2b712b-6a5a-44a5-9351-74260ab6e2cc", "event_id": "f068a6c4-2b36-4579-8bc4-7955bdf7b26f", "parent_event_id": "7e2b712b-6a5a-44a5-9351-74260ab6e2cc", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1195, "start_time": "2024-06-20T05:24:50.427Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_87", "variant_name": null}, {"function_name": "Fn_parallel_function_87", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_87\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"acceleration\":5,\"distance\":100,\"meta\":\"Value\",\"initial_velocity\":0},{\"acceleration\":10,\"distance\":200,\"meta\":\"Value\",\"initial_velocity\":0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_87_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.\n    function_name: 'kinematics.final_velocity_from_distance' or null,\n    // Acceleration of the object, m/s^2.\n    acceleration: int,\n    // Distance traveled by the object, m.\n    distance: int,\n    // Initial velocity of the object. Default is 0, m/s\n    initial_velocity: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are conducting an experiment with two different objects. The first object is accelerated at a rate of 5 m/s^2 and travels a distance of 100 meters. The second object is accelerated at a rate of 10 m/s^2 and travels a distance of 200 meters. Both objects start from rest. Can you calculate the final velocity of each object using the kinematics.final_velocity_from_distance function?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'kinematics.final_velocity_from_distance',\n    acceleration: 5,\n    distance: 100,\n    initial_velocity: 0\n  },\n  {\n    function_name: 'kinematics.final_velocity_from_distance',\n    acceleration: 10,\n    distance: 200,\n    initial_velocity: 0\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 204, "output_tokens": 72, "total_tokens": 276, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7e2b712b-6a5a-44a5-9351-74260ab6e2cc", "event_id": "7e2b712b-6a5a-44a5-9351-74260ab6e2cc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 12925, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_87", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "edf6597c-936f-41b7-b820-70ddd661d582", "event_id": "04258878-36ff-49a4-9f68-d6107469ff51", "parent_event_id": "edf6597c-936f-41b7-b820-70ddd661d582", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3090, "start_time": "2024-06-20T05:24:48.749Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_78", "variant_name": null}, {"function_name": "Fn_parallel_function_78", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_78\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number1\":45,\"number2\":60,\"meta\":\"Value\"},{\"number1\":90,\"number2\":120,\"meta\":\"Value\"},{\"number1\":36,\"number2\":48,\"meta\":\"Value\"},{\"number1\":72,\"number2\":96,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_78_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the highest common factor of two numbers.\n    function_name: 'math.hcf' or null,\n    // First number.\n    number1: int,\n    // Second number.\n    number2: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the highest common factor of the pair of numbers (45, 60) and then use that result to find the highest common factor with another pair of numbers (90, 120)? Please also find the highest common factor of the pair (36, 48) and then find the highest common factor of that result with the pair (72, 96).\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.hcf',\n    number1: 45,\n    number2: 60,\n  },\n  {\n    function_name: 'math.hcf',\n    number1: 90,\n    number2: 120,\n  },\n  {\n    function_name: 'math.hcf',\n    number1: 36,\n    number2: 48,\n  },\n  {\n    function_name: 'math.hcf',\n    number1: 72,\n    number2: 96,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 145, "output_tokens": 110, "total_tokens": 255, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "edf6597c-936f-41b7-b820-70ddd661d582", "event_id": "edf6597c-936f-41b7-b820-70ddd661d582", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 13142, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_78", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b42a3a68-8e24-4435-a3f1-fe5bdd66a273", "event_id": "9c2b3cf9-8234-42f9-9231-389810b46e5f", "parent_event_id": "b42a3a68-8e24-4435-a3f1-fe5bdd66a273", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1283, "start_time": "2024-06-20T05:24:50.584Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_89", "variant_name": null}, {"function_name": "Fn_parallel_function_89", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_89\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_velocity\":0,\"height\":10,\"meta\":\"Value\",\"gravity\":9.8},{\"initial_velocity\":5,\"height\":20,\"meta\":\"Value\",\"gravity\":9.8}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_89_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the final speed of an object dropped from a certain height without air resistance.\n    function_name: 'calculate_final_speed' or null,\n    // The initial velocity of the object.\n    initial_velocity: int,\n    // The height from which the object is dropped.\n    height: int,\n    // The gravitational acceleration. Default is 9.8 m/s^2.\n    gravity: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"An experiment was conducted where two objects were dropped from different heights without air resistance. The first object had an initial velocity of 0 m/s and was dropped from a height of 10 meters. The second object had an initial velocity of 5 m/s and was dropped from a height of 20 meters. Assuming the gravitational acceleration to be 9.8 m/s^2, can you calculate the final speed of both objects?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_final_speed',\n    initial_velocity: 0,\n    height: 10,\n    gravity: 9.8\n  },\n  {\n    function_name: 'calculate_final_speed',\n    initial_velocity: 5,\n    height: 20,\n    gravity: 9.8\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 70, "total_tokens": 267, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b42a3a68-8e24-4435-a3f1-fe5bdd66a273", "event_id": "b42a3a68-8e24-4435-a3f1-fe5bdd66a273", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 13170, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_89", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "88490067-a5a4-42e1-ad74-a57e7adc9aa3", "event_id": "458c864e-3bb8-4a83-a427-e34d75af2415", "parent_event_id": "88490067-a5a4-42e1-ad74-a57e7adc9aa3", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1659, "start_time": "2024-06-20T05:24:50.861Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_92", "variant_name": null}, {"function_name": "Fn_parallel_function_92", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_92\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Los Angeles, CA\",\"meta\":\"Value\",\"operating_hours\":22},{\"location\":\"San Francisco, CA\",\"meta\":\"Value\",\"operating_hours\":22},{\"location\":\"Seattle, WA\",\"meta\":\"Value\",\"operating_hours\":22}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_92_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate nearby vegan restaurants based on specific criteria like operating hours.\n    function_name: 'vegan_restaurant.find_nearby' or null,\n    // The city and state, e.g. New York, NY\n    location: string,\n    // Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. (default: 21)\n    operating_hours: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you help me find vegan restaurants in Los Angeles, CA that are open until at least 22:00, and then do the same for San Francisco, CA and Seattle, WA?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'vegan_restaurant.find_nearby',\n    location: 'Los Angeles, CA',\n    operating_hours: 22\n  },\n  {\n    function_name: 'vegan_restaurant.find_nearby',\n    location: 'San Francisco, CA',\n    operating_hours: 22\n  },\n  {\n    function_name: 'vegan_restaurant.find_nearby',\n    location: 'Seattle, WA',\n    operating_hours: 22\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 167, "output_tokens": 100, "total_tokens": 267, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "88490067-a5a4-42e1-ad74-a57e7adc9aa3", "event_id": "88490067-a5a4-42e1-ad74-a57e7adc9aa3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 13823, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_92", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1d3ff817-4c88-46ce-9224-ecabb5c3a262", "event_id": "e15d6af4-1479-459a-9bfd-71db3f8b894e", "parent_event_id": "1d3ff817-4c88-46ce-9224-ecabb5c3a262", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1851, "start_time": "2024-06-20T05:24:50.687Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_90", "variant_name": null}, {"function_name": "Fn_parallel_function_90", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_90\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_location\":\"San Francisco\",\"end_location\":\"Palo Alto\",\"meta\":\"Value\",\"route_type\":\"Value0\"},{\"start_location\":\"Palo Alto\",\"end_location\":\"Golden Gate Bridge\",\"meta\":\"Value\",\"route_type\":\"Value1\"},{\"start_location\":\"Golden Gate Bridge\",\"end_location\":\"San Francisco\",\"meta\":\"Value\",\"route_type\":\"Value0\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_90_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve directions from one location to another.\n    function_name: 'get_directions' or null,\n    // The starting point of the journey.\n    start_location: string,\n    // The destination point of the journey.\n    end_location: string,\n    // Type of route to use (e.g., fastest, scenic). Default is fastest.\n    route_type: 'fastest' or 'scenic' or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you provide me with the fastest route from my home in San Francisco to my office in Palo Alto and then a scenic route from Palo Alto to the Golden Gate Bridge in San Francisco, and finally the fastest route back to my home from the Golden Gate Bridge?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_directions',\n    start_location: 'San Francisco',\n    end_location: 'Palo Alto',\n    route_type: 'fastest'\n  },\n  {\n    function_name: 'get_directions',\n    start_location: 'Palo Alto',\n    end_location: 'Golden Gate Bridge',\n    route_type: 'scenic'\n  },\n  {\n    function_name: 'get_directions',\n    start_location: 'Golden Gate Bridge',\n    end_location: 'San Francisco',\n    route_type: 'fastest'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 163, "output_tokens": 117, "total_tokens": 280, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1d3ff817-4c88-46ce-9224-ecabb5c3a262", "event_id": "1d3ff817-4c88-46ce-9224-ecabb5c3a262", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 13842, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_90", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: start_location\\nExpected: any of ['Golden Gate Bridge in San Francisco', 'Golden Gate Bridge, San Francisco', \\\"'Golden Gate Bridge\\\"]\\nActual@3: meta=<Fn_parallel_function_90_Output0_TypeName.Value: 'Value'> start_location='Golden Gate Bridge' end_location='San Francisco' route_type=<Enum_Fn_parallel_function_90_Enum0.Value0: 'Value0'>\\nActual all: [Fn_parallel_function_90_Output0(meta=<Fn_parallel_function_90_Output0_TypeName.Value: 'Value'>, start_location='San Francisco', end_location='Palo Alto', route_type=<Enum_Fn_parallel_function_90_Enum0.Value0: 'Value0'>), Fn_parallel_function_90_Output0(meta=<Fn_parallel_function_90_Output0_TypeName.Value: 'Value'>, start_location='Palo Alto', end_location='Golden Gate Bridge', route_type=<Enum_Fn_parallel_function_90_Enum0.Value1: 'Value1'>), Fn_parallel_function_90_Output0(meta=<Fn_parallel_function_90_Output0_TypeName.Value: 'Value'>, start_location='Golden Gate Bridge', end_location='San Francisco', route_type=<Enum_Fn_parallel_function_90_Enum0.Value0: 'Value0'>)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "975eb5d1-cabc-4638-8315-49f54243ef19", "event_id": "8817015b-d72d-4acf-85ee-692b95fa9d02", "parent_event_id": "975eb5d1-cabc-4638-8315-49f54243ef19", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1104, "start_time": "2024-06-20T05:24:51.624Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_96", "variant_name": null}, {"function_name": "Fn_parallel_function_96", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_96\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"current\":10,\"radius\":0.5,\"meta\":\"Value\",\"permeability\":null},{\"current\":15,\"radius\":1.0,\"meta\":\"Value\",\"permeability\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_96_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the magnetic field produced at the center of a circular loop carrying current.\n    function_name: 'calculate_magnetic_field' or null,\n    // The current through the circular loop in Amperes.\n    current: int,\n    // The radius of the circular loop in meters.\n    radius: float,\n    // The magnetic permeability. Default is permeability in free space.\n    permeability: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"A team of scientists is conducting an experiment involving a circular loop carrying an electric current. They have two different setups for this experiment. In the first setup, the loop has a radius of 0.5 meters and is carrying a current of 10 Amperes. In the second setup, the loop has a radius of 1 meter and is carrying a current of 15 Amperes. They want to compare the magnetic fields produced at the center of the loop in both setups. They assume the magnetic permeability to be the same as in free space in both cases. Can you calculate the magnetic fields for both setups using the 'calculate_magnetic_field' function and tell them which setup produces a stronger magnetic field?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_magnetic_field',\n    current: 10,\n    radius: 0.5,\n    permeability: null\n  },\n  {\n    function_name: 'calculate_magnetic_field',\n    current: 15,\n    radius: 1,\n    permeability: null\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 257, "output_tokens": 68, "total_tokens": 325, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "49d7bad2-96f5-4354-a28c-b0f8d4a7353d", "event_id": "8710248d-3a9f-48cc-af27-94a350f2d128", "parent_event_id": "49d7bad2-96f5-4354-a28c-b0f8d4a7353d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1631, "start_time": "2024-06-20T05:24:51.097Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_93", "variant_name": null}, {"function_name": "Fn_parallel_function_93", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_93\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"origin\":\"New York City\",\"destination\":\"Los Angeles\",\"meta\":\"Value\",\"unit\":\"miles\"},{\"origin\":\"Los Angeles\",\"destination\":\"Miami\",\"meta\":\"Value\",\"unit\":\"miles\"},{\"origin\":\"Miami\",\"destination\":\"New York City\",\"meta\":\"Value\",\"unit\":\"miles\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_93_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the shortest driving distance between two locations.\n    function_name: 'get_shortest_driving_distance' or null,\n    // Starting point of the journey.\n    origin: string,\n    // End point of the journey.\n    destination: string,\n    // Preferred unit of distance (optional, default is kilometers).\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the shortest driving distance in miles from New York City to Los Angeles and then from Los Angeles to Miami, considering that you have to return to New York City from Miami?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_shortest_driving_distance',\n    origin: 'New York City',\n    destination: 'Los Angeles',\n    unit: 'miles'\n  },\n  {\n    function_name: 'get_shortest_driving_distance',\n    origin: 'Los Angeles',\n    destination: 'Miami',\n    unit: 'miles'\n  },\n  {\n    function_name: 'get_shortest_driving_distance',\n    origin: 'Miami',\n    destination: 'New York City',\n    unit: 'miles'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 132, "output_tokens": 113, "total_tokens": 245, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "975eb5d1-cabc-4638-8315-49f54243ef19", "event_id": "975eb5d1-cabc-4638-8315-49f54243ef19", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 14031, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_96", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "49d7bad2-96f5-4354-a28c-b0f8d4a7353d", "event_id": "49d7bad2-96f5-4354-a28c-b0f8d4a7353d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 14031, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_93", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "aaa904da-bb2c-4a96-8b87-4800d846f701", "event_id": "0326e7a8-dadf-4c88-b0b3-c5f3ad9f5d0f", "parent_event_id": "aaa904da-bb2c-4a96-8b87-4800d846f701", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2376, "start_time": "2024-06-20T05:24:50.475Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_88", "variant_name": null}, {"function_name": "Fn_parallel_function_88", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_88\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_velocity\":0,\"acceleration\":6,\"time\":10,\"meta\":\"Value\"},{\"initial_velocity\":20,\"acceleration\":4,\"time\":15,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_88_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration.\n    function_name: 'calculate_final_velocity' or null,\n    // The initial velocity of the object.\n    initial_velocity: int,\n    // The acceleration of the object.\n    acceleration: int,\n    // The time of acceleration.\n    time: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are observing two racing cars on a straight track. The first car, Car A, starts from rest and accelerates at a rate of 6 m/s\u00b2 for 10 seconds. The second car, Car B, starts with an initial velocity of 20 m/s and accelerates at a rate of 4 m/s\u00b2 for 15 seconds. Using the function 'calculate_final_velocity', can you determine the final velocities of both Car A and Car B?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_final_velocity',\n    initial_velocity: 0,\n    acceleration: 6,\n    time: 10\n  },\n  {\n    function_name: 'calculate_final_velocity',\n    initial_velocity: 20,\n    acceleration: 4,\n    time: 15\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 66, "total_tokens": 263, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "aaa904da-bb2c-4a96-8b87-4800d846f701", "event_id": "aaa904da-bb2c-4a96-8b87-4800d846f701", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 14154, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_88", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "92f191c7-1987-4e48-9366-7f2795d3d481", "event_id": "2fd38f47-71ae-4e0b-9c9e-a986173c3a84", "parent_event_id": "92f191c7-1987-4e48-9366-7f2795d3d481", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1398, "start_time": "2024-06-20T05:24:51.593Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_95", "variant_name": null}, {"function_name": "Fn_parallel_function_95", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_95\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"charge\":5,\"distance\":2,\"meta\":\"Value\",\"permitivity\":0},{\"charge\":3,\"distance\":4,\"meta\":\"Value\",\"permitivity\":0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_95_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the electric field produced by a charge at a certain distance.\n    function_name: 'calculate_electric_field' or null,\n    // Charge in coulombs producing the electric field.\n    charge: int,\n    // Distance from the charge in meters where the field is being measured.\n    distance: int,\n    // Permitivity of the space where field is being calculated, default is for vacuum.\n    permitivity: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"In a physics experiment, you are given two charges. The first charge is 5 coulombs and is placed at a distance of 2 meters from the point where the electric field is being measured. The second charge is 3 coulombs and is placed at a distance of 4 meters from the same point. The experiment is conducted in a vacuum. Can you calculate the electric field produced by each charge at the point of measurement by invoking the 'calculate_electric_field' function?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_electric_field',\n    charge: 5,\n    distance: 2,\n    permitivity: 8.854e-12\n  },\n  {\n    function_name: 'calculate_electric_field',\n    charge: 3,\n    distance: 4,\n    permitivity: 8.854e-12\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 215, "output_tokens": 78, "total_tokens": 293, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "92f191c7-1987-4e48-9366-7f2795d3d481", "event_id": "92f191c7-1987-4e48-9366-7f2795d3d481", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 14294, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_95", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7e263d48-16e1-4b28-b456-bcb5725693cd", "event_id": "2f7d79b3-abd7-4db5-8abe-ce5a626e2df8", "parent_event_id": "7e263d48-16e1-4b28-b456-bcb5725693cd", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1351, "start_time": "2024-06-20T05:24:51.841Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_97", "variant_name": null}, {"function_name": "Fn_parallel_function_97", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_97\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"charge1\":5,\"charge2\":10,\"distance\":2,\"meta\":\"Value\",\"medium_permittivity\":null},{\"charge1\":5,\"charge2\":10,\"distance\":2,\"meta\":\"Value\",\"medium_permittivity\":5e-12}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_97_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the electromagnetic force between two charges placed at a certain distance.\n    function_name: 'electromagnetic_force' or null,\n    // The magnitude of the first charge in coulombs.\n    charge1: int,\n    // The magnitude of the second charge in coulombs.\n    charge2: int,\n    // The distance between the two charges in meters.\n    distance: int,\n    // The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity).\n    medium_permittivity: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"In a physics experiment, you are given two charges. The first charge has a magnitude of 5 coulombs and the second charge has a magnitude of 10 coulombs. These charges are placed at a distance of 2 meters from each other. You are asked to calculate the electromagnetic force between these charges. You perform the experiment twice. The first time, the charges are placed in a vacuum, which has a permittivity of 8.854 x 10^-12 F/m. The second time, the charges are placed in a medium with a relative permittivity of 5 x 10^-12 F/m. Can you calculate the electromagnetic force between the charges in both scenarios?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'electromagnetic_force',\n    charge1: 5,\n    charge2: 10,\n    distance: 2,\n    medium_permittivity: null\n  },\n  {\n    function_name: 'electromagnetic_force',\n    charge1: 5,\n    charge2: 10,\n    distance: 2,\n    medium_permittivity: 5e-12\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 296, "output_tokens": 90, "total_tokens": 386, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7e263d48-16e1-4b28-b456-bcb5725693cd", "event_id": "7e263d48-16e1-4b28-b456-bcb5725693cd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 14494, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_97", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a12f74bb-0024-4639-806c-04148ea9bca3", "event_id": "67944587-d408-4a3f-880a-676dd5b64af8", "parent_event_id": "a12f74bb-0024-4639-806c-04148ea9bca3", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1803, "start_time": "2024-06-20T05:24:51.455Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_94", "variant_name": null}, {"function_name": "Fn_parallel_function_94", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_94\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_location\":\"New York\",\"end_location\":\"Miami\",\"stops\":[\"Philadelphia\",\"Washington D.C.\",\"Atlanta\"],\"meta\":\"Value\"},{\"start_location\":\"New York\",\"end_location\":\"Miami\",\"stops\":[\"Philadelphia\",\"Washington D.C.\"],\"meta\":\"Value\"},{\"start_location\":\"Philadelphia\",\"end_location\":\"Miami\",\"stops\":[\"Washington D.C.\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_94_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Estimate the travel time for a specific route with optional stops.\n    function_name: 'route.estimate_time' or null,\n    // The starting point for the journey.\n    start_location: string,\n    // The destination for the journey.\n    end_location: string,\n    // Additional cities or points of interest to stop at during the journey ordered. (default: ['NYC'])\n    stops: string[],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What would be the estimated travel time if I start my journey from New York, make stops at Philadelphia, Washington D.C., and Atlanta, and finally reach Miami? Also, what if I skip the stop at Atlanta and directly go to Miami from Washington D.C.? And lastly, what if I start from Philadelphia instead of New York, stop at Washington D.C., and then reach Miami?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'route.estimate_time',\n    start_location: 'New York',\n    end_location: 'Miami',\n    stops: ['Philadelphia', 'Washington D.C.', 'Atlanta']\n  },\n  {\n    function_name: 'route.estimate_time',\n    start_location: 'New York',\n    end_location: 'Miami',\n    stops: ['Philadelphia', 'Washington D.C.']\n  },\n  {\n    function_name: 'route.estimate_time',\n    start_location: 'Philadelphia',\n    end_location: 'Miami',\n    stops: ['Washington D.C.']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 187, "output_tokens": 123, "total_tokens": 310, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a12f74bb-0024-4639-806c-04148ea9bca3", "event_id": "a12f74bb-0024-4639-806c-04148ea9bca3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 14561, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_94", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "adc899ba-d30a-4280-b43a-25d3092f3661", "event_id": "00462e3a-e00f-4920-8b4e-685da209e674", "parent_event_id": "adc899ba-d30a-4280-b43a-25d3092f3661", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1675, "start_time": "2024-06-20T05:24:51.868Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_98", "variant_name": null}, {"function_name": "Fn_parallel_function_98", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_98\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"inductance\":0.005,\"capacitance\":1e-7,\"meta\":\"Value\",\"round_off\":3},{\"inductance\":0.007,\"capacitance\":2e-7,\"meta\":\"Value\",\"round_off\":4}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_98_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the resonant frequency of an LC (inductor-capacitor) circuit.\n    function_name: 'calculate_resonant_frequency' or null,\n    // The inductance (L) in henries (H).\n    inductance: float,\n    // The capacitance (C) in farads (F).\n    capacitance: float,\n    // Rounding off the result to a certain decimal places, default is 2.\n    round_off: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the resonant frequency of an LC circuit with an inductance of 0.005 henries and a capacitance of 0.0000001 farads, and then round off the result to 3 decimal places? After that, can you calculate it again with an inductance of 0.007 henries and a capacitance of 0.0000002 farads, rounding off the result to 4 decimal places?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_resonant_frequency',\n    inductance: 0.005,\n    capacitance: 0.0000001,\n    round_off: 3,\n  },\n  {\n    function_name: 'calculate_resonant_frequency',\n    inductance: 0.007,\n    capacitance: 0.0000002,\n    round_off: 4,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 88, "total_tokens": 307, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "adc899ba-d30a-4280-b43a-25d3092f3661", "event_id": "adc899ba-d30a-4280-b43a-25d3092f3661", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 14846, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_98", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "bceb6087-8522-4eb4-8be0-162ecdb00d2d", "event_id": "983ad472-0a23-4c47-9d1c-fef736391b40", "parent_event_id": "bceb6087-8522-4eb4-8be0-162ecdb00d2d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1203, "start_time": "2024-06-20T05:24:52.730Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_102", "variant_name": null}, {"function_name": "Fn_parallel_function_102", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_102\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"mass\":10,\"volume\":2,\"meta\":\"Value\",\"unit\":null},{\"mass\":15,\"volume\":3,\"meta\":\"Value\",\"unit\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_102_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the density of a substance based on its mass and volume.\n    function_name: 'calculate_density' or null,\n    // The mass of the substance in kilograms.\n    mass: int,\n    // The volume of the substance in cubic meters.\n    volume: int,\n    // The unit of density. Default is kg/m\u00b3\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: A scientist is conducting an experiment involving two different substances. The first substance has a mass of 10 kilograms and occupies a volume of 2 cubic meters. The second substance has a mass of 15 kilograms and occupies a volume of 3 cubic meters. The scientist wants to compare the densities of these two substances in kg/m\u00b3. Can you help the scientist calculate the densities of these two substances using the 'calculate_density' function?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_density',\n    mass: 10,\n    volume: 2\n  },\n  {\n    function_name: 'calculate_density',\n    mass: 15,\n    volume: 3\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 188, "output_tokens": 50, "total_tokens": 238, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "bceb6087-8522-4eb4-8be0-162ecdb00d2d", "event_id": "bceb6087-8522-4eb4-8be0-162ecdb00d2d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 15235, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_102", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "38e2772b-a8dd-46eb-af6e-0e0356a57026", "event_id": "4dc4e275-f40a-4c64-a42f-206bfe813802", "parent_event_id": "38e2772b-a8dd-46eb-af6e-0e0356a57026", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1269, "start_time": "2024-06-20T05:24:52.992Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_104", "variant_name": null}, {"function_name": "Fn_parallel_function_104", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_104\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"substance\":\"A\",\"mass\":2,\"initial_temperature\":25,\"final_temperature\":75,\"meta\":\"Value\",\"pressure\":1},{\"substance\":\"A\",\"mass\":2,\"initial_temperature\":10,\"final_temperature\":50,\"meta\":\"Value\",\"pressure\":1}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_104_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.\n    function_name: 'entropy_change.calculate' or null,\n    // The substance for which the change in entropy is calculated.\n    substance: string,\n    // The mass of the substance in kg.\n    mass: int,\n    // The initial temperature of the substance in degree Celsius.\n    initial_temperature: int,\n    // The final temperature of the substance in degree Celsius.\n    final_temperature: int,\n    // The pressure the substance is under in atmospheres. (default: 1)\n    pressure: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: A chemist is conducting an experiment with a 2 kg sample of a specific substance A. The experiment begins with the substance at an initial temperature of 25 degrees Celsius. The chemist then heats the substance to a final temperature of 75 degrees Celsius. The experiment is conducted under a pressure of 1 atmosphere. The chemist repeats the experiment with the same substance, but this time the initial temperature is 10 degrees Celsius and the final temperature is 50 degrees Celsius. Can you calculate the change in entropy for the substance under these set initial and final conditions for both experiments?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'entropy_change.calculate',\n    substance: 'A',\n    mass: 2,\n    initial_temperature: 25,\n    final_temperature: 75,\n    pressure: 1\n  },\n  {\n    function_name: 'entropy_change.calculate',\n    substance: 'A',\n    mass: 2,\n    initial_temperature: 10,\n    final_temperature: 50,\n    pressure: 1\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 268, "output_tokens": 92, "total_tokens": 360, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ad8ad58a-b155-43e3-93af-d37873929db4", "event_id": "204b4af9-df9f-4d52-b1e5-516e6a78e569", "parent_event_id": "ad8ad58a-b155-43e3-93af-d37873929db4", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1409, "start_time": "2024-06-20T05:24:52.852Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_103", "variant_name": null}, {"function_name": "Fn_parallel_function_103", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_103\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"gauge_pressure\":2.5,\"meta\":\"Value\",\"atm_pressure\":1},{\"gauge_pressure\":2.5,\"meta\":\"Value\",\"atm_pressure\":1}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_103_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the absolute pressure from gauge and atmospheric pressures.\n    function_name: 'calc_absolute_pressure' or null,\n    // The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided.\n    atm_pressure: int or null,\n    // The gauge pressure in atmospheres (atm). Must be provided.\n    gauge_pressure: float,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are working in a lab and you have a sealed container with a gauge pressure of 2.5 atm. You are located at sea level where the atmospheric pressure is 1 atm. However, you need to transport the container to a high-altitude location where the atmospheric pressure is 0.85 atm. What will be the absolute pressure of the container at sea level and at the high-altitude location?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calc_absolute_pressure',\n    atm_pressure: 1,\n    gauge_pressure: 2.5\n  },\n  {\n    function_name: 'calc_absolute_pressure',\n    atm_pressure: 0.85,\n    gauge_pressure: 2.5\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 182, "output_tokens": 62, "total_tokens": 244, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "436f140d-5526-4f02-98ff-20e24d81750a", "event_id": "c6354ad8-2716-4c74-957d-12d95757b103", "parent_event_id": "436f140d-5526-4f02-98ff-20e24d81750a", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1068, "start_time": "2024-06-20T05:24:53.193Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_105", "variant_name": null}, {"function_name": "Fn_parallel_function_105", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_105\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_temp\":300,\"final_temp\":350,\"heat_capacity\":4.18,\"meta\":\"Value\",\"isothermal\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_105_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the entropy change for an isothermal and reversible process.\n    function_name: 'calculate_entropy_change' or null,\n    // The initial temperature in Kelvin.\n    initial_temp: int,\n    // The final temperature in Kelvin.\n    final_temp: int,\n    // The heat capacity in J/K.\n    heat_capacity: float,\n    // Whether the process is isothermal. Default is True.\n    isothermal: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"In a thermodynamics experiment, you are tasked with calculating the entropy change for a process. The process starts at an initial temperature of 300 Kelvin and ends at a final temperature of 350 Kelvin. The heat capacity of the system is 4.18 J/K. The process is isothermal. Can you calculate the entropy change for this process? What if the process is not isothermal, how does the entropy change?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        \"function_name\": \"calculate_entropy_change\",\n        \"initial_temp\": 300,\n        \"final_temp\": 350,\n        \"heat_capacity\": 4.18,\n        \"isothermal\": true\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 200, "output_tokens": 49, "total_tokens": 249, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ce4b8d7f-4325-42ee-a9e3-0b60fbe34bbe", "event_id": "7a99ce52-bdea-43a0-ab1c-655be250a732", "parent_event_id": "ce4b8d7f-4325-42ee-a9e3-0b60fbe34bbe", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3507, "start_time": "2024-06-20T05:24:50.754Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_91", "variant_name": null}, {"function_name": "Fn_parallel_function_91", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_91\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"destination\":\"Tokyo\",\"days\":7,\"daily_budget\":200,\"meta\":\"Value\",\"exploration_type\":\"Value1\"},{\"destination\":\"Paris\",\"days\":10,\"daily_budget\":150,\"meta\":\"Value\",\"exploration_type\":\"Value2\"},{\"destination\":\"Sydney\",\"days\":5,\"daily_budget\":100,\"meta\":\"Value\",\"exploration_type\":\"Value0\"},{\"destination\":\"Rome\",\"days\":12,\"daily_budget\":180,\"meta\":\"Value\",\"exploration_type\":\"Value3\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_91_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.\n    function_name: 'travel_itinerary_generator' or null,\n    // Destination city of the trip.\n    destination: string,\n    // Number of days for the trip.\n    days: int,\n    // The maximum daily budget for the trip.\n    daily_budget: int,\n    // The preferred exploration type. (default: urban)\n    exploration_type: 'nature' or 'urban' or 'history' or 'culture' or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you generate a travel itinerary for a 7-day trip to Tokyo with a daily budget of $200 focusing on urban exploration, then do the same for a 10-day trip to Paris with a daily budget of $150 focusing on history, followed by a 5-day trip to Sydney with a daily budget of $100 focusing on nature, and finally a 12-day trip to Rome with a daily budget of $180 focusing on culture?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'travel_itinerary_generator',\n    destination: 'Tokyo',\n    days: 7,\n    daily_budget: 200,\n    exploration_type: 'urban'\n  },\n  {\n    function_name: 'travel_itinerary_generator',\n    destination: 'Paris',\n    days: 10,\n    daily_budget: 150,\n    exploration_type: 'history'\n  },\n  {\n    function_name: 'travel_itinerary_generator',\n    destination: 'Sydney',\n    days: 5,\n    daily_budget: 100,\n    exploration_type: 'nature'\n  },\n  {\n    function_name: 'travel_itinerary_generator',\n    destination: 'Rome',\n    days: 12,\n    daily_budget: 180,\n    exploration_type: 'culture'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 224, "output_tokens": 165, "total_tokens": 389, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "38e2772b-a8dd-46eb-af6e-0e0356a57026", "event_id": "38e2772b-a8dd-46eb-af6e-0e0356a57026", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 15564, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_104", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ad8ad58a-b155-43e3-93af-d37873929db4", "event_id": "ad8ad58a-b155-43e3-93af-d37873929db4", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 15564, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_103", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: atm_pressure\\nExpected: any of [0.85]\\nActual@2: meta=<Fn_parallel_function_103_Output0_TypeName.Value: 'Value'> atm_pressure=1 gauge_pressure=2.5\\nActual all: [Fn_parallel_function_103_Output0(meta=<Fn_parallel_function_103_Output0_TypeName.Value: 'Value'>, atm_pressure=1, gauge_pressure=2.5), Fn_parallel_function_103_Output0(meta=<Fn_parallel_function_103_Output0_TypeName.Value: 'Value'>, atm_pressure=1, gauge_pressure=2.5)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "436f140d-5526-4f02-98ff-20e24d81750a", "event_id": "436f140d-5526-4f02-98ff-20e24d81750a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 15565, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_105", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ce4b8d7f-4325-42ee-a9e3-0b60fbe34bbe", "event_id": "ce4b8d7f-4325-42ee-a9e3-0b60fbe34bbe", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 15565, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_91", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a2d65b61-6852-4c99-b6db-532408a60e4f", "event_id": "6d3dc384-bb39-465a-a1a7-ae60dc0b600f", "parent_event_id": "a2d65b61-6852-4c99-b6db-532408a60e4f", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1849, "start_time": "2024-06-20T05:24:52.540Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_100", "variant_name": null}, {"function_name": "Fn_parallel_function_100", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_100\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"mass\":500,\"phase_transition\":\"melting\",\"meta\":\"Value\",\"substance\":\"water\"},{\"mass\":500,\"phase_transition\":\"freezing\",\"meta\":\"Value\",\"substance\":\"water\"},{\"mass\":500,\"phase_transition\":\"vaporization\",\"meta\":\"Value\",\"substance\":\"water\"},{\"mass\":500,\"phase_transition\":\"condensation\",\"meta\":\"Value\",\"substance\":\"water\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_100_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.\n    function_name: 'thermo.calculate_energy' or null,\n    // Mass of the substance in grams.\n    mass: int,\n    // Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'.\n    phase_transition: string,\n    // The substance which is undergoing phase change, default is 'water'\n    substance: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me calculate the energy required for a phase change? I have a science experiment where I am first melting 500 grams of ice at 0 degrees Celsius, then I am freezing it back. After that, I am vaporizing the same mass of water at 100 degrees Celsius and then condensing it back to liquid state. The substance I am using for this experiment is water. Can you tell me how much energy is required or released during each of these phase changes?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'thermo.calculate_energy',\n    mass: 500,\n    phase_transition: 'melting',\n    substance: 'water'\n  },\n  {\n    function_name: 'thermo.calculate_energy',\n    mass: 500,\n    phase_transition: 'freezing',\n    substance: 'water'\n  },\n  {\n    function_name: 'thermo.calculate_energy',\n    mass: 500,\n    phase_transition: 'vaporization',\n    substance: 'water'\n  },\n  {\n    function_name: 'thermo.calculate_energy',\n    mass: 500,\n    phase_transition: 'condensation',\n    substance: 'water'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 226, "output_tokens": 139, "total_tokens": 365, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a2d65b61-6852-4c99-b6db-532408a60e4f", "event_id": "a2d65b61-6852-4c99-b6db-532408a60e4f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 15693, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_100", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: phase_transition\\nExpected: any of ['condensation']\\nActual@3: meta=<Fn_parallel_function_100_Output0_TypeName.Value: 'Value'> mass=500 phase_transition='vaporization' substance='water'\\nActual all: [Fn_parallel_function_100_Output0(meta=<Fn_parallel_function_100_Output0_TypeName.Value: 'Value'>, mass=500, phase_transition='melting', substance='water'), Fn_parallel_function_100_Output0(meta=<Fn_parallel_function_100_Output0_TypeName.Value: 'Value'>, mass=500, phase_transition='freezing', substance='water'), Fn_parallel_function_100_Output0(meta=<Fn_parallel_function_100_Output0_TypeName.Value: 'Value'>, mass=500, phase_transition='vaporization', substance='water'), Fn_parallel_function_100_Output0(meta=<Fn_parallel_function_100_Output0_TypeName.Value: 'Value'>, mass=500, phase_transition='condensation', substance='water')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "45473792-1ad8-42f5-897b-c3b1d35f892f", "event_id": "42b77570-ee82-4436-ad4d-c97fb3a5d277", "parent_event_id": "45473792-1ad8-42f5-897b-c3b1d35f892f", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1867, "start_time": "2024-06-20T05:24:52.730Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_101", "variant_name": null}, {"function_name": "Fn_parallel_function_101", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_101\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"substance\":\"water\",\"sea_level\":0,\"meta\":\"Value\"},{\"substance\":\"water\",\"sea_level\":1000,\"meta\":\"Value\"},{\"substance\":\"iron\",\"sea_level\":0,\"meta\":\"Value\"},{\"substance\":\"iron\",\"sea_level\":1000,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_101_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the boiling point and melting point of a substance based on its name and the sea level.\n    function_name: 'get_boiling_melting_points' or null,\n    // The name of the substance.\n    substance: string,\n    // The sea level in meters.\n    sea_level: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the boiling and melting points of water and iron at sea levels of 0 meters and 1000 meters respectively?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_boiling_melting_points',\n    substance: 'water',\n    sea_level: 0\n  },\n  {\n    function_name: 'get_boiling_melting_points',\n    substance: 'water',\n    sea_level: 1000\n  },\n  {\n    function_name: 'get_boiling_melting_points',\n    substance: 'iron',\n    sea_level: 0\n  },\n  {\n    function_name: 'get_boiling_melting_points',\n    substance: 'iron',\n    sea_level: 1000\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 113, "output_tokens": 124, "total_tokens": 237, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "45473792-1ad8-42f5-897b-c3b1d35f892f", "event_id": "45473792-1ad8-42f5-897b-c3b1d35f892f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 15900, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_101", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: substance\\nExpected: any of ['iron']\\nActual@2: meta=<Fn_parallel_function_101_Output0_TypeName.Value: 'Value'> substance='water' sea_level=1000\\nActual all: [Fn_parallel_function_101_Output0(meta=<Fn_parallel_function_101_Output0_TypeName.Value: 'Value'>, substance='water', sea_level=0), Fn_parallel_function_101_Output0(meta=<Fn_parallel_function_101_Output0_TypeName.Value: 'Value'>, substance='water', sea_level=1000), Fn_parallel_function_101_Output0(meta=<Fn_parallel_function_101_Output0_TypeName.Value: 'Value'>, substance='iron', sea_level=0), Fn_parallel_function_101_Output0(meta=<Fn_parallel_function_101_Output0_TypeName.Value: 'Value'>, substance='iron', sea_level=1000)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f03c77c8-dfa9-483d-af8a-166e605ccd6d", "event_id": "ea95430b-44ed-4be0-b25c-638ebb193ddd", "parent_event_id": "f03c77c8-dfa9-483d-af8a-166e605ccd6d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2342, "start_time": "2024-06-20T05:24:52.522Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_99", "variant_name": null}, {"function_name": "Fn_parallel_function_99", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_99\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"charge\":2,\"distance\":0.5,\"meta\":\"Value\",\"medium\":\"vacuum\"},{\"charge\":2,\"distance\":1.0,\"meta\":\"Value\",\"medium\":\"vacuum\"},{\"charge\":2,\"distance\":2.0,\"meta\":\"Value\",\"medium\":\"vacuum\"},{\"charge\":2,\"distance\":1.0,\"meta\":\"Value\",\"medium\":\"air\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_99_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the electric field strength at a certain distance from a point charge.\n    function_name: 'calculate_electric_field_strength' or null,\n    // The charge in Coulombs.\n    charge: int,\n    // The distance from the charge in meters.\n    distance: float,\n    // The medium in which the charge and the point of calculation is located. Default is 'vacuum'.\n    medium: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the electric field strength at a distance of 0.5 meters from a point charge of 2 Coulombs located in a vacuum? Then, can you also calculate the electric field strength at a distance of 1 meter and 2 meters from the same point charge? Lastly, can you calculate the electric field strength at a distance of 1 meter from the same point charge but this time located in air?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_electric_field_strength',\n    charge: 2,\n    distance: 0.5,\n    medium: 'vacuum'\n  },\n  {\n    function_name: 'calculate_electric_field_strength',\n    charge: 2,\n    distance: 1,\n    medium: 'vacuum'\n  },\n  {\n    function_name: 'calculate_electric_field_strength',\n    charge: 2,\n    distance: 2,\n    medium: 'vacuum'\n  },\n  {\n    function_name: 'calculate_electric_field_strength',\n    charge: 2,\n    distance: 1,\n    medium: 'air'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 197, "output_tokens": 139, "total_tokens": 336, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f03c77c8-dfa9-483d-af8a-166e605ccd6d", "event_id": "f03c77c8-dfa9-483d-af8a-166e605ccd6d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 16167, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_99", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2265451a-82a4-433a-939b-00a4ae940b1a", "event_id": "b3ae9226-da72-4299-affc-1feec9e17f51", "parent_event_id": "2265451a-82a4-433a-939b-00a4ae940b1a", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1645, "start_time": "2024-06-20T05:24:53.259Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_106", "variant_name": null}, {"function_name": "Fn_parallel_function_106", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_106\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"temp\":300,\"volume\":2.5,\"meta\":\"Value\",\"gas\":\"air\"},{\"temp\":350,\"volume\":2.5,\"meta\":\"Value\",\"gas\":\"air\"},{\"temp\":300,\"volume\":1.5,\"meta\":\"Value\",\"gas\":\"air\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_106_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the heat capacity at constant pressure of air using its temperature and volume.\n    function_name: 'calc_heat_capacity' or null,\n    // The temperature of the gas in Kelvin.\n    temp: int,\n    // The volume of the gas in m^3.\n    volume: float,\n    // Type of gas, with air as default.\n    gas: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the heat capacity at constant pressure of air for a science experiment I am conducting? I have a container with a volume of 2.5 m^3 and I am able to maintain the temperature at 300 Kelvin. I will be repeating the experiment at a higher temperature of 350 Kelvin and then at a lower volume of 1.5 m^3. I am using air for all these experiments. Can you provide the heat capacity for these three different conditions?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calc_heat_capacity',\n    temp: 300,\n    volume: 2.5,\n    gas: 'air',\n  },\n  {\n    function_name: 'calc_heat_capacity',\n    temp: 350,\n    volume: 2.5,\n    gas: 'air',\n  },\n  {\n    function_name: 'calc_heat_capacity',\n    temp: 300,\n    volume: 1.5,\n    gas: 'air',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 201, "output_tokens": 101, "total_tokens": 302, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2265451a-82a4-433a-939b-00a4ae940b1a", "event_id": "2265451a-82a4-433a-939b-00a4ae940b1a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 16207, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_106", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "bcbcf846-ba98-4351-9363-16b8fc5ecbcb", "event_id": "8ea6c249-a136-478c-9f40-13ae1635c4b2", "parent_event_id": "bcbcf846-ba98-4351-9363-16b8fc5ecbcb", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1125, "start_time": "2024-06-20T05:24:54.263Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_109", "variant_name": null}, {"function_name": "Fn_parallel_function_109", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_109\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"cell_type\":\"neuron\",\"meta\":\"Value\",\"detailed\":true},{\"cell_type\":\"muscle\",\"meta\":\"Value\",\"detailed\":false}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_109_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve information about the structure and functioning of a specified type of cell\n    function_name: 'biology.get_cell_info' or null,\n    // Type of cell you want information about\n    cell_type: string,\n    // Indicate if you want a detailed description of the cell (default: false)\n    detailed: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you provide a detailed description of the structure and functioning of a neuron cell and then compare it with a less detailed description of a muscle cell in the human body?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'biology.get_cell_info',\n    cell_type: 'neuron',\n    detailed: true\n  },\n  {\n    function_name: 'biology.get_cell_info',\n    cell_type: 'muscle',\n    detailed: false\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 127, "output_tokens": 56, "total_tokens": 183, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a019b5ca-d178-458d-84fe-5e90c2c7b4b1", "event_id": "d9d30fcb-afaf-48d6-84ae-fb788db4fb3c", "parent_event_id": "a019b5ca-d178-458d-84fe-5e90c2c7b4b1", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1843, "start_time": "2024-06-20T05:24:53.544Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_107", "variant_name": null}, {"function_name": "Fn_parallel_function_107", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_107\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"DNA_id\":\"XYZ123\",\"meta\":\"Value\",\"format\":\"fasta\",\"upstream\":0},{\"DNA_id\":\"XYZ123\",\"meta\":\"Value\",\"format\":\"genbank\",\"upstream\":0},{\"DNA_id\":\"XYZ123\",\"meta\":\"Value\",\"format\":\"fasta\",\"upstream\":500}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_107_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the sequence of a DNA molecule with the given id from a public database.\n    function_name: 'fetch_DNA_sequence' or null,\n    // Unique ID of the DNA molecule in the database.\n    DNA_id: string,\n    // Optional parameter to get sequence in specific format (default to 'fasta').\n    format: string or null,\n    // Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).\n    upstream: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you fetch the DNA sequence of a molecule with the unique ID 'XYZ123' from the public database, then fetch the same sequence again but this time in 'genbank' format, and finally fetch the sequence once more but now with 500 base pairs included upstream the DNA sequence?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    \"function_name\": \"fetch_DNA_sequence\",\n    \"DNA_id\": \"XYZ123\",\n    \"format\": \"fasta\",\n    \"upstream\": 0\n  },\n  {\n    \"function_name\": \"fetch_DNA_sequence\",\n    \"DNA_id\": \"XYZ123\",\n    \"format\": \"genbank\",\n    \"upstream\": 0\n  },\n  {\n    \"function_name\": \"fetch_DNA_sequence\",\n    \"DNA_id\": \"XYZ123\",\n    \"format\": \"fasta\",\n    \"upstream\": 500\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 182, "output_tokens": 120, "total_tokens": 302, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "bcbcf846-ba98-4351-9363-16b8fc5ecbcb", "event_id": "bcbcf846-ba98-4351-9363-16b8fc5ecbcb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 16690, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_109", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a019b5ca-d178-458d-84fe-5e90c2c7b4b1", "event_id": "a019b5ca-d178-458d-84fe-5e90c2c7b4b1", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 16690, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_107", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fb125b8f-921d-4d1c-b8b4-2fdd8fcf04d0", "event_id": "7f859698-e8da-48fb-8975-5a88232abb2d", "parent_event_id": "fb125b8f-921d-4d1c-b8b4-2fdd8fcf04d0", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1197, "start_time": "2024-06-20T05:24:54.264Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_111", "variant_name": null}, {"function_name": "Fn_parallel_function_111", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_111\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"molecule\":\"ATP\",\"organelle\":\"mitochondria\",\"specific_function\":true,\"meta\":\"Value\"},{\"molecule\":\"DNA\",\"organelle\":\"nucleus\",\"specific_function\":true,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_111_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Look up the function of a given molecule in a specified organelle.\n    function_name: 'cell_biology.function_lookup' or null,\n    // The molecule of interest.\n    molecule: string,\n    // The organelle of interest.\n    organelle: string,\n    // If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.\n    specific_function: bool,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"What is the function of the molecule ATP in the mitochondria and does it have a specific function within this organelle? Also, can you tell me the function of the molecule DNA in the nucleus and whether it has a specific function within the nucleus?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'cell_biology.function_lookup',\n    molecule: 'ATP',\n    organelle: 'mitochondria',\n    specific_function: true,\n  },\n  {\n    function_name: 'cell_biology.function_lookup',\n    molecule: 'DNA',\n    organelle: 'nucleus',\n    specific_function: true,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 168, "output_tokens": 77, "total_tokens": 245, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fb125b8f-921d-4d1c-b8b4-2fdd8fcf04d0", "event_id": "fb125b8f-921d-4d1c-b8b4-2fdd8fcf04d0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 16763, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_111", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dc4be8bf-0dd8-47f5-9f68-d4e690694518", "event_id": "bb7861d9-2e7b-417b-b342-f8e3d3e5c85e", "parent_event_id": "dc4be8bf-0dd8-47f5-9f68-d4e690694518", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1144, "start_time": "2024-06-20T05:24:54.391Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_113", "variant_name": null}, {"function_name": "Fn_parallel_function_113", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_113\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"snp_id\":\"rs123456\",\"meta\":\"Value\",\"species\":\"Homo sapiens\"},{\"snp_id\":\"rs7891011\",\"meta\":\"Value\",\"species\":\"Canis lupus familiaris\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_113_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.\n    function_name: 'mutation_type.find' or null,\n    // The ID of the Single Nucleotide Polymorphism (SNP) mutation.\n    snp_id: string,\n    // Species in which the SNP occurs, default is 'Homo sapiens' (Humans).\n    species: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the type of the genetic mutation that has the SNP ID 'rs123456' in the species 'Homo sapiens' and the SNP ID 'rs7891011' in the species 'Canis lupus familiaris' (Dog)?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'mutation_type.find',\n    snp_id: 'rs123456',\n    species: 'Homo sapiens'\n  },\n  {\n    function_name: 'mutation_type.find',\n    snp_id: 'rs7891011',\n    species: 'Canis lupus familiaris'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 164, "output_tokens": 69, "total_tokens": 233, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dc4be8bf-0dd8-47f5-9f68-d4e690694518", "event_id": "dc4be8bf-0dd8-47f5-9f68-d4e690694518", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 16838, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_113", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a6a5d25f-5988-42f7-b838-086138129c68", "event_id": "d9ea2311-d827-4564-96f5-941e8a9e25f5", "parent_event_id": "a6a5d25f-5988-42f7-b838-086138129c68", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1666, "start_time": "2024-06-20T05:24:53.934Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_108", "variant_name": null}, {"function_name": "Fn_parallel_function_108", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_108\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"gene\":\"BRCA1\",\"meta\":\"Value\",\"species\":\"Homo sapiens\"},{\"gene\":\"BRCA2\",\"meta\":\"Value\",\"species\":\"Homo sapiens\"},{\"gene\":\"BRCA1\",\"meta\":\"Value\",\"species\":\"Pan troglodytes\"},{\"gene\":\"BRCA2\",\"meta\":\"Value\",\"species\":\"Pan troglodytes\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_108_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the protein sequence encoded by a human gene.\n    function_name: 'get_protein_sequence' or null,\n    // The human gene of interest.\n    gene: string,\n    // The species for which the gene is to be analyzed. (default: Homo sapiens)\n    species: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the protein sequences encoded by the BRCA1 and BRCA2 genes in Homo sapiens and Pan troglodytes (chimpanzee)?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'get_protein_sequence',\n        gene: 'BRCA1',\n        species: 'Homo sapiens'\n    },\n    {\n        function_name: 'get_protein_sequence',\n        gene: 'BRCA2',\n        species: 'Homo sapiens'\n    },\n    {\n        function_name: 'get_protein_sequence',\n        gene: 'BRCA1',\n        species: 'Pan troglodytes'\n    },\n    {\n        function_name: 'get_protein_sequence',\n        gene: 'BRCA2',\n        species: 'Pan troglodytes'\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 120, "output_tokens": 128, "total_tokens": 248, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a6a5d25f-5988-42f7-b838-086138129c68", "event_id": "a6a5d25f-5988-42f7-b838-086138129c68", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 16902, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_108", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7645bddd-907d-4305-8920-86b56ac58ebc", "event_id": "9edb07c3-51ba-4e15-b8e2-4802cf39c815", "parent_event_id": "7645bddd-907d-4305-8920-86b56ac58ebc", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1508, "start_time": "2024-06-20T05:24:54.263Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_110", "variant_name": null}, {"function_name": "Fn_parallel_function_110", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_110\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"cell_compartment\":\"nucleus\",\"meta\":\"Value\",\"include_description\":true},{\"cell_compartment\":\"mitochondria\",\"meta\":\"Value\",\"include_description\":true},{\"cell_compartment\":\"cytoplasm\",\"meta\":\"Value\",\"include_description\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_110_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Get the list of proteins in a specific cell compartment.\n    function_name: 'cellbio.get_proteins' or null,\n    // The specific cell compartment.\n    cell_compartment: string,\n    // Set true if you want a brief description of each protein. (default: false)\n    include_description: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the proteins found in the cell compartments of the nucleus, mitochondria, and cytoplasm, and can you also provide a brief description of each protein?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'cellbio.get_proteins',\n    cell_compartment: 'nucleus',\n    include_description: true\n  },\n  {\n    function_name: 'cellbio.get_proteins',\n    cell_compartment: 'mitochondria',\n    include_description: true\n  },\n  {\n    function_name: 'cellbio.get_proteins',\n    cell_compartment: 'cytoplasm',\n    include_description: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 126, "output_tokens": 98, "total_tokens": 224, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7645bddd-907d-4305-8920-86b56ac58ebc", "event_id": "7645bddd-907d-4305-8920-86b56ac58ebc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 17074, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_110", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cbd7260f-3714-4840-a34e-8194972c8d3e", "event_id": "8cf1a393-e176-469a-8fc0-4428d5da3eb9", "parent_event_id": "cbd7260f-3714-4840-a34e-8194972c8d3e", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1646, "start_time": "2024-06-20T05:24:54.264Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_112", "variant_name": null}, {"function_name": "Fn_parallel_function_112", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_112\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"compound\":\"C6H12O6\",\"to_unit\":\"grams/mole\",\"meta\":\"Value\"},{\"compound\":\"C12H22O11\",\"to_unit\":\"grams/mole\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_112_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the molecular weight of a compound given the compound formula.\n    function_name: 'calculate_molecular_weight' or null,\n    // The molecular formula of the compound.\n    compound: string,\n    // The unit in which to return the result. Default is 'grams/mole'\n    to_unit: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the molecular weight of the compound C6H12O6 (Glucose) in 'grams/mole' and how does it compare to the molecular weight of the compound C12H22O11 (Sucrose) in the same unit?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_molecular_weight',\n    compound: 'C6H12O6',\n    to_unit: 'grams/mole'\n  },\n  {\n    function_name: 'calculate_molecular_weight',\n    compound: 'C12H22O11',\n    to_unit: 'grams/mole'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 140, "output_tokens": 70, "total_tokens": 210, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cbd7260f-3714-4840-a34e-8194972c8d3e", "event_id": "cbd7260f-3714-4840-a34e-8194972c8d3e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 17213, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_112", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a86bb2aa-b12f-4bc5-a836-d69acbf1e303", "event_id": "68d74482-814d-4c68-9bb8-225abd91b74e", "parent_event_id": "a86bb2aa-b12f-4bc5-a836-d69acbf1e303", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2051, "start_time": "2024-06-20T05:24:54.599Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_114", "variant_name": null}, {"function_name": "Fn_parallel_function_114", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_114\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"weight\":180,\"height\":70,\"activity_level\":\"Value1\",\"meta\":\"Value\"},{\"weight\":200,\"height\":65,\"activity_level\":\"Value3\",\"meta\":\"Value\"},{\"weight\":150,\"height\":72,\"activity_level\":\"Value2\",\"meta\":\"Value\"},{\"weight\":220,\"height\":68,\"activity_level\":\"Value4\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_114_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Predict the likelihood of diabetes type 2 based on a person's weight and height.\n    function_name: 'diabetes_prediction' or null,\n    // Weight of the person in lbs.\n    weight: int,\n    // Height of the person in inches.\n    height: int,\n    // Physical activity level of the person.\n    activity_level: 'sedentary' or 'lightly active' or 'moderately active' or 'very active' or 'extra active',\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you please predict the likelihood of type 2 diabetes for four individuals with the following characteristics: The first person weighs 180 lbs, is 70 inches tall, and has a 'lightly active' lifestyle. The second person weighs 200 lbs, is 65 inches tall, and is 'very active'. The third person weighs 150 lbs, is 72 inches tall, and is 'moderately active'. The fourth person weighs 220 lbs, is 68 inches tall, and is 'extra active'.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'diabetes_prediction',\n        weight: 180,\n        height: 70,\n        activity_level: 'lightly active'\n    },\n    {\n        function_name: 'diabetes_prediction',\n        weight: 200,\n        height: 65,\n        activity_level: 'very active'\n    },\n    {\n        function_name: 'diabetes_prediction',\n        weight: 150,\n        height: 72,\n        activity_level: 'moderately active'\n    },\n    {\n        function_name: 'diabetes_prediction',\n        weight: 220,\n        height: 68,\n        activity_level: 'extra active'\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 229, "output_tokens": 136, "total_tokens": 365, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a86bb2aa-b12f-4bc5-a836-d69acbf1e303", "event_id": "a86bb2aa-b12f-4bc5-a836-d69acbf1e303", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 17952, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_114", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3981219c-651c-4bb6-a096-8eeb3aa5a84d", "event_id": "d34c62cd-9dfb-4ddb-af8c-a3eb9d7d187e", "parent_event_id": "3981219c-651c-4bb6-a096-8eeb3aa5a84d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1205, "start_time": "2024-06-20T05:24:55.601Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_121", "variant_name": null}, {"function_name": "Fn_parallel_function_121", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_121\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Amazon Rainforest\",\"years\":10,\"meta\":\"Value\",\"include_human_impact\":false},{\"location\":\"Boreal Forests of Canada\",\"years\":20,\"meta\":\"Value\",\"include_human_impact\":false}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_121_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Predicts the forest growth over the next N years based on current trends.\n    function_name: 'forest_growth_forecast' or null,\n    // The location where you want to predict forest growth.\n    location: string,\n    // The number of years for the forecast.\n    years: int,\n    // Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.\n    include_human_impact: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What would be the predicted forest growth in the Amazon Rainforest and the Boreal Forests of Canada over the next 10 years and 20 years, respectively, if we do not include the impact of human activities?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'forest_growth_forecast',\n    location: 'Amazon Rainforest',\n    years: 10,\n    include_human_impact: false\n  },\n  {\n    function_name: 'forest_growth_forecast',\n    location: 'Boreal Forests of Canada',\n    years: 20,\n    include_human_impact: false\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 164, "output_tokens": 77, "total_tokens": 241, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3981219c-651c-4bb6-a096-8eeb3aa5a84d", "event_id": "3981219c-651c-4bb6-a096-8eeb3aa5a84d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 18108, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_121", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e3b5606e-ab22-40a9-beb1-3fca4a373150", "event_id": "fe7ef812-fa32-4460-a581-d275488e40cc", "parent_event_id": "e3b5606e-ab22-40a9-beb1-3fca4a373150", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1576, "start_time": "2024-06-20T05:24:55.389Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_118", "variant_name": null}, {"function_name": "Fn_parallel_function_118", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_118\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"country\":\"China\",\"year\":\"2000\",\"population\":1.267,\"land_area\":9.597,\"meta\":\"Value\"},{\"country\":\"China\",\"year\":\"2010\",\"population\":1.341,\"land_area\":9.597,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_118_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the population density of a specific country in a specific year.\n    function_name: 'calculate_density' or null,\n    // The country for which the density needs to be calculated.\n    country: string,\n    // The year in which the density is to be calculated.\n    year: string,\n    // The population of the country.\n    population: float,\n    // The land area of the country in square kilometers.\n    land_area: float,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the population density of China in 2000 and 2010, given that the population was 1.267 billion in 2000 and 1.341 billion in 2010, and the land area remained constant at 9.597 million square kilometers?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_density',\n    country: 'China',\n    year: '2000',\n    population: 1.267,\n    land_area: 9.597\n  },\n  {\n    function_name: 'calculate_density',\n    country: 'China',\n    year: '2010',\n    population: 1.341,\n    land_area: 9.597\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 173, "output_tokens": 86, "total_tokens": 259, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e3b5606e-ab22-40a9-beb1-3fca4a373150", "event_id": "e3b5606e-ab22-40a9-beb1-3fca4a373150", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 18268, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_118", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: population\\nExpected: any of [1267000000.0]\\nActual@1: meta=<Fn_parallel_function_118_Output0_TypeName.Value: 'Value'> country='China' year='2000' population=1.267 land_area=9.597\\nActual all: [Fn_parallel_function_118_Output0(meta=<Fn_parallel_function_118_Output0_TypeName.Value: 'Value'>, country='China', year='2000', population=1.267, land_area=9.597), Fn_parallel_function_118_Output0(meta=<Fn_parallel_function_118_Output0_TypeName.Value: 'Value'>, country='China', year='2010', population=1.341, land_area=9.597)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3257e440-8be5-4dd1-9e41-d3879f102859", "event_id": "327a37df-184d-4fc8-9750-5126353d5fb5", "parent_event_id": "3257e440-8be5-4dd1-9e41-d3879f102859", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2212, "start_time": "2024-06-20T05:24:54.906Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_116", "variant_name": null}, {"function_name": "Fn_parallel_function_116", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_116\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"species1\":\"human\",\"species2\":\"chimpanzee\",\"meta\":\"Value\",\"format\":\"percentage\"},{\"species1\":\"human\",\"species2\":\"chimpanzee\",\"meta\":\"Value\",\"format\":\"fraction\"},{\"species1\":\"human\",\"species2\":\"gorilla\",\"meta\":\"Value\",\"format\":\"percentage\"},{\"species1\":\"human\",\"species2\":\"gorilla\",\"meta\":\"Value\",\"format\":\"fraction\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_116_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the genetic similarity between two species based on their DNA sequences.\n    function_name: 'genetics.calculate_similarity' or null,\n    // The first species to compare.\n    species1: string,\n    // The second species to compare.\n    species2: string,\n    // The format of the result (percentage or fraction). Default is percentage.\n    format: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you calculate the genetic similarity between a human and a chimpanzee, and then between a human and a gorilla, using their DNA sequences? Please provide the results in both percentage and fraction formats.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'genetics.calculate_similarity',\n    species1: 'human',\n    species2: 'chimpanzee',\n    format: 'percentage'\n  },\n  {\n    function_name: 'genetics.calculate_similarity',\n    species1: 'human',\n    species2: 'chimpanzee',\n    format: 'fraction'\n  },\n  {\n    function_name: 'genetics.calculate_similarity',\n    species1: 'human',\n    species2: 'gorilla',\n    format: 'percentage'\n  },\n  {\n    function_name: 'genetics.calculate_similarity',\n    species1: 'human',\n    species2: 'gorilla',\n    format: 'fraction'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 144, "output_tokens": 144, "total_tokens": 288, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "95427f31-a1f0-4c4b-a3eb-1ba6b40af974", "event_id": "eaee8aae-e465-4388-92a1-147792766304", "parent_event_id": "95427f31-a1f0-4c4b-a3eb-1ba6b40af974", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1656, "start_time": "2024-06-20T05:24:55.462Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_119", "variant_name": null}, {"function_name": "Fn_parallel_function_119", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_119\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Amazon rainforest\",\"time_frame\":\"Value0\",\"meta\":\"Value\"},{\"location\":\"Amazon rainforest\",\"time_frame\":\"Value1\",\"meta\":\"Value\"},{\"location\":\"Amazon rainforest\",\"time_frame\":\"Value2\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_119_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve precipitation data for a specified location and time period.\n    function_name: 'ecology_data.precipitation_stats' or null,\n    // The name of the location, e.g., 'Amazon rainforest'.\n    location: string,\n    // The time period for which data is required.\n    time_frame: 'six_months' or 'year' or 'five_years',\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the precipitation statistics for the Amazon rainforest for the last six months, the last year, and the last five years?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'ecology_data.precipitation_stats',\n    location: 'Amazon rainforest',\n    time_frame: 'six_months'\n  },\n  {\n    function_name: 'ecology_data.precipitation_stats',\n    location: 'Amazon rainforest',\n    time_frame: 'year'\n  },\n  {\n    function_name: 'ecology_data.precipitation_stats',\n    location: 'Amazon rainforest',\n    time_frame: 'five_years'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 129, "output_tokens": 103, "total_tokens": 232, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3257e440-8be5-4dd1-9e41-d3879f102859", "event_id": "3257e440-8be5-4dd1-9e41-d3879f102859", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 18420, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_116", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "95427f31-a1f0-4c4b-a3eb-1ba6b40af974", "event_id": "95427f31-a1f0-4c4b-a3eb-1ba6b40af974", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 18421, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_119", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "38199943-e224-4c21-8c89-fcf0f03fb20b", "event_id": "9f8cd799-d434-4991-9b86-cb6596f1611f", "parent_event_id": "38199943-e224-4c21-8c89-fcf0f03fb20b", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1362, "start_time": "2024-06-20T05:24:55.772Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_122", "variant_name": null}, {"function_name": "Fn_parallel_function_122", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_122\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Galapagos Islands\",\"meta\":\"Value\",\"year\":2015,\"species\":true},{\"location\":\"Galapagos Islands\",\"meta\":\"Value\",\"year\":2020,\"species\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_122_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Get the population and species of turtles in a specific location.\n    function_name: 'ecology.get_turtle_population' or null,\n    // The name of the location.\n    location: string,\n    // The year of the data requested. (optional). default is 2000\n    year: int or null,\n    // Whether to include species information. Default is false. (optional)\n    species: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the population of turtles in the Galapagos Islands in 2015, and can you also provide the species information? After that, can you also tell me the same information for the same location but for the year 2020?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'ecology.get_turtle_population',\n    location: 'Galapagos Islands',\n    year: 2015,\n    species: true\n  },\n  {\n    function_name: 'ecology.get_turtle_population',\n    location: 'Galapagos Islands',\n    year: 2020,\n    species: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 162, "output_tokens": 76, "total_tokens": 238, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "38199943-e224-4c21-8c89-fcf0f03fb20b", "event_id": "38199943-e224-4c21-8c89-fcf0f03fb20b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 18436, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_122", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d4363b89-8202-449b-92d8-9942a9129d7a", "event_id": "61041d23-12bd-451e-9e30-17314dc4c4d4", "parent_event_id": "d4363b89-8202-449b-92d8-9942a9129d7a", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2002, "start_time": "2024-06-20T05:24:55.536Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_120", "variant_name": null}, {"function_name": "Fn_parallel_function_120", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_120\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"color\":\"vibrant blue\",\"habitat\":\"forest\",\"meta\":\"Value\",\"size\":\"Value0\"},{\"color\":\"mix of black colors\",\"habitat\":\"lake\",\"meta\":\"Value\",\"size\":\"Value2\"},{\"color\":\"brown\",\"habitat\":\"desert\",\"meta\":\"Value\",\"size\":\"Value1\"},{\"color\":\"green\",\"habitat\":\"tropical rainforest\",\"meta\":\"Value\",\"size\":\"Value2\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_120_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Identify a bird species based on certain characteristics.\n    function_name: 'identify_bird' or null,\n    // Color of the bird.\n    color: string,\n    // Habitat of the bird.\n    habitat: string,\n    // Size of the bird. (default: small)\n    size: 'small' or 'medium' or 'large' or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me identify the bird species I saw during my recent trip? The first one was a small bird with a vibrant blue color that I spotted in a forest. The second one was a large bird with a mix of black colors that I saw near a lake. The third one was a medium-sized bird with a brown color that I noticed in a desert. Lastly, the fourth one was a large bird with a green color that I observed in a tropical rainforest. What could these birds be?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'identify_bird',\n    color: 'vibrant blue',\n    habitat: 'forest',\n    size: 'small',\n  },\n  {\n    function_name: 'identify_bird',\n    color: 'mix of black colors',\n    habitat: 'lake',\n    size: 'large',\n  },\n  {\n    function_name: 'identify_bird',\n    color: 'brown',\n    habitat: 'desert',\n    size: 'medium',\n  },\n  {\n    function_name: 'identify_bird',\n    color: 'green',\n    habitat: 'tropical rainforest',\n    size: 'large',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 136, "total_tokens": 338, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d4363b89-8202-449b-92d8-9942a9129d7a", "event_id": "d4363b89-8202-449b-92d8-9942a9129d7a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 18841, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_120", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: color\\nExpected: any of ['blue']\\nActual@1: meta=<Fn_parallel_function_120_Output0_TypeName.Value: 'Value'> color='vibrant blue' habitat='forest' size=<Enum_Fn_parallel_function_120_Enum0.Value0: 'Value0'>\\nActual all: [Fn_parallel_function_120_Output0(meta=<Fn_parallel_function_120_Output0_TypeName.Value: 'Value'>, color='vibrant blue', habitat='forest', size=<Enum_Fn_parallel_function_120_Enum0.Value0: 'Value0'>), Fn_parallel_function_120_Output0(meta=<Fn_parallel_function_120_Output0_TypeName.Value: 'Value'>, color='mix of black colors', habitat='lake', size=<Enum_Fn_parallel_function_120_Enum0.Value2: 'Value2'>), Fn_parallel_function_120_Output0(meta=<Fn_parallel_function_120_Output0_TypeName.Value: 'Value'>, color='brown', habitat='desert', size=<Enum_Fn_parallel_function_120_Enum0.Value1: 'Value1'>), Fn_parallel_function_120_Output0(meta=<Fn_parallel_function_120_Output0_TypeName.Value: 'Value'>, color='green', habitat='tropical rainforest', size=<Enum_Fn_parallel_function_120_Enum0.Value2: 'Value2'>)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "95612f04-1a16-410a-8460-43d9678a5364", "event_id": "e1f5b2b8-3465-43d3-8efc-9927acb9e8f5", "parent_event_id": "95612f04-1a16-410a-8460-43d9678a5364", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2157, "start_time": "2024-06-20T05:24:55.389Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_117", "variant_name": null}, {"function_name": "Fn_parallel_function_117", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_117\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"allele_frequency\":0.7,\"genotype\":\"Value0\",\"meta\":\"Value\"},{\"allele_frequency\":0.7,\"genotype\":\"Value0\",\"meta\":\"Value\"},{\"allele_frequency\":0.7,\"genotype\":\"Value0\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_117_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.\n    function_name: 'calculate_genotype_frequency' or null,\n    // The frequency of the dominant allele in the population.\n    allele_frequency: float,\n    // The genotype which frequency is needed, default is homozygous dominant. \n    genotype: 'AA' or 'Aa' or 'aa',\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"In a population of butterflies, the frequency of the dominant allele for wing color is 0.7. Can you calculate the frequency of the homozygous dominant genotype (AA), heterozygous genotype (Aa), and homozygous recessive genotype (aa) using the Hardy Weinberg Principle?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_genotype_frequency',\n    allele_frequency: 0.7,\n    genotype: 'AA'\n  },\n  {\n    function_name: 'calculate_genotype_frequency',\n    allele_frequency: 0.7,\n    genotype: 'Aa'\n  },\n  {\n    function_name: 'calculate_genotype_frequency',\n    allele_frequency: 0.7,\n    genotype: 'aa'\n  }\n]  ", "metadata": {"logprobs": null, "prompt_tokens": 176, "output_tokens": 91, "total_tokens": 267, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "95612f04-1a16-410a-8460-43d9678a5364", "event_id": "95612f04-1a16-410a-8460-43d9678a5364", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 18848, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_117", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: genotype\\nExpected: any of ['Aa']\\nActual@2: meta=<Fn_parallel_function_117_Output0_TypeName.Value: 'Value'> allele_frequency=0.7 genotype=<Enum_Fn_parallel_function_117_Enum0.Value0: 'Value0'>\\nActual all: [Fn_parallel_function_117_Output0(meta=<Fn_parallel_function_117_Output0_TypeName.Value: 'Value'>, allele_frequency=0.7, genotype=<Enum_Fn_parallel_function_117_Enum0.Value0: 'Value0'>), Fn_parallel_function_117_Output0(meta=<Fn_parallel_function_117_Output0_TypeName.Value: 'Value'>, allele_frequency=0.7, genotype=<Enum_Fn_parallel_function_117_Enum0.Value0: 'Value0'>), Fn_parallel_function_117_Output0(meta=<Fn_parallel_function_117_Output0_TypeName.Value: 'Value'>, allele_frequency=0.7, genotype=<Enum_Fn_parallel_function_117_Enum0.Value0: 'Value0'>)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b78ff067-c051-402d-a8a1-1754b769cc16", "event_id": "5e40ec70-cd34-468a-a478-e0007813c1a0", "parent_event_id": "b78ff067-c051-402d-a8a1-1754b769cc16", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1801, "start_time": "2024-06-20T05:24:55.911Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_123", "variant_name": null}, {"function_name": "Fn_parallel_function_123", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_123\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"vehicle_type\":\"gas\",\"miles_driven\":15000,\"meta\":\"Value\",\"emission_factor\":1.4},{\"vehicle_type\":\"diesel\",\"miles_driven\":15000,\"meta\":\"Value\",\"emission_factor\":2.7},{\"vehicle_type\":\"EV\",\"miles_driven\":15000,\"meta\":\"Value\",\"emission_factor\":0.0}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_123_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage.\n    function_name: 'calculate_vehicle_emission' or null,\n    // The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle.\n    vehicle_type: string,\n    // The number of miles driven per year.\n    miles_driven: int,\n    // Optional emission factor to calculate emissions. Default factor is set for gas vehicles of 1.4\n    emission_factor: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the annual carbon emissions produced by a gasoline vehicle, a diesel vehicle, and an electric vehicle if they each drive 15,000 miles per year, using the default emission factor for the gasoline vehicle, an emission factor of 2.7 for the diesel vehicle, and an emission factor of 0 for the electric vehicle?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_vehicle_emission',\n    vehicle_type: 'gas',\n    miles_driven: 15000,\n    emission_factor: 1.4\n  },\n  {\n    function_name: 'calculate_vehicle_emission',\n    vehicle_type: 'diesel',\n    miles_driven: 15000,\n    emission_factor: 2.7\n  },\n  {\n    function_name: 'calculate_vehicle_emission',\n    vehicle_type: 'EV',\n    miles_driven: 15000,\n    emission_factor: 0\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 118, "total_tokens": 329, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b78ff067-c051-402d-a8a1-1754b769cc16", "event_id": "b78ff067-c051-402d-a8a1-1754b769cc16", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 19015, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_123", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6c9801ec-db2f-441d-9679-865a8d7d4cf6", "event_id": "902f09c4-4ff3-4932-ba4d-770ef5953e35", "parent_event_id": "6c9801ec-db2f-441d-9679-865a8d7d4cf6", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1568, "start_time": "2024-06-20T05:24:56.651Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_124", "variant_name": null}, {"function_name": "Fn_parallel_function_124", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_124\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"length\":500,\"preferences\":[\"Value0\"],\"meta\":\"Value\"},{\"length\":500,\"preferences\":[\"Value1\"],\"meta\":\"Value\"},{\"length\":500,\"preferences\":[\"Value2\"],\"meta\":\"Value\"},{\"length\":500,\"preferences\":[\"Value3\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_124_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Generate a random DNA sequence with a specific length and nucleotide preference.\n    function_name: 'generate_DNA_sequence' or null,\n    // The length of the DNA sequence to be generated.\n    length: int,\n    // Preferred nucleotides to include more frequently in the DNA sequence.\n    preferences: [\n      'A' or 'T' or 'C' or 'G'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you generate four different DNA sequences each with a length of 500, where the first sequence has a preference for nucleotide 'A', the second sequence has a preference for nucleotide 'T', the third sequence has a preference for nucleotide 'C', and the fourth sequence has a preference for nucleotide 'G'?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'generate_DNA_sequence',\n    length: 500,\n    preferences: ['A']\n  },\n  {\n    function_name: 'generate_DNA_sequence',\n    length: 500,\n    preferences: ['T']\n  },\n  {\n    function_name: 'generate_DNA_sequence',\n    length: 500,\n    preferences: ['C']\n  },\n  {\n    function_name: 'generate_DNA_sequence',\n    length: 500,\n    preferences: ['G']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 172, "output_tokens": 106, "total_tokens": 278, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6c9801ec-db2f-441d-9679-865a8d7d4cf6", "event_id": "6c9801ec-db2f-441d-9679-865a8d7d4cf6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 19521, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_124", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "827ce63d-292e-43b6-9536-eb1fa959f338", "event_id": "8ba2407f-3090-41db-9819-0f97fcca3de6", "parent_event_id": "827ce63d-292e-43b6-9536-eb1fa959f338", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1303, "start_time": "2024-06-20T05:24:57.119Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_127", "variant_name": null}, {"function_name": "Fn_parallel_function_127", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_127\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"species\":\"African Elephant\",\"years\":5000,\"meta\":\"Value\",\"model\":\"Darwin\"},{\"species\":\"African Elephant\",\"years\":5000,\"meta\":\"Value\",\"model\":\"Lamarck\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_127_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Predict the evolutionary rate for a specific species for a given timeframe.\n    function_name: 'prediction.evolution' or null,\n    // The species that the evolution rate will be predicted for.\n    species: string,\n    // Number of years for the prediction.\n    years: int,\n    // The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'.\n    model: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What would be the predicted evolutionary rate for the African Elephant species over a period of 5000 years using the Darwin model, and how would this prediction change if we use the Lamarck model instead?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'prediction.evolution',\n    species: 'African Elephant',\n    years: 5000,\n    model: 'Darwin'\n  },\n  {\n    function_name: 'prediction.evolution',\n    species: 'African Elephant',\n    years: 5000,\n    model: 'Lamarck'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 157, "output_tokens": 73, "total_tokens": 230, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "827ce63d-292e-43b6-9536-eb1fa959f338", "event_id": "827ce63d-292e-43b6-9536-eb1fa959f338", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 19725, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_127", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ed9b28da-a84a-4c56-9f1c-d7f62205f353", "event_id": "74269089-2f47-4bb2-8660-a04e8ddabb2c", "parent_event_id": "ed9b28da-a84a-4c56-9f1c-d7f62205f353", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1857, "start_time": "2024-06-20T05:24:56.807Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_125", "variant_name": null}, {"function_name": "Fn_parallel_function_125", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_125\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"country\":\"Japan\",\"years\":10,\"meta\":\"Value\",\"growth_rate\":0.015},{\"country\":\"Japan\",\"years\":20,\"meta\":\"Value\",\"growth_rate\":0.015},{\"country\":\"India\",\"years\":10,\"meta\":\"Value\",\"growth_rate\":0.021},{\"country\":\"India\",\"years\":20,\"meta\":\"Value\",\"growth_rate\":0.021}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_125_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the projected population growth based on the current growth rate.\n    function_name: 'population_projections' or null,\n    // The country for which to calculate the population projection.\n    country: string,\n    // Number of years for the projection.\n    years: int,\n    // Optional parameter to specify the growth rate. Default is current growth rate. of 0.01\n    growth_rate: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What would be the projected population growth of Japan and India in the next 10 and 20 years respectively, considering the current growth rate, and how would these projections change if we consider a growth rate of 1.5% for Japan and 2.1% for India instead of the current growth rate?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'population_projections',\n    country: 'Japan',\n    years: 10,\n    growth_rate: 0.015\n  },\n  {\n    function_name: 'population_projections',\n    country: 'Japan',\n    years: 20,\n    growth_rate: 0.015\n  },\n  {\n    function_name: 'population_projections',\n    country: 'India',\n    years: 10,\n    growth_rate: 0.021\n  },\n  {\n    function_name: 'population_projections',\n    country: 'India',\n    years: 20,\n    growth_rate: 0.021\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 174, "output_tokens": 138, "total_tokens": 312, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e7e56224-764e-4ebd-a7a1-9e4b939a09c9", "event_id": "99b075d1-3353-41f2-8d6a-68faed1f84b5", "parent_event_id": "e7e56224-764e-4ebd-a7a1-9e4b939a09c9", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1697, "start_time": "2024-06-20T05:24:56.967Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_126", "variant_name": null}, {"function_name": "Fn_parallel_function_126", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_126\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"current_population\":500,\"growth_rate\":0.02,\"years\":10,\"meta\":\"Value\"},{\"current_population\":500,\"growth_rate\":0.015,\"years\":10,\"meta\":\"Value\"},{\"current_population\":500,\"growth_rate\":0.025,\"years\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_126_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Estimate future population of elephants given current population and growth rate.\n    function_name: 'elephant_population_estimate' or null,\n    // The current number of elephants.\n    current_population: int,\n    // The annual population growth rate of elephants.\n    growth_rate: float,\n    // The number of years to project the population.\n    years: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: In the African savannah, a group of researchers have been observing a herd of elephants for a few years. They have noticed that the current population of elephants is 500 and the annual population growth rate is 2%. They are interested in knowing the estimated population of elephants in 10 years. However, due to the unpredictable nature of the wild, they also want to consider a scenario where the growth rate drops to 1.5% and another scenario where it increases to 2.5%. Can you provide the estimated elephant population for these three scenarios in 10 years?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        \"function_name\": \"elephant_population_estimate\",\n        \"current_population\": 500,\n        \"growth_rate\": 0.02,\n        \"years\": 10\n    },\n    {\n        \"function_name\": \"elephant_population_estimate\",\n        \"current_population\": 500,\n        \"growth_rate\": 0.015,\n        \"years\": 10\n    },\n    {\n        \"function_name\": \"elephant_population_estimate\",\n        \"current_population\": 500,\n        \"growth_rate\": 0.025,\n        \"years\": 10\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 213, "output_tokens": 122, "total_tokens": 335, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "82a8ace5-6810-4f7e-9538-2119c1c2c436", "event_id": "ff31030f-3389-44ba-807a-d7a5172d2c8b", "parent_event_id": "82a8ace5-6810-4f7e-9538-2119c1c2c436", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3799, "start_time": "2024-06-20T05:24:54.865Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_115", "variant_name": null}, {"function_name": "Fn_parallel_function_115", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_115\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"sequence\":\"AGCTTAGCTA\",\"reference_sequence\":\"AGCTTAGCTA\",\"meta\":\"Value\",\"mutation_type\":\"Value0\"},{\"sequence\":\"AGCTTAGGCTA\",\"reference_sequence\":\"AGCTTAGCTA\",\"meta\":\"Value\",\"mutation_type\":\"Value0\"},{\"sequence\":\"AGCTTAGCTA\",\"reference_sequence\":\"AGCTTAGCTA\",\"meta\":\"Value\",\"mutation_type\":\"Value1\"},{\"sequence\":\"AGCTTAGGCTA\",\"reference_sequence\":\"AGCTTAGCTA\",\"meta\":\"Value\",\"mutation_type\":\"Value1\"},{\"sequence\":\"AGCTTAGCTA\",\"reference_sequence\":\"AGCTTAGCTA\",\"meta\":\"Value\",\"mutation_type\":\"Value2\"},{\"sequence\":\"AGCTTAGGCTA\",\"reference_sequence\":\"AGCTTAGCTA\",\"meta\":\"Value\",\"mutation_type\":\"Value2\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_115_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Analyzes the DNA sequence based on a reference sequence and return any potential mutations.\n    function_name: 'analyze_dna_sequence' or null,\n    // The DNA sequence to be analyzed.\n    sequence: string,\n    // The reference DNA sequence.\n    reference_sequence: string,\n    // Type of the mutation to be looked for in the sequence. (default: insertion)\n    mutation_type: 'insertion' or 'deletion' or 'substitution' or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you analyze the DNA sequence \"AGCTTAGCTA\" and \"AGCTTAGGCTA\" using the reference sequence \"AGCTTAGCTA\" to identify any potential 'insertion' mutations, then repeat the same analysis for 'deletion' and 'substitution' mutations?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'analyze_dna_sequence',\n    sequence: 'AGCTTAGCTA',\n    reference_sequence: 'AGCTTAGCTA',\n    mutation_type: 'insertion'\n  },\n  {\n    function_name: 'analyze_dna_sequence',\n    sequence: 'AGCTTAGGCTA',\n    reference_sequence: 'AGCTTAGCTA',\n    mutation_type: 'insertion'\n  },\n  {\n    function_name: 'analyze_dna_sequence',\n    sequence: 'AGCTTAGCTA',\n    reference_sequence: 'AGCTTAGCTA',\n    mutation_type: 'deletion'\n  },\n  {\n    function_name: 'analyze_dna_sequence',\n    sequence: 'AGCTTAGGCTA',\n    reference_sequence: 'AGCTTAGCTA',\n    mutation_type: 'deletion'\n  },\n  {\n    function_name: 'analyze_dna_sequence',\n    sequence: 'AGCTTAGCTA',\n    reference_sequence: 'AGCTTAGCTA',\n    mutation_type: 'substitution'\n  },\n  {\n    function_name: 'analyze_dna_sequence',\n    sequence: 'AGCTTAGGCTA',\n    reference_sequence: 'AGCTTAGCTA',\n    mutation_type: 'substitution'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 182, "output_tokens": 263, "total_tokens": 445, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ed9b28da-a84a-4c56-9f1c-d7f62205f353", "event_id": "ed9b28da-a84a-4c56-9f1c-d7f62205f353", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 19967, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_125", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: growth_rate\\nExpected: any of ['', 0.01, None, []]\\nActual@1: meta=<Fn_parallel_function_125_Output0_TypeName.Value: 'Value'> country='Japan' years=10 growth_rate=0.015\\nActual all: [Fn_parallel_function_125_Output0(meta=<Fn_parallel_function_125_Output0_TypeName.Value: 'Value'>, country='Japan', years=10, growth_rate=0.015), Fn_parallel_function_125_Output0(meta=<Fn_parallel_function_125_Output0_TypeName.Value: 'Value'>, country='Japan', years=20, growth_rate=0.015), Fn_parallel_function_125_Output0(meta=<Fn_parallel_function_125_Output0_TypeName.Value: 'Value'>, country='India', years=10, growth_rate=0.021), Fn_parallel_function_125_Output0(meta=<Fn_parallel_function_125_Output0_TypeName.Value: 'Value'>, country='India', years=20, growth_rate=0.021)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e7e56224-764e-4ebd-a7a1-9e4b939a09c9", "event_id": "e7e56224-764e-4ebd-a7a1-9e4b939a09c9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 19967, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_126", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "82a8ace5-6810-4f7e-9538-2119c1c2c436", "event_id": "82a8ace5-6810-4f7e-9538-2119c1c2c436", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 19968, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_115", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ea6bdcb2-dbbb-422a-a910-ab75ed309267", "event_id": "7a79ee91-44f3-4d15-af74-8d698cb53e81", "parent_event_id": "ea6bdcb2-dbbb-422a-a910-ab75ed309267", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1629, "start_time": "2024-06-20T05:24:57.547Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_131", "variant_name": null}, {"function_name": "Fn_parallel_function_131", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_131\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York\",\"food_type\":\"Italian\",\"number\":4,\"dietary_requirements\":[\"vegan\",\"gluten-free\"],\"meta\":\"Value\"},{\"location\":\"Los Angeles\",\"food_type\":\"Italian\",\"number\":4,\"dietary_requirements\":[\"vegan\",\"gluten-free\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_131_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate nearby restaurants based on location and food preferences.\n    function_name: 'find_restaurants' or null,\n    // The specific location or area.\n    location: string,\n    // The type of food preferred.\n    food_type: string,\n    // Number of results to return.\n    number: int,\n    // Special dietary requirements, e.g. vegan, gluten-free. (default: None)\n    dietary_requirements: string[],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find four restaurants in New York that serve Italian food and cater to my dietary requirements of being vegan and gluten-free, and then find four more restaurants in Los Angeles that serve the same type of food and also cater to my dietary requirements?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'find_restaurants',\n    location: 'New York',\n    food_type: 'Italian',\n    number: 4,\n    dietary_requirements: ['vegan', 'gluten-free'],\n  },\n  {\n    function_name: 'find_restaurants',\n    location: 'Los Angeles',\n    food_type: 'Italian',\n    number: 4,\n    dietary_requirements: ['vegan', 'gluten-free'],\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 165, "output_tokens": 94, "total_tokens": 259, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6888a1b0-ea6e-4adb-98d2-a8f2b1d25667", "event_id": "840a906e-cd91-488a-a894-3c12897f3661", "parent_event_id": "6888a1b0-ea6e-4adb-98d2-a8f2b1d25667", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2057, "start_time": "2024-06-20T05:24:57.119Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_128", "variant_name": null}, {"function_name": "Fn_parallel_function_128", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_128\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York, NY\",\"dietary_preference\":[\"Value0\",\"Value2\",\"Value3\"],\"meta\":\"Value\"},{\"location\":\"Los Angeles, CA\",\"dietary_preference\":[\"Value0\",\"Value2\",\"Value3\"],\"meta\":\"Value\"},{\"location\":\"Chicago, IL\",\"dietary_preference\":[\"Value0\",\"Value2\",\"Value3\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_128_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate nearby restaurants based on specific dietary preferences.\n    function_name: 'restaurant.find_nearby' or null,\n    // The city and state, e.g. Los Angeles, CA\n    location: string,\n    // Dietary preference. (default: ['Vegan'])\n    dietary_preference: [\n      'Vegan' or 'Vegetarian' or 'Gluten-free' or 'Dairy-free' or 'Nut-free'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you help me find restaurants in New York, NY that cater to my dietary preferences which include Vegan, Gluten-free and Dairy-free options, and then do the same for Los Angeles, CA and Chicago, IL?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'restaurant.find_nearby',\n    location: 'New York, NY',\n    dietary_preference: ['Vegan', 'Gluten-free', 'Dairy-free']\n  },\n  {\n    function_name: 'restaurant.find_nearby',\n    location: 'Los Angeles, CA',\n    dietary_preference: ['Vegan', 'Gluten-free', 'Dairy-free']\n  },\n  {\n    function_name: 'restaurant.find_nearby',\n    location: 'Chicago, IL',\n    dietary_preference: ['Vegan', 'Gluten-free', 'Dairy-free']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 158, "output_tokens": 124, "total_tokens": 282, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ea6bdcb2-dbbb-422a-a910-ab75ed309267", "event_id": "ea6bdcb2-dbbb-422a-a910-ab75ed309267", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 20479, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_131", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6888a1b0-ea6e-4adb-98d2-a8f2b1d25667", "event_id": "6888a1b0-ea6e-4adb-98d2-a8f2b1d25667", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 20479, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_128", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "212e4aad-a2bc-4e4a-9a10-e1d2b951121c", "event_id": "3b5b3cc1-27a8-446c-85d7-6087920ba57a", "parent_event_id": "212e4aad-a2bc-4e4a-9a10-e1d2b951121c", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1802, "start_time": "2024-06-20T05:24:57.713Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_132", "variant_name": null}, {"function_name": "Fn_parallel_function_132", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_132\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_location\":\"San Francisco\",\"end_location\":\"Palo Alto\",\"meta\":\"Value\",\"avoid_tolls\":true},{\"start_location\":\"Palo Alto\",\"end_location\":\"San Jose\",\"meta\":\"Value\",\"avoid_tolls\":true},{\"start_location\":\"San Jose\",\"end_location\":\"San Francisco\",\"meta\":\"Value\",\"avoid_tolls\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_132_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Finds the fastest route from one location to another, with an option to avoid toll roads.\n    function_name: 'map_routing.fastest_route' or null,\n    // The starting location for the journey.\n    start_location: string,\n    // The destination for the journey.\n    end_location: string,\n    // Option to avoid toll roads during the journey. default is False\n    avoid_tolls: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you find the fastest route from my home in San Francisco to my office in Palo Alto, then from my office to my friend's house in San Jose, and finally from my friend's house back to my home, while avoiding toll roads?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'map_routing.fastest_route',\n    start_location: 'San Francisco',\n    end_location: 'Palo Alto',\n    avoid_tolls: true\n  },\n  {\n    function_name: 'map_routing.fastest_route',\n    start_location: 'Palo Alto',\n    end_location: 'San Jose',\n    avoid_tolls: true\n  },\n  {\n    function_name: 'map_routing.fastest_route',\n    start_location: 'San Jose',\n    end_location: 'San Francisco',\n    avoid_tolls: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 160, "output_tokens": 118, "total_tokens": 278, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "212e4aad-a2bc-4e4a-9a10-e1d2b951121c", "event_id": "212e4aad-a2bc-4e4a-9a10-e1d2b951121c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 20818, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_132", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "62c1c624-a0c4-44b9-855f-f684a0071837", "event_id": "7ce5aa7b-1697-4eb7-8cb6-ebe4262119dc", "parent_event_id": "62c1c624-a0c4-44b9-855f-f684a0071837", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2457, "start_time": "2024-06-20T05:24:57.135Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_129", "variant_name": null}, {"function_name": "Fn_parallel_function_129", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_129\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York\",\"days\":7,\"meta\":\"Value\",\"temp_unit\":\"Fahrenheit\"},{\"location\":\"Los Angeles\",\"days\":7,\"meta\":\"Value\",\"temp_unit\":\"Celsius\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_129_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieves the average temperature for a specific location over the defined timeframe.\n    function_name: 'average_temperature' or null,\n    // The city to get the average temperature for.\n    location: string,\n    // The number of days to get the average temperature for.\n    days: int,\n    // The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'.\n    temp_unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the average temperature in New York for the past 7 days in Fahrenheit and how does it compare to the average temperature in Los Angeles for the same period in Celsius?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'average_temperature',\n    location: 'New York',\n    days: 7,\n    temp_unit: 'Fahrenheit'\n  },\n  {\n    function_name: 'average_temperature',\n    location: 'Los Angeles',\n    days: 7,\n    temp_unit: 'Celsius'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 147, "output_tokens": 68, "total_tokens": 215, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "62c1c624-a0c4-44b9-855f-f684a0071837", "event_id": "62c1c624-a0c4-44b9-855f-f684a0071837", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 20894, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_129", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "74a5b4c9-b7d9-4f25-b399-a28a4e12117f", "event_id": "119f866f-dd10-472b-a6fd-401a5e26045a", "parent_event_id": "74a5b4c9-b7d9-4f25-b399-a28a4e12117f", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2172, "start_time": "2024-06-20T05:24:57.540Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_130", "variant_name": null}, {"function_name": "Fn_parallel_function_130", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_130\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"data\":[12,15,11,14,18,19,13,14,15,16,17,18,19,20,21,22,23,24,25,26],\"bins\":5,\"meta\":\"Value\"},{\"data\":[32,35,31,34,38,39,33,34,35,36,37,38,39,40,41,42,43,44,45,46],\"bins\":5,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_130_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Create a histogram based on provided data.\n    function_name: 'create_histogram' or null,\n    // The data for which histogram needs to be plotted.\n    data: int[],\n    // The number of equal-width bins in the range. Default is 10.\n    bins: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are given two sets of data, the first set is [12, 15, 11, 14, 18, 19, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26] and the second set is [32, 35, 31, 34, 38, 39, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]. Can you create two histograms using the 'create_histogram' function, one for each data set, with 5 bins each?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'create_histogram',\n    data: [12, 15, 11, 14, 18, 19, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],\n    bins: 5\n  },\n  {\n    function_name: 'create_histogram',\n    data: [32, 35, 31, 34, 38, 39, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46],\n    bins: 5\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 246, "output_tokens": 164, "total_tokens": 410, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "74a5b4c9-b7d9-4f25-b399-a28a4e12117f", "event_id": "74a5b4c9-b7d9-4f25-b399-a28a4e12117f", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 21014, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_130", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e524de07-5cee-425a-bed4-bd30eb246fe9", "event_id": "8ff63391-b3f7-4a14-ad03-1420d79cef67", "parent_event_id": "e524de07-5cee-425a-bed4-bd30eb246fe9", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1330, "start_time": "2024-06-20T05:24:59.178Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_139", "variant_name": null}, {"function_name": "Fn_parallel_function_139", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_139\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"weight_kg\":85,\"height_m\":1.8,\"meta\":\"Value\"},{\"weight_kg\":60,\"height_m\":1.65,\"meta\":\"Value\"},{\"weight_kg\":75,\"height_m\":1.7,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_139_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the Body Mass Index (BMI) given a person's weight and height.\n    function_name: 'calculate_BMI' or null,\n    // The weight of the person in kilograms.\n    weight_kg: int,\n    // The height of the person in meters.\n    height_m: float,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"John, who weighs 85 kilograms and is 1.8 meters tall, and his friend Sarah, who weighs 60 kilograms and is 1.65 meters tall, are having a debate about their health. They decide to calculate their Body Mass Index (BMI) to settle the argument. Later, they meet their friend Mike, who weighs 75 kilograms and is 1.7 meters tall, and they decide to calculate his BMI as well. Can you help them calculate their BMIs?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_BMI',\n    weight_kg: 85,\n    height_m: 1.8\n  },\n  {\n    function_name: 'calculate_BMI',\n    weight_kg: 60,\n    height_m: 1.65\n  },\n  {\n    function_name: 'calculate_BMI',\n    weight_kg: 75,\n    height_m: 1.7\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 188, "output_tokens": 92, "total_tokens": 280, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1e33319e-874d-4211-91a7-362a73403b2b", "event_id": "e57d84cd-325b-4ecb-8c43-c8981fda8177", "parent_event_id": "1e33319e-874d-4211-91a7-362a73403b2b", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1841, "start_time": "2024-06-20T05:24:58.667Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_137", "variant_name": null}, {"function_name": "Fn_parallel_function_137", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_137\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_city\":\"New York\",\"end_city\":\"Los Angeles\",\"meta\":\"Value\",\"transportation\":\"bus\",\"allow_transfer\":false},{\"start_city\":\"New York\",\"end_city\":\"Los Angeles\",\"meta\":\"Value\",\"transportation\":\"bus\",\"allow_transfer\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_137_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the shortest distance between two cities via available public transportation.\n    function_name: 'city_distance.find_shortest' or null,\n    // The city you are starting from.\n    start_city: string,\n    // The city you are heading to.\n    end_city: string,\n    // Preferred mode of public transportation. Default is 'bus'.\n    transportation: string or null,\n    // Allows transfer between different transportation if true. default is False\n    allow_transfer: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the shortest distance between New York and Los Angeles using a bus as the preferred mode of public transportation, and then what is the shortest distance if we allow transfer between different modes of transportation?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'city_distance.find_shortest',\n    start_city: 'New York',\n    end_city: 'Los Angeles',\n    transportation: 'bus',\n    allow_transfer: false\n  },\n  {\n    function_name: 'city_distance.find_shortest',\n    start_city: 'New York',\n    end_city: 'Los Angeles',\n    transportation: 'bus',\n    allow_transfer: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 163, "output_tokens": 88, "total_tokens": 251, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e057d648-581b-4129-ae0b-e01d4ad24b71", "event_id": "5108b289-c17f-43a3-bd50-e8cbe9a19edb", "parent_event_id": "e057d648-581b-4129-ae0b-e01d4ad24b71", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1842, "start_time": "2024-06-20T05:24:58.666Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_135", "variant_name": null}, {"function_name": "Fn_parallel_function_135", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_135\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"weight\":85,\"height\":175,\"meta\":\"Value\",\"unit\":\"metric\"},{\"weight\":60,\"height\":160,\"meta\":\"Value\",\"unit\":\"metric\"},{\"weight\":75,\"height\":180,\"meta\":\"Value\",\"unit\":\"metric\"},{\"weight\":90,\"height\":185,\"meta\":\"Value\",\"unit\":\"metric\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_135_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the Body Mass Index (BMI) of a person.\n    function_name: 'calculate_bmi' or null,\n    // Weight of the person in kilograms.\n    weight: int,\n    // Height of the person in centimeters.\n    height: int,\n    // Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'.\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you please calculate the Body Mass Index (BMI) of four individuals for me? The first person weighs 85 kilograms and is 175 centimeters tall, the second person weighs 60 kilograms and is 160 centimeters tall, the third person weighs 75 kilograms and is 180 centimeters tall, and the fourth person weighs 90 kilograms and is 185 centimeters tall. All measurements are in the metric system.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_bmi',\n    weight: 85,\n    height: 175,\n    unit: 'metric'\n  },\n  {\n    function_name: 'calculate_bmi',\n    weight: 60,\n    height: 160,\n    unit: 'metric'\n  },\n  {\n    function_name: 'calculate_bmi',\n    weight: 75,\n    height: 180,\n    unit: 'metric'\n  },\n  {\n    function_name: 'calculate_bmi',\n    weight: 90,\n    height: 185,\n    unit: 'metric'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 195, "output_tokens": 126, "total_tokens": 321, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e524de07-5cee-425a-bed4-bd30eb246fe9", "event_id": "e524de07-5cee-425a-bed4-bd30eb246fe9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 21810, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_139", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1e33319e-874d-4211-91a7-362a73403b2b", "event_id": "1e33319e-874d-4211-91a7-362a73403b2b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 21811, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_137", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e057d648-581b-4129-ae0b-e01d4ad24b71", "event_id": "e057d648-581b-4129-ae0b-e01d4ad24b71", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 21811, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_135", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "29dd2af4-9acc-4f96-9d30-7169005e6e87", "event_id": "cd9eca6d-56cf-4fec-8083-443fec66a0cd", "parent_event_id": "29dd2af4-9acc-4f96-9d30-7169005e6e87", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1862, "start_time": "2024-06-20T05:24:58.667Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_136", "variant_name": null}, {"function_name": "Fn_parallel_function_136", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_136\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_location\":\"New York\",\"end_location\":\"Los Angeles\",\"meta\":\"Value\",\"units\":\"kilometers\"},{\"start_location\":\"Los Angeles\",\"end_location\":\"Miami\",\"meta\":\"Value\",\"units\":\"kilometers\"},{\"start_location\":\"Miami\",\"end_location\":\"New York\",\"meta\":\"Value\",\"units\":\"kilometers\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_136_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the geographic distance between two given locations.\n    function_name: 'geo_distance.calculate' or null,\n    // The starting location for the distance calculation.\n    start_location: string,\n    // The destination location for the distance calculation.\n    end_location: string,\n    // Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'.\n    units: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the total distance in kilometers if I start my journey from New York, travel to Los Angeles, then from Los Angeles to Miami, and finally from Miami back to New York?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'geo_distance.calculate',\n    start_location: 'New York',\n    end_location: 'Los Angeles',\n    units: 'kilometers'\n  },\n  {\n    function_name: 'geo_distance.calculate',\n    start_location: 'Los Angeles',\n    end_location: 'Miami',\n    units: 'kilometers'\n  },\n  {\n    function_name: 'geo_distance.calculate',\n    start_location: 'Miami',\n    end_location: 'New York',\n    units: 'kilometers'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 149, "output_tokens": 108, "total_tokens": 257, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "29dd2af4-9acc-4f96-9d30-7169005e6e87", "event_id": "29dd2af4-9acc-4f96-9d30-7169005e6e87", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 21830, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_136", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a3ebbe71-10d4-42f6-87d2-bc2141324988", "event_id": "0dde67e1-1d31-4514-9a13-c87d697901d8", "parent_event_id": "a3ebbe71-10d4-42f6-87d2-bc2141324988", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2350, "start_time": "2024-06-20T05:24:58.220Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_133", "variant_name": null}, {"function_name": "Fn_parallel_function_133", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_133\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"numbers\":[23,45,67,89],\"meta\":\"Value\"},{\"numbers\":[12,34,56,78],\"meta\":\"Value\"},{\"numbers\":[98,76,54,32],\"meta\":\"Value\"},{\"numbers\":[87,65,43,21],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_133_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the average of a list of numbers.\n    function_name: 'calculate_average' or null,\n    // The list of numbers to calculate the average of.\n    numbers: int[],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You have four sets of numbers: the first set is [23, 45, 67, 89], the second set is [12, 34, 56, 78], the third set is [98, 76, 54, 32], and the fourth set is [87, 65, 43, 21]. Can you calculate the average of each set of numbers?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_average',\n    numbers: [23, 45, 67, 89]\n  },\n  {\n    function_name: 'calculate_average',\n    numbers: [12, 34, 56, 78]\n  },\n  {\n    function_name: 'calculate_average',\n    numbers: [98, 76, 54, 32]\n  },\n  {\n    function_name: 'calculate_average',\n    numbers: [87, 65, 43, 21]\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 146, "output_tokens": 110, "total_tokens": 256, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a3ebbe71-10d4-42f6-87d2-bc2141324988", "event_id": "a3ebbe71-10d4-42f6-87d2-bc2141324988", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 21872, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_133", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "282ed792-0ee8-4f82-868b-f36fa3bec7c8", "event_id": "ec1a6b22-36c8-4460-baa7-2d15bb94a611", "parent_event_id": "282ed792-0ee8-4f82-868b-f36fa3bec7c8", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1173, "start_time": "2024-06-20T05:24:59.593Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_141", "variant_name": null}, {"function_name": "Fn_parallel_function_141", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_141\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"actor_name\":\"Leonardo DiCaprio\",\"year\":2010,\"meta\":\"Value\",\"category\":\"Drama\"},{\"actor_name\":\"Leonardo DiCaprio\",\"year\":2012,\"meta\":\"Value\",\"category\":\"Comedy\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_141_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Searches the database to find all movies by a specific actor within a certain year.\n    function_name: 'imdb.find_movies_by_actor' or null,\n    // The name of the actor.\n    actor_name: string,\n    // The specific year to search in.\n    year: int,\n    // The category of the film (e.g. Drama, Comedy, etc). This parameter is optional. (default: Drama)\n    category: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you find all the Drama and Comedy movies that Leonardo DiCaprio starred in 2010 and 2012 respectively by searching the database?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'imdb.find_movies_by_actor',\n    actor_name: 'Leonardo DiCaprio',\n    year: 2010,\n    category: 'Drama'\n  },\n  {\n    function_name: 'imdb.find_movies_by_actor',\n    actor_name: 'Leonardo DiCaprio',\n    year: 2012,\n    category: 'Comedy'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 148, "output_tokens": 84, "total_tokens": 232, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "282ed792-0ee8-4f82-868b-f36fa3bec7c8", "event_id": "282ed792-0ee8-4f82-868b-f36fa3bec7c8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 22069, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_141", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4b5b5177-b5b1-4f87-93fa-6aa44cac2afc", "event_id": "9ba9f0aa-a8aa-467f-812e-8b898800bb35", "parent_event_id": "4b5b5177-b5b1-4f87-93fa-6aa44cac2afc", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1130, "start_time": "2024-06-20T05:24:59.713Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_142", "variant_name": null}, {"function_name": "Fn_parallel_function_142", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_142\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York\",\"timeframe\":7,\"meta\":\"Value\",\"format\":\"IMAX\"},{\"location\":\"Los Angeles\",\"timeframe\":14,\"meta\":\"Value\",\"format\":\"2D\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_142_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the list of movie releases in specific theaters for a specified period.\n    function_name: 'get_theater_movie_releases' or null,\n    // The location of the theaters.\n    location: string,\n    // The number of days for which releases are required from current date.\n    timeframe: int,\n    // Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. This is an optional parameter. (default: IMAX)\n    format: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you provide me with the list of movie releases in the IMAX format at theaters in New York over the next 7 days, and also the list of movie releases in the 2D format at theaters in Los Angeles over the next 14 days?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_theater_movie_releases',\n    location: 'New York',\n    timeframe: 7,\n    format: 'IMAX'\n  },\n  {\n    function_name: 'get_theater_movie_releases',\n    location: 'Los Angeles',\n    timeframe: 14,\n    format: '2D'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 185, "output_tokens": 74, "total_tokens": 259, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4b5b5177-b5b1-4f87-93fa-6aa44cac2afc", "event_id": "4b5b5177-b5b1-4f87-93fa-6aa44cac2afc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 22144, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_142", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "dd63c4f7-0923-4adc-8165-3ac8a4e5ef12", "event_id": "e1ab2ed4-2b9c-413b-8ff7-11ae1a325ec2", "parent_event_id": "dd63c4f7-0923-4adc-8165-3ac8a4e5ef12", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1607, "start_time": "2024-06-20T05:24:59.517Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_140", "variant_name": null}, {"function_name": "Fn_parallel_function_140", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_140\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company_name\":\"Tech Solutions\",\"employee_id\":12345,\"data_field\":[\"Value0\",\"Value1\",\"Value2\",\"Value3\"],\"meta\":\"Value\"},{\"company_name\":\"Tech Solutions\",\"employee_id\":67890,\"data_field\":[\"Value0\",\"Value1\",\"Value2\",\"Value3\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_140_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Fetches the detailed data for a specific employee in a given company.\n    function_name: 'employee.fetch_data' or null,\n    // The name of the company.\n    company_name: string,\n    // The unique ID of the employee.\n    employee_id: int,\n    // Fields of data to be fetched for the employee (Optional). (default: ['Personal Info'])\n    data_field: [\n      'Personal Info' or 'Job History' or 'Payroll' or 'Attendance'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you use the function 'employee.fetch_data' to fetch the 'Personal Info', 'Job History', 'Payroll', and 'Attendance' data fields for an employee with the unique ID of 12345 from the company named 'Tech Solutions'? And then, can you repeat the same process for another employee with the unique ID of 67890 from the same company?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'employee.fetch_data',\n    company_name: 'Tech Solutions',\n    employee_id: 12345,\n    data_field: ['Personal Info', 'Job History', 'Payroll', 'Attendance']\n  },\n  {\n    function_name: 'employee.fetch_data',\n    company_name: 'Tech Solutions',\n    employee_id: 67890,\n    data_field: ['Personal Info', 'Job History', 'Payroll', 'Attendance']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 98, "total_tokens": 301, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "dd63c4f7-0923-4adc-8165-3ac8a4e5ef12", "event_id": "dd63c4f7-0923-4adc-8165-3ac8a4e5ef12", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 22426, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_140", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9c5ae498-12f5-47a4-ba23-83114695d250", "event_id": "3a72f86d-fb31-456a-bc36-ea6a008f4eeb", "parent_event_id": "9c5ae498-12f5-47a4-ba23-83114695d250", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1337, "start_time": "2024-06-20T05:25:00.571Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_147", "variant_name": null}, {"function_name": "Fn_parallel_function_147", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_147\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_range\":0,\"end_range\":10,\"frequency\":5,\"meta\":\"Value\",\"amplitude\":2,\"phase_shift\":1},{\"start_range\":0,\"end_range\":20,\"frequency\":10,\"meta\":\"Value\",\"amplitude\":3,\"phase_shift\":2}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_147_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Plot a sine wave for a given frequency in a given range.\n    function_name: 'plot_sine_wave' or null,\n    // Start of the range in radians.\n    start_range: int,\n    // End of the range in radians.\n    end_range: int,\n    // Frequency of the sine wave in Hz.\n    frequency: int,\n    // Amplitude of the sine wave. Default is 1.\n    amplitude: int or null,\n    // Phase shift of the sine wave in radians. Default is 0.\n    phase_shift: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you plot two sine waves for me? The first one should have a frequency of 5 Hz, starting from 0 radians and ending at 10 radians, with an amplitude of 2 and a phase shift of 1 radian. The second one should have a frequency of 10 Hz, starting from 0 radians and ending at 20 radians, with an amplitude of 3 and a phase shift of 2 radians.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'plot_sine_wave',\n    start_range: 0,\n    end_range: 10,\n    frequency: 5,\n    amplitude: 2,\n    phase_shift: 1\n  },\n  {\n    function_name: 'plot_sine_wave',\n    start_range: 0,\n    end_range: 20,\n    frequency: 10,\n    amplitude: 3,\n    phase_shift: 2\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 231, "output_tokens": 96, "total_tokens": 327, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9c5ae498-12f5-47a4-ba23-83114695d250", "event_id": "9c5ae498-12f5-47a4-ba23-83114695d250", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 23211, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_147", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3146c735-e0b5-4b62-8cda-733a47af15b0", "event_id": "005b1d36-ef97-4572-a50d-3338f0889373", "parent_event_id": "3146c735-e0b5-4b62-8cda-733a47af15b0", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1406, "start_time": "2024-06-20T05:25:00.510Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_145", "variant_name": null}, {"function_name": "Fn_parallel_function_145", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_145\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number\":5,\"meta\":\"Value\"},{\"number\":3,\"meta\":\"Value\"},{\"number\":4,\"meta\":\"Value\"},{\"number\":2,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_145_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the factorial of a given number.\n    function_name: 'math.factorial' or null,\n    // The number to compute factorial.\n    number: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the result if you calculate the factorial of 5, the factorial of 3, then  the factorial of 4 and finally the factorial of 2?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.factorial',\n    number: 5,\n  },\n  {\n    function_name: 'math.factorial',\n    number: 3,\n  },\n  {\n    function_name: 'math.factorial',\n    number: 4,\n  },\n  {\n    function_name: 'math.factorial',\n    number: 2,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 93, "output_tokens": 78, "total_tokens": 171, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3146c735-e0b5-4b62-8cda-733a47af15b0", "event_id": "3146c735-e0b5-4b62-8cda-733a47af15b0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 23218, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_145", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6fc2eccd-1f6f-4521-ae08-d6b20110725b", "event_id": "123aa4ab-7bd9-4be3-aed3-5fbd7a828fbd", "parent_event_id": "6fc2eccd-1f6f-4521-ae08-d6b20110725b", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1487, "start_time": "2024-06-20T05:25:00.509Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_143", "variant_name": null}, {"function_name": "Fn_parallel_function_143", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_143\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"user_id\":12345,\"update_info\":{\"name\":\"John\",\"email\":\"example@.com\"},\"meta\":\"Value\",\"database\":\"CustomerInfo\"},{\"user_id\":67890,\"update_info\":{\"name\":\"John\",\"email\":\"example@.com\"},\"meta\":\"Value\",\"database\":\"CustomerInfo\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_143_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Update user information in the database.\n    function_name: 'update_user_info' or null,\n    // The user ID of the customer.\n    user_id: int,\n    // The new information to update.\n    update_info: {\n      // The customer's updated name.\n      name: string or null,\n      // The customer's updated email.\n      email: string or null,\n    },\n    // The database where the user's information is stored. (default: CustomerInfo)\n    database: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you use the 'update_user_info' function to update the name and email of a customer with user ID 12345 in the 'CustomerInfo' database to \"John\" and \"example@.com\", then repeat the same process for another customer with user ID 67890, changing their name and email to the same value as well as well?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'update_user_info',\n    user_id: 12345,\n    update_info: {\n      name: 'John',\n      email: 'example@.com',\n    },\n    database: 'CustomerInfo',\n  },\n  {\n    function_name: 'update_user_info',\n    user_id: 67890,\n    update_info: {\n      name: 'John',\n      email: 'example@.com',\n    },\n    database: 'CustomerInfo',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 102, "total_tokens": 304, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6fc2eccd-1f6f-4521-ae08-d6b20110725b", "event_id": "6fc2eccd-1f6f-4521-ae08-d6b20110725b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 23299, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_143", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: update_info\\nExpected: any of [{'name': ['John'], 'email': ['example@.com']}]\\nActual@1: meta=<Fn_parallel_function_143_Output0_TypeName.Value: 'Value'> user_id=12345 update_info=Class_Fn_parallel_function_143_Class0(name='John', email='example@.com') database='CustomerInfo'\\nActual all: [Fn_parallel_function_143_Output0(meta=<Fn_parallel_function_143_Output0_TypeName.Value: 'Value'>, user_id=12345, update_info=Class_Fn_parallel_function_143_Class0(name='John', email='example@.com'), database='CustomerInfo'), Fn_parallel_function_143_Output0(meta=<Fn_parallel_function_143_Output0_TypeName.Value: 'Value'>, user_id=67890, update_info=Class_Fn_parallel_function_143_Class0(name='John', email='example@.com'), database='CustomerInfo')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "09396813-b2e6-45e5-a5f5-427663937d30", "event_id": "9ead64d8-bfe4-4c47-b643-8c3d278d7f10", "parent_event_id": "09396813-b2e6-45e5-a5f5-427663937d30", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1636, "start_time": "2024-06-20T05:25:00.509Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_144", "variant_name": null}, {"function_name": "Fn_parallel_function_144", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_144\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base\":10,\"height\":5,\"meta\":\"Value\"},{\"base\":15,\"height\":7,\"meta\":\"Value\"},{\"base\":20,\"height\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_144_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the area of a triangle with the formula area = 0.5 * base * height.\n    function_name: 'calc_area_triangle' or null,\n    // The length of the base of the triangle in meters.\n    base: int,\n    // The perpendicular height of the triangle from the base to the opposite vertex in meters.\n    height: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are planning to build three triangular gardens in your backyard. The first garden has a base of 10 meters and a height of 5 meters, the second garden has a base of 15 meters and a height of 7 meters, and the third garden has a base of 20 meters and a height of 10 meters. What is the total area of the three gardens?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calc_area_triangle',\n    base: 10,\n    height: 5,\n  },\n  {\n    function_name: 'calc_area_triangle',\n    base: 15,\n    height: 7,\n  },\n  {\n    function_name: 'calc_area_triangle',\n    base: 20,\n    height: 10,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 176, "output_tokens": 77, "total_tokens": 253, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "cfd9deda-428f-4b51-8459-5daba10e5ff7", "event_id": "11797f4d-6d46-4fb8-bc7f-892b890b9c2a", "parent_event_id": "cfd9deda-428f-4b51-8459-5daba10e5ff7", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1616, "start_time": "2024-06-20T05:25:00.529Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_146", "variant_name": null}, {"function_name": "Fn_parallel_function_146", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_146\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"hours\":3,\"minutes\":15,\"meta\":\"Value\",\"round_to\":2},{\"hours\":8,\"minutes\":20,\"meta\":\"Value\",\"round_to\":2},{\"hours\":11,\"minutes\":50,\"meta\":\"Value\",\"round_to\":2}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_146_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the angle between the hour and minute hands of a clock at a given time.\n    function_name: 'calculate_clock_angle' or null,\n    // The hour on the clock face.\n    hours: int,\n    // The minutes on the clock face.\n    minutes: int,\n    // The number of decimal places to round the result to, default is 2.\n    round_to: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the angle between the hour and minute hands of a clock at 3:15, rounded to 2 decimal places, and how does this compare to the angle at 8:20 and 11:50, both also rounded to 2 decimal places?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_clock_angle',\n    hours: 3,\n    minutes: 15,\n    round_to: 2\n  },\n  {\n    function_name: 'calculate_clock_angle',\n    hours: 8,\n    minutes: 20,\n    round_to: 2\n  },\n  {\n    function_name: 'calculate_clock_angle',\n    hours: 11,\n    minutes: 50,\n    round_to: 2\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 163, "output_tokens": 98, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "09396813-b2e6-45e5-a5f5-427663937d30", "event_id": "09396813-b2e6-45e5-a5f5-427663937d30", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 23448, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_144", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "cfd9deda-428f-4b51-8459-5daba10e5ff7", "event_id": "cfd9deda-428f-4b51-8459-5daba10e5ff7", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 23448, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_146", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e49f848f-c60b-4e42-842c-208991016044", "event_id": "8c2ee645-4f74-4743-bd03-5229a07a47f4", "parent_event_id": "e49f848f-c60b-4e42-842c-208991016044", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1399, "start_time": "2024-06-20T05:25:00.768Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_148", "variant_name": null}, {"function_name": "Fn_parallel_function_148", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_148\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"distance_in_light_years\":4.22,\"meta\":\"Value\",\"speed_of_light\":299792458},{\"distance_in_light_years\":6.1,\"meta\":\"Value\",\"speed_of_light\":299792458},{\"distance_in_light_years\":5.88,\"meta\":\"Value\",\"speed_of_light\":299792458}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_148_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the time taken for light to travel from a celestial body to another.\n    function_name: 'light_travel_time' or null,\n    // The distance between the two celestial bodies in light years.\n    distance_in_light_years: float,\n    // The speed of light in vacuum, in m/s. Default value is 299792458 m/s.\n    speed_of_light: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the time it would take for light to travel from Earth to a newly discovered exoplanet that is 4.22 light years away, then to another exoplanet that is 6.1 light years from the first one, and finally back to Earth which is 5.88 light years from the second exoplanet? Assume the speed of light in vacuum is 299792458 m/s.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'light_travel_time',\n    distance_in_light_years: 4.22,\n    speed_of_light: 299792458\n  },\n  {\n    function_name: 'light_travel_time',\n    distance_in_light_years: 6.1,\n    speed_of_light: 299792458\n  },\n  {\n    function_name: 'light_travel_time',\n    distance_in_light_years: 5.88,\n    speed_of_light: 299792458\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 192, "output_tokens": 104, "total_tokens": 296, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e49f848f-c60b-4e42-842c-208991016044", "event_id": "e49f848f-c60b-4e42-842c-208991016044", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 23468, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_148", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "56999077-6b04-4e72-b8bf-133f350c5bb0", "event_id": "e24cc357-84f7-4d4f-b805-d19bff482e9b", "parent_event_id": "56999077-6b04-4e72-b8bf-133f350c5bb0", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1118, "start_time": "2024-06-20T05:25:01.125Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_150", "variant_name": null}, {"function_name": "Fn_parallel_function_150", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_150\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"body1\":\"Mars\",\"body2\":\"Venus\",\"meta\":\"Value\",\"unit\":\"miles\"},{\"body1\":\"Mars\",\"body2\":\"Jupiter\",\"meta\":\"Value\",\"unit\":\"miles\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_150_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the distance between two celestial bodies.\n    function_name: 'calculate_distance' or null,\n    // The first celestial body.\n    body1: string,\n    // The second celestial body.\n    body2: string,\n    // The unit of measurement, default is 'kilometers'.\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the distance in miles between the celestial bodies Mars and Venus, and then between Mars and Jupiter, given that the function 'calculate_distance' requires the names of the two celestial bodies and the unit of measurement?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_distance',\n    body1: 'Mars',\n    body2: 'Venus',\n    unit: 'miles',\n  },\n  {\n    function_name: 'calculate_distance',\n    body1: 'Mars',\n    body2: 'Jupiter',\n    unit: 'miles',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 134, "output_tokens": 72, "total_tokens": 206, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "56999077-6b04-4e72-b8bf-133f350c5bb0", "event_id": "56999077-6b04-4e72-b8bf-133f350c5bb0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 23545, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_150", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3d0a4615-2b66-4ce5-b387-9697076a07a9", "event_id": "15afe043-5a71-49e9-b5b5-0b38f8d1d30f", "parent_event_id": "3d0a4615-2b66-4ce5-b387-9697076a07a9", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1710, "start_time": "2024-06-20T05:25:00.843Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_149", "variant_name": null}, {"function_name": "Fn_parallel_function_149", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_149\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"distance\":500,\"time\":25,\"meta\":\"Value\",\"to_unit\":\"km/h\"},{\"distance\":1000,\"time\":200,\"meta\":\"Value\",\"to_unit\":\"m/s\"},{\"distance\":10000,\"time\":600,\"meta\":\"Value\",\"to_unit\":\"km/h\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_149_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the speed of an object based on the distance travelled and the time taken.\n    function_name: 'calculate_speed' or null,\n    // The distance the object travelled in meters.\n    distance: int,\n    // The time it took for the object to travel in seconds.\n    time: int,\n    // The unit in which the speed should be calculated, default is m/s.\n    to_unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the speed of a car that traveled a distance of 500 meters in 25 seconds and provide the answer in km/h? Also, can you calculate the speed of a bicycle that traveled a distance of 1000 meters in 200 seconds and provide the answer in m/s? Lastly, can you calculate the speed of a train that traveled a distance of 10000 meters in 600 seconds and provide the answer in km/h?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_speed',\n    distance: 500,\n    time: 25,\n    to_unit: 'km/h'\n  },\n  {\n    function_name: 'calculate_speed',\n    distance: 1000,\n    time: 200,\n    to_unit: 'm/s'\n  },\n  {\n    function_name: 'calculate_speed',\n    distance: 10000,\n    time: 600,\n    to_unit: 'km/h'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 100, "total_tokens": 303, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3d0a4615-2b66-4ce5-b387-9697076a07a9", "event_id": "3d0a4615-2b66-4ce5-b387-9697076a07a9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 23857, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_149", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "10323449-1683-47d1-a1b4-9b01f71e54fc", "event_id": "4a3738f0-a855-4202-94e1-03d4a48bffed", "parent_event_id": "10323449-1683-47d1-a1b4-9b01f71e54fc", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1172, "start_time": "2024-06-20T05:25:01.998Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_153", "variant_name": null}, {"function_name": "Fn_parallel_function_153", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_153\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base\":3,\"exponent\":5,\"meta\":\"Value\",\"mod\":null},{\"base\":2,\"exponent\":3,\"meta\":\"Value\",\"mod\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_153_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the power of one number raised to another.\n    function_name: 'math.power' or null,\n    // The base number.\n    base: int,\n    // The exponent.\n    exponent: int,\n    // The modulus. Default is None. Calculates pow(base, exponent) % mod when provided.\n    mod: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the result of the following mathematical operation: first, raise the number 3 to the power of 5, then raise the number 2 to the power of 3.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.power',\n    base: 3,\n    exponent: 5,\n    mod: null\n  },\n  {\n    function_name: 'math.power',\n    base: 2,\n    exponent: 3,\n    mod: null\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 134, "output_tokens": 60, "total_tokens": 194, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b1480a3c-ca80-43b7-96c7-daf004eb137e", "event_id": "3bc07b79-5a1b-4a30-8902-96755d374527", "parent_event_id": "b1480a3c-ca80-43b7-96c7-daf004eb137e", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4746, "start_time": "2024-06-20T05:24:58.423Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_134", "variant_name": null}, {"function_name": "Fn_parallel_function_134", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_134\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"coord1\":[48.8584,2.2945],\"coord2\":[41.8902,12.4922],\"unit\":\"kilometers\",\"meta\":\"Value\"},{\"coord1\":[41.8902,12.4922],\"coord2\":[37.9715,23.7257],\"unit\":\"kilometers\",\"meta\":\"Value\"},{\"coord1\":[37.9715,23.7257],\"coord2\":[29.9792,31.1342],\"unit\":\"kilometers\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_134_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the distance between two GPS coordinates.\n    function_name: 'calculate_distance' or null,\n    // The first coordinate as (latitude, longitude).\n    coord1: float[],\n    // The second coordinate as (latitude, longitude).\n    coord2: float[],\n    // The unit of distance. Defaults to miles if not specified.\n    unit: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the total distance in kilometers if you were to travel from the Eiffel Tower in Paris (48.8584\u00b0 N, 2.2945\u00b0 E) to the Colosseum in Rome (41.8902\u00b0 N, 12.4922\u00b0 E), then to the Acropolis in Athens (37.9715\u00b0 N, 23.7257\u00b0 E), and finally to the Pyramids of Giza in Egypt (29.9792\u00b0 N, 31.1342\u00b0 E)?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_distance',\n    coord1: [48.8584, 2.2945],\n    coord2: [41.8902, 12.4922],\n    unit: 'kilometers'\n  },\n  {\n    function_name: 'calculate_distance',\n    coord1: [41.8902, 12.4922],\n    coord2: [37.9715, 23.7257],\n    unit: 'kilometers'\n  },\n  {\n    function_name: 'calculate_distance',\n    coord1: [37.9715, 23.7257],\n    coord2: [29.9792, 31.1342],\n    unit: 'kilometers'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 208, "output_tokens": 155, "total_tokens": 363, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a53ebfc9-bc07-4114-8da4-81aa07355ae6", "event_id": "37f70b34-00c1-4890-871a-f8f7c98f1098", "parent_event_id": "a53ebfc9-bc07-4114-8da4-81aa07355ae6", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1260, "start_time": "2024-06-20T05:25:01.910Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_151", "variant_name": null}, {"function_name": "Fn_parallel_function_151", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_151\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"polynomial\":[3,-2,1],\"limits\":[-1,2],\"meta\":\"Value\"},{\"polynomial\":[1,0,-1],\"limits\":[0,3],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_151_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the area under the curve for a given polynomial function within a specified interval.\n    function_name: 'mathematics.calculate_area_under_curve' or null,\n    // The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term.\n    polynomial: int[],\n    // A list of two numbers specifying the lower and upper limit for the integration interval.\n    limits: int[],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the area under the curve for the polynomial function with coefficients [3, -2, 1] (meaning the function is 3x^2 - 2x + 1) within the interval [-1, 2], and then do the same for the polynomial function with coefficients [1, 0, -1] (meaning the function is x^2 - 1) within the interval [0, 3]? Please provide both results.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'mathematics.calculate_area_under_curve',\n    polynomial: [3, -2, 1],\n    limits: [-1, 2],\n  },\n  {\n    function_name: 'mathematics.calculate_area_under_curve',\n    polynomial: [1, 0, -1],\n    limits: [0, 3],\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 232, "output_tokens": 76, "total_tokens": 308, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "10323449-1683-47d1-a1b4-9b01f71e54fc", "event_id": "10323449-1683-47d1-a1b4-9b01f71e54fc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 24472, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_153", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: base\\nExpected: any of [2]\\nActual@1: meta=<Fn_parallel_function_153_Output0_TypeName.Value: 'Value'> base=3 exponent=5 mod=None\\nActual all: [Fn_parallel_function_153_Output0(meta=<Fn_parallel_function_153_Output0_TypeName.Value: 'Value'>, base=3, exponent=5, mod=None), Fn_parallel_function_153_Output0(meta=<Fn_parallel_function_153_Output0_TypeName.Value: 'Value'>, base=2, exponent=3, mod=None)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b1480a3c-ca80-43b7-96c7-daf004eb137e", "event_id": "b1480a3c-ca80-43b7-96c7-daf004eb137e", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 24473, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_134", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a53ebfc9-bc07-4114-8da4-81aa07355ae6", "event_id": "a53ebfc9-bc07-4114-8da4-81aa07355ae6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 24473, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_151", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "923532c4-ed75-4472-b540-06bdbcd4599b", "event_id": "fb445a5f-82ef-401f-921b-3a2de5318a2e", "parent_event_id": "923532c4-ed75-4472-b540-06bdbcd4599b", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 4036, "start_time": "2024-06-20T05:24:59.178Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_138", "variant_name": null}, {"function_name": "Fn_parallel_function_138", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_138\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"list\":[45,12,67,21,89],\"order\":\"Value0\",\"meta\":\"Value\"},{\"list\":[45,12,67,21,89],\"order\":\"Value1\",\"meta\":\"Value\"},{\"list\":[34,78,12,56,90],\"order\":\"Value0\",\"meta\":\"Value\"},{\"list\":[34,78,12,56,90],\"order\":\"Value1\",\"meta\":\"Value\"},{\"list\":[23,45,67,89,12],\"order\":\"Value0\",\"meta\":\"Value\"},{\"list\":[23,45,67,89,12],\"order\":\"Value1\",\"meta\":\"Value\"},{\"list\":[56,78,90,12,34],\"order\":\"Value0\",\"meta\":\"Value\"},{\"list\":[56,78,90,12,34],\"order\":\"Value1\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_138_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Sorts a given list in ascending or descending order.\n    function_name: 'array_sort' or null,\n    // The list of numbers to be sorted.\n    list: int[],\n    // Order of sorting. If not specified, it will default to ascending.\n    order: 'ascending' or 'descending',\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You have four lists of numbers: [45, 12, 67, 21, 89], [34, 78, 12, 56, 90], [23, 45, 67, 89, 12], and [56, 78, 90, 12, 34]. Can you use the 'array_sort' function to sort these lists in both ascending and descending order?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'array_sort',\n    list: [45, 12, 67, 21, 89],\n    order: 'ascending'\n  },\n  {\n    function_name: 'array_sort',\n    list: [45, 12, 67, 21, 89],\n    order: 'descending'\n  },\n  {\n    function_name: 'array_sort',\n    list: [34, 78, 12, 56, 90],\n    order: 'ascending'\n  },\n  {\n    function_name: 'array_sort',\n    list: [34, 78, 12, 56, 90],\n    order: 'descending'\n  },\n  {\n    function_name: 'array_sort',\n    list: [23, 45, 67, 89, 12],\n    order: 'ascending'\n  },\n  {\n    function_name: 'array_sort',\n    list: [23, 45, 67, 89, 12],\n    order: 'descending'\n  },\n  {\n    function_name: 'array_sort',\n    list: [56, 78, 90, 12, 34],\n    order: 'ascending'\n  },\n  {\n    function_name: 'array_sort',\n    list: [56, 78, 90, 12, 34],\n    order: 'descending'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 177, "output_tokens": 290, "total_tokens": 467, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "923532c4-ed75-4472-b540-06bdbcd4599b", "event_id": "923532c4-ed75-4472-b540-06bdbcd4599b", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 24516, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_138", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "3c6c7621-1b13-48d8-8ecd-cbc489ce36cf", "event_id": "f532c38f-aec0-48c9-b58c-0cd5a455557f", "parent_event_id": "3c6c7621-1b13-48d8-8ecd-cbc489ce36cf", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1198, "start_time": "2024-06-20T05:25:02.167Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_156", "variant_name": null}, {"function_name": "Fn_parallel_function_156", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_156\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"predictors\":[\"Age\",\"Income\",\"Education\"],\"target\":\"Spending Score\",\"meta\":\"Value\",\"standardize\":false},{\"predictors\":[\"Age\",\"Income\",\"Education\"],\"target\":\"Spending Score\",\"meta\":\"Value\",\"standardize\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_156_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Build a linear regression model using given predictor variables and a target variable.\n    function_name: 'run_linear_regression' or null,\n    // Array containing the names of predictor variables.\n    predictors: string[],\n    // The name of target variable.\n    target: string,\n    // Option to apply standardization on the predictors. Defaults to False.\n    standardize: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are given a dataset with various variables including 'Age', 'Income', 'Education', 'Gender', 'Marital Status', and 'Spending Score'. You want to predict 'Spending Score' based on the other variables. Could you please use the 'run_linear_regression' function to build a linear regression model using 'Age', 'Income', and 'Education' as predictor variables and 'Spending Score' as the target variable without applying standardization on the predictors? Then, could you please run the same function again but this time with standardization applied on the predictors?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'run_linear_regression',\n    predictors: ['Age', 'Income', 'Education'],\n    target: 'Spending Score',\n    standardize: false\n  },\n  {\n    function_name: 'run_linear_regression',\n    predictors: ['Age', 'Income', 'Education'],\n    target: 'Spending Score',\n    standardize: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 220, "output_tokens": 80, "total_tokens": 300, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "3c6c7621-1b13-48d8-8ecd-cbc489ce36cf", "event_id": "3c6c7621-1b13-48d8-8ecd-cbc489ce36cf", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 24667, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_156", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d31d0089-16fe-47ec-993d-f79bae8f4a25", "event_id": "251a5323-47f1-4305-b5a2-6980e5dd1e0c", "parent_event_id": "d31d0089-16fe-47ec-993d-f79bae8f4a25", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1287, "start_time": "2024-06-20T05:25:02.147Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_154", "variant_name": null}, {"function_name": "Fn_parallel_function_154", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_154\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"dataset\":\"dataset1\",\"max_depth\":10,\"n_estimators\":100,\"meta\":\"Value\"},{\"dataset\":\"dataset2\",\"max_depth\":20,\"n_estimators\":200,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_154_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Train a Random Forest classifier with the specified parameters.\n    function_name: 'train_random_forest_classifier' or null,\n    // The dataset to train the classifier on.\n    dataset: string,\n    // The maximum depth of the trees in the forest.\n    max_depth: int,\n    // The number of trees in the forest.\n    n_estimators: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are given a task to train a Random Forest classifier on two different datasets, 'dataset1' and 'dataset2'. For the first run, you are asked to set the maximum depth of the trees in the forest to 10 and the number of trees in the forest to 100. For the second run, you are asked to set the maximum depth of the trees in the forest to 20 and the number of trees in the forest to 200. How would you invoke the 'train_random_forest_classifier' function to accomplish this task?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'train_random_forest_classifier',\n    dataset: 'dataset1',\n    max_depth: 10,\n    n_estimators: 100,\n  },\n  {\n    function_name: 'train_random_forest_classifier',\n    dataset: 'dataset2',\n    max_depth: 20,\n    n_estimators: 200,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 74, "total_tokens": 284, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d31d0089-16fe-47ec-993d-f79bae8f4a25", "event_id": "d31d0089-16fe-47ec-993d-f79bae8f4a25", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 24737, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_154", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4525f95b-49ee-49c5-a901-41601cdb634c", "event_id": "c3347898-d9c2-428c-9f9d-76b75733877c", "parent_event_id": "4525f95b-49ee-49c5-a901-41601cdb634c", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1696, "start_time": "2024-06-20T05:25:01.917Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_152", "variant_name": null}, {"function_name": "Fn_parallel_function_152", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_152\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"base\":15,\"height\":20,\"meta\":\"Value\",\"unit\":\"square meters\"},{\"base\":25,\"height\":30,\"meta\":\"Value\",\"unit\":\"square feet\"},{\"base\":35,\"height\":40,\"meta\":\"Value\",\"unit\":\"square inches\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_152_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the area of a triangle.\n    function_name: 'geometry.area_triangle' or null,\n    // The length of the base of the triangle.\n    base: int,\n    // The height of the triangle from the base.\n    height: int,\n    // The measurement unit for the area. Defaults to square meters.\n    unit: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me calculate the total area of three different triangles? The first triangle has a base of 15 meters and a height of 20 meters. The second triangle has a base of 25 feet and a height of 30 feet. And the third triangle has a base of 35 inches and a height of 40 inches. I would like the area of each triangle in their respective units.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'geometry.area_triangle',\n        base: 15,\n        height: 20,\n        unit: 'square meters'\n    },\n    {\n        function_name: 'geometry.area_triangle',\n        base: 25,\n        height: 30,\n        unit: 'square feet'\n    },\n    {\n        function_name: 'geometry.area_triangle',\n        base: 35,\n        height: 40,\n        unit: 'square inches'\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 180, "output_tokens": 98, "total_tokens": 278, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4525f95b-49ee-49c5-a901-41601cdb634c", "event_id": "4525f95b-49ee-49c5-a901-41601cdb634c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 24915, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_152", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "32ea79aa-3585-49d3-b333-b05d06f17d00", "event_id": "9c29e932-b647-44ca-bd96-4b12208fa555", "parent_event_id": "32ea79aa-3585-49d3-b333-b05d06f17d00", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1701, "start_time": "2024-06-20T05:25:02.147Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_155", "variant_name": null}, {"function_name": "Fn_parallel_function_155", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_155\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"weight\":75,\"height\":180,\"meta\":\"Value\",\"system\":\"metric\"},{\"weight\":60,\"height\":165,\"meta\":\"Value\",\"system\":\"metric\"},{\"weight\":80,\"height\":175,\"meta\":\"Value\",\"system\":\"metric\"},{\"weight\":90,\"height\":185,\"meta\":\"Value\",\"system\":\"metric\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_155_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the Body Mass Index (BMI) for a person based on their weight and height.\n    function_name: 'calculate_bmi' or null,\n    // The weight of the person in kilograms.\n    weight: int,\n    // The height of the person in centimeters.\n    height: int,\n    // The system of units to be used, 'metric' or 'imperial'. Default is 'metric'.\n    system: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you calculate the Body Mass Index (BMI) for four individuals? The first person weighs 75 kilograms and is 180 centimeters tall, the second person weighs 60 kilograms and is 165 centimeters tall, the third person weighs 80 kilograms and is 175 centimeters tall, and the fourth person weighs 90 kilograms and is 185 centimeters tall. Please use the metric system for all calculations.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_bmi',\n    weight: 75,\n    height: 180,\n    system: 'metric'\n  },\n  {\n    function_name: 'calculate_bmi',\n    weight: 60,\n    height: 165,\n    system: 'metric'\n  },\n  {\n    function_name: 'calculate_bmi',\n    weight: 80,\n    height: 175,\n    system: 'metric'\n  },\n  {\n    function_name: 'calculate_bmi',\n    weight: 90,\n    height: 185,\n    system: 'metric'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 202, "output_tokens": 126, "total_tokens": 328, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "32ea79aa-3585-49d3-b333-b05d06f17d00", "event_id": "32ea79aa-3585-49d3-b333-b05d06f17d00", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 25150, "start_time": "2024-06-20T05:24:38.698Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_155", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "723080b1-731b-433f-bf9a-933cacb16b42", "event_id": "f999978e-a79f-4060-8bf7-4f36bfcb1575", "parent_event_id": "723080b1-731b-433f-bf9a-933cacb16b42", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2362, "start_time": "2024-06-20T05:25:02.244Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_157", "variant_name": null}, {"function_name": "Fn_parallel_function_157", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_157\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"n_estimators\":100,\"max_depth\":10,\"data\":\"data_random_forest\",\"meta\":\"Value\"},{\"n_estimators\":200,\"max_depth\":20,\"data\":\"data_random_forest\",\"meta\":\"Value\"},{\"n_estimators\":300,\"max_depth\":30,\"data\":\"data_random_forest\",\"meta\":\"Value\"},{\"n_estimators\":400,\"max_depth\":40,\"data\":\"data_random_forest\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_157_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Train a Random Forest Model on given data\n    function_name: 'random_forest.train' or null,\n    // The number of trees in the forest.\n    n_estimators: int,\n    // The maximum depth of the tree.\n    max_depth: int,\n    // The training data for the model.\n    data: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are given a dataset \"data_random_forest\" in the form of a dataframe and you want to train a Random Forest Model on this data. You decide to experiment with different numbers of trees in the forest and different maximum depths of the trees to see how these parameters affect the model's performance. \n\nFirst, you train a model with 100 trees and a maximum depth of 10. Then, you train another model with 200 trees and a maximum depth of 20. After that, you train a third model with 300 trees and a maximum depth of 30. Finally, you train a fourth model with 400 trees and a maximum depth of 40. \n\nCan you invoke the 'random_forest.train' function four times with these different parameters and compare the performance of the four models?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'random_forest.train',\n    n_estimators: 100,\n    max_depth: 10,\n    data: 'data_random_forest'\n  },\n  {\n    function_name: 'random_forest.train',\n    n_estimators: 200,\n    max_depth: 20,\n    data: 'data_random_forest'\n  },\n  {\n    function_name: 'random_forest.train',\n    n_estimators: 300,\n    max_depth: 30,\n    data: 'data_random_forest'\n  },\n  {\n    function_name: 'random_forest.train',\n    n_estimators: 400,\n    max_depth: 40,\n    data: 'data_random_forest'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 256, "output_tokens": 150, "total_tokens": 406, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c43a726e-c9fa-42b8-803c-7d38dc66c3e6", "event_id": "d6262030-e9f0-4d59-afa3-4cc916aea4f1", "parent_event_id": "c43a726e-c9fa-42b8-803c-7d38dc66c3e6", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1434, "start_time": "2024-06-20T05:25:03.172Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_160", "variant_name": null}, {"function_name": "Fn_parallel_function_160", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_160\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"desired_number\":4,\"number_of_rolls\":3,\"meta\":\"Value\",\"die_sides\":null},{\"desired_number\":2,\"number_of_rolls\":2,\"meta\":\"Value\",\"die_sides\":null},{\"desired_number\":7,\"number_of_rolls\":2,\"meta\":\"Value\",\"die_sides\":8}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_160_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.\n    function_name: 'probability.dice_roll' or null,\n    // The number you want to roll.\n    desired_number: int,\n    // How many times you want to roll that number in a row.\n    number_of_rolls: int,\n    // The number of sides on the die (optional; default is 6).\n    die_sides: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"In a board game, you have a six-sided die. You are curious about the probability of rolling a 4 three times in a row. After that, you want to know the probability of rolling a 2 twice in a row. Finally, you wonder what the probability would be if the die had 8 sides and you wanted to roll a 7 two times in a row. Can you calculate these probabilities?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'probability.dice_roll',\n    desired_number: 4,\n    number_of_rolls: 3\n  },\n  {\n    function_name: 'probability.dice_roll',\n    desired_number: 2,\n    number_of_rolls: 2\n  },\n  {\n    function_name: 'probability.dice_roll',\n    desired_number: 7,\n    number_of_rolls: 2,\n    die_sides: 8\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 210, "output_tokens": 100, "total_tokens": 310, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "723080b1-731b-433f-bf9a-933cacb16b42", "event_id": "723080b1-731b-433f-bf9a-933cacb16b42", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 25908, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_157", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c43a726e-c9fa-42b8-803c-7d38dc66c3e6", "event_id": "c43a726e-c9fa-42b8-803c-7d38dc66c3e6", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 25908, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_160", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5db25a1a-0901-4547-bff7-c45a9d02b1d9", "event_id": "fd8151ef-9ffb-4cb4-be19-b3a3c4b28f3a", "parent_event_id": "5db25a1a-0901-4547-bff7-c45a9d02b1d9", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2106, "start_time": "2024-06-20T05:25:02.556Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_158", "variant_name": null}, {"function_name": "Fn_parallel_function_158", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_158\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"bedrooms\":3,\"bathrooms\":2,\"area\":1500,\"location\":\"New York\",\"meta\":\"Value\"},{\"bedrooms\":4,\"bathrooms\":3,\"area\":2000,\"location\":\"Los Angeles\",\"meta\":\"Value\"},{\"bedrooms\":2,\"bathrooms\":1,\"area\":1200,\"location\":\"Chicago\",\"meta\":\"Value\"},{\"bedrooms\":3,\"bathrooms\":2,\"area\":1800,\"location\":\"Miami\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_158_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.\n    function_name: 'predict_house_price' or null,\n    // The number of bedrooms in the house.\n    bedrooms: int,\n    // The number of bathrooms in the house.\n    bathrooms: int,\n    // The area of the house in square feet.\n    area: int,\n    // The location of the house.\n    location: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you use the 'predict_house_price' function to compare the estimated prices of four different houses? The first house is located in New York, has 3 bedrooms, 2 bathrooms, and an area of 1500 square feet. The second house is in Los Angeles, with 4 bedrooms, 3 bathrooms, and an area of 2000 square feet. The third house is in Chicago, with 2 bedrooms, 1 bathroom, and an area of 1200 square feet. The fourth house is in Miami, with 3 bedrooms, 2 bathrooms, and an area of 1800 square feet.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'predict_house_price',\n        bedrooms: 3,\n        bathrooms: 2,\n        area: 1500,\n        location: 'New York'\n    },\n    {\n        function_name: 'predict_house_price',\n        bedrooms: 4,\n        bathrooms: 3,\n        area: 2000,\n        location: 'Los Angeles'\n    },\n    {\n        function_name: 'predict_house_price',\n        bedrooms: 2,\n        bathrooms: 1,\n        area: 1200,\n        location: 'Chicago'\n    },\n    {\n        function_name: 'predict_house_price',\n        bedrooms: 3,\n        bathrooms: 2,\n        area: 1800,\n        location: 'Miami'\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 245, "output_tokens": 156, "total_tokens": 401, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5db25a1a-0901-4547-bff7-c45a9d02b1d9", "event_id": "5db25a1a-0901-4547-bff7-c45a9d02b1d9", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 25964, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_158", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f8e52765-1ac3-4ec2-a517-c3f49b50cba2", "event_id": "3f8149ce-d66f-4db9-b1b7-ecfab11e3d48", "parent_event_id": "f8e52765-1ac3-4ec2-a517-c3f49b50cba2", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1530, "start_time": "2024-06-20T05:25:03.172Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_161", "variant_name": null}, {"function_name": "Fn_parallel_function_161", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_161\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"trials\":20,\"successes\":5,\"meta\":\"Value\",\"p\":0.3},{\"trials\":50,\"successes\":15,\"meta\":\"Value\",\"p\":0.3},{\"trials\":100,\"successes\":30,\"meta\":\"Value\",\"p\":0.3}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_161_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Compute the probability of having 'success' outcome from binomial distribution.\n    function_name: 'prob_dist.binomial' or null,\n    // The number of independent experiments.\n    trials: int,\n    // The number of success events.\n    successes: int,\n    // The probability of success on any given trial, defaults to 0.5\n    p: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"In a game of chance, you have a 0.3 probability of winning any given round. If you play this game 20 times, what is the probability of winning exactly 5 times? Also, if you play the game 50 times, what is the probability of winning exactly 15 times? Lastly, if you play the game 100 times, what is the probability of winning exactly 30 times? Use the function 'prob_dist.binomial' to compute these probabilities.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'prob_dist.binomial',\n    trials: 20,\n    successes: 5,\n    p: 0.3\n  },\n  {\n    function_name: 'prob_dist.binomial',\n    trials: 50,\n    successes: 15,\n    p: 0.3\n  },\n  {\n    function_name: 'prob_dist.binomial',\n    trials: 100,\n    successes: 30,\n    p: 0.3\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 203, "output_tokens": 104, "total_tokens": 307, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f8e52765-1ac3-4ec2-a517-c3f49b50cba2", "event_id": "f8e52765-1ac3-4ec2-a517-c3f49b50cba2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 26004, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_161", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c962bd6b-ee18-4a3b-a354-c88663e9586d", "event_id": "2313ad7c-4304-47bf-bf60-9e261ab4d5fc", "parent_event_id": "c962bd6b-ee18-4a3b-a354-c88663e9586d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1623, "start_time": "2024-06-20T05:25:03.172Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_159", "variant_name": null}, {"function_name": "Fn_parallel_function_159", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_159\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"mu\":5,\"sigma\":2,\"meta\":\"Value\"},{\"mu\":5,\"sigma\":2,\"meta\":\"Value\"},{\"mu\":10,\"sigma\":3,\"meta\":\"Value\"},{\"mu\":10,\"sigma\":3,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_159_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Generates a random number from a normal distribution given the mean and standard deviation.\n    function_name: 'random.normalvariate' or null,\n    // Mean of the normal distribution.\n    mu: int,\n    // Standard deviation of the normal distribution.\n    sigma: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are a data scientist working on a project that requires you to generate random numbers from a normal distribution. You need to generate four random numbers: two from a normal distribution with a mean of 5 and a standard deviation of 2, and two from a normal distribution with a mean of 10 and a standard deviation of 3. How can you use the 'random.normalvariate' function to achieve this?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'random.normalvariate',\n    mu: 5,\n    sigma: 2\n  },\n  {\n    function_name: 'random.normalvariate',\n    mu: 5,\n    sigma: 2\n  },\n  {\n    function_name: 'random.normalvariate',\n    mu: 10,\n    sigma: 3\n  },\n  {\n    function_name: 'random.normalvariate',\n    mu: 10,\n    sigma: 3\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 165, "output_tokens": 106, "total_tokens": 271, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c962bd6b-ee18-4a3b-a354-c88663e9586d", "event_id": "c962bd6b-ee18-4a3b-a354-c88663e9586d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 26097, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_159", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: mu\\nExpected: any of [10]\\nActual@2: meta=<Fn_parallel_function_159_Output0_TypeName.Value: 'Value'> mu=5 sigma=2\\nActual all: [Fn_parallel_function_159_Output0(meta=<Fn_parallel_function_159_Output0_TypeName.Value: 'Value'>, mu=5, sigma=2), Fn_parallel_function_159_Output0(meta=<Fn_parallel_function_159_Output0_TypeName.Value: 'Value'>, mu=5, sigma=2), Fn_parallel_function_159_Output0(meta=<Fn_parallel_function_159_Output0_TypeName.Value: 'Value'>, mu=10, sigma=3), Fn_parallel_function_159_Output0(meta=<Fn_parallel_function_159_Output0_TypeName.Value: 'Value'>, mu=10, sigma=3)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "048688ed-eb29-40f7-b0f0-cb217e22bc7d", "event_id": "681de8f6-46a1-4639-b868-0cedaed65c44", "parent_event_id": "048688ed-eb29-40f7-b0f0-cb217e22bc7d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1679, "start_time": "2024-06-20T05:25:03.215Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_162", "variant_name": null}, {"function_name": "Fn_parallel_function_162", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_162\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"number_of_trials\":10,\"number_of_successes\":7,\"meta\":\"Value\",\"probability_of_success\":0.6},{\"number_of_trials\":15,\"number_of_successes\":10,\"meta\":\"Value\",\"probability_of_success\":0.6},{\"number_of_trials\":20,\"number_of_successes\":15,\"meta\":\"Value\",\"probability_of_success\":0.6}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_162_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.\n    function_name: 'calculate_binomial_probability' or null,\n    // The total number of trials.\n    number_of_trials: int,\n    // The desired number of successful outcomes.\n    number_of_successes: int,\n    // The probability of a successful outcome on any given trial. (default: 0.5)\n    probability_of_success: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"In a game of basketball, a player has a 60% chance of making any given shot. In a series of 10 shots, what is the probability that the player makes exactly 7 shots? Also, in another series of 15 shots, what is the probability that the player makes exactly 10 shots? Finally, in a series of 20 shots, what is the probability that the player makes exactly 15 shots?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_binomial_probability',\n    number_of_trials: 10,\n    number_of_successes: 7,\n    probability_of_success: 0.6\n  },\n  {\n    function_name: 'calculate_binomial_probability',\n    number_of_trials: 15,\n    number_of_successes: 10,\n    probability_of_success: 0.6\n  },\n  {\n    function_name: 'calculate_binomial_probability',\n    number_of_trials: 20,\n    number_of_successes: 15,\n    probability_of_success: 0.6\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 211, "output_tokens": 125, "total_tokens": 336, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "048688ed-eb29-40f7-b0f0-cb217e22bc7d", "event_id": "048688ed-eb29-40f7-b0f0-cb217e22bc7d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 26196, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_162", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5966ec12-bf01-4a63-aac0-2d415c7cd5d2", "event_id": "d7e0830c-7425-4e98-a6b2-d80e65ddd9dd", "parent_event_id": "5966ec12-bf01-4a63-aac0-2d415c7cd5d2", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1364, "start_time": "2024-06-20T05:25:03.614Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_165", "variant_name": null}, {"function_name": "Fn_parallel_function_165", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_165\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"table\":[45,55,35,65],\"meta\":\"Value\",\"alpha\":0.05},{\"table\":[30,70,50,50],\"meta\":\"Value\",\"alpha\":0.05}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_165_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Performs a Chi-Squared test for independence on a 2x2 contingency table.\n    function_name: 'chi_squared_test' or null,\n    // A 2x2 contingency table presented in array form.\n    table: int[],\n    // Significance level for the Chi-Squared test. Default is 0.05.\n    alpha: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are a data analyst and you have been given two 2x2 contingency tables representing the results of a survey conducted in two different cities. The first table is [45, 55, 35, 65] and the second table is [30, 70, 50, 50]. You are asked to perform a Chi-Squared test for independence on both tables to determine if there is a significant relationship between the variables in each city. Use a significance level of 0.05 for both tests. Can you tell if there is a significant relationship in each city based on the Chi-Squared test results?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'chi_squared_test',\n    table: [45, 55, 35, 65],\n    alpha: 0.05\n  },\n  {\n    function_name: 'chi_squared_test',\n    table: [30, 70, 50, 50],\n    alpha: 0.05\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 226, "output_tokens": 74, "total_tokens": 300, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5966ec12-bf01-4a63-aac0-2d415c7cd5d2", "event_id": "5966ec12-bf01-4a63-aac0-2d415c7cd5d2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 26280, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_165", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "18e94cc2-3a43-493b-928c-eb8d68106e07", "event_id": "3ceef9d8-a342-4aae-9168-3db94cf265eb", "parent_event_id": "18e94cc2-3a43-493b-928c-eb8d68106e07", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1665, "start_time": "2024-06-20T05:25:03.367Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_163", "variant_name": null}, {"function_name": "Fn_parallel_function_163", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_163\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"success_outcomes\":4,\"total_outcomes\":52,\"meta\":\"Value\",\"format_as_ratio\":false},{\"success_outcomes\":13,\"total_outcomes\":52,\"meta\":\"Value\",\"format_as_ratio\":false},{\"success_outcomes\":26,\"total_outcomes\":52,\"meta\":\"Value\",\"format_as_ratio\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_163_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the probability of an event.\n    function_name: 'probability_of_event' or null,\n    // The number of successful outcomes.\n    success_outcomes: int,\n    // The total number of possible outcomes.\n    total_outcomes: int,\n    // When true, formats the output as a ratio instead of a decimal. Default is false.\n    format_as_ratio: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are a teacher preparing a probability lesson for your students. You have a deck of 52 playing cards and you want to explain the probability of drawing certain cards. \n\n1. What is the probability of drawing an Ace (4 successful outcomes) from the deck (52 total outcomes)? Please provide this as a decimal. \n\n2. Then, what is the probability of drawing a heart (13 successful outcomes) from the deck (52 total outcomes)? Please provide this as a decimal. \n\n3. Finally, what is the probability of drawing a red card (26 successful outcomes) from the deck (52 total outcomes)? But this time, please provide the answer as a ratio."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'probability_of_event',\n    success_outcomes: 4,\n    total_outcomes: 52,\n    format_as_ratio: false\n  },\n  {\n    function_name: 'probability_of_event',\n    success_outcomes: 13,\n    total_outcomes: 52,\n    format_as_ratio: false\n  },\n  {\n    function_name: 'probability_of_event',\n    success_outcomes: 26,\n    total_outcomes: 52,\n    format_as_ratio: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 241, "output_tokens": 110, "total_tokens": 351, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "18e94cc2-3a43-493b-928c-eb8d68106e07", "event_id": "18e94cc2-3a43-493b-928c-eb8d68106e07", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 26334, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_163", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: success_outcomes\\nExpected: any of [26]\\nActual@1: meta=<Fn_parallel_function_163_Output0_TypeName.Value: 'Value'> success_outcomes=4 total_outcomes=52 format_as_ratio=False\\nActual all: [Fn_parallel_function_163_Output0(meta=<Fn_parallel_function_163_Output0_TypeName.Value: 'Value'>, success_outcomes=4, total_outcomes=52, format_as_ratio=False), Fn_parallel_function_163_Output0(meta=<Fn_parallel_function_163_Output0_TypeName.Value: 'Value'>, success_outcomes=13, total_outcomes=52, format_as_ratio=False), Fn_parallel_function_163_Output0(meta=<Fn_parallel_function_163_Output0_TypeName.Value: 'Value'>, success_outcomes=26, total_outcomes=52, format_as_ratio=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4e33c943-f7bf-423c-aac6-389ca53a7343", "event_id": "82b4b930-85de-403e-960b-8d03f572c4af", "parent_event_id": "4e33c943-f7bf-423c-aac6-389ca53a7343", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2089, "start_time": "2024-06-20T05:25:03.436Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_164", "variant_name": null}, {"function_name": "Fn_parallel_function_164", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_164\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"num_trials\":10,\"num_success\":6,\"prob_success\":0.6,\"meta\":\"Value\"},{\"num_trials\":10,\"num_success\":6,\"prob_success\":0.5,\"meta\":\"Value\"},{\"num_trials\":15,\"num_success\":6,\"prob_success\":0.5,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_164_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculates the probability of an outcome based on the binomial distribution\n    function_name: 'calc_binomial_prob' or null,\n    // Number of independent experiments.\n    num_trials: int,\n    // Number of times the event of interest has occurred.\n    num_success: int,\n    // Probability of the event of interest on any single experiment.\n    prob_success: float,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"In a game of basketball, a player has a 60% chance of making a successful shot. In a particular match, the player attempts 10 shots. What is the probability that the player makes exactly 6 successful shots? Now, consider a different scenario where the player's success rate drops to 50% but the number of attempts remains the same. What is the probability of making exactly 6 successful shots in this scenario? Finally, consider a third scenario where the player's success rate remains at 50% but the number of attempts increases to 15. What is the probability of making exactly 6 successful shots in this third scenario?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calc_binomial_prob',\n    num_trials: 10,\n    num_success: 6,\n    prob_success: 0.6\n  },\n  {\n    function_name: 'calc_binomial_prob',\n    num_trials: 10,\n    num_success: 6,\n    prob_success: 0.5\n  },\n  {\n    function_name: 'calc_binomial_prob',\n    num_trials: 15,\n    num_success: 6,\n    prob_success: 0.5\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 233, "output_tokens": 113, "total_tokens": 346, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4e33c943-f7bf-423c-aac6-389ca53a7343", "event_id": "4e33c943-f7bf-423c-aac6-389ca53a7343", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 26827, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_164", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "0990ef0b-ec5c-4a3e-afc9-ff94afb9b0ce", "event_id": "271e06d1-abcb-4e2e-b5e8-3376f0fb7729", "parent_event_id": "0990ef0b-ec5c-4a3e-afc9-ff94afb9b0ce", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1591, "start_time": "2024-06-20T05:25:04.607Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_168", "variant_name": null}, {"function_name": "Fn_parallel_function_168", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_168\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"dataset_path\":\"/user/home/datasets/finance.csv\",\"independent_variables\":[\"income\",\"age\",\"education\"],\"dependent_variable\":\"credit_score\",\"meta\":\"Value\"},{\"dataset_path\":\"/user/home/datasets/finance.csv\",\"independent_variables\":[\"income\",\"age\",\"credit_score\"],\"dependent_variable\":\"education\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_168_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the coefficient of determination of a regression model.\n    function_name: 'linear_regression.get_r_squared' or null,\n    // Path to the CSV dataset file.\n    dataset_path: string,\n    // The independent variables to use in the regression model.\n    independent_variables: string[],\n    // The dependent variable to predict in the regression model.\n    dependent_variable: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the coefficient of determination (R squared) of a regression model if we use the dataset located at \"/user/home/datasets/finance.csv\", with 'income', 'age' and 'education' as the independent variables and 'credit_score' as the dependent variable, and then repeat the same process with 'income', 'age' and 'credit_score' as the independent variables and 'education' as the dependent variable?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'linear_regression.get_r_squared',\n    dataset_path: \"/user/home/datasets/finance.csv\",\n    independent_variables: ['income', 'age', 'education'],\n    dependent_variable: 'credit_score',\n  },\n  {\n    function_name: 'linear_regression.get_r_squared',\n    dataset_path: \"/user/home/datasets/finance.csv\",\n    independent_variables: ['income', 'age', 'credit_score'],\n    dependent_variable: 'education',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 187, "output_tokens": 100, "total_tokens": 287, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "0990ef0b-ec5c-4a3e-afc9-ff94afb9b0ce", "event_id": "0990ef0b-ec5c-4a3e-afc9-ff94afb9b0ce", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 27500, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_168", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "21047c2d-0b85-4ee2-af1b-0598a0a3b547", "event_id": "e7426d09-14e1-4a6f-997e-7c5cebc35653", "parent_event_id": "21047c2d-0b85-4ee2-af1b-0598a0a3b547", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1380, "start_time": "2024-06-20T05:25:04.895Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_172", "variant_name": null}, {"function_name": "Fn_parallel_function_172", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_172\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"net_income\":1000000,\"shareholder_equity\":5000000,\"meta\":\"Value\",\"dividends_paid\":200000},{\"net_income\":2000000,\"shareholder_equity\":10000000,\"meta\":\"Value\",\"dividends_paid\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_172_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.\n    function_name: 'calculate_return_on_equity' or null,\n    // The company's net income.\n    net_income: int,\n    // The company's total shareholder's equity.\n    shareholder_equity: int,\n    // The total dividends paid by the company. Optional. If not given, assumes it's 0 as default.\n    dividends_paid: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you calculate the return on equity for two companies? The first company has a net income of $1,000,000, shareholder's equity of $5,000,000, and paid dividends of $200,000. The second company has a net income of $2,000,000, shareholder's equity of $10,000,000, but did not pay any dividends.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_return_on_equity',\n    net_income: 1000000,\n    shareholder_equity: 5000000,\n    dividends_paid: 200000\n  },\n  {\n    function_name: 'calculate_return_on_equity',\n    net_income: 2000000,\n    shareholder_equity: 10000000,\n    dividends_paid: null\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 204, "output_tokens": 84, "total_tokens": 288, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "21047c2d-0b85-4ee2-af1b-0598a0a3b547", "event_id": "21047c2d-0b85-4ee2-af1b-0598a0a3b547", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 27580, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_172", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "70850dd5-3ff5-407c-80e7-28ab3931dd70", "event_id": "8a4a4460-94d6-4df4-9eb2-d8b60616a6b6", "parent_event_id": "70850dd5-3ff5-407c-80e7-28ab3931dd70", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1256, "start_time": "2024-06-20T05:25:05.033Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_174", "variant_name": null}, {"function_name": "Fn_parallel_function_174", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_174\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"investment_amount\":5000,\"annual_return\":0.07,\"years\":5,\"meta\":\"Value\"},{\"investment_amount\":8000,\"annual_return\":0.05,\"years\":7,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_174_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Predict the profit for given investment after specified number of years.\n    function_name: 'investment.predictProfit' or null,\n    // The amount invested in dollars.\n    investment_amount: int,\n    // The annual return rate of the investment.\n    annual_return: float,\n    // The time period in years for which the investment is made.\n    years: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"John has decided to invest in two different funds. He invested $5000 in Fund A which has an annual return rate of 7% and he plans to keep his money there for 5 years. On the other hand, he invested $8000 in Fund B with an annual return rate of 5% for a period of 7 years. Can you predict the profit John will make from both Fund A and Fund B?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'investment.predictProfit',\n        investment_amount: 5000,\n        annual_return: 0.07,\n        years: 5\n    },\n    {\n        function_name: 'investment.predictProfit',\n        investment_amount: 8000,\n        annual_return: 0.05,\n        years: 7\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 187, "output_tokens": 74, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "031ed4a4-2208-46df-b13a-0290c1bc514c", "event_id": "201752cf-c062-43af-89eb-d0880327745b", "parent_event_id": "031ed4a4-2208-46df-b13a-0290c1bc514c", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1683, "start_time": "2024-06-20T05:25:04.607Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_167", "variant_name": null}, {"function_name": "Fn_parallel_function_167", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_167\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"area\":2500,\"rooms\":3,\"year\":2000,\"location\":\"New York\",\"meta\":\"Value\"},{\"area\":3000,\"rooms\":3,\"year\":2005,\"location\":\"Los Angeles\",\"meta\":\"Value\"},{\"area\":2000,\"rooms\":2,\"year\":1995,\"location\":\"Chicago\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_167_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Predict house price based on area, number of rooms and year of construction.\n    function_name: 'predict_house_price' or null,\n    // Area of the house in square feet.\n    area: int,\n    // Number of rooms in the house.\n    rooms: int,\n    // Year when the house was constructed.\n    year: int,\n    // The location or city of the house.\n    location: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you predict the price of a house with an area of 2500 square feet, 3 rooms, constructed in the year 2000, and located in New York, and then compare it with the price of a similar house but with an area of 3000 square feet, constructed in the year 2005, and located in Los Angeles? Finally, predict the price of a third house with an area of 2000 square feet, 2 rooms, constructed in the year 1995, and located in Chicago."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'predict_house_price',\n    area: 2500,\n    rooms: 3,\n    year: 2000,\n    location: 'New York'\n  },\n  {\n    function_name: 'predict_house_price',\n    area: 3000,\n    rooms: 3,\n    year: 2005,\n    location: 'Los Angeles'\n  },\n  {\n    function_name: 'predict_house_price',\n    area: 2000,\n    rooms: 2,\n    year: 1995,\n    location: 'Chicago'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 219, "output_tokens": 121, "total_tokens": 340, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "70850dd5-3ff5-407c-80e7-28ab3931dd70", "event_id": "70850dd5-3ff5-407c-80e7-28ab3931dd70", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 27592, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_174", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "031ed4a4-2208-46df-b13a-0290c1bc514c", "event_id": "031ed4a4-2208-46df-b13a-0290c1bc514c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 27592, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_167", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ee7a9f14-1678-4552-bd3e-bd172bb1c828", "event_id": "308bc7f0-4622-4ca2-be46-3b1184d08084", "parent_event_id": "ee7a9f14-1678-4552-bd3e-bd172bb1c828", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1634, "start_time": "2024-06-20T05:25:04.663Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_169", "variant_name": null}, {"function_name": "Fn_parallel_function_169", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_169\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"total_payout\":5000000,\"outstanding_shares\":2000000,\"meta\":\"Value\"},{\"total_payout\":6000000,\"outstanding_shares\":2000000,\"meta\":\"Value\"},{\"total_payout\":6000000,\"outstanding_shares\":2500000,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_169_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares\n    function_name: 'finance.calculate_quarterly_dividend_per_share' or null,\n    // The total amount of dividends paid out in USD\n    total_payout: int,\n    // Total number of outstanding shares\n    outstanding_shares: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me calculate the quarterly dividend per share for my company? We have just paid out a total of $5,000,000 in dividends and currently have 2,000,000 outstanding shares. Also, I am considering a scenario where we might increase our total payout to $6,000,000 while keeping the same number of outstanding shares. What would be the quarterly dividend per share in that case? And what if we also increase our outstanding shares to 2,500,000 while keeping the total payout at $6,000,000?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'finance.calculate_quarterly_dividend_per_share',\n    total_payout: 5000000,\n    outstanding_shares: 2000000\n  },\n  {\n    function_name: 'finance.calculate_quarterly_dividend_per_share',\n    total_payout: 6000000,\n    outstanding_shares: 2000000\n  },\n  {\n    function_name: 'finance.calculate_quarterly_dividend_per_share',\n    total_payout: 6000000,\n    outstanding_shares: 2500000\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 208, "output_tokens": 119, "total_tokens": 327, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ee7a9f14-1678-4552-bd3e-bd172bb1c828", "event_id": "ee7a9f14-1678-4552-bd3e-bd172bb1c828", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 27601, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_169", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: outstanding_shares\\nExpected: any of [2500000]\\nActual@2: meta=<Fn_parallel_function_169_Output0_TypeName.Value: 'Value'> total_payout=6000000 outstanding_shares=2000000\\nActual all: [Fn_parallel_function_169_Output0(meta=<Fn_parallel_function_169_Output0_TypeName.Value: 'Value'>, total_payout=5000000, outstanding_shares=2000000), Fn_parallel_function_169_Output0(meta=<Fn_parallel_function_169_Output0_TypeName.Value: 'Value'>, total_payout=6000000, outstanding_shares=2000000), Fn_parallel_function_169_Output0(meta=<Fn_parallel_function_169_Output0_TypeName.Value: 'Value'>, total_payout=6000000, outstanding_shares=2500000)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2560f79e-e8d7-45b6-a2f3-58804eaaad2a", "event_id": "ad586e5d-6ad1-4693-87e7-837c4239c203", "parent_event_id": "2560f79e-e8d7-45b6-a2f3-58804eaaad2a", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1677, "start_time": "2024-06-20T05:25:04.703Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_170", "variant_name": null}, {"function_name": "Fn_parallel_function_170", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_170\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"coupon_payment\":50,\"period\":5,\"discount_rate\":0.05,\"meta\":\"Value\",\"face_value\":1000},{\"coupon_payment\":60,\"period\":7,\"discount_rate\":0.04,\"meta\":\"Value\",\"face_value\":1000}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_170_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate.\n    function_name: 'calculate_discounted_cash_flow' or null,\n    // The annual coupon payment.\n    coupon_payment: int,\n    // The time frame in years for which coupon payment is made.\n    period: int,\n    // The discount rate.\n    discount_rate: float,\n    // The face value of the bond, default is $1000.\n    face_value: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me calculate the discounted cash flow of a bond? I have a bond with an annual coupon payment of $50, a time frame of 5 years, and a discount rate of 5%. Also, the face value of the bond is $1000. I would like to know the discounted cash flow for this bond. After that, I want to compare it with another bond that has an annual coupon payment of $60, a time frame of 7 years, and a discount rate of 4%, with the same face value of $1000. Can you calculate the discounted cash flow for this second bond as well?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_discounted_cash_flow',\n    coupon_payment: 50,\n    period: 5,\n    discount_rate: 0.05,\n    face_value: 1000,\n  },\n  {\n    function_name: 'calculate_discounted_cash_flow',\n    coupon_payment: 60,\n    period: 7,\n    discount_rate: 0.04,\n    face_value: 1000,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 258, "output_tokens": 92, "total_tokens": 350, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2560f79e-e8d7-45b6-a2f3-58804eaaad2a", "event_id": "2560f79e-e8d7-45b6-a2f3-58804eaaad2a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 27685, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_170", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f42a3657-5126-4614-bbfb-ad4bb3c9122d", "event_id": "06f8fb9c-7413-4911-9a56-b9c21aab8197", "parent_event_id": "f42a3657-5126-4614-bbfb-ad4bb3c9122d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1539, "start_time": "2024-06-20T05:25:04.979Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_173", "variant_name": null}, {"function_name": "Fn_parallel_function_173", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_173\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"present_value\":5000,\"annual_interest_rate\":0.05,\"time_years\":10,\"meta\":\"Value\",\"compounding_periods_per_year\":1},{\"present_value\":7000,\"annual_interest_rate\":0.04,\"time_years\":15,\"meta\":\"Value\",\"compounding_periods_per_year\":1}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_173_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.\n    function_name: 'finance.predict_future_value' or null,\n    // The present value of the investment.\n    present_value: int,\n    // The annual interest rate of the investment.\n    annual_interest_rate: float,\n    // The number of times that interest is compounded per year. Default is 1 (annually).\n    compounding_periods_per_year: int or null,\n    // The investment horizon in years.\n    time_years: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you have two different investment opportunities. The first one has a present value of $5000, an annual interest rate of 5%, and you plan to hold it for 10 years. The second one has a present value of $7000, an annual interest rate of 4%, and you plan to hold it for 15 years. Both investments compound interest annually. Can you calculate the future value of both investments using the finance.predict_future_value function?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'finance.predict_future_value',\n        present_value: 5000,\n        annual_interest_rate: 0.05,\n        compounding_periods_per_year: 1,\n        time_years: 10\n    },\n    {\n        function_name: 'finance.predict_future_value',\n        present_value: 7000,\n        annual_interest_rate: 0.04,\n        compounding_periods_per_year: 1,\n        time_years: 15\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 240, "output_tokens": 100, "total_tokens": 340, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f42a3657-5126-4614-bbfb-ad4bb3c9122d", "event_id": "f42a3657-5126-4614-bbfb-ad4bb3c9122d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 27821, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_173", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "02dfc8b0-996f-4905-b6f0-1cc31f1ca0a8", "event_id": "c4e1d1a3-0f4f-4124-9515-be35fba74b02", "parent_event_id": "02dfc8b0-996f-4905-b6f0-1cc31f1ca0a8", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1728, "start_time": "2024-06-20T05:25:04.796Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_171", "variant_name": null}, {"function_name": "Fn_parallel_function_171", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_171\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"principal\":5000,\"rate\":0.025,\"time\":2,\"meta\":\"Value\",\"n\":4},{\"principal\":5000,\"rate\":0.025,\"time\":3,\"meta\":\"Value\",\"n\":4},{\"principal\":5000,\"rate\":0.025,\"time\":5,\"meta\":\"Value\",\"n\":4}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_171_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate compound interest for an initial principal amount.\n    function_name: 'calculate_compound_interest' or null,\n    // The principal amount that the interest is applied to.\n    principal: int,\n    // The annual interest rate. Enter as a decimal. E.g, 5% is 0.05\n    rate: float,\n    // The time the money is invested for in years.\n    time: int,\n    // The number of times that interest is compounded per time period. Default is 1.\n    n: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me calculate the compound interest for my savings? I initially invested $5000 as the principal amount. The bank offers an annual interest rate of 2.5% (or 0.025 in decimal form). I plan to keep my money in the bank for 10 years. Also, the interest is compounded quarterly, so it's compounded 4 times in a year. Can you calculate the compound interest for the first 2 years, then for the next 3 years and finally for the remaining 5 years?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_compound_interest',\n    principal: 5000,\n    rate: 0.025,\n    time: 2,\n    n: 4\n  },\n  {\n    function_name: 'calculate_compound_interest',\n    principal: 5000,\n    rate: 0.025,\n    time: 3,\n    n: 4\n  },\n  {\n    function_name: 'calculate_compound_interest',\n    principal: 5000,\n    rate: 0.025,\n    time: 5,\n    n: 4\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 246, "output_tokens": 125, "total_tokens": 371, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "02dfc8b0-996f-4905-b6f0-1cc31f1ca0a8", "event_id": "02dfc8b0-996f-4905-b6f0-1cc31f1ca0a8", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 27827, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_171", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "5d962778-c5c2-41f1-a547-8d31d9453136", "event_id": "53cb0d92-2463-464c-bdf3-b7203fb83dab", "parent_event_id": "5d962778-c5c2-41f1-a547-8d31d9453136", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2948, "start_time": "2024-06-20T05:25:03.850Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_166", "variant_name": null}, {"function_name": "Fn_parallel_function_166", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_166\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"dataset_A\":[12,15,18,20,22,25,28,30,32,35],\"dataset_B\":[14,17,19,21,23,26,29,31,33,36],\"meta\":\"Value\",\"alpha\":0.05},{\"dataset_A\":[12,15,18,20,22,25,28,30,32,35],\"dataset_B\":[14,17,19,21,23,26,29,31,33,36],\"meta\":\"Value\",\"alpha\":0.01}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_166_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Perform a statistical t-test to check if the means of two independent datasets are statistically different.\n    function_name: 't_test' or null,\n    // Dataset A for comparison.\n    dataset_A: int[],\n    // Dataset B for comparison.\n    dataset_B: int[],\n    // Significance level for the test. Default is 0.05.\n    alpha: float or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you please perform a statistical t-test to check if the means of two independent datasets are statistically different? The first dataset, Dataset A, includes the following integers: 12, 15, 18, 20, 22, 25, 28, 30, 32, 35. The second dataset, Dataset B, includes these integers: 14, 17, 19, 21, 23, 26, 29, 31, 33, 36. Please perform the test twice, once with a significance level of 0.05 and once with a significance level of 0.01.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 't_test',\n    dataset_A: [12, 15, 18, 20, 22, 25, 28, 30, 32, 35],\n    dataset_B: [14, 17, 19, 21, 23, 26, 29, 31, 33, 36],\n    alpha: 0.05\n  },\n  {\n    function_name: 't_test',\n    dataset_A: [12, 15, 18, 20, 22, 25, 28, 30, 32, 35],\n    dataset_B: [14, 17, 19, 21, 23, 26, 29, 31, 33, 36],\n    alpha: 0.01\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 237, "output_tokens": 178, "total_tokens": 415, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "5d962778-c5c2-41f1-a547-8d31d9453136", "event_id": "5d962778-c5c2-41f1-a547-8d31d9453136", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 28100, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_166", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "9a915e36-2e47-4962-8668-53718d421852", "event_id": "484b5c98-e493-46d5-a34c-af03c9cb5020", "parent_event_id": "9a915e36-2e47-4962-8668-53718d421852", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1181, "start_time": "2024-06-20T05:25:06.306Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_180", "variant_name": null}, {"function_name": "Fn_parallel_function_180", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_180\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company\":\"Apple Inc.\",\"days\":10,\"meta\":\"Value\",\"exchange\":\"NASDAQ\"},{\"company\":\"Microsoft Corporation\",\"days\":15,\"meta\":\"Value\",\"exchange\":\"NYSE\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_180_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the stock price for a specific company and time frame.\n    function_name: 'get_stock_price' or null,\n    // The ticker symbol of the company.\n    company: string,\n    // Number of past days for which the stock price is required.\n    days: int,\n    // The stock exchange where the company is listed, default is NYSE\n    exchange: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What were the stock prices of Apple Inc. listed on NASDAQ and Microsoft Corporation listed on NYSE for the past 10 and 15 days respectively?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_stock_price',\n    company: 'Apple Inc.',\n    days: 10,\n    exchange: 'NASDAQ'\n  },\n  {\n    function_name: 'get_stock_price',\n    company: 'Microsoft Corporation',\n    days: 15,\n    exchange: 'NYSE'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 137, "output_tokens": 66, "total_tokens": 203, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "903618b1-442f-4d9f-8168-d59597e129be", "event_id": "903d25db-1126-4454-998a-2bd0569d9016", "parent_event_id": "903618b1-442f-4d9f-8168-d59597e129be", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1961, "start_time": "2024-06-20T05:25:05.526Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_175", "variant_name": null}, {"function_name": "Fn_parallel_function_175", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_175\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"purchase_price\":150,\"sale_price\":180,\"meta\":\"Value\",\"dividend\":20},{\"purchase_price\":200,\"sale_price\":210,\"meta\":\"Value\",\"dividend\":30},{\"purchase_price\":250,\"sale_price\":300,\"meta\":\"Value\",\"dividend\":40}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_175_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.\n    function_name: 'calculate_return_on_investment' or null,\n    // The price the stock was bought at.\n    purchase_price: int,\n    // The price the stock was sold at.\n    sale_price: int,\n    // Any dividends received from the stock.\n    dividend: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: You are an investor who recently sold some stocks. You bought one stock at $150, another at $200, and another at $250. You sold them at $180, $210, and $300 respectively. You also received dividends of $20, $30, and $40 for each stock. Can you calculate the return on investment for each of these stocks using the 'calculate_return_on_investment' function?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_return_on_investment',\n    purchase_price: 150,\n    sale_price: 180,\n    dividend: 20\n  },\n  {\n    function_name: 'calculate_return_on_investment',\n    purchase_price: 200,\n    sale_price: 210,\n    dividend: 30\n  },\n  {\n    function_name: 'calculate_return_on_investment',\n    purchase_price: 250,\n    sale_price: 300,\n    dividend: 40\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 196, "output_tokens": 107, "total_tokens": 303, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "9a915e36-2e47-4962-8668-53718d421852", "event_id": "9a915e36-2e47-4962-8668-53718d421852", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 28789, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_180", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: company\\nExpected: any of ['AAPL']\\nActual@1: meta=<Fn_parallel_function_180_Output0_TypeName.Value: 'Value'> company='Apple Inc.' days=10 exchange='NASDAQ'\\nActual all: [Fn_parallel_function_180_Output0(meta=<Fn_parallel_function_180_Output0_TypeName.Value: 'Value'>, company='Apple Inc.', days=10, exchange='NASDAQ'), Fn_parallel_function_180_Output0(meta=<Fn_parallel_function_180_Output0_TypeName.Value: 'Value'>, company='Microsoft Corporation', days=15, exchange='NYSE')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "903618b1-442f-4d9f-8168-d59597e129be", "event_id": "903618b1-442f-4d9f-8168-d59597e129be", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 28790, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_175", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "7e3fa685-5d0f-4de4-bdf7-fb6957ef9a02", "event_id": "b20a8236-4fe6-4756-bcae-c2d006459820", "parent_event_id": "7e3fa685-5d0f-4de4-bdf7-fb6957ef9a02", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1192, "start_time": "2024-06-20T05:25:06.386Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_181", "variant_name": null}, {"function_name": "Fn_parallel_function_181", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_181\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company\":\"Microsoft\",\"days\":30,\"meta\":\"Value\",\"data_type\":null},{\"company\":\"Apple\",\"days\":30,\"meta\":\"Value\",\"data_type\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_181_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Get stock price data for a given company over a specified number of days.\n    function_name: 'stock_price' or null,\n    // The company name.\n    company: string,\n    // The number of previous days to retrieve data for.\n    days: int,\n    // The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'.\n    data_type: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What were the 'Open', 'Close', 'High', and 'Low' stock prices for Microsoft and Apple over the past 30 days?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'stock_price',\n    company: 'Microsoft',\n    days: 30,\n    data_type: null\n  },\n  {\n    function_name: 'stock_price',\n    company: 'Apple',\n    days: 30,\n    data_type: null\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 147, "output_tokens": 62, "total_tokens": 209, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "7e3fa685-5d0f-4de4-bdf7-fb6957ef9a02", "event_id": "7e3fa685-5d0f-4de4-bdf7-fb6957ef9a02", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 28880, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_181", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: company\\nExpected: any of ['Microsoft']\\nActual@2: meta=<Fn_parallel_function_181_Output0_TypeName.Value: 'Value'> company='Apple' days=30 data_type=None\\nActual all: [Fn_parallel_function_181_Output0(meta=<Fn_parallel_function_181_Output0_TypeName.Value: 'Value'>, company='Microsoft', days=30, data_type=None), Fn_parallel_function_181_Output0(meta=<Fn_parallel_function_181_Output0_TypeName.Value: 'Value'>, company='Apple', days=30, data_type=None)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ef0475a3-4fd0-494d-a2d2-04a5d5c5cbfd", "event_id": "415e1d8b-3b1e-43c8-8e4f-1a09c2f631ed", "parent_event_id": "ef0475a3-4fd0-494d-a2d2-04a5d5c5cbfd", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1383, "start_time": "2024-06-20T05:25:06.281Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_177", "variant_name": null}, {"function_name": "Fn_parallel_function_177", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_177\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_value\":5000,\"final_value\":7000,\"period_in_years\":5,\"meta\":\"Value\"},{\"initial_value\":8000,\"final_value\":12000,\"period_in_years\":3,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_177_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.\n    function_name: 'calculate_cagr' or null,\n    // The initial investment value.\n    initial_value: int,\n    // The final investment value.\n    final_value: int,\n    // The period of the investment in years.\n    period_in_years: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"John invested $5000 in a mutual fund 5 years ago. Today, the value of his investment has grown to $7000. He wants to compare this with another investment he made 3 years ago where he invested $8000 and now it's worth $12000. Can you help John calculate the Compound Annual Growth Rate (CAGR) for both these investments?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_cagr',\n    initial_value: 5000,\n    final_value: 7000,\n    period_in_years: 5,\n  },\n  {\n    function_name: 'calculate_cagr',\n    initial_value: 8000,\n    final_value: 12000,\n    period_in_years: 3,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 185, "output_tokens": 76, "total_tokens": 261, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ef0475a3-4fd0-494d-a2d2-04a5d5c5cbfd", "event_id": "ef0475a3-4fd0-494d-a2d2-04a5d5c5cbfd", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 28966, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_177", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d6faf729-dcef-48eb-b065-790c1a788dcb", "event_id": "ebb36109-87be-4fe6-8449-e2aa5a404e87", "parent_event_id": "d6faf729-dcef-48eb-b065-790c1a788dcb", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1241, "start_time": "2024-06-20T05:25:06.526Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_183", "variant_name": null}, {"function_name": "Fn_parallel_function_183", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_183\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"initial_investment\":5000,\"rate_of_return\":0.07,\"years\":10,\"meta\":\"Value\",\"contribution\":0},{\"initial_investment\":3000,\"rate_of_return\":0.06,\"years\":10,\"meta\":\"Value\",\"contribution\":200}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_183_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.\n    function_name: 'finance.calculate_future_value' or null,\n    // The initial investment amount.\n    initial_investment: int,\n    // The annual rate of return.\n    rate_of_return: float,\n    // The time frame of the investment in years.\n    years: int,\n    // Optional: Additional regular contributions. Default is 0.\n    contribution: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"John is planning to invest in a mutual fund. He is considering two scenarios. In the first scenario, he will make an initial investment of $5000 with an annual rate of return of 7% and he will not make any additional contributions. In the second scenario, he will make an initial investment of $3000 with an annual rate of return of 6% and he will make additional regular contributions of $200 every year. He wants to compare the future value of his investment after 10 years in both scenarios. Can you help him calculate the future value of his investment in both scenarios?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'finance.calculate_future_value',\n    initial_investment: 5000,\n    rate_of_return: 0.07,\n    years: 10,\n    contribution: 0,\n  },\n  {\n    function_name: 'finance.calculate_future_value',\n    initial_investment: 3000,\n    rate_of_return: 0.06,\n    years: 10,\n    contribution: 200,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 248, "output_tokens": 92, "total_tokens": 340, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d6faf729-dcef-48eb-b065-790c1a788dcb", "event_id": "d6faf729-dcef-48eb-b065-790c1a788dcb", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 29070, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_183", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "f44093ad-1f89-4ac7-9863-91566984ce28", "event_id": "12f5a620-2cca-4101-861a-a0e5b96a5e71", "parent_event_id": "f44093ad-1f89-4ac7-9863-91566984ce28", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1896, "start_time": "2024-06-20T05:25:06.292Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_178", "variant_name": null}, {"function_name": "Fn_parallel_function_178", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_178\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"metal\":\"gold\",\"measure\":\"ounce\",\"meta\":\"Value\"},{\"metal\":\"silver\",\"measure\":\"ounce\",\"meta\":\"Value\"},{\"metal\":\"platinum\",\"measure\":\"ounce\",\"meta\":\"Value\"},{\"metal\":\"palladium\",\"measure\":\"ounce\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_178_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve the current price for a specified metal and measure.\n    function_name: 'get_metal_price' or null,\n    // The metal whose price needs to be fetched.\n    metal: string,\n    // The measure unit for price, like 'ounce' or 'kg'.\n    measure: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the current price per ounce of gold, silver, platinum, and palladium?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_metal_price',\n    metal: 'gold',\n    measure: 'ounce',\n  },\n  {\n    function_name: 'get_metal_price',\n    metal: 'silver',\n    measure: 'ounce',\n  },\n  {\n    function_name: 'get_metal_price',\n    metal: 'platinum',\n    measure: 'ounce',\n  },\n  {\n    function_name: 'get_metal_price',\n    metal: 'palladium',\n    measure: 'ounce',\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 105, "output_tokens": 109, "total_tokens": 214, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "259a6d94-ba0d-4e5a-abc4-ce8bc771ccbc", "event_id": "a397b65a-e2a7-4598-ac50-71a9f5f882a2", "parent_event_id": "259a6d94-ba0d-4e5a-abc4-ce8bc771ccbc", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1988, "start_time": "2024-06-20T05:25:06.200Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_176", "variant_name": null}, {"function_name": "Fn_parallel_function_176", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_176\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"stock\":\"AAPL\",\"invested_amount\":5000,\"expected_annual_return\":0.07,\"years\":5,\"meta\":\"Value\"},{\"stock\":\"MSFT\",\"invested_amount\":8000,\"expected_annual_return\":0.06,\"years\":7,\"meta\":\"Value\"},{\"stock\":\"AMZN\",\"invested_amount\":10000,\"expected_annual_return\":0.08,\"years\":10,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_176_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.\n    function_name: 'portfolio_future_value' or null,\n    // The ticker symbol of the stock.\n    stock: string,\n    // The invested amount in USD.\n    invested_amount: int,\n    // The expected annual return on investment as a decimal. E.g. 5% = 0.05\n    expected_annual_return: float,\n    // The number of years for which the investment is made.\n    years: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Could you please calculate the future value of my investments? I have invested $5000 in Apple Inc. (AAPL) and expect an annual return of 7% over the next 5 years. I have also invested $8000 in Microsoft Corporation (MSFT) with an expected annual return of 6% for the next 7 years. Lastly, I have invested $10000 in Amazon.com, Inc. (AMZN) expecting an annual return of 8% for the next 10 years.\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'portfolio_future_value',\n    stock: 'AAPL',\n    invested_amount: 5000,\n    expected_annual_return: 0.07,\n    years: 5\n  },\n  {\n    function_name: 'portfolio_future_value',\n    stock: 'MSFT',\n    invested_amount: 8000,\n    expected_annual_return: 0.06,\n    years: 7\n  },\n  {\n    function_name: 'portfolio_future_value',\n    stock: 'AMZN',\n    invested_amount: 10000,\n    expected_annual_return: 0.08,\n    years: 10\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 246, "output_tokens": 137, "total_tokens": 383, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "25b62788-3405-456c-9323-8c149ed74c61", "event_id": "6c784b45-bd62-4411-babf-a715d4e64664", "parent_event_id": "25b62788-3405-456c-9323-8c149ed74c61", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1389, "start_time": "2024-06-20T05:25:06.799Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_184", "variant_name": null}, {"function_name": "Fn_parallel_function_184", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_184\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"x\":5,\"y\":7,\"meta\":\"Value\",\"z\":null},{\"x\":10,\"y\":15,\"meta\":\"Value\",\"z\":null},{\"x\":20,\"y\":25,\"meta\":\"Value\",\"z\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_184_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.\n    function_name: 'math.hypot' or null,\n    // The x-coordinate value.\n    x: int,\n    // The y-coordinate value.\n    y: int,\n    // Optional. The z-coordinate value. Default is 0.\n    z: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Imagine you are a drone operator. You are currently operating a drone that is at a point (5, 7) in the sky. You are asked to move the drone to a new point (10, 15). After reaching the new point, you are again asked to move the drone to another point (20, 25). Can you calculate the total distance the drone has traveled using the Euclidean norm method?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'math.hypot',\n    x: 5,\n    y: 7\n  },\n  {\n    function_name: 'math.hypot',\n    x: 10,\n    y: 15\n  },\n  {\n    function_name: 'math.hypot',\n    x: 20,\n    y: 25\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 207, "output_tokens": 80, "total_tokens": 287, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "f44093ad-1f89-4ac7-9863-91566984ce28", "event_id": "f44093ad-1f89-4ac7-9863-91566984ce28", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 29490, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_178", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "259a6d94-ba0d-4e5a-abc4-ce8bc771ccbc", "event_id": "259a6d94-ba0d-4e5a-abc4-ce8bc771ccbc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 29490, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_176", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "25b62788-3405-456c-9323-8c149ed74c61", "event_id": "25b62788-3405-456c-9323-8c149ed74c61", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 29490, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_184", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "d4bc00ee-5588-40b2-89df-bdbfa662ed1a", "event_id": "e524a80a-0559-4456-90c0-01d04806816b", "parent_event_id": "d4bc00ee-5588-40b2-89df-bdbfa662ed1a", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2032, "start_time": "2024-06-20T05:25:06.521Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_182", "variant_name": null}, {"function_name": "Fn_parallel_function_182", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_182\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"companies\":[\"Apple\",\"Microsoft\",\"Amazon\",\"Tesla\"],\"duration\":\"1 week\",\"meta\":\"Value\"},{\"companies\":[\"Apple\",\"Microsoft\",\"Amazon\",\"Tesla\"],\"duration\":\"2 weeks\",\"meta\":\"Value\"},{\"companies\":[\"Apple\",\"Microsoft\",\"Amazon\",\"Tesla\"],\"duration\":\"3 weeks\",\"meta\":\"Value\"},{\"companies\":[\"Apple\",\"Microsoft\",\"Amazon\",\"Tesla\"],\"duration\":\"1 month\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_182_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieves stock prices for specified companies and duration.\n    function_name: 'get_stock_prices' or null,\n    // List of companies to retrieve stock prices for.\n    companies: string[],\n    // Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc.\n    duration: string,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you use the get_stock_prices function to retrieve the stock prices for Apple, Microsoft, Amazon, and Tesla over the duration of 1 week, 2 weeks, 3 weeks, and 1 month respectively?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_stock_prices',\n    companies: ['Apple', 'Microsoft', 'Amazon', 'Tesla'],\n    duration: '1 week'\n  },\n  {\n    function_name: 'get_stock_prices',\n    companies: ['Apple', 'Microsoft', 'Amazon', 'Tesla'],\n    duration: '2 weeks'\n  },\n  {\n    function_name: 'get_stock_prices',\n    companies: ['Apple', 'Microsoft', 'Amazon', 'Tesla'],\n    duration: '3 weeks'\n  },\n  {\n    function_name: 'get_stock_prices',\n    companies: ['Apple', 'Microsoft', 'Amazon', 'Tesla'],\n    duration: '1 month'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 139, "output_tokens": 142, "total_tokens": 281, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "d4bc00ee-5588-40b2-89df-bdbfa662ed1a", "event_id": "d4bc00ee-5588-40b2-89df-bdbfa662ed1a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 29855, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_182", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: companies\\nExpected: any of [['Apple']]\\nActual@1: meta=<Fn_parallel_function_182_Output0_TypeName.Value: 'Value'> companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'] duration='1 week'\\nActual all: [Fn_parallel_function_182_Output0(meta=<Fn_parallel_function_182_Output0_TypeName.Value: 'Value'>, companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'], duration='1 week'), Fn_parallel_function_182_Output0(meta=<Fn_parallel_function_182_Output0_TypeName.Value: 'Value'>, companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'], duration='2 weeks'), Fn_parallel_function_182_Output0(meta=<Fn_parallel_function_182_Output0_TypeName.Value: 'Value'>, companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'], duration='3 weeks'), Fn_parallel_function_182_Output0(meta=<Fn_parallel_function_182_Output0_TypeName.Value: 'Value'>, companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'], duration='1 month')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "e476c4a9-3c8b-4f88-a672-775ae696d176", "event_id": "d7758184-b052-41b2-a343-fe2617eba2cf", "parent_event_id": "e476c4a9-3c8b-4f88-a672-775ae696d176", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2423, "start_time": "2024-06-20T05:25:06.292Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_179", "variant_name": null}, {"function_name": "Fn_parallel_function_179", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_179\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"company_name\":\"Microsoft\",\"date\":\"2022-01-01\",\"meta\":\"Value\",\"exchange\":\"NASDAQ\"},{\"company_name\":\"Apple\",\"date\":\"2022-01-01\",\"meta\":\"Value\",\"exchange\":\"NASDAQ\"},{\"company_name\":\"Microsoft\",\"date\":\"2022-02-01\",\"meta\":\"Value\",\"exchange\":\"NASDAQ\"},{\"company_name\":\"Apple\",\"date\":\"2022-02-01\",\"meta\":\"Value\",\"exchange\":\"NASDAQ\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_179_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Get the closing stock price for a specific company on a specified date.\n    function_name: 'get_stock_price' or null,\n    // Name of the company.\n    company_name: string,\n    // Date of when to get the stock price. Format: yyyy-mm-dd.\n    date: string,\n    // Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'\n    exchange: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What were the closing stock prices for Microsoft and Apple on NASDAQ on the dates 2022-01-01 and 2022-02-01?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_stock_price',\n    company_name: 'Microsoft',\n    date: '2022-01-01',\n    exchange: 'NASDAQ'\n  },\n  {\n    function_name: 'get_stock_price',\n    company_name: 'Apple',\n    date: '2022-01-01',\n    exchange: 'NASDAQ'\n  },\n  {\n    function_name: 'get_stock_price',\n    company_name: 'Microsoft',\n    date: '2022-02-01',\n    exchange: 'NASDAQ'\n  },\n  {\n    function_name: 'get_stock_price',\n    company_name: 'Apple',\n    date: '2022-02-01',\n    exchange: 'NASDAQ'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 147, "output_tokens": 150, "total_tokens": 297, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "e476c4a9-3c8b-4f88-a672-775ae696d176", "event_id": "e476c4a9-3c8b-4f88-a672-775ae696d176", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 30017, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_179", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: company_name\\nExpected: any of ['Microsoft']\\nActual@2: meta=<Fn_parallel_function_179_Output0_TypeName.Value: 'Value'> company_name='Apple' date='2022-01-01' exchange='NASDAQ'\\nActual all: [Fn_parallel_function_179_Output0(meta=<Fn_parallel_function_179_Output0_TypeName.Value: 'Value'>, company_name='Microsoft', date='2022-01-01', exchange='NASDAQ'), Fn_parallel_function_179_Output0(meta=<Fn_parallel_function_179_Output0_TypeName.Value: 'Value'>, company_name='Apple', date='2022-01-01', exchange='NASDAQ'), Fn_parallel_function_179_Output0(meta=<Fn_parallel_function_179_Output0_TypeName.Value: 'Value'>, company_name='Microsoft', date='2022-02-01', exchange='NASDAQ'), Fn_parallel_function_179_Output0(meta=<Fn_parallel_function_179_Output0_TypeName.Value: 'Value'>, company_name='Apple', date='2022-02-01', exchange='NASDAQ')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "386bf7b8-e9e6-4942-9d4e-fde0e052e932", "event_id": "bfb6e0f2-1c97-4389-a1c5-c6750f7133a6", "parent_event_id": "386bf7b8-e9e6-4942-9d4e-fde0e052e932", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1189, "start_time": "2024-06-20T05:25:07.579Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_187", "variant_name": null}, {"function_name": "Fn_parallel_function_187", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_187\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"energy_type\":\"solar\",\"usage_duration\":12,\"meta\":\"Value\",\"region\":\"Midwest\"},{\"energy_type\":\"wind\",\"usage_duration\":8,\"meta\":\"Value\",\"region\":\"Midwest\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_187_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.\n    function_name: 'calculate_emission_savings' or null,\n    // Type of the renewable energy source.\n    energy_type: string,\n    // Usage duration in months.\n    usage_duration: int,\n    // The region where you use energy. (default: West)\n    region: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the potential greenhouse gas emissions savings if I switch to solar energy for 12 months and wind energy for 8 months in the Midwest region of the United States?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_emission_savings',\n    energy_type: 'solar',\n    usage_duration: 12,\n    region: 'Midwest'\n  },\n  {\n    function_name: 'calculate_emission_savings',\n    energy_type: 'wind',\n    usage_duration: 8,\n    region: 'Midwest'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 136, "output_tokens": 75, "total_tokens": 211, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "386bf7b8-e9e6-4942-9d4e-fde0e052e932", "event_id": "386bf7b8-e9e6-4942-9d4e-fde0e052e932", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 30071, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_187", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "585b0067-e3eb-4ef7-aa08-da841e227df2", "event_id": "06c80c96-018b-4341-8fc2-b7966412edbe", "parent_event_id": "585b0067-e3eb-4ef7-aa08-da841e227df2", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1101, "start_time": "2024-06-20T05:25:08.554Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_193", "variant_name": null}, {"function_name": "Fn_parallel_function_193", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_193\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"topic\":\"Climate Change\",\"quantity\":5,\"meta\":\"Value\",\"region\":\"Europe\"},{\"topic\":\"Artificial Intelligence\",\"quantity\":5,\"meta\":\"Value\",\"region\":\"Europe\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_193_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Fetches the latest news on a specific topic.\n    function_name: 'get_news' or null,\n    // The subject for the news topic.\n    topic: string,\n    // Number of articles to fetch.\n    quantity: int,\n    // The geographical region for the news (Optional). default is 'USA'\n    region: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you fetch the latest news on the topic of \"Climate Change\" and \"Artificial Intelligence\", each with 5 articles, and specifically for the region \"Europe\"?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_news',\n    topic: 'Climate Change',\n    quantity: 5,\n    region: 'Europe'\n  },\n  {\n    function_name: 'get_news',\n    topic: 'Artificial Intelligence',\n    quantity: 5,\n    region: 'Europe'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 131, "output_tokens": 65, "total_tokens": 196, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "585b0067-e3eb-4ef7-aa08-da841e227df2", "event_id": "585b0067-e3eb-4ef7-aa08-da841e227df2", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 30957, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_193", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "a86c2f25-eb29-4729-9755-7cbad1cd9ecc", "event_id": "5c775fa2-1f66-4b2c-a602-dca1363da403", "parent_event_id": "a86c2f25-eb29-4729-9755-7cbad1cd9ecc", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2203, "start_time": "2024-06-20T05:25:07.489Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_186", "variant_name": null}, {"function_name": "Fn_parallel_function_186", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_186\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"species\":\"Bengal Tigers\",\"country\":\"India\",\"meta\":\"Value\",\"year\":2020},{\"species\":\"African Elephants\",\"country\":\"Kenya\",\"meta\":\"Value\",\"year\":2020},{\"species\":\"Bengal Tigers\",\"country\":\"India\",\"meta\":\"Value\",\"year\":null},{\"species\":\"African Elephants\",\"country\":\"Kenya\",\"meta\":\"Value\",\"year\":null}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_186_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Estimate the population of a particular species in a given country.\n    function_name: 'estimate_population' or null,\n    // The species for which population needs to be estimated.\n    species: string,\n    // The country where the species lives.\n    country: string,\n    // The year for which population estimate is sought. Default is the current year.\n    year: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you estimate the population of Bengal Tigers in India for the year 2020, compare it with the estimated population of African Elephants in Kenya for the same year, and then estimate the population of both these species in their respective countries for the current year?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'estimate_population',\n    species: 'Bengal Tigers',\n    country: 'India',\n    year: 2020\n  },\n  {\n    function_name: 'estimate_population',\n    species: 'African Elephants',\n    country: 'Kenya',\n    year: 2020\n  },\n  {\n    function_name: 'estimate_population',\n    species: 'Bengal Tigers',\n    country: 'India'\n  },\n  {\n    function_name: 'estimate_population',\n    species: 'African Elephants',\n    country: 'Kenya'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 156, "output_tokens": 126, "total_tokens": 282, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "a86c2f25-eb29-4729-9755-7cbad1cd9ecc", "event_id": "a86c2f25-eb29-4729-9755-7cbad1cd9ecc", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 30993, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_186", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c26526aa-b7b6-41bd-9eb6-8da84cc6f535", "event_id": "79db7e87-b612-49ca-9487-a937b76d5935", "parent_event_id": "c26526aa-b7b6-41bd-9eb6-8da84cc6f535", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2176, "start_time": "2024-06-20T05:25:07.665Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_188", "variant_name": null}, {"function_name": "Fn_parallel_function_188", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_188\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York City\",\"meta\":\"Value\",\"detail\":true,\"historical\":\"2023-05-05\"},{\"location\":\"New York City\",\"meta\":\"Value\",\"detail\":true,\"historical\":\"2023-05-04\"},{\"location\":\"New York City\",\"meta\":\"Value\",\"detail\":true,\"historical\":\"2023-05-03\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_188_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve real-time air quality and pollution data for a specific location.\n    function_name: 'get_air_quality' or null,\n    // The city that you want to get the air quality data for.\n    location: string,\n    // If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. the value is set to false to default.\n    detail: bool or null,\n    // Optional date (in 'YYYY-MM-DD' format) to retrieve historical data. (default: today)\n    historical: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the air quality data for New York City, including additional data like PM2.5, PM10, ozone levels, and pollution sources, for today, yesterday, and the day before yesterday? Today is May 5, 2023"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_air_quality',\n    location: 'New York City',\n    detail: true,\n    historical: '2023-05-05'\n  },\n  {\n    function_name: 'get_air_quality',\n    location: 'New York City',\n    detail: true,\n    historical: '2023-05-04'\n  },\n  {\n    function_name: 'get_air_quality',\n    location: 'New York City',\n    detail: true,\n    historical: '2023-05-03'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 193, "output_tokens": 113, "total_tokens": 306, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c26526aa-b7b6-41bd-9eb6-8da84cc6f535", "event_id": "c26526aa-b7b6-41bd-9eb6-8da84cc6f535", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 31143, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_188", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2883b251-efad-4c02-975d-6c3a2b4dda58", "event_id": "435b7e92-6e68-4949-9645-5fa1c1281dbe", "parent_event_id": "2883b251-efad-4c02-975d-6c3a2b4dda58", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1692, "start_time": "2024-06-20T05:25:08.189Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_190", "variant_name": null}, {"function_name": "Fn_parallel_function_190", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_190\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York, USA\",\"amenities\":[\"Value0\",\"Value1\"],\"meta\":\"Value\"},{\"location\":\"Los Angeles, USA\",\"amenities\":[\"Value2\",\"Value3\"],\"meta\":\"Value\"},{\"location\":\"Chicago, USA\",\"amenities\":[\"Value0\",\"Value2\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_190_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate nearby parks based on specific criteria like tennis court availability.\n    function_name: 'parks.find_nearby' or null,\n    // The city and state, e.g. London, UK\n    location: string,\n    // Preferred amenities in park. (default: ['Playground'])\n    amenities: [\n      'Tennis Court' or 'Picnic Area' or 'Playground' or 'Running Track'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you find me parks in New York, USA that have a Tennis Court and a Picnic Area, then find parks in Los Angeles, USA that have a Playground and Running Track, and finally find parks in Chicago, USA that have a Tennis Court and a Playground?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'parks.find_nearby',\n    location: 'New York, USA',\n    amenities: ['Tennis Court', 'Picnic Area']\n  },\n  {\n    function_name: 'parks.find_nearby',\n    location: 'Los Angeles, USA',\n    amenities: ['Playground', 'Running Track']\n  },\n  {\n    function_name: 'parks.find_nearby',\n    location: 'Chicago, USA',\n    amenities: ['Tennis Court', 'Playground']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 167, "output_tokens": 109, "total_tokens": 276, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2883b251-efad-4c02-975d-6c3a2b4dda58", "event_id": "2883b251-efad-4c02-975d-6c3a2b4dda58", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 31183, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_190", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ac98f3c1-ea6c-4314-bbe4-b0c8d2aea86c", "event_id": "adbd5c35-5608-44e8-87d4-bbce8eabf259", "parent_event_id": "ac98f3c1-ea6c-4314-bbe4-b0c8d2aea86c", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2435, "start_time": "2024-06-20T05:25:07.488Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_185", "variant_name": null}, {"function_name": "Fn_parallel_function_185", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_185\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"a\":3,\"b\":7,\"c\":2,\"meta\":\"Value\"},{\"a\":5,\"b\":-4,\"c\":1,\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_185_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Find the roots of a quadratic equation ax^2 + bx + c = 0.\n    function_name: 'algebra.quadratic_roots' or null,\n    // Coefficient of x^2.\n    a: int,\n    // Coefficient of x.\n    b: int,\n    // Constant term.\n    c: int,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you help me find the roots of two different quadratic equations? The first equation is 3x^2 + 7x + 2 = 0, where 'a' is the coefficient of x^2 (3), 'b' is the coefficient of x (7), and 'c' is the constant term (2). The second equation is 5x^2 - 4x + 1 = 0, where 'a' is the coefficient of x^2 (5), 'b' is the coefficient of x (-4), and 'c' is the constant term (1).\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n    {\n        function_name: 'algebra.quadratic_roots',\n        a: 3,\n        b: 7,\n        c: 2\n    },\n    {\n        function_name: 'algebra.quadratic_roots',\n        a: 5,\n        b: -4,\n        c: 1\n    }\n]", "metadata": {"logprobs": null, "prompt_tokens": 221, "output_tokens": 70, "total_tokens": 291, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ac98f3c1-ea6c-4314-bbe4-b0c8d2aea86c", "event_id": "ac98f3c1-ea6c-4314-bbe4-b0c8d2aea86c", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 31226, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_185", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "b46dd3be-84cf-4fe8-83d7-10dbd90856db", "event_id": "e464bf54-4edc-49dd-8f7e-18b5a2435a60", "parent_event_id": "b46dd3be-84cf-4fe8-83d7-10dbd90856db", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1882, "start_time": "2024-06-20T05:25:08.190Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_191", "variant_name": null}, {"function_name": "Fn_parallel_function_191", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_191\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_location\":\"New York City\",\"end_location\":\"Los Angeles\",\"route_preference\":\"Value0\",\"meta\":\"Value\"},{\"start_location\":\"Los Angeles\",\"end_location\":\"Miami\",\"route_preference\":\"Value0\",\"meta\":\"Value\"},{\"start_location\":\"New York City\",\"end_location\":\"Los Angeles\",\"route_preference\":\"Value1\",\"meta\":\"Value\"},{\"start_location\":\"Los Angeles\",\"end_location\":\"Miami\",\"route_preference\":\"Value1\",\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_191_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Calculate the shortest driving distance between two locations.\n    function_name: 'calculate_shortest_distance' or null,\n    // The starting location for the drive.\n    start_location: string,\n    // The destination location for the drive.\n    end_location: string,\n    // The preferred type of route.\n    route_preference: 'Shortest' or 'Scenic',\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the shortest driving distance from New York City to Los Angeles, and then from Los Angeles to Miami, considering both the shortest and scenic route preferences?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'calculate_shortest_distance',\n    start_location: 'New York City',\n    end_location: 'Los Angeles',\n    route_preference: 'Shortest'\n  },\n  {\n    function_name: 'calculate_shortest_distance',\n    start_location: 'Los Angeles',\n    end_location: 'Miami',\n    route_preference: 'Shortest'\n  },\n  {\n    function_name: 'calculate_shortest_distance',\n    start_location: 'New York City',\n    end_location: 'Los Angeles',\n    route_preference: 'Scenic'\n  },\n  {\n    function_name: 'calculate_shortest_distance',\n    start_location: 'Los Angeles',\n    end_location: 'Miami',\n    route_preference: 'Scenic'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 130, "output_tokens": 154, "total_tokens": 284, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "b46dd3be-84cf-4fe8-83d7-10dbd90856db", "event_id": "b46dd3be-84cf-4fe8-83d7-10dbd90856db", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 31373, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_191", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "af674da1-a261-4454-8e87-f4fd3eb97901", "event_id": "a2d71e25-f0eb-41e9-a9cd-88f306f9e301", "parent_event_id": "af674da1-a261-4454-8e87-f4fd3eb97901", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2218, "start_time": "2024-06-20T05:25:08.190Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_192", "variant_name": null}, {"function_name": "Fn_parallel_function_192", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_192\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York, NY\",\"facilities\":[\"Value1\",\"Value2\"],\"meta\":\"Value\"},{\"location\":\"Los Angeles, CA\",\"facilities\":[\"Value0\",\"Value3\"],\"meta\":\"Value\"},{\"location\":\"Chicago, IL\",\"facilities\":[\"Value4\",\"Value1\"],\"meta\":\"Value\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_192_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.\n    function_name: 'public_library.find_nearby' or null,\n    // The city and state, e.g. Boston, MA\n    location: string,\n    // Facilities and sections in public library.\n    facilities: [\n      'Wi-Fi' or 'Reading Room' or 'Fiction' or 'Children Section' or 'Cafe'\n    ],\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you help me find public libraries in New York, NY that have a Reading Room and Fiction section, and then in Los Angeles, CA that offer Wi-Fi and have a Children Section, and finally in Chicago, IL that have a Cafe and a Reading Room?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'public_library.find_nearby',\n    location: 'New York, NY',\n    facilities: ['Reading Room', 'Fiction']\n  },\n  {\n    function_name: 'public_library.find_nearby',\n    location: 'Los Angeles, CA',\n    facilities: ['Wi-Fi', 'Children Section']\n  },\n  {\n    function_name: 'public_library.find_nearby',\n    location: 'Chicago, IL',\n    facilities: ['Cafe', 'Reading Room']\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 168, "output_tokens": 106, "total_tokens": 274, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "af674da1-a261-4454-8e87-f4fd3eb97901", "event_id": "af674da1-a261-4454-8e87-f4fd3eb97901", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 31710, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_192", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "6e8e749b-7cc1-46eb-ac90-322f74556bc0", "event_id": "0f1a021d-7036-4dcc-9e85-961d18635fb8", "parent_event_id": "6e8e749b-7cc1-46eb-ac90-322f74556bc0", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2176, "start_time": "2024-06-20T05:25:08.770Z", "tags": {"baml.runtime": "0.40.0", "baml.language": "python", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_195", "variant_name": null}, {"function_name": "Fn_parallel_function_195", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_195\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"Los Angeles, CA\",\"genre\":\"jazz\",\"meta\":\"Value\",\"days_ahead\":14},{\"location\":\"Chicago, IL\",\"genre\":\"rock\",\"meta\":\"Value\",\"days_ahead\":10},{\"location\":\"Boston, MA\",\"genre\":\"classical music\",\"meta\":\"Value\",\"days_ahead\":7}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_195_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Find upcoming events of a specific genre in a given location.\n    function_name: 'event_finder.find_upcoming' or null,\n    // The city and state where the search will take place, e.g. New York, NY.\n    location: string,\n    // The genre of events.\n    genre: string,\n    // The number of days from now to include in the search. (default: 7)\n    days_ahead: int or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you find me upcoming jazz events in Los Angeles, CA for the next 14 days and then find the same for rock events in Chicago, IL for the next 10 days and finally find upcoming classical music events in Boston, MA for the next 7 days?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'event_finder.find_upcoming',\n    location: 'Los Angeles, CA',\n    genre: 'jazz',\n    days_ahead: 14\n  },\n  {\n    function_name: 'event_finder.find_upcoming',\n    location: 'Chicago, IL',\n    genre: 'rock',\n    days_ahead: 10\n  },\n  {\n    function_name: 'event_finder.find_upcoming',\n    location: 'Boston, MA',\n    genre: 'classical music',\n    days_ahead: 7\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 173, "output_tokens": 117, "total_tokens": 290, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "6e8e749b-7cc1-46eb-ac90-322f74556bc0", "event_id": "6e8e749b-7cc1-46eb-ac90-322f74556bc0", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 32248, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_195", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ade60fcd-2472-4484-a7de-d64560fd855d", "event_id": "59ee848a-a434-42ee-a7c4-f6be0e21205b", "parent_event_id": "ade60fcd-2472-4484-a7de-d64560fd855d", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1395, "start_time": "2024-06-20T05:25:09.657Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_196", "variant_name": null}, {"function_name": "Fn_parallel_function_196", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_196\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"title\":\"Inception\",\"meta\":\"Value\",\"extra_info\":false},{\"title\":\"Inception\",\"meta\":\"Value\",\"extra_info\":true},{\"title\":\"The Dark Knight\",\"meta\":\"Value\",\"extra_info\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_196_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // This function retrieves a brief about a specified movie.\n    function_name: 'movie_details.brief' or null,\n    // Title of the movie\n    title: string,\n    // Option to get additional information like Director, Cast, Awards etc. (default: false)\n    extra_info: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you provide a brief about the movie \"Inception\" and then retrieve additional information like Director, Cast, Awards etc. for the same movie \"Inception\" and also for the movie \"The Dark Knight\"?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'movie_details.brief',\n    title: 'Inception',\n    extra_info: false\n  },\n  {\n    function_name: 'movie_details.brief',\n    title: 'Inception',\n    extra_info: true\n  },\n  {\n    function_name: 'movie_details.brief',\n    title: 'The Dark Knight',\n    extra_info: true\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 132, "output_tokens": 84, "total_tokens": 216, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ade60fcd-2472-4484-a7de-d64560fd855d", "event_id": "ade60fcd-2472-4484-a7de-d64560fd855d", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 32354, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_196", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: extra_info\\nExpected: any of [True]\\nActual@1: meta=<Fn_parallel_function_196_Output0_TypeName.Value: 'Value'> title='Inception' extra_info=False\\nActual all: [Fn_parallel_function_196_Output0(meta=<Fn_parallel_function_196_Output0_TypeName.Value: 'Value'>, title='Inception', extra_info=False), Fn_parallel_function_196_Output0(meta=<Fn_parallel_function_196_Output0_TypeName.Value: 'Value'>, title='Inception', extra_info=True), Fn_parallel_function_196_Output0(meta=<Fn_parallel_function_196_Output0_TypeName.Value: 'Value'>, title='The Dark Knight', extra_info=True)]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "ad4cfdd7-bcba-4218-9007-e7698a3fdb60", "event_id": "43f0f186-dba0-44d1-9ffc-4255a24e2ce8", "parent_event_id": "ad4cfdd7-bcba-4218-9007-e7698a3fdb60", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 3430, "start_time": "2024-06-20T05:25:07.769Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_189", "variant_name": null}, {"function_name": "Fn_parallel_function_189", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_189\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"start_location\":\"New York\",\"end_location\":\"Los Angeles\",\"meta\":\"Value\",\"mode\":\"Value0\"},{\"start_location\":\"Los Angeles\",\"end_location\":\"San Francisco\",\"meta\":\"Value\",\"mode\":\"Value2\"},{\"start_location\":\"San Francisco\",\"end_location\":\"New York\",\"meta\":\"Value\",\"mode\":\"Value3\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_189_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve current traffic conditions for a specified route.\n    function_name: 'get_traffic_info' or null,\n    // The starting point of the route.\n    start_location: string,\n    // The destination of the route.\n    end_location: string,\n    // Preferred method of transportation, default to 'driving'.\n    mode: 'driving' or 'walking' or 'bicycling' or 'transit' or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What are the current traffic conditions for a route from New York to Los Angeles using driving as the preferred method of transportation, then from Los Angeles to San Francisco using bicycling as the preferred method of transportation, and finally from San Francisco back to New York using transit as the preferred method of transportation?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_traffic_info',\n    start_location: 'New York',\n    end_location: 'Los Angeles',\n    mode: 'driving'\n  },\n  {\n    function_name: 'get_traffic_info',\n    start_location: 'Los Angeles',\n    end_location: 'San Francisco',\n    mode: 'bicycling'\n  },\n  {\n    function_name: 'get_traffic_info',\n    start_location: 'San Francisco',\n    end_location: 'New York',\n    mode: 'transit'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 173, "output_tokens": 111, "total_tokens": 284, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "ad4cfdd7-bcba-4218-9007-e7698a3fdb60", "event_id": "ad4cfdd7-bcba-4218-9007-e7698a3fdb60", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 32501, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_189", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "fa996ddb-758f-4ce4-9e63-22e4727af944", "event_id": "498b36e0-e897-4ad6-ac19-c42f765944fe", "parent_event_id": "fa996ddb-758f-4ce4-9e63-22e4727af944", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1479, "start_time": "2024-06-20T05:25:09.842Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_198", "variant_name": null}, {"function_name": "Fn_parallel_function_198", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_198\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"case_number\":\"12345ABC\",\"meta\":\"Value\",\"year\":2018,\"location\":\"New York\"},{\"case_number\":\"67890XYZ\",\"meta\":\"Value\",\"year\":2019,\"location\":\"California\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_198_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieves details of a lawsuit given a case number\n    function_name: 'lawsuit_info' or null,\n    // The unique identifier of the lawsuit case\n    case_number: string,\n    // The year in which the lawsuit case was initiated (default: 2000)\n    year: int or null,\n    // The location or court jurisdiction where the case was filed. (default: New York)\n    location: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: \"Can you provide me with the details of the lawsuit case with the case number '12345ABC', which was initiated in the year 2018 and filed in the New York court jurisdiction? Also, can you retrieve the same information for another lawsuit case with the case number '67890XYZ', initiated in the year 2019 and filed in the California court jurisdiction?\""}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'lawsuit_info',\n    case_number: '12345ABC',\n    year: 2018,\n    location: 'New York'\n  },\n  {\n    function_name: 'lawsuit_info',\n    case_number: '67890XYZ',\n    year: 2019,\n    location: 'California'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 190, "output_tokens": 73, "total_tokens": 263, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "fa996ddb-758f-4ce4-9e63-22e4727af944", "event_id": "fa996ddb-758f-4ce4-9e63-22e4727af944", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 32623, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_198", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"<class 'AssertionError'>: Field: case_number\\nExpected: any of ['67890XYZ']\\nActual@1: meta=<Fn_parallel_function_198_Output0_TypeName.Value: 'Value'> case_number='12345ABC' year=2018 location='New York'\\nActual all: [Fn_parallel_function_198_Output0(meta=<Fn_parallel_function_198_Output0_TypeName.Value: 'Value'>, case_number='12345ABC', year=2018, location='New York'), Fn_parallel_function_198_Output0(meta=<Fn_parallel_function_198_Output0_TypeName.Value: 'Value'>, case_number='67890XYZ', year=2019, location='California')]\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "c0d53365-aac0-4c7d-82c1-fcc1b311ac19", "event_id": "b31e27e4-df11-4dd6-91cd-903c098fd3a6", "parent_event_id": "c0d53365-aac0-4c7d-82c1-fcc1b311ac19", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1645, "start_time": "2024-06-20T05:25:09.693Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_197", "variant_name": null}, {"function_name": "Fn_parallel_function_197", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_197\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"case_number\":\"12345\",\"court_location\":\"New York Supreme Court\",\"meta\":\"Value\",\"with_verdict\":true},{\"case_number\":\"67890\",\"court_location\":\"Los Angeles Superior Court\",\"meta\":\"Value\",\"with_verdict\":false}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_197_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve details of a lawsuit based on its case number and court location.\n    function_name: 'get_lawsuit_details' or null,\n    // Case number of the lawsuit.\n    case_number: string,\n    // The location of the court where the lawsuit was filed.\n    court_location: string,\n    // Flag to include verdict details if available. Default is False\n    with_verdict: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you please retrieve the details of two lawsuits for me? The first one has a case number of '12345' and was filed in the 'New York Supreme Court'. I would also like to know the verdict details for this case. The second lawsuit has a case number '67890' and was filed in the 'Los Angeles Superior Court'. I do not need the verdict details for this case."}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_lawsuit_details',\n    case_number: '12345',\n    court_location: 'New York Supreme Court',\n    with_verdict: true\n  },\n  {\n    function_name: 'get_lawsuit_details',\n    case_number: '67890',\n    court_location: 'Los Angeles Superior Court',\n    with_verdict: false\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 191, "output_tokens": 82, "total_tokens": 273, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "c0d53365-aac0-4c7d-82c1-fcc1b311ac19", "event_id": "c0d53365-aac0-4c7d-82c1-fcc1b311ac19", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 32639, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_197", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "2a8dd6f0-d26d-48cd-90e5-f5da4decd752", "event_id": "dee06127-6495-4b28-b8f7-d35de50b959f", "parent_event_id": "2a8dd6f0-d26d-48cd-90e5-f5da4decd752", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1493, "start_time": "2024-06-20T05:25:09.883Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_199", "variant_name": null}, {"function_name": "Fn_parallel_function_199", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_199\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"entity\":\"Google\",\"county\":\"Santa Clara\",\"meta\":\"Value\",\"state\":\"California\"},{\"entity\":\"Facebook\",\"county\":\"San Mateo\",\"meta\":\"Value\",\"state\":\"California\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_199_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieve all lawsuits involving a particular entity from specified jurisdiction.\n    function_name: 'lawsuit_search' or null,\n    // The entity involved in lawsuits.\n    entity: string,\n    // The jurisdiction for the lawsuit search.\n    county: string,\n    // The state for the lawsuit search. Default is California.\n    state: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you use the lawsuit_search function to retrieve all lawsuits involving the entity \"Google\" from the county of \"Santa Clara\" and then do the same for the entity \"Facebook\" in the county of \"San Mateo\", both in the state of California?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'lawsuit_search',\n    entity: 'Google',\n    county: 'Santa Clara',\n    state: 'California'\n  },\n  {\n    function_name: 'lawsuit_search',\n    entity: 'Facebook',\n    county: 'San Mateo',\n    state: 'California'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 148, "output_tokens": 67, "total_tokens": 215, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "2a8dd6f0-d26d-48cd-90e5-f5da4decd752", "event_id": "2a8dd6f0-d26d-48cd-90e5-f5da4decd752", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 32677, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "test_category": "parallel_function", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_199", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "4eca5c07-4092-49f7-85c3-d40fa59afcf3", "event_id": "90763755-b240-4482-bb15-fb3da0b4467b", "parent_event_id": "4eca5c07-4092-49f7-85c3-d40fa59afcf3", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 2738, "start_time": "2024-06-20T05:25:08.716Z", "tags": {"test_category": "parallel_function", "baml.runtime": "0.40.0", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_194", "variant_name": null}, {"function_name": "Fn_parallel_function_194", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_194\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"to\":\"john.doe@example.com\",\"subject\":\"Project Update\",\"body\":\"Dear John, The project is progressing as planned and we are on track to meet our deadlines. Best, Alex\",\"meta\":\"Value\",\"cc\":\"manager@example.com\",\"bcc\":\"hr@example.com\"},{\"to\":\"jane.doe@example.com\",\"subject\":\"Meeting Reminder\",\"body\":\"Dear Jane, This is a reminder for our meeting scheduled for tomorrow at 10 AM. Best, Alex\",\"meta\":\"Value\",\"cc\":\"assistant@example.com\",\"bcc\":\"hr@example.com\"}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_194_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Send an email to the specified email address.\n    function_name: 'send_email' or null,\n    // The email address to send to.\n    to: string,\n    // The subject of the email.\n    subject: string,\n    // The body content of the email.\n    body: string,\n    // The email address to carbon copy. default is ''.\n    cc: string or null,\n    // The email address to blind carbon copy. the value is set to '' for default.\n    bcc: string or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: Can you send an email to my colleague at john.doe@example.com with the subject \"Project Update\" and the body content \"Dear John, The project is progressing as planned and we are on track to meet our deadlines. Best, Alex\", then carbon copy the email to my manager at manager@example.com and blind carbon copy it to the HR at hr@example.com? After that, can you send another email to my other colleague at jane.doe@example.com with the subject \"Meeting Reminder\" and the body content \"Dear Jane, This is a reminder for our meeting scheduled for tomorrow at 10 AM. Best, Alex\", and carbon copy it to my assistant at assistant@example.com and blind carbon copy it to the HR at hr@example.com?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'send_email',\n    to: 'john.doe@example.com',\n    subject: 'Project Update',\n    body: 'Dear John, The project is progressing as planned and we are on track to meet our deadlines. Best, Alex',\n    cc: 'manager@example.com',\n    bcc: 'hr@example.com'\n  },\n  {\n    function_name: 'send_email',\n    to: 'jane.doe@example.com',\n    subject: 'Meeting Reminder',\n    body: 'Dear Jane, This is a reminder for our meeting scheduled for tomorrow at 10 AM. Best, Alex',\n    cc: 'assistant@example.com',\n    bcc: 'hr@example.com'\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 284, "output_tokens": 148, "total_tokens": 432, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "4eca5c07-4092-49f7-85c3-d40fa59afcf3", "event_id": "4eca5c07-4092-49f7-85c3-d40fa59afcf3", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 32756, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.runtime": "0.40.0", "test_category": "parallel_function", "baml.language": "python"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_194", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
{"project_id": "b-project-id", "event_type": "func_llm", "root_event_id": "1bf97325-66a6-49c2-920f-ab678d707b9a", "event_id": "3e904785-1dfc-4535-a10d-ac26fa5be220", "parent_event_id": "1bf97325-66a6-49c2-920f-ab678d707b9a", "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 1964, "start_time": "2024-06-20T05:25:09.925Z", "tags": {"test_category": "parallel_function", "baml.language": "python", "baml.runtime": "0.40.0"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_200", "variant_name": null}, {"function_name": "Fn_parallel_function_200", "variant_name": null}]}, "io": {"input": {"value": ["\"Fn_parallel_function_200\""], "override": null, "type": {"name": "multi", "fields": {"unused": "string"}}}, "output": {"value": "[{\"location\":\"New York\",\"meta\":\"Value\",\"include_temperature\":true,\"include_humidity\":true},{\"location\":\"Los Angeles\",\"meta\":\"Value\",\"include_temperature\":true,\"include_humidity\":true},{\"location\":\"London\",\"meta\":\"Value\",\"include_temperature\":true,\"include_humidity\":true},{\"location\":\"Tokyo\",\"meta\":\"Value\",\"include_temperature\":true,\"include_humidity\":true}]", "override": null, "type": {"name": "single", "fields": {"value": "list<class Fn_parallel_function_200_Output0>"}}}}, "error": null, "metadata": [{"model_name": "gpt-3.5-turbo-0125", "provider": "GPT35Turbo", "input": {"prompt": {"template": [{"role": "system", "content": [{"text": "Answer in this schema: [\n  {\n    // Retrieves the current temperature and humidity for a specific location.\n    function_name: 'get_current_weather' or null,\n    // The location to get the weather for.\n    location: string,\n    // Whether to include the temperature in the result. Default is true.\n    include_temperature: bool or null,\n    // Whether to include the humidity in the result. Default is true.\n    include_humidity: bool or null,\n  }\n]"}]}, {"role": "user", "content": [{"text": "Question: What is the current temperature and humidity in New York, Los Angeles, London and Tokyo, if I want to include both temperature and humidity in the results?"}]}], "template_args": {}, "override": null}, "invocation_params": {"model": "gpt-3.5-turbo-0125"}}, "output": {"raw_text": "[\n  {\n    function_name: 'get_current_weather',\n    location: 'New York',\n    include_temperature: true,\n    include_humidity: true,\n  },\n  {\n    function_name: 'get_current_weather',\n    location: 'Los Angeles',\n    include_temperature: true,\n    include_humidity: true,\n  },\n  {\n    function_name: 'get_current_weather',\n    location: 'London',\n    include_temperature: true,\n    include_humidity: true,\n  },\n  {\n    function_name: 'get_current_weather',\n    location: 'Tokyo',\n    include_temperature: true,\n    include_humidity: true,\n  }\n]", "metadata": {"logprobs": null, "prompt_tokens": 142, "output_tokens": 133, "total_tokens": 275, "finish_reason": "stop"}, "override": null}, "error": null}]}
{"project_id": "b-project-id", "event_type": "func_code", "root_event_id": "1bf97325-66a6-49c2-920f-ab678d707b9a", "event_id": "1bf97325-66a6-49c2-920f-ab678d707b9a", "parent_event_id": null, "context": {"hostname": "Sams-MBP", "process_id": "26cbaeaa-4e18-4be3-9e65-2bff4ef80537", "stage": "development", "latency_ms": 33191, "start_time": "2024-06-20T05:24:38.699Z", "tags": {"baml.language": "python", "baml.runtime": "0.40.0", "test_category": "parallel_function"}, "event_chain": [{"function_name": "baml_Fn_parallel_function_200", "variant_name": null}]}, "io": {"input": {"value": [], "override": null, "type": {"name": "multi", "fields": {}}}, "output": {"value": "\"success\"", "override": null, "type": {"name": "single", "fields": {"value": "string"}}}}, "error": null, "metadata": null}
